(function(){this.app=angular.module("game",[]),this.app.controller("GameController",function(t){return t.round=function(t,e){var n,a;return a=null!=e?e:0,n=Math.pow(10,a),Math.round(t*n)/n}}),this.app.controller("PlayerController",function(t){})}).call(this),function(){var t;t=function(){return $(".avatar").removeClass("active"),$("#avatar").val($(this).data("avatar")),$(this).addClass("active")},$(function(){return $(".avatar").click(t).first().trigger("click")})}.call(this),function(){var t,e,n,a,i,r,o,s;i={fontSize:30,barFontSize:20,nameFontSize:30,margin:5},e=function(){function t(t,e){var n;n=new Image,n.src=e.avatar,n.onload=function(t){return function(){return t.avatar=n}}(this),this.team=t,this.name=e.name,this.id=e.id,this.level=e.level,this.health=e.health,this.maxHealth=e.maxHealth}return t.prototype.draw=function(t,e){var n,a;return"red"===this.team?(t.strokeStyle="rgba(217, 83, 79, 1)",t.fillStyle="rgba(217, 83, 79, 0.4)"):(t.strokeStyle="rgba(51, 122, 183, 1)",t.fillStyle="rgba(51, 122, 183, 0.4)"),t.fillRect(0,0,e,e),t.strokeRect(0,0,e,e),null!=this.avatar&&t.drawImage(this.avatar,i.margin,i.margin,e-2*i.margin,e-2*i.margin),a=this.name+" ("+this.level+")",t.font=i.nameFontSize+"px Roboto",t.lineWidth=1,t.fillStyle="#FFFFFF",t.strokeStyle="#000000",n=t.measureText(a),t.fillText(a,(e-n.width)/2,i.nameFontSize),t.strokeText(a,(e-n.width)/2,i.nameFontSize),t.font=i.barFontSize+"px Roboto",t.strokeStyle="rgba(0, 0, 0, 0.7)",t.fillStyle="rgba(0, 0, 0, 0.4)",t.fillRect(i.margin,e-i.barFontSize-i.margin,e-2*i.margin,i.barFontSize),t.strokeRect(i.margin,e-i.barFontSize-i.margin,e-2*i.margin,i.barFontSize),t.fillStyle="rgba(217, 83, 79, 1)",t.fillRect(i.margin,e-i.barFontSize-i.margin,(e-2*i.margin)*(this.health/this.maxHealth),i.barFontSize),a=Math.round(this.health)+" / "+this.maxHealth,n=t.measureText(a),t.fillStyle="#000000",t.fillText(a,(e-n.width)/2,e-i.barFontSize/2)},t}(),t=function(){function t(){}return t.prototype.speed={view:3,info:3,next:3},t.prototype.construct=function(){},t.prototype.load=function(){var t,n,a,r,o,s,l,h;if("undefined"!=typeof battleLog&&null!==battleLog){for(this.canvas=$("#battleView")[0],this.context=this.canvas.getContext("2d"),this.index=0,this.characters=[],this.state="view",this.offset=0,this.pause=!1,$(this.canvas).click(function(t){return function(e){return t.click(e)}}(this)),$(document).keydown(function(t){return function(e){return t.key(e)}}(this)),l=battleLog.teams.red,a=0,o=l.length;o>a;a++)n=l[a],t=new e("red",n),this.characters[t.id]=t;for(h=battleLog.teams.blue,r=0,s=h.length;s>r;r++)n=h[r],t=new e("blue",n),this.characters[t.id]=t;return this.context.font=i.fontSize+"px Roboto",this.action=battleLog.log[this.index],this.attacker=this.characters[this.action.attacker],this.defender=this.characters[this.action.defender],!0}return!1},t.prototype.drawCharacters=function(t,e){var n,a;return a=.6*this.canvas.height,n=this.canvas.width/2,this.context.save(),this.context.translate((n-a)/2,(this.canvas.height-a)/2),t.draw(this.context,a),this.context.restore(),this.context.save(),this.context.translate((n-a)/2+n,(this.canvas.height-a)/2),e.draw(this.context,a),this.context.restore()},t.prototype.drawInfo=function(t){var e,n,a,r,o,s,l,h,c,u,d,f,p;return a=this.canvas.width/2,n=this.canvas.height/2,e=.6*this.canvas.height,l=50,c=2*l,u=a+(e+l)/2,d=n,h=.7*e/c,o=1.2,s=13,this.context.font=i.fontSize+"px Roboto",r=this.context.measureText(t),f=u-r.width/2,p=n,this.context.save(),this.context.lineWidth=2,this.context.translate(u,d),this.context.scale(h,o),this.context.fillStyle="#FFFFFF",this.context.strokeStyle="#000000",this.drawStar(s,.6*l,l),this.context.restore(),this.context.save(),this.context.translate(f,p),this.context.fillStyle="#000000",this.context.fillText(t,0,0),this.context.restore()},t.prototype.drawStar=function(t,e,n){var a,i,r,o,s,l,h;for(o=Math.PI/2*3,s=Math.PI/t,this.context.beginPath(),l=Math.cos(o)*n,h=Math.sin(o)*n,this.context.moveTo(l,h),o+=s,a=i=1,r=t;r>=1?r>=i:i>=r;a=r>=1?++i:--i)l=Math.cos(o)*e,h=Math.sin(o)*e,this.context.lineTo(l,h),o+=s,l=Math.cos(o)*n,h=Math.sin(o)*n,this.context.lineTo(l,h),o+=s;return this.context.lineTo(0,-n),this.context.fill(),this.context.stroke(),this.context.closePath()},t.prototype.draw=function(t){var e,n,a,i,r,o,s,l,h,c,u,d,f,p,m,g,v,$,w,x,y;for(this.context.fillStyle="#FFFFFF",this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.offset+=this.speed[this.state]*t,n=!0,"view"===this.state&&n&&(e=battleLog.log[this.index],i=this.characters[e.attacker],r=this.characters[e.defender],"hit"===e.type&&(r.health=e.health),this.drawCharacters(i,r),this.offset>1&&!this.pause&&(this.offset=0,r.startHealth=r.health,r.endHealth="hit"===e.type?Math.max(r.health-e.damage,0):r.health,this.state="info"),n=!1),"info"===this.state&&n&&(e=battleLog.log[this.index],i=this.characters[e.attacker],r=this.characters[e.defender],this.drawCharacters(i,r),this.offset<=1?(this.context.globalAlpha=this.offset,r.health=r.startHealth):this.offset<=2?(this.context.globalAlpha=1,s=Math.clamp(this.offset-1,0,1),r.health=Math.lerp(s,r.endHealth,r.startHealth)):(r.health=r.endHealth,this.context.globalAlpha=Math.max(3-this.offset,0)),this.offset>4&&(this.offset=0,this.state="next"),"hit"===e.type?(x=e.damage,e.crit&&(x+="!")):x="dodge",this.drawInfo(x),this.context.globalAlpha=1,n=!1),"next"===this.state&&n&&(g=battleLog.log[this.index],d=battleLog.log[this.index+1],v=this.characters[g.attacker],$=this.characters[g.defender],m=this.canvas.height/2*this.offset,this.context.save(),this.context.translate(0,-m),this.drawCharacters(v,$),this.context.restore(),this.context.save(),this.context.translate(0,this.canvas.height-m),null!=d?(f=this.characters[d.attacker],p=this.characters[d.defender],"hit"===d.type&&(p.health=d.health),this.drawCharacters(f,p)):(x="End",this.context.fillStyle="#000000",u=this.context.measureText(x),this.context.fillText(x,(this.canvas.width-u.width)/2,(this.canvas.height-15)/2)),this.context.restore(),this.offset>2&&(this.index++,this.offset=0,this.state=null!=d?"view":"end"),n=!1),"end"===this.state&&n&&(x="End",this.offset=0,this.context.fillStyle="#000000",u=this.context.measureText(x),this.context.fillText(x,(this.canvas.width-u.width)/2,(this.canvas.height-15)/2),n=!1),y=this.canvas.width-4,o=this.canvas.height-2,this.context.save(),this.context.strokeStyle="rgba(0, 0, 0, 0.7)",this.context.fillStyle="rgba(0, 0, 0, 0.4)",this.context.fillRect(2,o-20,y,20),this.context.strokeRect(2,o-20,y,20),this.context.fillStyle="#5BC0DE",this.context.fillRect(2,o-20,y*Math.min(this.index/(battleLog.log.length-1),1),20),this.context.lineWidth=5,w=battleLog.marks,l=0,h=w.length;h>l;l++)c=w[l],"fainted"===c.type&&(this.context.strokeStyle="#D9534F"),a=c.at/(battleLog.log.length-1)*y,this.context.beginPath(),this.context.moveTo(a-this.context.lineWidth/2+2,o-20),this.context.lineTo(a-this.context.lineWidth/2+2,o),this.context.stroke();return this.context.restore()},t.prototype.click=function(t){var e,n,a,i,r,o,s;return n=this.canvas.relMouseCoords(t),o=n.x,s=n.y,a=2,i=a+this.canvas.width-4,e=this.canvas.height-2,r=e-20,o>=a&&i>=o&&s>=r&&e>=s?(this.index=Math.round((o-a)/(i-a)*(battleLog.log.length-1)),this.state="view",this.offset=0):void 0},t.prototype.key=function(t){return 32===t.which&&(this.pause=!this.pause),37===t.which&&(this.index=Math.max(this.index-1,0),this.offset=1,this.state="view"),39===t.which?(this.index=Math.min(this.index+1,battleLog.log.length-1),this.offset=1,this.state="view"):void 0},t}(),a=new t,o=(new Date).getTime(),r=1e3/60,n=0,s=function(t){var e;for(e=Math.max(t-o,0),o=t,n+=e;n>=r;)n-=r,a.draw(r/1e3);return window.requestAnimationFrame(s)},$(function(){return a.load()?window.requestAnimationFrame(s):void 0})}.call(this),function(){this.Chat=function(){function t(t,e){var a;a=$.extend({},n,e),this.messageUrl=a.messageUrl,this.playerUrl=a.playerUrl,this.emoticons=new Emoticons,this.input=$(t).find(".input"),this.output=$(t).find(".output"),this.sendBtn=$(t).find(".send"),this.clearBtn=$(t).find(".clear"),$(this.sendBtn).click(function(t){return function(){return t.send(),t.clearInput()}}(this)),$(this.clearBtn).click(function(t){return function(){return t.clearOutput()}}(this)),this.interval=a.interval,this.join=a.join,this.cooldown=a.cooldown,this.sent=Math.round((new Date).getTime()/1e3)-this.cooldown,this.touch(),this.time=Math.max(this.time-a.history,0),this.update()}var e,n;return n={messageUrl:null,playerUrl:null,emoticonUrl:null,interval:2,history:0,minLength:1,maxLength:512,cooldown:60,join:120},e={clear:"clearOutput"},t.prototype.getErrorText=function(t,e){var n,a,i,r;if(i=null!=(a=i18l.chat.errors[t])?a:i18l.chat.errors.unknown,null!=e&&"object"==typeof e)for(n in e)r=e[n],i=i.replace(":"+n,r);return i},t.prototype.error=function(t,e){var n;return n=$("<div></div>").addClass("alert").addClass("alert-danger").text(this.getErrorText(t,e)),$(this.output).append(n)},t.prototype.alert=function(t,e){return alert(this.getErrorText(t,e))},t.prototype.touch=function(){return this.time=Math.round((new Date).getTime()/1e3)},t.prototype.send=function(){var t,n,a,i,r,o,s;if(o=Math.round((new Date).getTime()/1e3),r=$(this.input).val(),i=r.match(/^\/(\w+)/i),"function"==typeof i?i(null!=i[1]):void 0){t=i[1];for(a in e)if(s=e[a],t.toLowerCase()===a.toLowerCase()&&(n=this[s],"function"==typeof n))return void n.call(this);return void this.error("cmdNotFound",{name:t})}return r.length<this.minLength?void this.alert("tooShort",{min:this.minLength}):r.length>this.maxLength?void alert("tooLong",{max:this.maxLength}):this.sent+this.cooldown>o?void this.alert("cooldown"):($.ajax({url:this.messageUrl,success:function(t){return function(e){return t.onSent(e)}}(this),data:{message:$(this.input).val()},dataType:"json",method:"POST"}),this.sent=o,$(this.sendBtn).data("time",this.sent+this.cooldown))},t.prototype.receive=function(){return $.ajax({url:this.messageUrl,data:{time:this.time},success:function(t){return function(e){return t.onReceived(e)}}(this),dataType:"json",method:"GET"}),this.touch()},t.prototype.clearOutput=function(){return $(this.output).empty()},t.prototype.clearInput=function(){return $(this.input).val("")},t.prototype.getMessage=function(t){return $("<p></p>").html(this.emoticons.insert(t.message)).append($("<small></small>").addClass("chat-time").data("time",t.time))},t.prototype.newMessage=function(t){var e,n,a,i,r,o,s,l;return l=$("<div></div>").addClass("row").addClass("chat-message").data("time",t.time).data("author",t.author),a=$("<div></div>").addClass("col-xs-1"),i=$("<div></div>").addClass("col-xs-11"),r=null!=this.playerUrl?$("<a></a>").attr("href",this.getPlayerUrl(t.author)).addClass("chat-author"):$("<div></div>").addClass("chat-author"),o=$("<div></div>").addClass("chat-content"),n=$("<img></img>").addClass("img-responsive").addClass("chat-avatar").attr("src",t.avatar),e=$("<p></p>").append($("<strong></strong>").addClass("chat-name").text(t.author)),s=this.getMessage(t),$(r).append(n).append(e),$(o).append(s),$(a).append(r),$(i).append(o),$(l).append(a).append(i),$(this.output).append(l)},t.prototype.modifyMessage=function(t,e){return $(t).find(".chat-content").append(this.getMessage(e))},t.prototype.addMessage=function(t){var e,n,a;return n=$(this.output).find(".chat-message").last(),0===n.length?this.newMessage(t):(a=$(n).data("time"),e=$(n).data("author"),e===t.author&&t.time-a<=this.join?this.modifyMessage(n,t):this.newMessage(t)),n=$(this.output).find(".chat-message").last(),n.scrollTop(n[0].scrollHeight-n.height())},t.prototype.onSent=function(t){return"error"===t.status?this.error(t.reason,t.args):void 0},t.prototype.onReceived=function(t){var e,n,a,i;for(i=[],e=0,n=t.length;n>e;e++)a=t[e],i.push(this.addMessage(a));return i},t.prototype.update=function(){var t;return t=function(t){return function(){return t.update()}}(this),this.receive(),setTimeout(t,1e3*this.interval)},t.prototype.getPlayerUrl=function(t){return this.playerUrl.replace("{name}",t)},t}(),$(function(){var t;return(t=function(){var e;return e=Math.round((new Date).getTime()/1e3),$(".chat .chat-time").each(function(){var t,n;return n=parseInt($(this).data("time")),t=e-n,$(this).text(60>t?"few seconds ago":window.timeFormatShort(t)+" ago")}),$(".chat .send").each(function(){var t,n,a;return a=parseInt($(this).data("time")),n=$(this).data("text"),t=a-e,t>0?$(this).text(window.timeFormat(t)).addClass("disabled"):$(this).text(n).removeClass("disabled")}),setTimeout(t,1e3)})()})}.call(this),function(){var t;t=function(){var e,n;return e=new Date,n=Math.round(e.getTime()/1e3),$(".current-time").text(e.toUTCString()),$(".time-left").each(function(){var t;return t=$(this).data("to"),$(this).text(window.timeFormat(Math.max(t-n,0)))}),setTimeout(t,1e3)},$(function(){return t()})}.call(this),function(){var t,e;t=[],e=function(t){var e,n;return e=null!=(n=$(t).data("dismissible"))?n:!0,console.log(e),$(t).modal(e?{backdrop:!0,show:!0,keyboard:!0}:{backdrop:"static",show:!0,keyboard:!1})},$(function(){return t=$(".modal.autoshow"),$(t).each(function(n){return 0===n&&e(this),n<t.length-1?$(this).on("hidden.bs.modal",function(a){return e(t[n+1])}):void 0})})}.call(this),function(){var t;this.Emoticons=function(){function t(t,n){this.url=null!=t?t:e.url,this.set=$.extend({},e.emoticons,null!=n?n:{})}var e;return e={emoticons:{";)":"blink.png",":D":"grin.png",":(":"sad.png",":)":"smile.png","B)":"sunglasses.png","O.o":"suprised.png",":p":"tongue.png"},url:"/images/emoticons/{name}"},t.prototype.insert=function(t){var e,n,a,i,r,o,s;i=this.set;for(n in i)s=i[n],a=n.toLowerCase(),r=n.toUpperCase(),o=this.url.replace("{name}",s),e='<img class="emoticon" src="'+o+'" alt="'+n+'"/>',t=a===r?t.replace(a,e):t.replace(a,e).replace(r,e);return t},t}(),t=0,$(function(){var e;return console.log("Document ready #"+ ++t),e=new Emoticons,$("[data-emoticons=true]").each(function(){var t;return t=$(this).text(),t=e.insert(t),$(this).html(t)})})}.call(this),function(){var t,e,n,a,i,r;r={xs:768,sm:992,md:1200},a=function(){var t;return t=$(window).width(),t<r.xs?["xs"]:t<r.sm?["sm","xs"]:t<r.md?["md","sm","xs"]:["lg","md","sm","xs"]},n=function(t){var e,n,a,i,r,o;for(o=[],n=0,i=t.length;i>n;n++)for(r=t[n],e=a=1;12>=a;e=++a)o.push("col-"+r+"-"+e);return o},i=function(t,e){var n,a,i,r,o,s;for(n=0,a=e.length;a>n;n++)if(i=e[n],o=new RegExp("col-"+i+"-(\\d+)"),s=null!=(r=$(t).attr("class").match(o))?r[1]:void 0,null!=s)return parseInt(s);return null},e=function(){var t,e,r;return e=a(),t=n(e),r="."+t.join(",."),$(".row.equalize").each(function(){var t,n,a,o,s,l,h,c;if(n=[],h=0,c=0,$(this).children(r).each(function(){var t;return t=i(this,e),c+=t,c>12&&(c-=12,h++),null==n[h]&&(n[h]=0),n[h]=Math.max(n[h],$(this).height())}),h=0,c=0,t=null,$(this).children(r).each(function(){return c+=i(this,e),null==t&&(t=this),c>12&&(c-=12,h++,t=this),$(this).height(n[h])}),a=Math.round((12-c)/2),null!=t&&a>0){for(l=e[0],o=s=1;12>=s;o=++s)$(t).removeClass("col-"+l+"-offset-"+o);return $(t).addClass("col-"+l+"-offset-"+a)}})},t=function(){return $("img").on("load",e)},$(function(){})}.call(this),function(){var t,e,n,a,i,r,o;o=1,t=function(t){return 17===t.which&&(o=10),16===t.which?o=100:void 0},e=function(t){return 17===t.which||16===t.which?o=1:void 0},n=function(t){var e,n,a,i,r,s,l,h,c;return console.log("mouseWheel"),a=parseInt(null!=(i=$(this).attr("min"))?i:0),n=parseInt(null!=(r=$(this).attr("max"))?r:100),h=parseInt(null!=(s=$(this).attr("step"))?s:1),e=t.deltaY*h*o,c=parseInt(null!=(l=$(this).val())?l:0),c=Math.clamp(c+e,a,n),$(this).val(c).trigger("change"),t.preventDefault()},r=function(t){var e,n,a,i,r,o,s;return console.log("rangeChanged"),a=$(this).parent().children(".range-value"),n=null!=(i=$(a).data("before"))?i:"",e=null!=(r=$(a).data("after"))?r:"",s=null!=(o=$(this).val())?o:0,$(a).text(n+s+e)},a=function(t){var e,n,a,i,r,s,l,h,c;return console.log("numberDecrease"),e=$(this).parent().parent().children("input"),a=parseInt(null!=(i=$(e).attr("min"))?i:0),n=parseInt(null!=(r=$(e).attr("max"))?r:100),h=parseInt(null!=(s=$(e).attr("step"))?s:1),c=parseInt(null!=(l=$(e).val())?l:0),c=Math.clamp(c-o*h,a,n),$(e).val(c).trigger("change")},i=function(t){var e,n,a,i,r,s,l,h,c;return console.log("numberIncrease"),e=$(this).parent().parent().children("input"),a=parseInt(null!=(i=$(e).attr("min"))?i:0),n=parseInt(null!=(r=$(e).attr("max"))?r:100),h=parseInt(null!=(s=$(e).attr("step"))?s:1),c=parseInt(null!=(l=$(e).val())?l:0),c=Math.clamp(c+o*h,a,n),$(e).val(c).trigger("change")},$(function(){return $(window).keyup(e).keydown(t),$("input[type=number], input[type=range]").bind("mousewheel",n),$("input[type=range]").change(r).mousemove(r),$(".number-minus").children("button").click(a),$(".number-plus").children("button").click(i)})}.call(this),function(){var t,e,n,a,i;if(e=0,i=["webkit","moz"],!window.requestAnimationFrame)for(t=0,n=i.length;n>t;t++)a=i[t],window.requestAnimationFrame=window[a+"RequestAnimationFrame"],window.cancelAnimationFrame=window[a+"CancelAnimationFrame"]||window[a+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t,n){var a,i,r;return a=(new Date).getTime(),r=Math.max(0,16-(a-e)),i=window.setTimeout(function(){return t(a+r)},r)}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){return clearTimeout(t)})}.call(this),function(){$(function(){return $(".image-preview").each(function(){var t,e;return e=this,t=$(this).data("for"),$("#"+t).change(function(t){var n;return n=URL.createObjectURL(t.target.files[0]),$(e).attr("src",n)}).trigger("change")})})}.call(this),function(){var t,e,n;n=function(t){return window.location.href="/lang/"+t},t=function(){return n($(this).data("lang"))},e=function(){return n($(this).val())},$(function(){return $(".language-select").change(e),$(".language-button").click(t)})}.call(this),function(){var t;t=function(){var t;return t=$("#mainNav").height()+10,$("body").css("padding-top",t+"px")},$(function(){return $(window).resize(function(){return t()}),t()})}.call(this),function(){var t,e;t=function(t){return"/images/plants/plant-"+t+".png"},e=function(n){var a,i,r,o,s;return r=Math.round((new Date).getTime()/1e3),o=parseInt($(n).data("start")),a=parseInt($(n).data("end")),s=parseInt($(n).data("watering")),r=Math.min(r,s),i=Math.floor(17*Math.clamp((r-o)/(a-o),0,1)),$(n).attr("src",t(i)),17>i?setTimeout(function(){return e(n)},1e3):void 0},$(function(){return $(".plantation-plant").each(function(){return e(this)}),$("#seedsModal").on("show.bs.modal",function(t){var e;return e=$(t.relatedTarget).data("slot"),$(this).find("input[name=slot]").val(e)})})}.call(this),function(){var t,e,n,a,i,r,o,s,l;l="/api/character",r=function(t,e,n,a,i,r){var o,s,l,h;return o=$("."+t+"-bar"),h=$("."+t+"-timer"),o.length>0&&(l=$(o).children(".progress-bar"),$(l).data("max",a).data("min",n).data("now",e),"function"==typeof(s=o[0]).update&&s.update()),h.length>0?(l=$(h).children(".progress-bar"),null!=r?$(l).data("max",r).data("min",i):$(l).data("max",1).data("min",0)):void 0},s=function(t,e,n,a){return $("."+t+"-now").text(e),$("."+t+"-min").text(n),$("."+t+"-max").text(a)},o=function(t,e){return $("."+t).text(e)},t=function(t){var e,n,a;if(r("health",t.health,0,t.maxHealth,t.healthUpdate,t.nextHealthUpdate),s("health",t.health,0,t.maxHealth),r("energy",t.energy,0,t.maxEnergy,t.energyUpdate,t.nextEnergyUpdate),s("energy",t.energy,0,t.maxEnergy),r("wanted",t.wanted,0,6,t.wantedUpdate,t.nextWantedUpdate),s("wanted",t.wanted,0,6),r("experience",t.experience,0,t.maxExperience,null,null),s("experience",t.experience,0,t.maxExperience),r("plantator",t.plantatorExperience,0,t.plantatorMaxExperience,null,null),s("plantator",t.plantatorExperience,0,t.plantatorMaxExperience),r("smuggler",t.smugglerExperience,0,t.smugglerMaxExperience,null,null),s("smuggler",t.smugglerExperience,0,t.smugglerMaxExperience),r("dealer",t.dealerExperience,0,t.dealerMaxExperience,null,null),s("dealer",t.dealerExperience,0,t.dealerMaxExperience),n=angular.element(document.body).scope(),null!=n&&null!=n.player){for(e in t)a=t[e],n.player[e]=a;return n.$apply()}},n=function(n){return t(n),n.reload?window.location.refresh():window.active&&($.ajax({url:l+"/notifications",dataType:"json",method:"GET",success:i}),$.ajax({url:l+"/messages",dataType:"json",method:"GET",success:a})),setTimeout(e,1e3*n.nextUpdate)},i=function(t){var e,n,a;for(e=0,n=t.length;n>e;e++)a=t[e],window.notify({title:"<strong>"+a.title+"</strong>",message:"",url:"/reports/"+a.id});return window.active?window.notifyShow():void 0},a=function(t){var e,n,a;for(e=0,n=t.length;n>e;e++)a=t[e],window.notify({title:"<strong>"+a.author+"</strong>: "+a.title+"<br/>",message:a.content,url:"/messages/inbox/"+a.id});return window.active?window.notifyShow():void 0},e=function(){return $.ajax({url:l,dataType:"json",method:"GET",success:n})},$(window).focus(function(){return e()}),$(function(){return e()})}.call(this),function(){var t;t=function(){return $(".square").each(function(){return"width"===$(this).data("square")?$(this).width($(this).height()):$(this).height($(this).width())})},$(function(){return $(window).resize(function(){return t()}),t()})}.call(this),function(){var t,e,n,a;t=function(){var t,e,n,a,i,r,o,s;return t=parseInt(null!=(i=$("#currentStatisticsPoints").text())?i:0),n=parseInt($("#statisticsPoints").text()),a=parseInt(null!=(r=$(this).data("old"))?r:0),s=parseInt(null!=(o=$(this).val())?o:0),e=s-a,e>n&&(e=n),s=a+e,n-=e,isNaN(e)?void 0:($(this).val(s).data("old",s),$("#statisticsPoints").text(n),$(".statistic").each(function(){var t;return s=parseInt(null!=(t=$(this).val())?t:0),$(this).attr("max",n+s)}))},e=function(t,e){return Math.round(Math.random()*(e-t)+t)},n=function(t){var n;return n=e(0,t.length-1),t[n]},a=function(){var t,e,a,i,r,o,s;for(r=$(".statistic.rollable"),$(r).val(0).trigger("change"),a=parseInt($("#statisticsPoints").text()),t=e=1,i=a;i>=1?i>=e:e>=i;t=i>=1?++e:--e)o=n(r),s=parseInt($(o).val()),$(o).val(s+1);return $(r).trigger("change")},$(function(){return $(".statistic").bind("keyup input change",t).trigger("change"),$(".statRoller").click(a),a()})}.call(this),function(){var t,e,n;e=!1,t=function(){return e||window.location.refresh(),e=!0},n=function(e){var a,i,r,o,s,l,h,c,u,d,f,p,m,g;return a=$(e).children(".progress-bar").last(),o=$(e).children(".progress-label"),g=Math.round((new Date).getTime()/1e3),l=$(a).data("min"),s=$(a).data("max"),m=$(a).data("stop"),i=$(a).data("ca"),r=$(a).data("cb"),p=Boolean(null!=(u=$(a).data("reversed"))?u:!1),f=Boolean(null!=(d=$(a).data("reload"))?d:!0),null!=m&&(g=Math.min(g,m)),h=Math.clamp(g,l,s),c=(h-l)/(s-l),p&&(c=1-c),$(a).css("width",100*c+"%"),null!=i&&null!=r&&$(a).css("background-color",Math.lerpColors(c,i,r)),$(o).text("function"==typeof window.timeFormat?window.timeFormat(s-h):void 0),g>s&&f&&t(),setTimeout(function(){return n(e,1e3)})},$(function(){return $(".progress-time").each(function(){return n(this)})})}.call(this),function(){$(function(){return $('[data-toggle="tooltip"]').each(function(){var t,e;return t={html:!0,placement:"auto left"},e=$(this).data("trigger"),null!=e&&(t.trigger=e),$(this).tooltip(t)})})}.call(this),function(){$(function(){var t,e,n,a,i;return i={},$(".tutorial-step").popover({trigger:"manual",placement:"bottom"}),a=function(e){return null!=e?$(e.elements).bind("click",t).addClass("tutorial-active").first().popover("show"):void 0},t=function(){var e;return e=i[this.step.name].shift(),null!=e?($.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:this.step.name,stage:e.index},method:"POST"}),setTimeout(function(){return a(e)},500)):$.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:this.step.name,stage:this.step.index+1},method:"POST"}),$(this.step.elements).unbind("click",t).removeClass("tutorial-active").popover("hide")},n=function(t,n,a){var i,r,o,s,l,h,c,u,d,f;return a.stage<0?(d=$("<div></div>").addClass("modal fade"),l=$("<div></div>").addClass("modal-dialog"),s=$("<div></div>").addClass("modal-content"),u=$("<div></div>").addClass("modal-header"),i=$("<div></div>").addClass("modal-body"),h=$("<div></div>").addClass("modal-footer"),f=$("<h4></h4>").addClass("modal-title"),c=$("<div></div>").addClass("btn-group"),r=$("<div></div>").addClass("btn btn-success").attr("value","yes").text("yes"),o=$("<div></div>").addClass("btn btn-danger").attr("value","no").text("no"),$(r).click(function(){return $.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:n,active:1},method:"POST"}),$(d).modal("hide"),e(t,n,a)}),$(o).click(function(){return $.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:n,active:0},method:"POST"}),$(d).modal("hide")}),$(f).text(a.title),$(i).text(a.description),$(u).append(f),$(c).append(o).append(r),$(h).append(c),$(s).append(u).append(i).append(h),$(l).append(s),$(d).append(l),$("body").append(d),$(d).modal({backdrop:"static",show:!0,keyboard:!1})):e(t,n,a)},e=function(t,e,n){var r;return r=[],$(t).find(".tutorial-step").each(function(){var t,a;return a=null,t=$(this).data("tutorial-index"),t<n.stage?void 0:(null!=r[t]?a=r[t]:(a={elements:[],name:e,index:t},r[t]=a),a.elements.push(this),this.step=a)}),r=r.filter(function(t){return null!=t?!0:!1}),i[e]=r,a(r.shift())},$("[data-tutorial=true").each(function(){var t;return t=$(this).data("tutorial-name"),$.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:t},method:"GET",success:function(e){return function(a){return a.active?n(e,t,a):void 0}}(this)})})})}.call(this),function(){var t,e,n,a,i,r,o,s,l;window.format||(window.format={time:{day:"d",hour:"h",minute:"m",second:"s"}}),null==window.active&&(window.active=!1),$(window).focus(function(){return window.active=!0}),$(window).blur(function(){return window.active=!1}),$(window).resize(function(){return this.resizeTo&&clearTimeout(this.resizeTo),this.resizeTo=setTimeout(function(){return $(this).trigger("resized")},500)}),window.lpad||(window.lpad=function(t,e){var n,a,i,r;for(r="0",n=a=1,i=e;i>=1?i>=a:a>=i;n=i>=1?++a:--a)r+="0";return(r+t).slice(-1*e)}),s=function(t){return t.length>0?t+" ":t},o=function(t,e,n){return t=s(t),t+=t.length>0?window.lpad(e,2):e,t+n},window.timeFormat||(window.timeFormat=function(t){var e,n,a,i,r,s;return s="",n=new Date(1e3*t),e=n.getUTCDate()-1,a=n.getUTCHours(),i=n.getUTCMinutes(),r=n.getUTCSeconds(),e>0&&(s+=e+format.time.day),a>0&&(s=o(s,a,format.time.hour)),(a>0||i>0)&&(s=o(s,i,format.time.minute)),(a>0||i>0||r>0)&&(s=o(s,r,format.time.second)),s}),window.timeFormatShort||(window.timeFormatShort=function(t){var e,n,a,i,r,s;return s="",n=new Date(1e3*t),e=n.getUTCDate()-1,a=n.getUTCHours(),i=n.getUTCMinutes(),r=n.getUTCSeconds(),e>0?e+format.time.day:a>0?o(s,a,format.time.hour):i>0?o(s,i,format.time.minute):r>0?o(s,r,format.time.second):void 0}),a=!1,(t=window.location).refresh||(t.refresh=function(){return a?void 0:(a=!0,window.location.reload(!0))}),n=[],window.notify||(window.notify=function(t){return n.push(t)}),e=function(t){var n,a;if(null===t||"object"!=typeof t)return t;a=new t.constructor;for(n in t)a[n]=e(t[n]);return a},r=function(t,e){return console.log("P",t,e),setTimeout(function(){return console.log("S",t,e),$.notify(t,{placement:{from:"bottom"},mouse_over:"pause"})},1e3*e)},window.notifyShow||(window.notifyShow=function(){var t,e,a,i;if(window.active){for(t=e=0,a=n.length;a>e;t=++e)i=n[t],r($.extend({},i),t);return n=[]}}),$(window).focus(function(){return window.notifyShow()}),Math.clamp||(Math.clamp=function(t,e,n){return Math.max(Math.min(t,n),e)}),Math.lerp||(Math.lerp=function(t,e,n){return e*t+n*(1-t)}),Math.hexToRgb||(Math.hexToRgb=function(t){var e;return e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t),e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}),Math.rgbToHex||(Math.rgbToHex=function(t,e,n){return"#"+((1<<24)+(t<<16)+(e<<8)+n).toString(16).slice(1)}),Math.lerpColors||(Math.lerpColors=function(t,e,n){var a,i,r;return a=Math.hexToRgb(e),i=Math.hexToRgb(n),r={r:Math.round(Math.lerp(t,a.r,i.r)),g:Math.round(Math.lerp(t,a.g,i.g)),b:Math.round(Math.lerp(t,a.b,i.b))},Math.rgbToHex(r.r,r.g,r.b)}),l=function(){var t,e,n,a,i,r,o,s,l,h;return t=$(this).children(".progress-bar"),a=$(this).children(".progress-label"),r=$(t).data("min"),i=$(t).data("max"),e=$(t).data("ca"),n=$(t).data("cb"),o=Math.clamp($(t).data("now"),r,i),h=Boolean(null!=(l=$(t).data("reversed"))?l:!1),s=(o-r)/(i-r)*100,h&&(s=100-s),$(t).css("width",s+"%"),null!=e&&null!=n&&$(t).css("background-color",Math.lerpColors(s/100,e,n)),$(a).text(o+" / "+i)},$(function(){return $(".progress").each(function(){return this.update||(this.update=l)})}),i=function(t){var e=0,n=0,a=0,i=0,r=this;do e+=r.offsetLeft-r.scrollLeft,n+=r.offsetTop-r.scrollTop;while(r=r.offsetParent);return a=t.pageX-e,i=t.pageY-n,{x:a,y:i}},HTMLCanvasElement.prototype.relMouseCoords=i}.call(this);
//# sourceMappingURL=data:application/json;base64,