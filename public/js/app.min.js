(function(){this.app=angular.module("game",[]),this.app.controller("GameController",function(t){return t.round=function(t,e){var n,i;return i=null!=e?e:0,n=Math.pow(10,i),Math.round(t*n)/n}}),this.app.controller("PlayerController",function(t){})}).call(this),function(){var t;t=function(){return $(".avatar").removeClass("active"),$("#avatar").val($(this).data("avatar")),$(this).addClass("active")},$(function(){return $(".avatar").click(t).first().trigger("click")})}.call(this),function(){var t,e,n;n={fontSize:30,barFontSize:20,nameFontSize:30,margin:5,interval:1e3/60},e=function(){function t(t,e){var n;n=new Image,n.src=e.avatar,n.onload=function(t){return function(){return t.avatar=n}}(this),this.team=t,this.name=e.name,this.id=e.id,this.level=e.level,this.health=e.health,this.maxHealth=e.maxHealth}return t.prototype.draw=function(t,e){var i,a;return"red"===this.team?(t.strokeStyle="rgba(217, 83, 79, 1)",t.fillStyle="rgba(217, 83, 79, 0.4)"):(t.strokeStyle="rgba(51, 122, 183, 1)",t.fillStyle="rgba(51, 122, 183, 0.4)"),t.fillRect(0,0,e,e),t.strokeRect(0,0,e,e),null!=this.avatar&&t.drawImage(this.avatar,n.margin,n.margin,e-2*n.margin,e-2*n.margin),a=this.name+" ("+this.level+")",t.font=n.nameFontSize+"px Roboto",t.lineWidth=1,t.fillStyle="#FFFFFF",t.strokeStyle="#000000",i=t.measureText(a),t.fillText(a,(e-i.width)/2,n.nameFontSize),t.strokeText(a,(e-i.width)/2,n.nameFontSize),t.font=n.barFontSize+"px Roboto",t.strokeStyle="rgba(0, 0, 0, 0.7)",t.fillStyle="rgba(0, 0, 0, 0.4)",t.fillRect(n.margin,e-n.barFontSize-n.margin,e-2*n.margin,n.barFontSize),t.strokeRect(n.margin,e-n.barFontSize-n.margin,e-2*n.margin,n.barFontSize),t.fillStyle="rgba(217, 83, 79, 1)",t.fillRect(n.margin,e-n.barFontSize-n.margin,(e-2*n.margin)*(this.health/this.maxHealth),n.barFontSize),a=Math.round(this.health)+" / "+this.maxHealth,i=t.measureText(a),t.fillStyle="#000000",t.fillText(a,(e-i.width)/2,e-n.barFontSize/2)},t}(),t=function(){function t(t){this.canvas=$(t).children("canvas")[0],this.context=this.canvas.getContext("2d"),this.battleLog=$.parseJSON($(t).children(".battle-log").first().text())}return t.prototype.speed={view:3,info:3,next:3},t.prototype.load=function(){var t,i,a,r,o,s,h,l;for(this.index=0,this.characters=[],this.state="view",this.offset=0,this.pause=!1,$(this.canvas).click(function(t){return function(e){return t.click(e)}}(this)),$(document).keydown(function(t){return function(e){return t.key(e)}}(this)),h=this.battleLog.teams.red,a=0,o=h.length;o>a;a++)i=h[a],t=new e("red",i),this.characters[t.id]=t;for(l=this.battleLog.teams.blue,r=0,s=l.length;s>r;r++)i=l[r],t=new e("blue",i),this.characters[t.id]=t;return this.context.font=n.fontSize+"px Roboto",this.action=this.battleLog.log[this.index],this.attacker=this.characters[this.action.attacker],this.defender=this.characters[this.action.defender],!0},t.prototype.drawCharacters=function(t,e){var n,i;return i=.6*this.canvas.height,n=this.canvas.width/2,this.context.save(),this.context.translate((n-i)/2,(this.canvas.height-i)/2),t.draw(this.context,i),this.context.restore(),this.context.save(),this.context.translate((n-i)/2+n,(this.canvas.height-i)/2),e.draw(this.context,i),this.context.restore()},t.prototype.drawInfo=function(t){var e,i,a,r,o,s,h,l,c,u,d,p,f;return a=this.canvas.width/2,i=this.canvas.height/2,e=.6*this.canvas.height,h=50,c=2*h,u=a+(e+h)/2,d=i,l=.7*e/c,o=1.2,s=13,this.context.font=n.fontSize+"px Roboto",r=this.context.measureText(t),p=u-r.width/2,f=i,this.context.save(),this.context.lineWidth=2,this.context.translate(u,d),this.context.scale(l,o),this.context.fillStyle="#FFFFFF",this.context.strokeStyle="#000000",this.drawStar(s,.6*h,h),this.context.restore(),this.context.save(),this.context.translate(p,f),this.context.fillStyle="#000000",this.context.fillText(t,0,0),this.context.restore()},t.prototype.drawStar=function(t,e,n){var i,a,r,o,s,h,l;for(o=Math.PI/2*3,s=Math.PI/t,this.context.beginPath(),h=Math.cos(o)*n,l=Math.sin(o)*n,this.context.moveTo(h,l),o+=s,i=a=1,r=t;r>=1?r>=a:a>=r;i=r>=1?++a:--a)h=Math.cos(o)*e,l=Math.sin(o)*e,this.context.lineTo(h,l),o+=s,h=Math.cos(o)*n,l=Math.sin(o)*n,this.context.lineTo(h,l),o+=s;return this.context.lineTo(0,-n),this.context.fill(),this.context.stroke(),this.context.closePath()},t.prototype.getEndText=function(){return this.battleLog.win?i18n.battle.win:i18n.battle.lose},t.prototype.draw=function(t){var e,n,i,a,r,o,s,h,l,c,u,d,p,f,m,g,v,$,w,x,y;for(this.context.fillStyle="#FFFFFF",this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.offset+=this.speed[this.state]*t,n=!0,"view"===this.state&&n&&(e=this.battleLog.log[this.index],a=this.characters[e.attacker],r=this.characters[e.defender],"hit"===e.type&&(r.health=e.health),this.drawCharacters(a,r),this.offset>1&&!this.pause&&(this.offset=0,r.startHealth=r.health,r.endHealth="hit"===e.type?Math.max(r.health-e.damage,0):r.health,this.state="info"),n=!1),"info"===this.state&&n&&(e=this.battleLog.log[this.index],a=this.characters[e.attacker],r=this.characters[e.defender],this.drawCharacters(a,r),this.offset<=1?(this.context.globalAlpha=this.offset,r.health=r.startHealth):this.offset<=2?(this.context.globalAlpha=1,s=Math.clamp(this.offset-1,0,1),r.health=Math.lerp(s,r.endHealth,r.startHealth)):(r.health=r.endHealth,this.context.globalAlpha=Math.max(3-this.offset,0)),this.offset>4&&(this.offset=0,this.state="next"),"hit"===e.type?(x=e.damage,e.crit&&(x+="!")):x=i18n.battle.dodge,this.drawInfo(x),this.context.globalAlpha=1,n=!1),"next"===this.state&&n&&(g=this.battleLog.log[this.index],d=this.battleLog.log[this.index+1],v=this.characters[g.attacker],$=this.characters[g.defender],m=this.canvas.height/2*this.offset,this.context.save(),this.context.translate(0,-m),this.drawCharacters(v,$),this.context.restore(),this.context.save(),this.context.translate(0,this.canvas.height-m),null!=d?(p=this.characters[d.attacker],f=this.characters[d.defender],"hit"===d.type&&(f.health=d.health),this.drawCharacters(p,f)):(x=this.getEndText(),this.context.fillStyle="#000000",u=this.context.measureText(x),this.context.fillText(x,(this.canvas.width-u.width)/2,(this.canvas.height-15)/2)),this.context.restore(),this.offset>2&&(this.index++,this.offset=0,this.state=null!=d?"view":"end"),n=!1),"end"===this.state&&n&&(x=this.getEndText(),this.offset=0,this.context.fillStyle="#000000",u=this.context.measureText(x),this.context.fillText(x,(this.canvas.width-u.width)/2,(this.canvas.height-15)/2),n=!1),y=this.canvas.width-4,o=this.canvas.height-2,this.context.save(),this.context.strokeStyle="rgba(0, 0, 0, 0.7)",this.context.fillStyle="rgba(0, 0, 0, 0.4)",this.context.fillRect(2,o-20,y,20),this.context.strokeRect(2,o-20,y,20),this.context.fillStyle="#5BC0DE",this.context.fillRect(2,o-20,y*Math.min(this.index/(this.battleLog.log.length-1),1),20),this.context.lineWidth=5,w=this.battleLog.marks,h=0,l=w.length;l>h;h++)c=w[h],"fainted"===c.type&&(this.context.strokeStyle="#D9534F"),i=c.at/(this.battleLog.log.length-1)*y,this.context.beginPath(),this.context.moveTo(i-this.context.lineWidth/2+2,o-20),this.context.lineTo(i-this.context.lineWidth/2+2,o),this.context.stroke();return this.context.restore()},t.prototype.click=function(t){var e,n,i,a,r,o,s;return n=this.canvas.relMouseCoords(t),o=n.x,s=n.y,i=2,a=i+this.canvas.width-4,e=this.canvas.height-2,r=e-20,o>=i&&a>=o&&s>=r&&e>=s?(this.index=Math.round((o-i)/(a-i)*(this.battleLog.log.length-1)),this.state="view",this.offset=0):void 0},t.prototype.key=function(t){return 32===t.which&&(this.pause=!this.pause),37===t.which&&(this.index=Math.max(this.index-1,0),this.offset=1,this.state="view"),39===t.which?(this.index=Math.min(this.index+1,this.battleLog.log.length-1),this.offset=1,this.state="view"):void 0},t.prototype.requestFrame=function(t){var e;for(e=Math.max(t-this.lastTime,0),this.lastTime=t,this.accumulator+=e;this.accumulator>=n.interval;)this.accumulator-=n.interval,this.draw(n.interval/1e3);return window.requestAnimationFrame(function(t){return function(e){return t.requestFrame(e)}}(this))},t.prototype.start=function(){return this.load()?(this.lastTime=(new Date).getTime(),this.accumulator=0,this.requestFrame(this.lastTime)):void 0},t}(),$(function(){return $(".battle").bind("show",function(){var e;return e=new t(this),e.start()}).filter(":visible").trigger("show")})}.call(this),function(){this.Chat=function(){function t(t,e){var i;i=$.extend({},n,e),this.messageUrl=i.messageUrl,this.playerUrl=i.playerUrl,this.emoticons=new Emoticons,this.allowSend=i.allowSend,this.allowReceive=i.allowReceive,this.receiveExtra=i.receiveExtra,this.sendExtra=i.sendExtra,this.receiveMethod=i.receiveMethod,this.sendMethod=i.sendMethod,this.input=$(t).find(".input"),this.output=$(t).find(".output"),this.sendBtn=$(t).find(".send"),this.clearBtn=$(t).find(".clear"),this.emoticonsBtn=$(t).find(".emoticons"),this.emoticons.popover(this.emoticonsBtn,this.input),this.output[0].scrollTop=this.output[0].scrollHeight,$(this.input).keydown(function(t){return function(e){return t.onKey(e)}}(this)),$(this.sendBtn).click(function(t){return function(){return t.send(),t.clearInput()}}(this)),$(this.clearBtn).click(function(t){return function(){return t.clearOutput()}}(this)),this.interval=i.interval,this.join=i.join,this.cooldown=i.cooldown,this.sent=Math.round((new Date).getTime()/1e3)-this.cooldown,this.touch(),this.time=Math.max(this.time-i.history,0),this.receive()}var e,n;return n={messageUrl:null,playerUrl:null,emoticonUrl:null,interval:2,history:0,minLength:1,maxLength:512,cooldown:60,join:120,allowSend:!0,allowReceive:!0,sendExtra:{},receiveExtra:{},sendMethod:"POST",receiveMethod:"GET"},e={clear:"clearOutput"},t.prototype.getErrorText=function(t,e){var n,i,a,r;if(a=null!=(i=i18n.chat.errors[t])?i:i18n.chat.errors.unknown,null!=e&&"object"==typeof e)for(n in e)r=e[n],a=a.replace(":"+n,r);return a},t.prototype.error=function(t,e){var n;return n=$("<div></div>").addClass("alert").addClass("alert-danger").text(this.getErrorText(t,e)),$(this.output).append(n)},t.prototype.alert=function(t,e){return alert(this.getErrorText(t,e))},t.prototype.touch=function(){return this.time=Math.round((new Date).getTime()/1e3)},t.prototype.send=function(){var t,n,i,a,r,o,s,h;if(s=Math.round((new Date).getTime()/1e3),o=$(this.input).val(),r=o.match(/^\/(\w+)/i),null!=r&&null!=r[1]){t=r[1];for(a in e)if(h=e[a],t.toLowerCase()===a.toLowerCase()&&(i=this[h],"function"==typeof i))return void i.call(this);return void this.error("cmdNotFound",{name:t})}return this.allowSend?o.length<this.minLength?void this.alert("tooShort",{min:this.minLength}):o.length>this.maxLength?void alert("tooLong",{max:this.maxLength}):this.sent+this.cooldown>s?void this.alert("cooldown"):(n=$.extend({},this.sendExtra,{message:$(this.input).val()}),$.ajax({url:this.messageUrl,success:function(t){return function(e){return t.onSent(e)}}(this),data:n,dataType:"json",method:this.sendMethod}),this.sent=s,$(this.sendBtn).data("time",this.sent+this.cooldown)):this.error("cannotSend")},t.prototype.receive=function(){var t;return this.allowReceive?(t=$.extend({},this.receiveExtra,{time:this.time}),$.ajax({url:this.messageUrl,data:t,complete:function(t){return function(){return t.onComplete()}}(this),success:function(t){return function(e){return t.onReceived(e)}}(this),dataType:"json",method:this.receiveMethod}),this.touch()):this.error("cannotReceive")},t.prototype.clearOutput=function(){return $(this.output).empty()},t.prototype.clearInput=function(){return $(this.input).val("")},t.prototype.getMessage=function(t){return $("<p></p>").html(this.emoticons.insert(t.message)).append($("<small></small>").addClass("chat-time").data("time",t.time))},t.prototype.newMessage=function(t){var e,n,i,a,r,o,s,h;return h=$("<div></div>").addClass("row").addClass("chat-message").data("time",t.time).data("author",t.author),i=$("<div></div>").addClass("col-xs-1"),a=$("<div></div>").addClass("col-xs-11"),r=null!=this.playerUrl?$("<a></a>").attr("href",this.getPlayerUrl(t.author)).addClass("chat-author"):$("<div></div>").addClass("chat-author"),o=$("<div></div>").addClass("chat-content"),n=$("<img></img>").addClass("img-responsive").addClass("chat-avatar").attr("src",t.avatar),e=$("<p></p>").append($("<strong></strong>").addClass("chat-name").text(t.author)),s=this.getMessage(t),$(r).append(n).append(e),$(o).append(s),$(i).append(r),$(a).append(o),$(h).append(i).append(a),$(this.output).append(h)},t.prototype.modifyMessage=function(t,e){return $(t).find(".chat-content").append(this.getMessage(e))},t.prototype.addMessage=function(t){var e,n,i,a;return i=this.output[0].scrollHeight-this.output[0].scrollTop-this.output[0].clientHeight<=1,n=$(this.output).children().last(),0!==n.length&&$(n).is(".chat-message")?(a=$(n).data("time"),e=$(n).data("author"),e===t.author&&t.time-a<=this.join?this.modifyMessage(n,t):this.newMessage(t)):this.newMessage(t),i?this.output[0].scrollTop=this.output[0].scrollHeight-1:void 0},t.prototype.onSent=function(t){return"error"===t.status?this.error(t.reason,t.args):void 0},t.prototype.onReceived=function(t){var e,n,i,a;for(a=[],e=0,n=t.length;n>e;e++)i=t[e],a.push(this.addMessage(i));return a},t.prototype.onComplete=function(){return setTimeout(function(t){return function(){return t.receive()}}(this),1e3*this.interval)},t.prototype.onKey=function(t){return 13===t.which?(this.send(),this.clearInput()):void 0},t.prototype.getPlayerUrl=function(t){return this.playerUrl.replace("{name}",t)},t}(),$(function(){var t;return(t=function(){var e;return e=Math.round((new Date).getTime()/1e3),$(".chat .chat-time").each(function(){var t,n,i;return i=parseInt($(this).data("time")),t=e-i,n=60>t?i18n.chat.fewSecs:window.timeFormatShort(t),$(this).text(n+" "+i18n.chat.ago)}),$(".chat .send").each(function(){var t,n,i;return"true"!==$(this).data("disabled")?(i=parseInt($(this).data("time")),n=$(this).data("text"),t=i-e,t>0?$(this).text(window.timeFormat(t)).addClass("disabled"):$(this).text(n).removeClass("disabled")):void 0}),setTimeout(t,1e3)})()})}.call(this),function(){var t;t=function(){var e,n;return e=new Date,n=Math.round(e.getTime()/1e3),$(".current-time").text(e.toUTCString()),$(".time-left").each(function(){var t;return t=$(this).data("to"),$(this).text(window.timeFormat(Math.max(t-n,0)))}),setTimeout(t,1e3)},$(function(){return t()})}.call(this),function(){var t,e;t=[],e=function(t){var e,n;return e=null!=(n=$(t).data("dismissible"))?n:!0,$(t).bind("shown.bs.modal",function(t){return $(this).find(".battle").trigger("show")}),$(t).modal(e?{backdrop:!0,show:!0,keyboard:!0}:{backdrop:"static",show:!0,keyboard:!1})},$(function(){return t=$(".modal.autoshow"),$(t).each(function(n){return 0===n&&e(this),n<t.length-1?$(this).on("hidden.bs.modal",function(i){return e(t[n+1])}):void 0})})}.call(this),function(){var t;this.Emoticons=function(){function t(t,n){this.url=null!=t?t:e.url,this.set=$.extend({},e.emoticons,null!=n?n:{})}var e;return e={emoticons:{";)":"blink.png",":D":"grin.png",":(":"sad.png",":)":"smile.png","B)":"sunglasses.png","O.o":"surprised.png",":p":"tongue.png"},url:"/images/emoticons/{name}"},t.prototype.insert=function(t){var e,n,i,a,r;i=this.set;for(n in i)r=i[n],a=this.url.replace("{name}",r),e='<img class="emoticon" src="'+a+'" alt="'+n+'" title="'+n+'"/>',t=t.replaceAll(n,e);return t},t.prototype.popover=function(t,e){return $(t).popover({html:!0,trigger:"click",placement:"top",title:i18n.emoticons.title,content:function(t){return function(){return t.getPopoverContent(e)}}(this),template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content emoticon-container"></div></div>'})},t.prototype.getPopoverContent=function(t){var e,n,i,a,r,o;e=$("<div></div>"),a=this.set;for(i in a)o=a[i],r=this.url.replace("{name}",o),n=$("<img></img>").addClass("emoticon").attr("src",r).attr("alt",i).attr("title",i).click(function(){return $(t).val($(t).val()+$(this).attr("alt"))}),$(e).append(n);return e},t}(),t=0,$(function(){var t;return t=new Emoticons,$("[data-emoticons=true]").each(function(){var e;return e=$(this).text(),e=t.insert(e),$(this).html(e)})})}.call(this),function(){var t,e,n,i,a,r;r={xs:768,sm:992,md:1200},i=function(){var t;return t=$(window).width(),t<r.xs?["xs"]:t<r.sm?["sm","xs"]:t<r.md?["md","sm","xs"]:["lg","md","sm","xs"]},n=function(t){var e,n,i,a,r,o;for(o=[],n=0,a=t.length;a>n;n++)for(r=t[n],e=i=1;12>=i;e=++i)o.push("col-"+r+"-"+e);return o},a=function(t,e){var n,i,a,r,o,s;for(n=0,i=e.length;i>n;n++)if(a=e[n],o=new RegExp("col-"+a+"-(\\d+)"),s=null!=(r=$(t).attr("class").match(o))?r[1]:void 0,null!=s)return parseInt(s);return null},e=function(){var t,e,r;return e=i(),t=n(e),r="."+t.join(",."),$(".row.equalize").each(function(){var t,n,i,o,s,h,l,c;if(n=[],l=0,c=0,$(this).children(r).each(function(){var t;return t=a(this,e),c+=t,c>12&&(c-=12,l++),null==n[l]&&(n[l]=0),n[l]=Math.max(n[l],$(this).height())}),l=0,c=0,t=null,$(this).children(r).each(function(){return c+=a(this,e),null==t&&(t=this),c>12&&(c-=12,l++,t=this),$(this).height(n[l])}),i=Math.round((12-c)/2),null!=t&&i>0){for(h=e[0],o=s=1;12>=s;o=++s)$(t).removeClass("col-"+h+"-offset-"+o);return $(t).addClass("col-"+h+"-offset-"+i)}})},t=function(){return $("img").on("load",e)},$(function(){})}.call(this),function(){var t,e,n,i,a,r,o;o=1,t=function(t){return 17===t.which&&(o=10),16===t.which?o=100:void 0},e=function(t){return 17===t.which||16===t.which?o=1:void 0},n=function(t){var e,n,i,a,r,s,h,l,c;return console.log("mouseWheel"),i=parseInt(null!=(a=$(this).attr("min"))?a:0),n=parseInt(null!=(r=$(this).attr("max"))?r:100),l=parseInt(null!=(s=$(this).attr("step"))?s:1),e=t.deltaY*l*o,c=parseInt(null!=(h=$(this).val())?h:0),c=Math.clamp(c+e,i,n),$(this).val(c).trigger("change"),t.preventDefault()},r=function(t){var e,n,i,a,r,o,s;return console.log("rangeChanged"),i=$(this).parent().children(".range-value"),n=null!=(a=$(i).data("before"))?a:"",e=null!=(r=$(i).data("after"))?r:"",s=null!=(o=$(this).val())?o:0,$(i).text(n+s+e)},i=function(t){var e,n,i,a,r,s,h,l,c;return console.log("numberDecrease"),e=$(this).parent().parent().children("input"),i=parseInt(null!=(a=$(e).attr("min"))?a:0),n=parseInt(null!=(r=$(e).attr("max"))?r:100),l=parseInt(null!=(s=$(e).attr("step"))?s:1),c=parseInt(null!=(h=$(e).val())?h:0),c=Math.clamp(c-o*l,i,n),$(e).val(c).trigger("change")},a=function(t){var e,n,i,a,r,s,h,l,c;return console.log("numberIncrease"),e=$(this).parent().parent().children("input"),i=parseInt(null!=(a=$(e).attr("min"))?a:0),n=parseInt(null!=(r=$(e).attr("max"))?r:100),l=parseInt(null!=(s=$(e).attr("step"))?s:1),c=parseInt(null!=(h=$(e).val())?h:0),c=Math.clamp(c+o*l,i,n),$(e).val(c).trigger("change")},$(function(){return $(window).keyup(e).keydown(t),$("input[type=number], input[type=range]").bind("mousewheel",n),$("input[type=range]").change(r).mousemove(r),$(".number-minus").children("button").click(i),$(".number-plus").children("button").click(a)})}.call(this),function(){var t,e,n,i,a;if(e=0,a=["webkit","moz"],!window.requestAnimationFrame)for(t=0,n=a.length;n>t;t++)i=a[t],window.requestAnimationFrame=window[i+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i+"CancelAnimationFrame"]||window[i+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t,n){var i,a,r;return i=(new Date).getTime(),r=Math.max(0,16-(i-e)),a=window.setTimeout(function(){return t(i+r)},r)}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){return clearTimeout(t)})}.call(this),function(){$(function(){return $(".image-preview").each(function(){var t,e;return e=this,t=$(this).data("for"),$("#"+t).change(function(t){var n;return n=URL.createObjectURL(t.target.files[0]),null!=n?$(e).attr("src",n):void 0}).trigger("change")})})}.call(this),function(){var t,e,n;n=function(t){return window.location.href="/lang/"+t},t=function(){return n($(this).data("lang"))},e=function(){return n($(this).val())},$(function(){return $(".language-select").change(e),$(".language-button").click(t)})}.call(this),function(){var t;t=function(){var t;return t=$("#mainNav").height()+10,$("body").css("padding-top",t+"px")},$(function(){return $(window).resize(function(){return t()}),t()})}.call(this),function(){var t,e;t=function(t){return"/images/plants/plant-"+t+".png"},e=function(n){var i,a,r,o,s;return r=Math.round((new Date).getTime()/1e3),o=parseInt($(n).data("start")),i=parseInt($(n).data("end")),s=parseInt($(n).data("watering")),r=Math.min(r,s),a=Math.floor(17*Math.clamp((r-o)/(i-o),0,1)),$(n).attr("src",t(a)),17>a?setTimeout(function(){return e(n)},1e3):void 0},$(function(){return $(".plantation-plant").each(function(){return e(this)}),$("#seedsModal").on("show.bs.modal",function(t){var e;return e=$(t.relatedTarget).data("slot"),$(this).find("input[name=slot]").val(e)})})}.call(this),function(){var t,e,n,i,a,r,o,s,h;h="/api/character",r=function(t,e,n,i,a,r){var o,s,h,l;return o=$("."+t+"-bar"),l=$("."+t+"-timer"),o.length>0&&(h=$(o).children(".progress-bar"),$(h).data("max",i).data("min",n).data("now",e),"function"==typeof(s=o[0]).update&&s.update()),l.length>0?(h=$(l).children(".progress-bar"),null!=r?$(h).data("max",r).data("min",a):$(h).data("max",1).data("min",0)):void 0},s=function(t,e,n,i){return $("."+t+"-now").text(e),$("."+t+"-min").text(n),$("."+t+"-max").text(i)},o=function(t,e){return $("."+t).text(e)},t=function(t){var e,n,i;if(r("health",t.health,0,t.maxHealth,t.healthUpdate,t.nextHealthUpdate),s("health",t.health,0,t.maxHealth),r("energy",t.energy,0,t.maxEnergy,t.energyUpdate,t.nextEnergyUpdate),s("energy",t.energy,0,t.maxEnergy),r("wanted",t.wanted,0,6,t.wantedUpdate,t.nextWantedUpdate),s("wanted",t.wanted,0,6),r("experience",t.experience,0,t.maxExperience,null,null),s("experience",t.experience,0,t.maxExperience),r("plantator",t.plantatorExperience,0,t.plantatorMaxExperience,null,null),s("plantator",t.plantatorExperience,0,t.plantatorMaxExperience),r("smuggler",t.smugglerExperience,0,t.smugglerMaxExperience,null,null),s("smuggler",t.smugglerExperience,0,t.smugglerMaxExperience),r("dealer",t.dealerExperience,0,t.dealerMaxExperience,null,null),s("dealer",t.dealerExperience,0,t.dealerMaxExperience),n=angular.element(document.body).scope(),null!=n&&null!=n.player){for(e in t)i=t[e],n.player[e]=i;return n.$apply()}},n=function(n){return t(n),n.reload?window.location.refresh():window.active&&($.ajax({url:h+"/notifications",dataType:"json",method:"GET",success:a}),$.ajax({url:h+"/messages",dataType:"json",method:"GET",success:i})),setTimeout(e,1e3*n.nextUpdate)},a=function(t){var e,n,i;for(e=0,n=t.length;n>e;e++)i=t[e],window.notify({title:"<strong>"+i.title+"</strong>",message:"",url:"/reports/"+i.id});return window.active?window.notifyShow():void 0},i=function(t){var e,n,i;for(e=0,n=t.length;n>e;e++)i=t[e],window.notify({title:"<strong>"+i.author+"</strong>: "+i.title+"<br/>",message:i.content,url:"/messages/inbox/"+i.id});return window.active?window.notifyShow():void 0},e=function(){return $.ajax({url:h,dataType:"json",method:"GET",success:n})},$(window).focus(function(){return e()}),$(function(){return e()})}.call(this),function(){var t;t=function(){return $(".square").each(function(){return"width"===$(this).data("square")?$(this).width($(this).height()):$(this).height($(this).width())})},$(function(){return $(window).resize(function(){return t()}),t()})}.call(this),function(){var t,e,n,i;t=function(){var t,e,n,i,a,r,o,s;return t=parseInt(null!=(a=$("#currentStatisticsPoints").text())?a:0),n=parseInt($("#statisticsPoints").text()),i=parseInt(null!=(r=$(this).data("old"))?r:0),s=parseInt(null!=(o=$(this).val())?o:0),e=s-i,e>n&&(e=n),s=i+e,n-=e,isNaN(e)?void 0:($(this).val(s).data("old",s),$("#statisticsPoints").text(n),$(".statistic").each(function(){var t;return s=parseInt(null!=(t=$(this).val())?t:0),$(this).attr("max",n+s)}))},e=function(t,e){return Math.round(Math.random()*(e-t)+t)},n=function(t){var n;return n=e(0,t.length-1),t[n]},i=function(){var t,e,i,a,r,o,s;for(r=$(".statistic.rollable"),$(r).val(0).trigger("change"),i=parseInt($("#statisticsPoints").text()),t=e=1,a=i;a>=1?a>=e:e>=a;t=a>=1?++e:--e)o=n(r),s=parseInt($(o).val()),$(o).val(s+1);return $(r).trigger("change")},$(function(){return $(".statistic").bind("keyup input change",t).trigger("change"),$(".statRoller").click(i),i()})}.call(this),function(){var t,e,n;e=!1,t=function(){return e||window.location.refresh(),e=!0},n=function(e){var i,a,r,o,s,h,l,c,u,d,p,f,m,g;return i=$(e).children(".progress-bar").last(),o=$(e).children(".progress-label"),g=Math.round((new Date).getTime()/1e3),h=$(i).data("min"),s=$(i).data("max"),m=$(i).data("stop"),a=$(i).data("ca"),r=$(i).data("cb"),f=Boolean(null!=(u=$(i).data("reversed"))?u:!1),p=Boolean(null!=(d=$(i).data("reload"))?d:!0),null!=m&&(g=Math.min(g,m)),l=Math.clamp(g,h,s),c=(l-h)/(s-h),f&&(c=1-c),$(i).css("width",100*c+"%"),null!=a&&null!=r&&$(i).css("background-color",Math.lerpColors(c,a,r)),$(o).text("function"==typeof window.timeFormat?window.timeFormat(s-l):void 0),g>s&&p&&t(),setTimeout(function(){return n(e,1e3)})},$(function(){return $(".progress-time").each(function(){return n(this)})})}.call(this),function(){$(function(){return $('[data-toggle="tooltip"]').each(function(){var t,e;return t={html:!0,placement:"auto left"},e=$(this).data("trigger"),null!=e&&(t.trigger=e),$(this).tooltip(t)})})}.call(this),function(){$(function(){var t,e,n,i,a;return a={},$(".tutorial-step").popover({trigger:"manual",placement:"bottom"}),i=function(e){return null!=e?$(e.elements).bind("click",t).addClass("tutorial-active").first().popover("show"):void 0},t=function(){var e;return e=a[this.step.name].shift(),null!=e?($.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:this.step.name,stage:e.index},method:"POST"}),setTimeout(function(){return i(e)},500)):$.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:this.step.name,stage:this.step.index+1},method:"POST"}),$(this.step.elements).unbind("click",t).removeClass("tutorial-active").popover("hide")},n=function(t,n,i){var a,r,o,s,h,l,c,u,d,p;return i.stage<0?(d=$("<div></div>").addClass("modal fade"),h=$("<div></div>").addClass("modal-dialog"),s=$("<div></div>").addClass("modal-content"),u=$("<div></div>").addClass("modal-header"),a=$("<div></div>").addClass("modal-body"),l=$("<div></div>").addClass("modal-footer"),p=$("<h4></h4>").addClass("modal-title"),c=$("<div></div>").addClass("btn-group"),r=$("<div></div>").addClass("btn btn-success").attr("value","yes").text(i18n.yes),o=$("<div></div>").addClass("btn btn-danger").attr("value","no").text(i18n.no),$(r).click(function(){return $.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:n,active:1},method:"POST"}),$(d).modal("hide"),e(t,n,i)}),$(o).click(function(){return $.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:n,active:0},method:"POST"}),$(d).modal("hide")}),$(p).text(i.title),$(a).text(i.description),$(u).append(p),$(c).append(o).append(r),$(l).append(c),$(s).append(u).append(a).append(l),$(h).append(s),$(d).append(h),$("body").append(d),$(d).modal({backdrop:"static",show:!0,keyboard:!1})):e(t,n,i)},e=function(t,e,n){var r;return r=[],$(t).find(".tutorial-step").each(function(){var t,i;return i=null,t=$(this).data("tutorial-index"),t<n.stage?void 0:(null!=r[t]?i=r[t]:(i={elements:[],name:e,index:t},r[t]=i),i.elements.push(this),this.step=i)}),r=r.filter(function(t){return null!=t?!0:!1}),a[e]=r,i(r.shift())},$("[data-tutorial=true").each(function(){var t;return t=$(this).data("tutorial-name"),$.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:t},method:"GET",success:function(e){return function(i){return i.active?n(e,t,i):void 0}}(this)})})})}.call(this),function(){var t,e,n,i,a,r,o,s,h,l,c;window.format||(window.format={time:{day:"d",hour:"h",minute:"m",second:"s"}}),null==window.active&&(window.active=!1),$(window).focus(function(){return window.active=!0}),$(window).blur(function(){return window.active=!1}),$(window).resize(function(){return this.resizeTo&&clearTimeout(this.resizeTo),this.resizeTo=setTimeout(function(){return $(this).trigger("resized")},500)}),window.lpad||(window.lpad=function(t,e){var n,i,a,r;for(r="0",n=i=1,a=e;a>=1?a>=i:i>=a;n=a>=1?++i:--i)r+="0";return(r+t).slice(-1*e)}),l=function(t){return t.length>0?t+" ":t},h=function(t,e,n){return t=l(t),t+=t.length>0?window.lpad(e,2):e,t+n},window.timeFormat||(window.timeFormat=function(t){var e,n,i,a,r,o;return o="",n=new Date(1e3*t),e=n.getUTCDate()-1,i=n.getUTCHours(),a=n.getUTCMinutes(),r=n.getUTCSeconds(),e>0&&(o+=e+format.time.day),i>0&&(o=h(o,i,format.time.hour)),(i>0||a>0)&&(o=h(o,a,format.time.minute)),(i>0||a>0||r>0)&&(o=h(o,r,format.time.second)),o}),window.timeFormatShort||(window.timeFormatShort=function(t){var e,n,i,a,r,o;return o="",n=new Date(1e3*t),e=n.getUTCDate()-1,i=n.getUTCHours(),a=n.getUTCMinutes(),r=n.getUTCSeconds(),e>0?e+format.time.day:i>0?h(o,i,format.time.hour):a>0?h(o,a,format.time.minute):r>0?h(o,r,format.time.second):void 0}),r=!1,(t=window.location).refresh||(t.refresh=function(){return r?void 0:(r=!0,window.location.reload(!0))}),a=[],window.notify||(window.notify=function(t){return a.push(t)}),i=function(t){var e,n;if(null===t||"object"!=typeof t)return t;n=new t.constructor;for(e in t)n[e]=i(t[e]);return n},s=function(t,e){return console.log("P",t,e),setTimeout(function(){return console.log("S",t,e),$.notify(t,{placement:{from:"bottom"},mouse_over:"pause"})},1e3*e)},window.notifyShow||(window.notifyShow=function(){var t,e,n,i;if(window.active){for(t=e=0,n=a.length;n>e;t=++e)i=a[t],s($.extend({},i),t);return a=[]}}),$(window).focus(function(){return window.notifyShow()}),Math.clamp||(Math.clamp=function(t,e,n){return Math.max(Math.min(t,n),e)}),Math.lerp||(Math.lerp=function(t,e,n){return e*t+n*(1-t)}),Math.hexToRgb||(Math.hexToRgb=function(t){var e;return e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t),e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}),Math.rgbToHex||(Math.rgbToHex=function(t,e,n){return"#"+((1<<24)+(t<<16)+(e<<8)+n).toString(16).slice(1)}),Math.lerpColors||(Math.lerpColors=function(t,e,n){var i,a,r;return i=Math.hexToRgb(e),a=Math.hexToRgb(n),r={r:Math.round(Math.lerp(t,i.r,a.r)),g:Math.round(Math.lerp(t,i.g,a.g)),b:Math.round(Math.lerp(t,i.b,a.b))},Math.rgbToHex(r.r,r.g,r.b)}),c=function(){var t,e,n,i,a,r,o,s,h,l;return t=$(this).children(".progress-bar"),i=$(this).children(".progress-label"),r=$(t).data("min"),a=$(t).data("max"),e=$(t).data("ca"),n=$(t).data("cb"),o=Math.clamp($(t).data("now"),r,a),l=Boolean(null!=(h=$(t).data("reversed"))?h:!1),s=(o-r)/(a-r)*100,l&&(s=100-s),$(t).css("width",s+"%"),null!=e&&null!=n&&$(t).css("background-color",Math.lerpColors(s/100,e,n)),$(i).text(o+" / "+a)},$(function(){return $(".progress").each(function(){return this.update||(this.update=c)})}),o=function(t){var e=0,n=0,i=0,a=0,r=this;do e+=r.offsetLeft-r.scrollLeft,n+=r.offsetTop-r.scrollTop;while(r=r.offsetParent);return i=t.pageX-e,a=t.pageY-n,{x:i,y:a}},HTMLCanvasElement.prototype.relMouseCoords=o,function(){var t;return t=$.fn.show}(),(e=String.prototype).escape||(e.escape=function(){return this.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")}),(n=String.prototype).replaceAll||(n.replaceAll=function(t,e){return this.replace(new RegExp(t.escape(),"gi"),e)})}.call(this);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvYXBwLmNvZmZlZSIsImFwcC5qcyIsIi9zb3VyY2UvYXZhdGFyLmNvZmZlZSIsIi9zb3VyY2UvYmF0dGxlLmNvZmZlZSIsIi9zb3VyY2UvY2hhdC5jb2ZmZWUiLCIvc291cmNlL2Nsb2NrLmNvZmZlZSIsIi9zb3VyY2UvZGlhbG9nLmNvZmZlZSIsIi9zb3VyY2UvZW1vdGljb24uY29mZmVlIiwiL3NvdXJjZS9lcXVhbGl6ZXIuY29mZmVlIiwiL3NvdXJjZS9mb3JtLmNvZmZlZSIsIi9zb3VyY2UvaWVmaXguY29mZmVlIiwiL3NvdXJjZS9pbWFnZVByZXZpZXcuY29mZmVlIiwiL3NvdXJjZS9sYW5ndWFnZS5jb2ZmZWUiLCIvc291cmNlL25hdmZpeC5jb2ZmZWUiLCIvc291cmNlL3BsYW50YXRpb24uY29mZmVlIiwiL3NvdXJjZS9wbGF5ZXIuY29mZmVlIiwiL3NvdXJjZS9zcXVhcmUuY29mZmVlIiwiL3NvdXJjZS9zdGF0aXN0aWNzLmNvZmZlZSIsIi9zb3VyY2UvdGltZXIuY29mZmVlIiwiL3NvdXJjZS90b29sdGlwLmNvZmZlZSIsIi9zb3VyY2UvdHV0b3JpYWwuY29mZmVlIiwiL3NvdXJjZS91dGlscy5jb2ZmZWUiXSwibmFtZXMiOlsidGhpcyIsImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwicm91bmQiLCJ2YWx1ZSIsInByZWNpc2lvbiIsIm4iLCJwIiwiTWF0aCIsInBvdyIsImNhbGwiLCJjbGlja2VkIiwiJCIsInJlbW92ZUNsYXNzIiwidmFsIiwiZGF0YSIsImFkZENsYXNzIiwiY2xpY2siLCJmaXJzdCIsInRyaWdnZXIiLCJCYXR0bGUiLCJDaGFyYWN0ZXIiLCJjb25maWciLCJmb250U2l6ZSIsImJhckZvbnRTaXplIiwibmFtZUZvbnRTaXplIiwibWFyZ2luIiwiaW50ZXJ2YWwiLCJ0ZWFtIiwiaW1hZ2UiLCJJbWFnZSIsInNyYyIsImF2YXRhciIsIm9ubG9hZCIsIl90aGlzIiwibmFtZSIsImlkIiwibGV2ZWwiLCJoZWFsdGgiLCJtYXhIZWFsdGgiLCJwcm90b3R5cGUiLCJkcmF3IiwiY29udGV4dCIsInNpemUiLCJtZWFzdXJlIiwidGV4dCIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwiZHJhd0ltYWdlIiwiZm9udCIsImxpbmVXaWR0aCIsIm1lYXN1cmVUZXh0IiwiZmlsbFRleHQiLCJ3aWR0aCIsInN0cm9rZVRleHQiLCJlbGVtZW50IiwiY2FudmFzIiwiY2hpbGRyZW4iLCJnZXRDb250ZXh0IiwiYmF0dGxlTG9nIiwicGFyc2VKU09OIiwic3BlZWQiLCJ2aWV3IiwiaW5mbyIsIm5leHQiLCJsb2FkIiwiY2hhcmFjdGVyIiwiaiIsImsiLCJsZW4iLCJsZW4xIiwicmVmIiwicmVmMSIsImluZGV4IiwiY2hhcmFjdGVycyIsInN0YXRlIiwib2Zmc2V0IiwicGF1c2UiLCJldmVudCIsImRvY3VtZW50Iiwia2V5ZG93biIsImtleSIsImxlbmd0aCIsImFjdGlvbiIsImF0dGFja2VyIiwiZGVmZW5kZXIiLCJkcmF3Q2hhcmFjdGVycyIsImhhbGZXaWR0aCIsImhlaWdodCIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyZXN0b3JlIiwiZHJhd0luZm8iLCJibG9ja1NpemUiLCJoYWxmSGVpZ2h0Iiwic3RhckgiLCJzdGFyUGlrZXMiLCJzdGFyUmFkaXVzIiwic3RhclciLCJzdGFyV2lkdGgiLCJzdGFyWCIsInN0YXJZIiwidGV4dFgiLCJ0ZXh0WSIsInNjYWxlIiwiZHJhd1N0YXIiLCJwaWtlcyIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJpIiwicm90Iiwic3RlcCIsIngiLCJ5IiwiUEkiLCJiZWdpblBhdGgiLCJjb3MiLCJzaW4iLCJtb3ZlVG8iLCJsaW5lVG8iLCJmaWxsIiwic3Ryb2tlIiwiY2xvc2VQYXRoIiwiZ2V0RW5kVGV4dCIsImkxOG4iLCJiYXR0bGUiLCJ3aW4iLCJsb3NlIiwiZGVsdGEiLCJhbmltYXRlIiwiYXQiLCJtYXJrIiwibmV4dEFjdGlvbiIsIm5leHRBdHRhY2tlciIsIm5leHREZWZlbmRlciIsInBvc2l0aW9uIiwicHJldkFjdGlvbiIsInByZXZBdHRhY2tlciIsInByZXZEZWZlbmRlciIsImNsZWFyUmVjdCIsInR5cGUiLCJzdGFydEhlYWx0aCIsImVuZEhlYWx0aCIsIm1heCIsImRhbWFnZSIsImdsb2JhbEFscGhhIiwiY2xhbXAiLCJsZXJwIiwiY3JpdCIsImRvZGdlIiwibWluIiwiYiIsImNvb3JkcyIsImwiLCJyIiwidCIsInJlbE1vdXNlQ29vcmRzIiwid2hpY2giLCJyZXF1ZXN0RnJhbWUiLCJ0aW1lIiwibGFzdFRpbWUiLCJhY2N1bXVsYXRvciIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInN0YXJ0IiwiRGF0ZSIsImdldFRpbWUiLCJiaW5kIiwiZmlsdGVyIiwiQ2hhdCIsIm9wdGlvbnMiLCJvcHQiLCJleHRlbmQiLCJkZWZhdWx0cyIsIm1lc3NhZ2VVcmwiLCJwbGF5ZXJVcmwiLCJlbW90aWNvbnMiLCJFbW90aWNvbnMiLCJhbGxvd1NlbmQiLCJhbGxvd1JlY2VpdmUiLCJyZWNlaXZlRXh0cmEiLCJzZW5kRXh0cmEiLCJyZWNlaXZlTWV0aG9kIiwic2VuZE1ldGhvZCIsImlucHV0IiwiZmluZCIsIm91dHB1dCIsInNlbmRCdG4iLCJjbGVhckJ0biIsImVtb3RpY29uc0J0biIsInBvcG92ZXIiLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJvbktleSIsInNlbmQiLCJjbGVhcklucHV0IiwiY2xlYXJPdXRwdXQiLCJqb2luIiwiY29vbGRvd24iLCJzZW50IiwidG91Y2giLCJoaXN0b3J5IiwicmVjZWl2ZSIsImNvbW1hbmRzIiwiZW1vdGljb25VcmwiLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJjbGVhciIsImdldEVycm9yVGV4dCIsImFyZ3MiLCJ2IiwiY2hhdCIsImVycm9ycyIsInVua25vd24iLCJyZXBsYWNlIiwiZXJyb3IiLCJhbGVydCIsImFwcGVuZCIsImNvbW1hbmQiLCJmdW5jIiwibWF0Y2hlcyIsIm1lc3NhZ2UiLCJub3ciLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiYWpheCIsInVybCIsInN1Y2Nlc3MiLCJvblNlbnQiLCJkYXRhVHlwZSIsIm1ldGhvZCIsImNvbXBsZXRlIiwib25Db21wbGV0ZSIsIm9uUmVjZWl2ZWQiLCJlbXB0eSIsImdldE1lc3NhZ2UiLCJodG1sIiwiaW5zZXJ0IiwibmV3TWVzc2FnZSIsImF1dGhvciIsImNvbDEiLCJjb2wyIiwiZGl2MSIsImRpdjIiLCJyb3ciLCJhdHRyIiwiZ2V0UGxheWVyVXJsIiwibW9kaWZ5TWVzc2FnZSIsImFkZE1lc3NhZ2UiLCJzY3JvbGwiLCJjbGllbnRIZWlnaHQiLCJsYXN0IiwiaXMiLCJzdGF0dXMiLCJyZWFzb24iLCJyZXN1bHRzIiwicHVzaCIsInNldFRpbWVvdXQiLCJ1cGRhdGUiLCJlYWNoIiwicGFyc2VJbnQiLCJmZXdTZWNzIiwidGltZUZvcm1hdFNob3J0IiwiYWdvIiwidGltZUZvcm1hdCIsImRhdGUiLCJ0b1VUQ1N0cmluZyIsInRvIiwiZGlhbG9ncyIsInNob3ciLCJkaWFsb2ciLCJkaXNtaXNzaWJsZSIsIm1vZGFsIiwiYmFja2Ryb3AiLCJrZXlib2FyZCIsIm9uIiwiY291bnRlciIsInNldCIsIjspIiwiOkQiLCI6KCIsIjopIiwiQikiLCJPLm8iLCI6cCIsImVtb3RpY29uIiwicmVwbGFjZUFsbCIsImJ1dHRvbiIsInBsYWNlbWVudCIsInRpdGxlIiwiY29udGVudCIsImdldFBvcG92ZXJDb250ZW50IiwidGVtcGxhdGUiLCJjb250YWluZXIiLCJpbWciLCJhZnRlckxvYWRlZCIsImVxdWFsaXplIiwiZ2V0Q29sdW1ucyIsImdldFByZWZpeCIsImdldFNpemUiLCJ3aWR0aHMiLCJ4cyIsInNtIiwibWQiLCJwcmVmaXgiLCJyZXN1bHQiLCJvYmplY3QiLCJyZWdleHAiLCJSZWdFeHAiLCJjb2x1bW5zIiwic2VsZWN0b3IiLCJjb2wiLCJoZWlnaHRzIiwiaHMiLCJzdW0iLCJrZXlEb3duIiwia2V5VXAiLCJtb3VzZVdoZWVsIiwibnVtYmVyRGVjcmVhc2UiLCJudW1iZXJJbmNyZWFzZSIsInJhbmdlQ2hhbmdlZCIsImNoYW5nZSIsInJlZjIiLCJyZWYzIiwiY29uc29sZSIsImxvZyIsImRlbHRhWSIsInByZXZlbnREZWZhdWx0IiwiYWZ0ZXIiLCJiZWZvcmUiLCJwYXJlbnQiLCJrZXl1cCIsIm1vdXNlbW92ZSIsInZlbmRvciIsInZlbmRvcnMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY3VyclRpbWUiLCJ0aW1lVG9DYWxsIiwiY2xlYXJUaW1lb3V0IiwicHJldmlldyIsInBhdGgiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ0YXJnZXQiLCJmaWxlcyIsInNlbGVjdCIsImxhbmciLCJsb2NhdGlvbiIsImhyZWYiLCJuYXZmaXgiLCJjc3MiLCJyZXNpemUiLCJpbWFnZUZvckZyYW1lIiwicmVmcmVzaFBsYW50IiwiZnJhbWUiLCJwbGFudCIsImVuZCIsIndhdGVyaW5nIiwiZmxvb3IiLCJzbG90IiwicmVsYXRlZFRhcmdldCIsImxvYWRlZCIsIm5vdGlmeSIsInNldFByb2dyZXNzIiwic2V0VmFsdWUiLCJzZXRWYWx1ZXMiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwibGFzdFVwZGF0ZSIsIm5leHRVcGRhdGUiLCJiYXIiLCJiYXNlIiwiY2hpbGQiLCJ0aW1lciIsInNjb3BlIiwiaGVhbHRoVXBkYXRlIiwibmV4dEhlYWx0aFVwZGF0ZSIsImVuZXJneSIsIm1heEVuZXJneSIsImVuZXJneVVwZGF0ZSIsIm5leHRFbmVyZ3lVcGRhdGUiLCJ3YW50ZWQiLCJ3YW50ZWRVcGRhdGUiLCJuZXh0V2FudGVkVXBkYXRlIiwiZXhwZXJpZW5jZSIsIm1heEV4cGVyaWVuY2UiLCJwbGFudGF0b3JFeHBlcmllbmNlIiwicGxhbnRhdG9yTWF4RXhwZXJpZW5jZSIsInNtdWdnbGVyRXhwZXJpZW5jZSIsInNtdWdnbGVyTWF4RXhwZXJpZW5jZSIsImRlYWxlckV4cGVyaWVuY2UiLCJkZWFsZXJNYXhFeHBlcmllbmNlIiwiYm9keSIsInBsYXllciIsIiRhcHBseSIsInJlbG9hZCIsInJlZnJlc2giLCJhY3RpdmUiLCJub3RpZnlTaG93IiwiZm9jdXMiLCJzcXVhcmUiLCJjaGFuZ2VkIiwicmFuZG9tIiwicmFuZG9tSW4iLCJyb2xsIiwiY3VycmVudCIsImRpZmYiLCJsZWZ0Iiwib2xkIiwiaXNOYU4iLCJhcnJheSIsInBvaW50cyIsInJvbGxhYmxlIiwic3RhdGlzdGljIiwicmVmcmVzaGluZyIsImNhIiwiY2IiLCJsYWJlbCIsInBlcmNlbnQiLCJyZXZlcnNlZCIsInN0b3AiLCJCb29sZWFuIiwibGVycENvbG9ycyIsInRvb2x0aXAiLCJ0dXRvcmlhbHMiLCJlbGVtZW50cyIsInNoaWZ0Iiwic3RhZ2UiLCJ1bmJpbmQiLCJidG4xIiwiYnRuMiIsImZvb3RlciIsImdyb3VwIiwiaGVhZGVyIiwieWVzIiwibm8iLCJkZXNjcmlwdGlvbiIsInR1dG9yaWFsIiwiYmFzZTEiLCJiYXNlMiIsImNsb25lIiwibm90aWZpY2F0aW9ucyIsInNob3dOb3RpZnkiLCJ0aW1lU2VwYXJhdGUiLCJ1cGRhdGVQcm9ncmVzcyIsImZvcm1hdCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJibHVyIiwicmVzaXplVG8iLCJscGFkIiwicGFkZGluZyIsInplcm9lcyIsInNsaWNlIiwiZCIsImgiLCJtIiwicyIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwicHJvcHMiLCJvYmoiLCJ0ZW1wIiwiY29uc3RydWN0b3IiLCJmcm9tIiwibW91c2Vfb3ZlciIsIm5vdGlmaWNhdGlvbiIsImEiLCJoZXhUb1JnYiIsImhleCIsImV4ZWMiLCJnIiwicmdiVG9IZXgiLCJ0b1N0cmluZyIsImNjIiwidG90YWxPZmZzZXRYIiwidG90YWxPZmZzZXRZIiwiY2FudmFzWCIsImNhbnZhc1kiLCJjdXJyZW50RWxlbWVudCIsIm9mZnNldExlZnQiLCJzY3JvbGxMZWZ0Iiwib2Zmc2V0VG9wIiwib2Zmc2V0UGFyZW50IiwicGFnZVgiLCJwYWdlWSIsIkhUTUxDYW52YXNFbGVtZW50Iiwib2xkU2hvdyIsImZuIiwiU3RyaW5nIiwiZXNjYXBlIiwic2VhcmNoIl0sIm1hcHBpbmdzIjoiQ0FNQSxXQUFBQSxLQUFDQyxJQUFNQyxRQUFRQyxPQUFPLFdBSXRCSCxLQUFDQyxJQUFJRyxXQUFXLGlCQUFrQixTQUFDQyxHQ04vQixNRFNIQSxHQUFPQyxNQUFRLFNBQUNDLEVBQU9DLEdBRXRCLEdBQUFDLEdBQUFDLENDUEksT0RPSkEsR0FBQSxNQUFBRixFQUFJQSxFQUFZLEVBQ2hCQyxFQUFJRSxLQUFLQyxJQUFJLEdBQUlGLEdBRWpCQyxLQUFLTCxNQUFNQyxFQUFRRSxHQUFLQSxLQU0xQlQsS0FBQ0MsSUFBSUcsV0FBVyxtQkFBb0IsU0FBQ0MsUUNWbENRLEtBQUtiLE1DWlIsV0FBQSxHQUFBYyxFQUFBQSxHQUFVLFdEb0JOLE1DbkJIQyxHQUFFLFdBQVdDLFlBQVksVUFDekJELEVBQUUsV0FBV0UsSUFBSUYsRUFBRWYsTUFBTWtCLEtBQUssV0FDOUJILEVBQUVmLE1BQU1tQixTQUFTLFdBR2xCSixFQUFFLFdEa0JFLE1DakJIQSxHQUFFLFdBQVdLLE1BQU1OLEdBQVNPLFFBQVFDLFFBQVEsWURvQjFDVCxLQUFLYixNRTdCUixXQUFBLEdBQUF1QixHQUFBQyxFQUFBQyxDQUFBQSxJQUNDQyxTQUFVLEdBQ1ZDLFlBQWEsR0FDYkMsYUFBYyxHQUNkQyxPQUFRLEVBQ1JDLFNBQVUsSUFBTyxJQUlaTixFQUFBLFdBR1EsUUFBQUEsR0FBQ08sRUFBTWIsR0FFbkIsR0FBQWMsRUFBQUEsR0FBWSxHQUFBQyxPQUNaRCxFQUFNRSxJQUFNaEIsRUFBS2lCLE9BQ2pCSCxFQUFNSSxPQUFTLFNBQUFDLEdGZ0NULE1FaENTLFlGaUNQLE1FaENQQSxHQUFDRixPQUFTSCxJQURJaEMsTUFLZkEsS0FBQytCLEtBQU9BLEVBQ1IvQixLQUFDc0MsS0FBT3BCLEVBQUtvQixLQUNidEMsS0FBQ3VDLEdB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RUFBaUJ6ZSxJQUVyQixHQUNJcWUsSUFBZ0JJLEVBQWVDLFdBQWFELEVBQWVFLFdBQzNETCxHQUFnQkcsRUFBZUcsVUFBWUgsRUFBZXJTLGdCQUV4RHFTLEVBQWlCQSxFQUFlSSxhQUt0QyxPQUhBTixHQUFVcFosRUFBTTJaLE1BQVFULEVBQ3hCRyxFQUFVclosRUFBTTRaLE1BQVFULEdBRWhCalgsRUFBRWtYLEVBQVNqWCxFQUFFa1gsSW9CdG1EekJRLGtCQUFrQnJjLFVBQVVzSCxlQUFpQkEsRUFZN0MsV0FFQyxHQUFBZ1YsRXBCK2xERyxPb0IvbERIQSxHQUFVbGUsRUFBRW1lLEdBQUdoTyxTcEJ3bkRiMEssRW9CeGxESHVELE9BQU94YyxXQUFVeWMsU0FBQXhELEVBQUF3RCxPQUFXLFdwQnlsRHhCLE1vQnhsREhwZixNQUFLMk4sUUFBUSw4QkFBK0IsV3BCMmxEMUNrTyxFb0J2bERIc0QsT0FBT3hjLFdBQVV3UCxhQUFBMEosRUFBQTFKLFdBQWUsU0FBQ2tOLEVBQVExUixHcEJ3bERyQyxNb0J2bERIM04sTUFBSzJOLFFBQVksR0FBQThGLFFBQU80TCxFQUFPRCxTQUFVLE1BQU96UixNcEIwbEQ5QzlNLEtBQUtiIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcblxyXG5cclxuXHJcblxyXG5AYXBwID0gYW5ndWxhci5tb2R1bGUoJ2dhbWUnLCBbXSlcclxuXHJcblxyXG5cclxuQGFwcC5jb250cm9sbGVyKCdHYW1lQ29udHJvbGxlcicsICgkc2NvcGUpIC0+XHJcblxyXG5cclxuXHQkc2NvcGUucm91bmQgPSAodmFsdWUsIHByZWNpc2lvbikgLT5cclxuXHJcblx0XHRwID0gcHJlY2lzaW9uID8gMFxyXG5cdFx0biA9IE1hdGgucG93KDEwLCBwKVxyXG5cclxuXHRcdE1hdGgucm91bmQodmFsdWUgKiBuKSAvIG5cclxuXHJcbilcclxuXHJcblxyXG5cclxuQGFwcC5jb250cm9sbGVyKCdQbGF5ZXJDb250cm9sbGVyJywgKCRzY29wZSkgLT5cclxuXHJcblxyXG4pXHJcblxyXG4iLCIoZnVuY3Rpb24oKSB7XG4gIHRoaXMuYXBwID0gYW5ndWxhci5tb2R1bGUoJ2dhbWUnLCBbXSk7XG5cbiAgdGhpcy5hcHAuY29udHJvbGxlcignR2FtZUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICByZXR1cm4gJHNjb3BlLnJvdW5kID0gZnVuY3Rpb24odmFsdWUsIHByZWNpc2lvbikge1xuICAgICAgdmFyIG4sIHA7XG4gICAgICBwID0gcHJlY2lzaW9uICE9IG51bGwgPyBwcmVjaXNpb24gOiAwO1xuICAgICAgbiA9IE1hdGgucG93KDEwLCBwKTtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogbikgLyBuO1xuICAgIH07XG4gIH0pO1xuXG4gIHRoaXMuYXBwLmNvbnRyb2xsZXIoJ1BsYXllckNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHt9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgY2xpY2tlZDtcblxuICBjbGlja2VkID0gZnVuY3Rpb24oKSB7XG4gICAgJCgnLmF2YXRhcicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAkKCcjYXZhdGFyJykudmFsKCQodGhpcykuZGF0YSgnYXZhdGFyJykpO1xuICAgIHJldHVybiAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgfTtcblxuICAkKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkKCcuYXZhdGFyJykuY2xpY2soY2xpY2tlZCkuZmlyc3QoKS50cmlnZ2VyKCdjbGljaycpO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgQmF0dGxlLCBDaGFyYWN0ZXIsIGNvbmZpZztcblxuICBjb25maWcgPSB7XG4gICAgZm9udFNpemU6IDMwLFxuICAgIGJhckZvbnRTaXplOiAyMCxcbiAgICBuYW1lRm9udFNpemU6IDMwLFxuICAgIG1hcmdpbjogNSxcbiAgICBpbnRlcnZhbDogMTAwMCAvIDYwXG4gIH07XG5cbiAgQ2hhcmFjdGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIENoYXJhY3Rlcih0ZWFtLCBkYXRhKSB7XG4gICAgICB2YXIgaW1hZ2U7XG4gICAgICBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgaW1hZ2Uuc3JjID0gZGF0YS5hdmF0YXI7XG4gICAgICBpbWFnZS5vbmxvYWQgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5hdmF0YXIgPSBpbWFnZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgdGhpcy50ZWFtID0gdGVhbTtcbiAgICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgICAgIHRoaXMuaWQgPSBkYXRhLmlkO1xuICAgICAgdGhpcy5sZXZlbCA9IGRhdGEubGV2ZWw7XG4gICAgICB0aGlzLmhlYWx0aCA9IGRhdGEuaGVhbHRoO1xuICAgICAgdGhpcy5tYXhIZWFsdGggPSBkYXRhLm1heEhlYWx0aDtcbiAgICB9XG5cbiAgICBDaGFyYWN0ZXIucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgbWVhc3VyZSwgdGV4dDtcbiAgICAgIGlmICh0aGlzLnRlYW0gPT09ICdyZWQnKSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyMTcsIDgzLCA3OSwgMSknO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDIxNywgODMsIDc5LCAwLjQpJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSg1MSwgMTIyLCAxODMsIDEpJztcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSg1MSwgMTIyLCAxODMsIDAuNCknO1xuICAgICAgfVxuICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBzaXplLCBzaXplKTtcbiAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdCgwLCAwLCBzaXplLCBzaXplKTtcbiAgICAgIGlmICh0aGlzLmF2YXRhciAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMuYXZhdGFyLCBjb25maWcubWFyZ2luLCBjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLm1hcmdpbiAqIDIsIHNpemUgLSBjb25maWcubWFyZ2luICogMik7XG4gICAgICB9XG4gICAgICB0ZXh0ID0gdGhpcy5uYW1lICsgJyAoJyArIHRoaXMubGV2ZWwgKyAnKSc7XG4gICAgICBjb250ZXh0LmZvbnQgPSBjb25maWcubmFtZUZvbnRTaXplICsgJ3B4IFJvYm90byc7XG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJztcbiAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnIzAwMDAwMCc7XG4gICAgICBtZWFzdXJlID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KTtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgKHNpemUgLSBtZWFzdXJlLndpZHRoKSAvIDIsIGNvbmZpZy5uYW1lRm9udFNpemUpO1xuICAgICAgY29udGV4dC5zdHJva2VUZXh0KHRleHQsIChzaXplIC0gbWVhc3VyZS53aWR0aCkgLyAyLCBjb25maWcubmFtZUZvbnRTaXplKTtcbiAgICAgIGNvbnRleHQuZm9udCA9IGNvbmZpZy5iYXJGb250U2l6ZSArICdweCBSb2JvdG8nO1xuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNyknO1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjQpJztcbiAgICAgIGNvbnRleHQuZmlsbFJlY3QoY29uZmlnLm1hcmdpbiwgc2l6ZSAtIGNvbmZpZy5iYXJGb250U2l6ZSAtIGNvbmZpZy5tYXJnaW4sIHNpemUgLSBjb25maWcubWFyZ2luICogMiwgY29uZmlnLmJhckZvbnRTaXplKTtcbiAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdChjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC0gY29uZmlnLm1hcmdpbiwgc2l6ZSAtIGNvbmZpZy5tYXJnaW4gKiAyLCBjb25maWcuYmFyRm9udFNpemUpO1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgyMTcsIDgzLCA3OSwgMSknO1xuICAgICAgY29udGV4dC5maWxsUmVjdChjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC0gY29uZmlnLm1hcmdpbiwgKHNpemUgLSBjb25maWcubWFyZ2luICogMikgKiAodGhpcy5oZWFsdGggLyB0aGlzLm1heEhlYWx0aCksIGNvbmZpZy5iYXJGb250U2l6ZSk7XG4gICAgICB0ZXh0ID0gTWF0aC5yb3VuZCh0aGlzLmhlYWx0aCkgKyAnIC8gJyArIHRoaXMubWF4SGVhbHRoO1xuICAgICAgbWVhc3VyZSA9IGNvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjMDAwMDAwJztcbiAgICAgIHJldHVybiBjb250ZXh0LmZpbGxUZXh0KHRleHQsIChzaXplIC0gbWVhc3VyZS53aWR0aCkgLyAyLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC8gMik7XG4gICAgfTtcblxuICAgIHJldHVybiBDaGFyYWN0ZXI7XG5cbiAgfSkoKTtcblxuICBCYXR0bGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgQmF0dGxlLnByb3RvdHlwZS5zcGVlZCA9IHtcbiAgICAgIHZpZXc6IDMuMCxcbiAgICAgIGluZm86IDMuMCxcbiAgICAgIG5leHQ6IDMuMFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBCYXR0bGUoZWxlbWVudCkge1xuICAgICAgdGhpcy5jYW52YXMgPSAkKGVsZW1lbnQpLmNoaWxkcmVuKCdjYW52YXMnKVswXTtcbiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICB0aGlzLmJhdHRsZUxvZyA9ICQucGFyc2VKU09OKCQoZWxlbWVudCkuY2hpbGRyZW4oJy5iYXR0bGUtbG9nJykuZmlyc3QoKS50ZXh0KCkpO1xuICAgIH1cblxuICAgIEJhdHRsZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNoYXJhY3RlciwgZGF0YSwgaiwgaywgbGVuLCBsZW4xLCByZWYsIHJlZjE7XG4gICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgIHRoaXMuY2hhcmFjdGVycyA9IFtdO1xuICAgICAgdGhpcy5zdGF0ZSA9ICd2aWV3JztcbiAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgIHRoaXMucGF1c2UgPSBmYWxzZTtcbiAgICAgICQodGhpcy5jYW52YXMpLmNsaWNrKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuY2xpY2soZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgJChkb2N1bWVudCkua2V5ZG93bigoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmtleShldmVudCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICByZWYgPSB0aGlzLmJhdHRsZUxvZ1sndGVhbXMnXVsncmVkJ107XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgZGF0YSA9IHJlZltqXTtcbiAgICAgICAgY2hhcmFjdGVyID0gbmV3IENoYXJhY3RlcigncmVkJywgZGF0YSk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyc1tjaGFyYWN0ZXIuaWRdID0gY2hhcmFjdGVyO1xuICAgICAgfVxuICAgICAgcmVmMSA9IHRoaXMuYmF0dGxlTG9nWyd0ZWFtcyddWydibHVlJ107XG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgZGF0YSA9IHJlZjFba107XG4gICAgICAgIGNoYXJhY3RlciA9IG5ldyBDaGFyYWN0ZXIoJ2JsdWUnLCBkYXRhKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzW2NoYXJhY3Rlci5pZF0gPSBjaGFyYWN0ZXI7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGNvbmZpZy5mb250U2l6ZSArICdweCBSb2JvdG8nO1xuICAgICAgdGhpcy5hY3Rpb24gPSB0aGlzLmJhdHRsZUxvZ1snbG9nJ11bdGhpcy5pbmRleF07XG4gICAgICB0aGlzLmF0dGFja2VyID0gdGhpcy5jaGFyYWN0ZXJzW3RoaXMuYWN0aW9uLmF0dGFja2VyXTtcbiAgICAgIHRoaXMuZGVmZW5kZXIgPSB0aGlzLmNoYXJhY3RlcnNbdGhpcy5hY3Rpb24uZGVmZW5kZXJdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIEJhdHRsZS5wcm90b3R5cGUuZHJhd0NoYXJhY3RlcnMgPSBmdW5jdGlvbihhdHRhY2tlciwgZGVmZW5kZXIpIHtcbiAgICAgIHZhciBoYWxmV2lkdGgsIHNpemU7XG4gICAgICBzaXplID0gdGhpcy5jYW52YXMuaGVpZ2h0ICogMC42O1xuICAgICAgaGFsZldpZHRoID0gdGhpcy5jYW52YXMud2lkdGggLyAyO1xuICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgIHRoaXMuY29udGV4dC50cmFuc2xhdGUoKGhhbGZXaWR0aCAtIHNpemUpIC8gMiwgKHRoaXMuY2FudmFzLmhlaWdodCAtIHNpemUpIC8gMik7XG4gICAgICBhdHRhY2tlci5kcmF3KHRoaXMuY29udGV4dCwgc2l6ZSk7XG4gICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgIHRoaXMuY29udGV4dC50cmFuc2xhdGUoKGhhbGZXaWR0aCAtIHNpemUpIC8gMiArIGhhbGZXaWR0aCwgKHRoaXMuY2FudmFzLmhlaWdodCAtIHNpemUpIC8gMik7XG4gICAgICBkZWZlbmRlci5kcmF3KHRoaXMuY29udGV4dCwgc2l6ZSk7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5kcmF3SW5mbyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHZhciBibG9ja1NpemUsIGhhbGZIZWlnaHQsIGhhbGZXaWR0aCwgbWVhc3VyZSwgc3RhckgsIHN0YXJQaWtlcywgc3RhclJhZGl1cywgc3RhclcsIHN0YXJXaWR0aCwgc3RhclgsIHN0YXJZLCB0ZXh0WCwgdGV4dFk7XG4gICAgICBoYWxmV2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aCAvIDI7XG4gICAgICBoYWxmSGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMjtcbiAgICAgIGJsb2NrU2l6ZSA9IHRoaXMuY2FudmFzLmhlaWdodCAqIDAuNjtcbiAgICAgIHN0YXJSYWRpdXMgPSA1MDtcbiAgICAgIHN0YXJXaWR0aCA9IHN0YXJSYWRpdXMgKiAyO1xuICAgICAgc3RhclggPSBoYWxmV2lkdGggKyAoYmxvY2tTaXplICsgc3RhclJhZGl1cykgLyAyO1xuICAgICAgc3RhclkgPSBoYWxmSGVpZ2h0O1xuICAgICAgc3RhclcgPSAoYmxvY2tTaXplICogMC43KSAvIHN0YXJXaWR0aDtcbiAgICAgIHN0YXJIID0gMS4yO1xuICAgICAgc3RhclBpa2VzID0gMTM7XG4gICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGNvbmZpZy5mb250U2l6ZSArICdweCBSb2JvdG8nO1xuICAgICAgbWVhc3VyZSA9IHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KTtcbiAgICAgIHRleHRYID0gc3RhclggLSBtZWFzdXJlLndpZHRoIC8gMjtcbiAgICAgIHRleHRZID0gaGFsZkhlaWdodDtcbiAgICAgIHRoaXMuY29udGV4dC5zYXZlKCk7XG4gICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gMjtcbiAgICAgIHRoaXMuY29udGV4dC50cmFuc2xhdGUoc3RhclgsIHN0YXJZKTtcbiAgICAgIHRoaXMuY29udGV4dC5zY2FsZShzdGFyVywgc3RhckgpO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJztcbiAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9ICcjMDAwMDAwJztcbiAgICAgIHRoaXMuZHJhd1N0YXIoc3RhclBpa2VzLCBzdGFyUmFkaXVzICogMC42LCBzdGFyUmFkaXVzKTtcbiAgICAgIHRoaXMuY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICB0aGlzLmNvbnRleHQuc2F2ZSgpO1xuICAgICAgdGhpcy5jb250ZXh0LnRyYW5zbGF0ZSh0ZXh0WCwgdGV4dFkpO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICcjMDAwMDAwJztcbiAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0ZXh0LCAwLCAwKTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuICAgIH07XG5cbiAgICBCYXR0bGUucHJvdG90eXBlLmRyYXdTdGFyID0gZnVuY3Rpb24ocGlrZXMsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cykge1xuICAgICAgdmFyIGksIGosIHJlZiwgcm90LCBzdGVwLCB4LCB5O1xuICAgICAgcm90ID0gTWF0aC5QSSAvIDIgKiAzO1xuICAgICAgc3RlcCA9IE1hdGguUEkgLyBwaWtlcztcbiAgICAgIHRoaXMuY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIHggPSBNYXRoLmNvcyhyb3QpICogb3V0ZXJSYWRpdXM7XG4gICAgICB5ID0gTWF0aC5zaW4ocm90KSAqIG91dGVyUmFkaXVzO1xuICAgICAgdGhpcy5jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgIHJvdCArPSBzdGVwO1xuICAgICAgZm9yIChpID0gaiA9IDEsIHJlZiA9IHBpa2VzOyAxIDw9IHJlZiA/IGogPD0gcmVmIDogaiA+PSByZWY7IGkgPSAxIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgICB4ID0gTWF0aC5jb3Mocm90KSAqIGlubmVyUmFkaXVzO1xuICAgICAgICB5ID0gTWF0aC5zaW4ocm90KSAqIGlubmVyUmFkaXVzO1xuICAgICAgICB0aGlzLmNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICByb3QgKz0gc3RlcDtcbiAgICAgICAgeCA9IE1hdGguY29zKHJvdCkgKiBvdXRlclJhZGl1cztcbiAgICAgICAgeSA9IE1hdGguc2luKHJvdCkgKiBvdXRlclJhZGl1cztcbiAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgcm90ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRleHQubGluZVRvKDAsIC1vdXRlclJhZGl1cyk7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xuICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5nZXRFbmRUZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5iYXR0bGVMb2dbJ3dpbiddKSB7XG4gICAgICAgIHJldHVybiBpMThuLmJhdHRsZS53aW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaTE4bi5iYXR0bGUubG9zZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZGVsdGEpIHtcbiAgICAgIHZhciBhY3Rpb24sIGFuaW1hdGUsIGF0LCBhdHRhY2tlciwgZGVmZW5kZXIsIGhlaWdodCwgaSwgaiwgbGVuLCBtYXJrLCBtZWFzdXJlLCBuZXh0QWN0aW9uLCBuZXh0QXR0YWNrZXIsIG5leHREZWZlbmRlciwgcG9zaXRpb24sIHByZXZBY3Rpb24sIHByZXZBdHRhY2tlciwgcHJldkRlZmVuZGVyLCByZWYsIHRleHQsIHdpZHRoO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJztcbiAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgICB0aGlzLm9mZnNldCArPSB0aGlzLnNwZWVkW3RoaXMuc3RhdGVdICogZGVsdGE7XG4gICAgICBhbmltYXRlID0gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAndmlldycgJiYgYW5pbWF0ZSkge1xuICAgICAgICBhY3Rpb24gPSB0aGlzLmJhdHRsZUxvZ1snbG9nJ11bdGhpcy5pbmRleF07XG4gICAgICAgIGF0dGFja2VyID0gdGhpcy5jaGFyYWN0ZXJzW2FjdGlvbi5hdHRhY2tlcl07XG4gICAgICAgIGRlZmVuZGVyID0gdGhpcy5jaGFyYWN0ZXJzW2FjdGlvbi5kZWZlbmRlcl07XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICBkZWZlbmRlci5oZWFsdGggPSBhY3Rpb24uaGVhbHRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0NoYXJhY3RlcnMoYXR0YWNrZXIsIGRlZmVuZGVyKTtcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0ID4gMS4wICYmICF0aGlzLnBhdXNlKSB7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgPSAwLjA7XG4gICAgICAgICAgZGVmZW5kZXIuc3RhcnRIZWFsdGggPSBkZWZlbmRlci5oZWFsdGg7XG4gICAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnaGl0Jykge1xuICAgICAgICAgICAgZGVmZW5kZXIuZW5kSGVhbHRoID0gTWF0aC5tYXgoZGVmZW5kZXIuaGVhbHRoIC0gYWN0aW9uLmRhbWFnZSwgMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmVuZGVyLmVuZEhlYWx0aCA9IGRlZmVuZGVyLmhlYWx0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9ICdpbmZvJztcbiAgICAgICAgfVxuICAgICAgICBhbmltYXRlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ2luZm8nICYmIGFuaW1hdGUpIHtcbiAgICAgICAgYWN0aW9uID0gdGhpcy5iYXR0bGVMb2dbJ2xvZyddW3RoaXMuaW5kZXhdO1xuICAgICAgICBhdHRhY2tlciA9IHRoaXMuY2hhcmFjdGVyc1thY3Rpb24uYXR0YWNrZXJdO1xuICAgICAgICBkZWZlbmRlciA9IHRoaXMuY2hhcmFjdGVyc1thY3Rpb24uZGVmZW5kZXJdO1xuICAgICAgICB0aGlzLmRyYXdDaGFyYWN0ZXJzKGF0dGFja2VyLCBkZWZlbmRlcik7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCA8PSAxLjApIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgICBkZWZlbmRlci5oZWFsdGggPSBkZWZlbmRlci5zdGFydEhlYWx0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5vZmZzZXQgPD0gMi4wKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSAxLjA7XG4gICAgICAgICAgICBpID0gTWF0aC5jbGFtcCh0aGlzLm9mZnNldCAtIDEuMCwgMCwgMSk7XG4gICAgICAgICAgICBkZWZlbmRlci5oZWFsdGggPSBNYXRoLmxlcnAoaSwgZGVmZW5kZXIuZW5kSGVhbHRoLCBkZWZlbmRlci5zdGFydEhlYWx0aCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmVuZGVyLmhlYWx0aCA9IGRlZmVuZGVyLmVuZEhlYWx0aDtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IE1hdGgubWF4KDMuMCAtIHRoaXMub2Zmc2V0LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0ID4gNC4wKSB7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgPSAwLjA7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9ICduZXh0JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdoaXQnKSB7XG4gICAgICAgICAgdGV4dCA9IGFjdGlvbi5kYW1hZ2U7XG4gICAgICAgICAgaWYgKGFjdGlvbi5jcml0KSB7XG4gICAgICAgICAgICB0ZXh0ICs9ICchJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dCA9IGkxOG4uYmF0dGxlLmRvZGdlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0luZm8odGV4dCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgICAgICAgYW5pbWF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09ICduZXh0JyAmJiBhbmltYXRlKSB7XG4gICAgICAgIHByZXZBY3Rpb24gPSB0aGlzLmJhdHRsZUxvZ1snbG9nJ11bdGhpcy5pbmRleF07XG4gICAgICAgIG5leHRBY3Rpb24gPSB0aGlzLmJhdHRsZUxvZ1snbG9nJ11bdGhpcy5pbmRleCArIDFdO1xuICAgICAgICBwcmV2QXR0YWNrZXIgPSB0aGlzLmNoYXJhY3RlcnNbcHJldkFjdGlvbi5hdHRhY2tlcl07XG4gICAgICAgIHByZXZEZWZlbmRlciA9IHRoaXMuY2hhcmFjdGVyc1twcmV2QWN0aW9uLmRlZmVuZGVyXTtcbiAgICAgICAgcG9zaXRpb24gPSAodGhpcy5jYW52YXMuaGVpZ2h0IC8gMikgKiB0aGlzLm9mZnNldDtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnRyYW5zbGF0ZSgwLCAtcG9zaXRpb24pO1xuICAgICAgICB0aGlzLmRyYXdDaGFyYWN0ZXJzKHByZXZBdHRhY2tlciwgcHJldkRlZmVuZGVyKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnRyYW5zbGF0ZSgwLCB0aGlzLmNhbnZhcy5oZWlnaHQgLSBwb3NpdGlvbik7XG4gICAgICAgIGlmIChuZXh0QWN0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICBuZXh0QXR0YWNrZXIgPSB0aGlzLmNoYXJhY3RlcnNbbmV4dEFjdGlvbi5hdHRhY2tlcl07XG4gICAgICAgICAgbmV4dERlZmVuZGVyID0gdGhpcy5jaGFyYWN0ZXJzW25leHRBY3Rpb24uZGVmZW5kZXJdO1xuICAgICAgICAgIGlmIChuZXh0QWN0aW9uLnR5cGUgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICBuZXh0RGVmZW5kZXIuaGVhbHRoID0gbmV4dEFjdGlvbi5oZWFsdGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZHJhd0NoYXJhY3RlcnMobmV4dEF0dGFja2VyLCBuZXh0RGVmZW5kZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSB0aGlzLmdldEVuZFRleHQoKTtcbiAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gJyMwMDAwMDAnO1xuICAgICAgICAgIG1lYXN1cmUgPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRleHQsICh0aGlzLmNhbnZhcy53aWR0aCAtIG1lYXN1cmUud2lkdGgpIC8gMiwgKHRoaXMuY2FudmFzLmhlaWdodCAtIDE1KSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCA+IDIuMCkge1xuICAgICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgICB0aGlzLm9mZnNldCA9IDAuMDtcbiAgICAgICAgICBpZiAobmV4dEFjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3ZpZXcnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ2VuZCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFuaW1hdGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnZW5kJyAmJiBhbmltYXRlKSB7XG4gICAgICAgIHRleHQgPSB0aGlzLmdldEVuZFRleHQoKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwLjA7XG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSAnIzAwMDAwMCc7XG4gICAgICAgIG1lYXN1cmUgPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0ZXh0LCAodGhpcy5jYW52YXMud2lkdGggLSBtZWFzdXJlLndpZHRoKSAvIDIsICh0aGlzLmNhbnZhcy5oZWlnaHQgLSAxNSkgLyAyKTtcbiAgICAgICAgYW5pbWF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgd2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aCAtIDQ7XG4gICAgICBoZWlnaHQgPSB0aGlzLmNhbnZhcy5oZWlnaHQgLSAyO1xuICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNyknO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNCknO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDIsIGhlaWdodCAtIDIwLCB3aWR0aCwgMjApO1xuICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZVJlY3QoMiwgaGVpZ2h0IC0gMjAsIHdpZHRoLCAyMCk7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gJyM1QkMwREUnO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDIsIGhlaWdodCAtIDIwLCB3aWR0aCAqIChNYXRoLm1pbih0aGlzLmluZGV4IC8gKHRoaXMuYmF0dGxlTG9nWydsb2cnXS5sZW5ndGggLSAxKSwgMSkpLCAyMCk7XG4gICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gNTtcbiAgICAgIHJlZiA9IHRoaXMuYmF0dGxlTG9nWydtYXJrcyddO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIG1hcmsgPSByZWZbal07XG4gICAgICAgIGlmIChtYXJrLnR5cGUgPT09ICdmYWludGVkJykge1xuICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9ICcjRDk1MzRGJztcbiAgICAgICAgfVxuICAgICAgICBhdCA9IChtYXJrLmF0IC8gKHRoaXMuYmF0dGxlTG9nWydsb2cnXS5sZW5ndGggLSAxKSkgKiB3aWR0aDtcbiAgICAgICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLmNvbnRleHQubW92ZVRvKGF0IC0gdGhpcy5jb250ZXh0LmxpbmVXaWR0aCAvIDIgKyAyLCBoZWlnaHQgLSAyMCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5saW5lVG8oYXQgLSB0aGlzLmNvbnRleHQubGluZVdpZHRoIC8gMiArIDIsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuICAgIH07XG5cbiAgICBCYXR0bGUucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBiLCBjb29yZHMsIGwsIHIsIHQsIHgsIHk7XG4gICAgICBjb29yZHMgPSB0aGlzLmNhbnZhcy5yZWxNb3VzZUNvb3JkcyhldmVudCk7XG4gICAgICB4ID0gY29vcmRzLng7XG4gICAgICB5ID0gY29vcmRzLnk7XG4gICAgICBsID0gMjtcbiAgICAgIHIgPSBsICsgdGhpcy5jYW52YXMud2lkdGggLSA0O1xuICAgICAgYiA9IHRoaXMuY2FudmFzLmhlaWdodCAtIDI7XG4gICAgICB0ID0gYiAtIDIwO1xuICAgICAgaWYgKHggPj0gbCAmJiB4IDw9IHIgJiYgeSA+PSB0ICYmIHkgPD0gYikge1xuICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5yb3VuZCgoeCAtIGwpIC8gKHIgLSBsKSAqICh0aGlzLmJhdHRsZUxvZ1snbG9nJ10ubGVuZ3RoIC0gMSkpO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ3ZpZXcnO1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgPSAwLjA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJhdHRsZS5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgdGhpcy5wYXVzZSA9ICF0aGlzLnBhdXNlO1xuICAgICAgfVxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAzNykge1xuICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5tYXgodGhpcy5pbmRleCAtIDEsIDApO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDEuMDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICd2aWV3JztcbiAgICAgIH1cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gMzkpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IE1hdGgubWluKHRoaXMuaW5kZXggKyAxLCB0aGlzLmJhdHRsZUxvZ1snbG9nJ10ubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMS4wO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9ICd2aWV3JztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5yZXF1ZXN0RnJhbWUgPSBmdW5jdGlvbih0aW1lKSB7XG4gICAgICB2YXIgZGVsdGE7XG4gICAgICBkZWx0YSA9IE1hdGgubWF4KHRpbWUgLSB0aGlzLmxhc3RUaW1lLCAwKTtcbiAgICAgIHRoaXMubGFzdFRpbWUgPSB0aW1lO1xuICAgICAgdGhpcy5hY2N1bXVsYXRvciArPSBkZWx0YTtcbiAgICAgIHdoaWxlICh0aGlzLmFjY3VtdWxhdG9yID49IGNvbmZpZy5pbnRlcnZhbCkge1xuICAgICAgICB0aGlzLmFjY3VtdWxhdG9yIC09IGNvbmZpZy5pbnRlcnZhbDtcbiAgICAgICAgdGhpcy5kcmF3KGNvbmZpZy5pbnRlcnZhbCAvIDEwMDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3RGcmFtZSh0aW1lKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMubG9hZCgpKSB7XG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5hY2N1bXVsYXRvciA9IDAuMDtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdEZyYW1lKHRoaXMubGFzdFRpbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQmF0dGxlO1xuXG4gIH0pKCk7XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJCgnLmJhdHRsZScpLmJpbmQoJ3Nob3cnLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiYXR0bGU7XG4gICAgICBiYXR0bGUgPSBuZXcgQmF0dGxlKHRoaXMpO1xuICAgICAgcmV0dXJuIGJhdHRsZS5zdGFydCgpO1xuICAgIH0pLmZpbHRlcignOnZpc2libGUnKS50cmlnZ2VyKCdzaG93Jyk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHRoaXMuQ2hhdCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgY29tbWFuZHMsIGRlZmF1bHRzO1xuXG4gICAgZGVmYXVsdHMgPSB7XG4gICAgICBtZXNzYWdlVXJsOiBudWxsLFxuICAgICAgcGxheWVyVXJsOiBudWxsLFxuICAgICAgZW1vdGljb25Vcmw6IG51bGwsXG4gICAgICBpbnRlcnZhbDogMixcbiAgICAgIGhpc3Rvcnk6IDAsXG4gICAgICBtaW5MZW5ndGg6IDEsXG4gICAgICBtYXhMZW5ndGg6IDUxMixcbiAgICAgIGNvb2xkb3duOiA2MCxcbiAgICAgIGpvaW46IDEyMCxcbiAgICAgIGFsbG93U2VuZDogdHJ1ZSxcbiAgICAgIGFsbG93UmVjZWl2ZTogdHJ1ZSxcbiAgICAgIHNlbmRFeHRyYToge30sXG4gICAgICByZWNlaXZlRXh0cmE6IHt9LFxuICAgICAgc2VuZE1ldGhvZDogJ1BPU1QnLFxuICAgICAgcmVjZWl2ZU1ldGhvZDogJ0dFVCdcbiAgICB9O1xuXG4gICAgY29tbWFuZHMgPSB7XG4gICAgICAnY2xlYXInOiAnY2xlYXJPdXRwdXQnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENoYXQoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIG9wdDtcbiAgICAgIG9wdCA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICB0aGlzLm1lc3NhZ2VVcmwgPSBvcHQubWVzc2FnZVVybDtcbiAgICAgIHRoaXMucGxheWVyVXJsID0gb3B0LnBsYXllclVybDtcbiAgICAgIHRoaXMuZW1vdGljb25zID0gbmV3IEVtb3RpY29ucygpO1xuICAgICAgdGhpcy5hbGxvd1NlbmQgPSBvcHQuYWxsb3dTZW5kO1xuICAgICAgdGhpcy5hbGxvd1JlY2VpdmUgPSBvcHQuYWxsb3dSZWNlaXZlO1xuICAgICAgdGhpcy5yZWNlaXZlRXh0cmEgPSBvcHQucmVjZWl2ZUV4dHJhO1xuICAgICAgdGhpcy5zZW5kRXh0cmEgPSBvcHQuc2VuZEV4dHJhO1xuICAgICAgdGhpcy5yZWNlaXZlTWV0aG9kID0gb3B0LnJlY2VpdmVNZXRob2Q7XG4gICAgICB0aGlzLnNlbmRNZXRob2QgPSBvcHQuc2VuZE1ldGhvZDtcbiAgICAgIHRoaXMuaW5wdXQgPSAkKGVsZW1lbnQpLmZpbmQoJy5pbnB1dCcpO1xuICAgICAgdGhpcy5vdXRwdXQgPSAkKGVsZW1lbnQpLmZpbmQoJy5vdXRwdXQnKTtcbiAgICAgIHRoaXMuc2VuZEJ0biA9ICQoZWxlbWVudCkuZmluZCgnLnNlbmQnKTtcbiAgICAgIHRoaXMuY2xlYXJCdG4gPSAkKGVsZW1lbnQpLmZpbmQoJy5jbGVhcicpO1xuICAgICAgdGhpcy5lbW90aWNvbnNCdG4gPSAkKGVsZW1lbnQpLmZpbmQoJy5lbW90aWNvbnMnKTtcbiAgICAgIHRoaXMuZW1vdGljb25zLnBvcG92ZXIodGhpcy5lbW90aWNvbnNCdG4sIHRoaXMuaW5wdXQpO1xuICAgICAgdGhpcy5vdXRwdXRbMF0uc2Nyb2xsVG9wID0gdGhpcy5vdXRwdXRbMF0uc2Nyb2xsSGVpZ2h0O1xuICAgICAgJCh0aGlzLmlucHV0KS5rZXlkb3duKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMub25LZXkoZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgJCh0aGlzLnNlbmRCdG4pLmNsaWNrKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuc2VuZCgpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5jbGVhcklucHV0KCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICAkKHRoaXMuY2xlYXJCdG4pLmNsaWNrKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmNsZWFyT3V0cHV0KCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICB0aGlzLmludGVydmFsID0gb3B0LmludGVydmFsO1xuICAgICAgdGhpcy5qb2luID0gb3B0LmpvaW47XG4gICAgICB0aGlzLmNvb2xkb3duID0gb3B0LmNvb2xkb3duO1xuICAgICAgdGhpcy5zZW50ID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCkgLSB0aGlzLmNvb2xkb3duO1xuICAgICAgdGhpcy50b3VjaCgpO1xuICAgICAgdGhpcy50aW1lID0gTWF0aC5tYXgodGhpcy50aW1lIC0gb3B0Lmhpc3RvcnksIDApO1xuICAgICAgdGhpcy5yZWNlaXZlKCk7XG4gICAgfVxuXG4gICAgQ2hhdC5wcm90b3R5cGUuZ2V0RXJyb3JUZXh0ID0gZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgdmFyIGssIHJlZiwgdGV4dCwgdjtcbiAgICAgIHRleHQgPSAocmVmID0gaTE4bi5jaGF0LmVycm9yc1tuYW1lXSkgIT0gbnVsbCA/IHJlZiA6IGkxOG4uY2hhdC5lcnJvcnMudW5rbm93bjtcbiAgICAgIGlmICgoYXJncyAhPSBudWxsKSAmJiB0eXBlb2YgYXJncyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChrIGluIGFyZ3MpIHtcbiAgICAgICAgICB2ID0gYXJnc1trXTtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCc6JyArIGssIHYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICB2YXIgYWxlcnQ7XG4gICAgICBhbGVydCA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ2FsZXJ0JykuYWRkQ2xhc3MoJ2FsZXJ0LWRhbmdlcicpLnRleHQodGhpcy5nZXRFcnJvclRleHQobmFtZSwgYXJncykpO1xuICAgICAgcmV0dXJuICQodGhpcy5vdXRwdXQpLmFwcGVuZChhbGVydCk7XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLmFsZXJ0ID0gZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgcmV0dXJuIGFsZXJ0KHRoaXMuZ2V0RXJyb3JUZXh0KG5hbWUsIGFyZ3MpKTtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUudG91Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRpbWUgPSBNYXRoLnJvdW5kKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbW1hbmQsIGRhdGEsIGZ1bmMsIGssIG1hdGNoZXMsIG1lc3NhZ2UsIG5vdywgdjtcbiAgICAgIG5vdyA9IE1hdGgucm91bmQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApO1xuICAgICAgbWVzc2FnZSA9ICQodGhpcy5pbnB1dCkudmFsKCk7XG4gICAgICBtYXRjaGVzID0gbWVzc2FnZS5tYXRjaCgvXlxcLyhcXHcrKS9pKTtcbiAgICAgIGlmICgobWF0Y2hlcyAhPSBudWxsKSAmJiAobWF0Y2hlc1sxXSAhPSBudWxsKSkge1xuICAgICAgICBjb21tYW5kID0gbWF0Y2hlc1sxXTtcbiAgICAgICAgZm9yIChrIGluIGNvbW1hbmRzKSB7XG4gICAgICAgICAgdiA9IGNvbW1hbmRzW2tdO1xuICAgICAgICAgIGlmIChjb21tYW5kLnRvTG93ZXJDYXNlKCkgPT09IGsudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXNbdl07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgZnVuYy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXJyb3IoJ2NtZE5vdEZvdW5kJywge1xuICAgICAgICAgICduYW1lJzogY29tbWFuZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWxsb3dTZW5kKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmxlbmd0aCA8IHRoaXMubWluTGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5hbGVydCgndG9vU2hvcnQnLCB7XG4gICAgICAgICAgICAnbWluJzogdGhpcy5taW5MZW5ndGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoID4gdGhpcy5tYXhMZW5ndGgpIHtcbiAgICAgICAgICBhbGVydCgndG9vTG9uZycsIHtcbiAgICAgICAgICAgICdtYXgnOiB0aGlzLm1heExlbmd0aFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZW50ICsgdGhpcy5jb29sZG93biA+IG5vdykge1xuICAgICAgICAgIHRoaXMuYWxlcnQoJ2Nvb2xkb3duJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSAkLmV4dGVuZCh7fSwgdGhpcy5zZW5kRXh0cmEsIHtcbiAgICAgICAgICBtZXNzYWdlOiAkKHRoaXMuaW5wdXQpLnZhbCgpXG4gICAgICAgIH0pO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogdGhpcy5tZXNzYWdlVXJsLFxuICAgICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uU2VudChkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcyksXG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgIG1ldGhvZDogdGhpcy5zZW5kTWV0aG9kXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlbnQgPSBub3c7XG4gICAgICAgIHJldHVybiAkKHRoaXMuc2VuZEJ0bikuZGF0YSgndGltZScsIHRoaXMuc2VudCArIHRoaXMuY29vbGRvd24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoJ2Nhbm5vdFNlbmQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUucmVjZWl2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRhdGE7XG4gICAgICBpZiAodGhpcy5hbGxvd1JlY2VpdmUpIHtcbiAgICAgICAgZGF0YSA9ICQuZXh0ZW5kKHt9LCB0aGlzLnJlY2VpdmVFeHRyYSwge1xuICAgICAgICAgIHRpbWU6IHRoaXMudGltZVxuICAgICAgICB9KTtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICB1cmw6IHRoaXMubWVzc2FnZVVybCxcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGNvbXBsZXRlOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcyksXG4gICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMub25SZWNlaXZlZChkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcyksXG4gICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICBtZXRob2Q6IHRoaXMucmVjZWl2ZU1ldGhvZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG91Y2goKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKCdjYW5ub3RSZWNlaXZlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLmNsZWFyT3V0cHV0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJCh0aGlzLm91dHB1dCkuZW1wdHkoKTtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUuY2xlYXJJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICQodGhpcy5pbnB1dCkudmFsKCcnKTtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUuZ2V0TWVzc2FnZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiAkKCc8cD48L3A+JykuaHRtbCh0aGlzLmVtb3RpY29ucy5pbnNlcnQoZGF0YS5tZXNzYWdlKSkuYXBwZW5kKCQoJzxzbWFsbD48L3NtYWxsPicpLmFkZENsYXNzKCdjaGF0LXRpbWUnKS5kYXRhKCd0aW1lJywgZGF0YS50aW1lKSk7XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLm5ld01lc3NhZ2UgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgYXV0aG9yLCBhdmF0YXIsIGNvbDEsIGNvbDIsIGRpdjEsIGRpdjIsIG1lc3NhZ2UsIHJvdztcbiAgICAgIHJvdyA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ3JvdycpLmFkZENsYXNzKCdjaGF0LW1lc3NhZ2UnKS5kYXRhKCd0aW1lJywgZGF0YS50aW1lKS5kYXRhKCdhdXRob3InLCBkYXRhLmF1dGhvcik7XG4gICAgICBjb2wxID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnY29sLXhzLTEnKTtcbiAgICAgIGNvbDIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdjb2wteHMtMTEnKTtcbiAgICAgIGlmICh0aGlzLnBsYXllclVybCAhPSBudWxsKSB7XG4gICAgICAgIGRpdjEgPSAkKCc8YT48L2E+JykuYXR0cignaHJlZicsIHRoaXMuZ2V0UGxheWVyVXJsKGRhdGEuYXV0aG9yKSkuYWRkQ2xhc3MoJ2NoYXQtYXV0aG9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXYxID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnY2hhdC1hdXRob3InKTtcbiAgICAgIH1cbiAgICAgIGRpdjIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdjaGF0LWNvbnRlbnQnKTtcbiAgICAgIGF2YXRhciA9ICQoJzxpbWc+PC9pbWc+JykuYWRkQ2xhc3MoJ2ltZy1yZXNwb25zaXZlJykuYWRkQ2xhc3MoJ2NoYXQtYXZhdGFyJykuYXR0cignc3JjJywgZGF0YS5hdmF0YXIpO1xuICAgICAgYXV0aG9yID0gJCgnPHA+PC9wPicpLmFwcGVuZCgkKCc8c3Ryb25nPjwvc3Ryb25nPicpLmFkZENsYXNzKCdjaGF0LW5hbWUnKS50ZXh0KGRhdGEuYXV0aG9yKSk7XG4gICAgICBtZXNzYWdlID0gdGhpcy5nZXRNZXNzYWdlKGRhdGEpO1xuICAgICAgJChkaXYxKS5hcHBlbmQoYXZhdGFyKS5hcHBlbmQoYXV0aG9yKTtcbiAgICAgICQoZGl2MikuYXBwZW5kKG1lc3NhZ2UpO1xuICAgICAgJChjb2wxKS5hcHBlbmQoZGl2MSk7XG4gICAgICAkKGNvbDIpLmFwcGVuZChkaXYyKTtcbiAgICAgICQocm93KS5hcHBlbmQoY29sMSkuYXBwZW5kKGNvbDIpO1xuICAgICAgcmV0dXJuICQodGhpcy5vdXRwdXQpLmFwcGVuZChyb3cpO1xuICAgIH07XG5cbiAgICBDaGF0LnByb3RvdHlwZS5tb2RpZnlNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSwgZGF0YSkge1xuICAgICAgcmV0dXJuICQobWVzc2FnZSkuZmluZCgnLmNoYXQtY29udGVudCcpLmFwcGVuZCh0aGlzLmdldE1lc3NhZ2UoZGF0YSkpO1xuICAgIH07XG5cbiAgICBDaGF0LnByb3RvdHlwZS5hZGRNZXNzYWdlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIGF1dGhvciwgbWVzc2FnZSwgc2Nyb2xsLCB0aW1lO1xuICAgICAgc2Nyb2xsID0gKHRoaXMub3V0cHV0WzBdLnNjcm9sbEhlaWdodCAtIHRoaXMub3V0cHV0WzBdLnNjcm9sbFRvcCAtIHRoaXMub3V0cHV0WzBdLmNsaWVudEhlaWdodCkgPD0gMTtcbiAgICAgIG1lc3NhZ2UgPSAkKHRoaXMub3V0cHV0KS5jaGlsZHJlbigpLmxhc3QoKTtcbiAgICAgIGlmIChtZXNzYWdlLmxlbmd0aCA9PT0gMCB8fCAhJChtZXNzYWdlKS5pcygnLmNoYXQtbWVzc2FnZScpKSB7XG4gICAgICAgIHRoaXMubmV3TWVzc2FnZShkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWUgPSAkKG1lc3NhZ2UpLmRhdGEoJ3RpbWUnKTtcbiAgICAgICAgYXV0aG9yID0gJChtZXNzYWdlKS5kYXRhKCdhdXRob3InKTtcbiAgICAgICAgaWYgKGF1dGhvciA9PT0gZGF0YS5hdXRob3IgJiYgKGRhdGEudGltZSAtIHRpbWUpIDw9IHRoaXMuam9pbikge1xuICAgICAgICAgIHRoaXMubW9kaWZ5TWVzc2FnZShtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm5ld01lc3NhZ2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0WzBdLnNjcm9sbFRvcCA9IHRoaXMub3V0cHV0WzBdLnNjcm9sbEhlaWdodCAtIDE7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLm9uU2VudCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihkYXRhLnJlYXNvbiwgZGF0YS5hcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUub25SZWNlaXZlZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBpLCBsZW4sIG1lc3NhZ2UsIHJlc3VsdHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBkYXRhW2ldO1xuICAgICAgICByZXN1bHRzLnB1c2godGhpcy5hZGRNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBDaGF0LnByb3RvdHlwZS5vbkNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZWNlaXZlKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSwgdGhpcy5pbnRlcnZhbCAqIDEwMDApO1xuICAgIH07XG5cbiAgICBDaGF0LnByb3RvdHlwZS5vbktleSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XG4gICAgICAgIHRoaXMuc2VuZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhcklucHV0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLmdldFBsYXllclVybCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllclVybC5yZXBsYWNlKCd7bmFtZX0nLCBuYW1lKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENoYXQ7XG5cbiAgfSkoKTtcblxuICAkKGZ1bmN0aW9uKCkge1xuICAgIHZhciB1cGRhdGU7XG4gICAgdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93O1xuICAgICAgbm93ID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgICAkKCcuY2hhdCAuY2hhdC10aW1lJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGludGVydmFsLCB0ZXh0LCB0aW1lO1xuICAgICAgICB0aW1lID0gcGFyc2VJbnQoJCh0aGlzKS5kYXRhKCd0aW1lJykpO1xuICAgICAgICBpbnRlcnZhbCA9IG5vdyAtIHRpbWU7XG4gICAgICAgIGlmIChpbnRlcnZhbCA8IDYwKSB7XG4gICAgICAgICAgdGV4dCA9IGkxOG4uY2hhdC5mZXdTZWNzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSB3aW5kb3cudGltZUZvcm1hdFNob3J0KGludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJCh0aGlzKS50ZXh0KHRleHQgKyAnICcgKyBpMThuLmNoYXQuYWdvKTtcbiAgICAgIH0pO1xuICAgICAgJCgnLmNoYXQgLnNlbmQnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW50ZXJ2YWwsIHRleHQsIHRpbWU7XG4gICAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ2Rpc2FibGVkJykgIT09ICd0cnVlJykge1xuICAgICAgICAgIHRpbWUgPSBwYXJzZUludCgkKHRoaXMpLmRhdGEoJ3RpbWUnKSk7XG4gICAgICAgICAgdGV4dCA9ICQodGhpcykuZGF0YSgndGV4dCcpO1xuICAgICAgICAgIGludGVydmFsID0gdGltZSAtIG5vdztcbiAgICAgICAgICBpZiAoaW50ZXJ2YWwgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzKS50ZXh0KHdpbmRvdy50aW1lRm9ybWF0KGludGVydmFsKSkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLnRleHQodGV4dCkucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KHVwZGF0ZSwgMTAwMCk7XG4gICAgfTtcbiAgICByZXR1cm4gdXBkYXRlKCk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciB1cGRhdGU7XG5cbiAgdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGUsIG5vdztcbiAgICBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBub3cgPSBNYXRoLnJvdW5kKGRhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgJCgnLmN1cnJlbnQtdGltZScpLnRleHQoZGF0ZS50b1VUQ1N0cmluZygpKTtcbiAgICAkKCcudGltZS1sZWZ0JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0bztcbiAgICAgIHRvID0gJCh0aGlzKS5kYXRhKCd0bycpO1xuICAgICAgcmV0dXJuICQodGhpcykudGV4dCh3aW5kb3cudGltZUZvcm1hdChNYXRoLm1heCh0byAtIG5vdywgMCkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2V0VGltZW91dCh1cGRhdGUsIDEwMDApO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHVwZGF0ZSgpO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgZGlhbG9ncywgc2hvdztcblxuICBkaWFsb2dzID0gW107XG5cbiAgc2hvdyA9IGZ1bmN0aW9uKGRpYWxvZykge1xuICAgIHZhciBkaXNtaXNzaWJsZSwgcmVmO1xuICAgIGRpc21pc3NpYmxlID0gKHJlZiA9ICQoZGlhbG9nKS5kYXRhKCdkaXNtaXNzaWJsZScpKSAhPSBudWxsID8gcmVmIDogdHJ1ZTtcbiAgICAkKGRpYWxvZykuYmluZCgnc2hvd24uYnMubW9kYWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgcmV0dXJuICQodGhpcykuZmluZCgnLmJhdHRsZScpLnRyaWdnZXIoJ3Nob3cnKTtcbiAgICB9KTtcbiAgICBpZiAoZGlzbWlzc2libGUpIHtcbiAgICAgIHJldHVybiAkKGRpYWxvZykubW9kYWwoe1xuICAgICAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAga2V5Ym9hcmQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJChkaWFsb2cpLm1vZGFsKHtcbiAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBrZXlib2FyZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAkKGZ1bmN0aW9uKCkge1xuICAgIGRpYWxvZ3MgPSAkKCcubW9kYWwuYXV0b3Nob3cnKTtcbiAgICByZXR1cm4gJChkaWFsb2dzKS5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgc2hvdyh0aGlzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmRleCA8IChkaWFsb2dzLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIHJldHVybiBzaG93KGRpYWxvZ3NbaW5kZXggKyAxXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgY291bnRlcjtcblxuICB0aGlzLkVtb3RpY29ucyA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVmYXVsdHM7XG5cbiAgICBkZWZhdWx0cyA9IHtcbiAgICAgIGVtb3RpY29uczoge1xuICAgICAgICAnOyknOiAnYmxpbmsucG5nJyxcbiAgICAgICAgJzpEJzogJ2dyaW4ucG5nJyxcbiAgICAgICAgJzooJzogJ3NhZC5wbmcnLFxuICAgICAgICAnOiknOiAnc21pbGUucG5nJyxcbiAgICAgICAgJ0IpJzogJ3N1bmdsYXNzZXMucG5nJyxcbiAgICAgICAgJ08ubyc6ICdzdXJwcmlzZWQucG5nJyxcbiAgICAgICAgJzpwJzogJ3Rvbmd1ZS5wbmcnXG4gICAgICB9LFxuICAgICAgdXJsOiAnL2ltYWdlcy9lbW90aWNvbnMve25hbWV9J1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBFbW90aWNvbnModXJsLCBlbW90aWNvbnMpIHtcbiAgICAgIHRoaXMudXJsID0gdXJsICE9IG51bGwgPyB1cmwgOiBkZWZhdWx0cy51cmw7XG4gICAgICB0aGlzLnNldCA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cy5lbW90aWNvbnMsIGVtb3RpY29ucyAhPSBudWxsID8gZW1vdGljb25zIDoge30pO1xuICAgIH1cblxuICAgIEVtb3RpY29ucy5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24odGV4dCkge1xuICAgICAgdmFyIGVtb3RpY29uLCBrLCByZWYsIHVybCwgdjtcbiAgICAgIHJlZiA9IHRoaXMuc2V0O1xuICAgICAgZm9yIChrIGluIHJlZikge1xuICAgICAgICB2ID0gcmVmW2tdO1xuICAgICAgICB1cmwgPSB0aGlzLnVybC5yZXBsYWNlKCd7bmFtZX0nLCB2KTtcbiAgICAgICAgZW1vdGljb24gPSAnPGltZyBjbGFzcz1cImVtb3RpY29uXCIgc3JjPVwiJyArIHVybCArICdcIiBhbHQ9XCInICsgayArICdcIiB0aXRsZT1cIicgKyBrICsgJ1wiLz4nO1xuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKGssIGVtb3RpY29uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH07XG5cbiAgICBFbW90aWNvbnMucHJvdG90eXBlLnBvcG92ZXIgPSBmdW5jdGlvbihidXR0b24sIG91dHB1dCkge1xuICAgICAgcmV0dXJuICQoYnV0dG9uKS5wb3BvdmVyKHtcbiAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICAgICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICAgICAgdGl0bGU6IGkxOG4uZW1vdGljb25zLnRpdGxlLFxuICAgICAgICBjb250ZW50OiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0UG9wb3ZlckNvbnRlbnQob3V0cHV0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci10aXRsZVwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItY29udGVudCBlbW90aWNvbi1jb250YWluZXJcIj48L2Rpdj48L2Rpdj4nXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRW1vdGljb25zLnByb3RvdHlwZS5nZXRQb3BvdmVyQ29udGVudCA9IGZ1bmN0aW9uKG91dHB1dCkge1xuICAgICAgdmFyIGNvbnRhaW5lciwgaW1nLCBrLCByZWYsIHVybCwgdjtcbiAgICAgIGNvbnRhaW5lciA9ICQoJzxkaXY+PC9kaXY+Jyk7XG4gICAgICByZWYgPSB0aGlzLnNldDtcbiAgICAgIGZvciAoayBpbiByZWYpIHtcbiAgICAgICAgdiA9IHJlZltrXTtcbiAgICAgICAgdXJsID0gdGhpcy51cmwucmVwbGFjZSgne25hbWV9Jywgdik7XG4gICAgICAgIGltZyA9ICQoJzxpbWc+PC9pbWc+JykuYWRkQ2xhc3MoJ2Vtb3RpY29uJykuYXR0cignc3JjJywgdXJsKS5hdHRyKCdhbHQnLCBrKS5hdHRyKCd0aXRsZScsIGspLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkKG91dHB1dCkudmFsKCQob3V0cHV0KS52YWwoKSArICQodGhpcykuYXR0cignYWx0JykpO1xuICAgICAgICB9KTtcbiAgICAgICAgJChjb250YWluZXIpLmFwcGVuZChpbWcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEVtb3RpY29ucztcblxuICB9KSgpO1xuXG4gIGNvdW50ZXIgPSAwO1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVtb3RpY29ucztcbiAgICBlbW90aWNvbnMgPSBuZXcgRW1vdGljb25zKCk7XG4gICAgcmV0dXJuICQoJ1tkYXRhLWVtb3RpY29ucz10cnVlXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGV4dDtcbiAgICAgIHRleHQgPSAkKHRoaXMpLnRleHQoKTtcbiAgICAgIHRleHQgPSBlbW90aWNvbnMuaW5zZXJ0KHRleHQpO1xuICAgICAgcmV0dXJuICQodGhpcykuaHRtbCh0ZXh0KTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGFmdGVyTG9hZGVkLCBlcXVhbGl6ZSwgZ2V0Q29sdW1ucywgZ2V0UHJlZml4LCBnZXRTaXplLCB3aWR0aHM7XG5cbiAgd2lkdGhzID0ge1xuICAgIHhzOiA3NjgsXG4gICAgc206IDk5MixcbiAgICBtZDogMTIwMFxuICB9O1xuXG4gIGdldFByZWZpeCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3aWR0aDtcbiAgICB3aWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgIGlmICh3aWR0aCA8IHdpZHRocy54cykge1xuICAgICAgcmV0dXJuIFsneHMnXTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoIDwgd2lkdGhzLnNtKSB7XG4gICAgICByZXR1cm4gWydzbScsICd4cyddO1xuICAgIH0gZWxzZSBpZiAod2lkdGggPCB3aWR0aHMubWQpIHtcbiAgICAgIHJldHVybiBbJ21kJywgJ3NtJywgJ3hzJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbJ2xnJywgJ21kJywgJ3NtJywgJ3hzJ107XG4gICAgfVxuICB9O1xuXG4gIGdldENvbHVtbnMgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaSwgaiwgaywgbGVuLCBwLCByZXN1bHQ7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChqID0gMCwgbGVuID0gcHJlZml4Lmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBwID0gcHJlZml4W2pdO1xuICAgICAgZm9yIChpID0gayA9IDE7IGsgPD0gMTI7IGkgPSArK2spIHtcbiAgICAgICAgcmVzdWx0LnB1c2goXCJjb2wtXCIgKyBwICsgXCItXCIgKyBpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBnZXRTaXplID0gZnVuY3Rpb24ob2JqZWN0LCBwcmVmaXgpIHtcbiAgICB2YXIgaiwgbGVuLCBwLCByZWYsIHJlZ2V4cCwgc2l6ZTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSBwcmVmaXgubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHAgPSBwcmVmaXhbal07XG4gICAgICByZWdleHAgPSBuZXcgUmVnRXhwKFwiY29sLVwiICsgcCArIFwiLShcXFxcZCspXCIpO1xuICAgICAgc2l6ZSA9IChyZWYgPSAkKG9iamVjdCkuYXR0cignY2xhc3MnKS5tYXRjaChyZWdleHApKSAhPSBudWxsID8gcmVmWzFdIDogdm9pZCAwO1xuICAgICAgaWYgKHNpemUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoc2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGVxdWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbHVtbnMsIHByZWZpeCwgc2VsZWN0b3I7XG4gICAgcHJlZml4ID0gZ2V0UHJlZml4KCk7XG4gICAgY29sdW1ucyA9IGdldENvbHVtbnMocHJlZml4KTtcbiAgICBzZWxlY3RvciA9ICcuJyArIGNvbHVtbnMuam9pbignLC4nKTtcbiAgICByZXR1cm4gJCgnLnJvdy5lcXVhbGl6ZScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29sLCBoZWlnaHRzLCBocywgaSwgaiwgcCwgcm93LCBzdW07XG4gICAgICBoZWlnaHRzID0gW107XG4gICAgICByb3cgPSAwO1xuICAgICAgc3VtID0gMDtcbiAgICAgICQodGhpcykuY2hpbGRyZW4oc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzaXplO1xuICAgICAgICBzaXplID0gZ2V0U2l6ZSh0aGlzLCBwcmVmaXgpO1xuICAgICAgICBzdW0gKz0gc2l6ZTtcbiAgICAgICAgaWYgKHN1bSA+IDEyKSB7XG4gICAgICAgICAgc3VtIC09IDEyO1xuICAgICAgICAgIHJvdysrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWlnaHRzW3Jvd10gPT0gbnVsbCkge1xuICAgICAgICAgIGhlaWdodHNbcm93XSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlaWdodHNbcm93XSA9IE1hdGgubWF4KGhlaWdodHNbcm93XSwgJCh0aGlzKS5oZWlnaHQoKSk7XG4gICAgICB9KTtcbiAgICAgIHJvdyA9IDA7XG4gICAgICBzdW0gPSAwO1xuICAgICAgY29sID0gbnVsbDtcbiAgICAgICQodGhpcykuY2hpbGRyZW4oc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHN1bSArPSBnZXRTaXplKHRoaXMsIHByZWZpeCk7XG4gICAgICAgIGlmIChjb2wgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbCA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1bSA+IDEyKSB7XG4gICAgICAgICAgc3VtIC09IDEyO1xuICAgICAgICAgIHJvdysrO1xuICAgICAgICAgIGNvbCA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQodGhpcykuaGVpZ2h0KGhlaWdodHNbcm93XSk7XG4gICAgICB9KTtcbiAgICAgIGhzID0gTWF0aC5yb3VuZCgoMTIgLSBzdW0pIC8gMik7XG4gICAgICBpZiAoKGNvbCAhPSBudWxsKSAmJiBocyA+IDApIHtcbiAgICAgICAgcCA9IHByZWZpeFswXTtcbiAgICAgICAgZm9yIChpID0gaiA9IDE7IGogPD0gMTI7IGkgPSArK2opIHtcbiAgICAgICAgICAkKGNvbCkucmVtb3ZlQ2xhc3MoXCJjb2wtXCIgKyBwICsgXCItb2Zmc2V0LVwiICsgaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQoY29sKS5hZGRDbGFzcyhcImNvbC1cIiArIHAgKyBcIi1vZmZzZXQtXCIgKyBocyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgYWZ0ZXJMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJCgnaW1nJykub24oJ2xvYWQnLCBlcXVhbGl6ZSk7XG4gIH07XG5cbiAgJChmdW5jdGlvbigpIHt9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIga2V5RG93biwga2V5VXAsIG1vdXNlV2hlZWwsIG51bWJlckRlY3JlYXNlLCBudW1iZXJJbmNyZWFzZSwgcmFuZ2VDaGFuZ2VkLCBzcGVlZDtcblxuICBzcGVlZCA9IDE7XG5cbiAga2V5RG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxNykge1xuICAgICAgc3BlZWQgPSAxMDtcbiAgICB9XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxNikge1xuICAgICAgcmV0dXJuIHNwZWVkID0gMTAwO1xuICAgIH1cbiAgfTtcblxuICBrZXlVcCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxNyB8fCBldmVudC53aGljaCA9PT0gMTYpIHtcbiAgICAgIHJldHVybiBzcGVlZCA9IDE7XG4gICAgfVxuICB9O1xuXG4gIG1vdXNlV2hlZWwgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBjaGFuZ2UsIG1heCwgbWluLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHN0ZXAsIHZhbHVlO1xuICAgIGNvbnNvbGUubG9nKCdtb3VzZVdoZWVsJyk7XG4gICAgbWluID0gcGFyc2VJbnQoKHJlZiA9ICQodGhpcykuYXR0cignbWluJykpICE9IG51bGwgPyByZWYgOiAwKTtcbiAgICBtYXggPSBwYXJzZUludCgocmVmMSA9ICQodGhpcykuYXR0cignbWF4JykpICE9IG51bGwgPyByZWYxIDogMTAwKTtcbiAgICBzdGVwID0gcGFyc2VJbnQoKHJlZjIgPSAkKHRoaXMpLmF0dHIoJ3N0ZXAnKSkgIT0gbnVsbCA/IHJlZjIgOiAxKTtcbiAgICBjaGFuZ2UgPSBldmVudC5kZWx0YVkgKiBzdGVwICogc3BlZWQ7XG4gICAgdmFsdWUgPSBwYXJzZUludCgocmVmMyA9ICQodGhpcykudmFsKCkpICE9IG51bGwgPyByZWYzIDogMCk7XG4gICAgdmFsdWUgPSBNYXRoLmNsYW1wKHZhbHVlICsgY2hhbmdlLCBtaW4sIG1heCk7XG4gICAgJCh0aGlzKS52YWwodmFsdWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIHJldHVybiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIHJhbmdlQ2hhbmdlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGFmdGVyLCBiZWZvcmUsIG91dHB1dCwgcmVmLCByZWYxLCByZWYyLCB2YWx1ZTtcbiAgICBjb25zb2xlLmxvZygncmFuZ2VDaGFuZ2VkJyk7XG4gICAgb3V0cHV0ID0gJCh0aGlzKS5wYXJlbnQoKS5jaGlsZHJlbignLnJhbmdlLXZhbHVlJyk7XG4gICAgYmVmb3JlID0gKHJlZiA9ICQob3V0cHV0KS5kYXRhKCdiZWZvcmUnKSkgIT0gbnVsbCA/IHJlZiA6ICcnO1xuICAgIGFmdGVyID0gKHJlZjEgPSAkKG91dHB1dCkuZGF0YSgnYWZ0ZXInKSkgIT0gbnVsbCA/IHJlZjEgOiAnJztcbiAgICB2YWx1ZSA9IChyZWYyID0gJCh0aGlzKS52YWwoKSkgIT0gbnVsbCA/IHJlZjIgOiAwO1xuICAgIHJldHVybiAkKG91dHB1dCkudGV4dChiZWZvcmUgKyB2YWx1ZSArIGFmdGVyKTtcbiAgfTtcblxuICBudW1iZXJEZWNyZWFzZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGlucHV0LCBtYXgsIG1pbiwgcmVmLCByZWYxLCByZWYyLCByZWYzLCBzdGVwLCB2YWx1ZTtcbiAgICBjb25zb2xlLmxvZygnbnVtYmVyRGVjcmVhc2UnKTtcbiAgICBpbnB1dCA9ICQodGhpcykucGFyZW50KCkucGFyZW50KCkuY2hpbGRyZW4oJ2lucHV0Jyk7XG4gICAgbWluID0gcGFyc2VJbnQoKHJlZiA9ICQoaW5wdXQpLmF0dHIoJ21pbicpKSAhPSBudWxsID8gcmVmIDogMCk7XG4gICAgbWF4ID0gcGFyc2VJbnQoKHJlZjEgPSAkKGlucHV0KS5hdHRyKCdtYXgnKSkgIT0gbnVsbCA/IHJlZjEgOiAxMDApO1xuICAgIHN0ZXAgPSBwYXJzZUludCgocmVmMiA9ICQoaW5wdXQpLmF0dHIoJ3N0ZXAnKSkgIT0gbnVsbCA/IHJlZjIgOiAxKTtcbiAgICB2YWx1ZSA9IHBhcnNlSW50KChyZWYzID0gJChpbnB1dCkudmFsKCkpICE9IG51bGwgPyByZWYzIDogMCk7XG4gICAgdmFsdWUgPSBNYXRoLmNsYW1wKHZhbHVlIC0gc3BlZWQgKiBzdGVwLCBtaW4sIG1heCk7XG4gICAgcmV0dXJuICQoaW5wdXQpLnZhbCh2YWx1ZSkudHJpZ2dlcignY2hhbmdlJyk7XG4gIH07XG5cbiAgbnVtYmVySW5jcmVhc2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpbnB1dCwgbWF4LCBtaW4sIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgc3RlcCwgdmFsdWU7XG4gICAgY29uc29sZS5sb2coJ251bWJlckluY3JlYXNlJyk7XG4gICAgaW5wdXQgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLmNoaWxkcmVuKCdpbnB1dCcpO1xuICAgIG1pbiA9IHBhcnNlSW50KChyZWYgPSAkKGlucHV0KS5hdHRyKCdtaW4nKSkgIT0gbnVsbCA/IHJlZiA6IDApO1xuICAgIG1heCA9IHBhcnNlSW50KChyZWYxID0gJChpbnB1dCkuYXR0cignbWF4JykpICE9IG51bGwgPyByZWYxIDogMTAwKTtcbiAgICBzdGVwID0gcGFyc2VJbnQoKHJlZjIgPSAkKGlucHV0KS5hdHRyKCdzdGVwJykpICE9IG51bGwgPyByZWYyIDogMSk7XG4gICAgdmFsdWUgPSBwYXJzZUludCgocmVmMyA9ICQoaW5wdXQpLnZhbCgpKSAhPSBudWxsID8gcmVmMyA6IDApO1xuICAgIHZhbHVlID0gTWF0aC5jbGFtcCh2YWx1ZSArIHNwZWVkICogc3RlcCwgbWluLCBtYXgpO1xuICAgIHJldHVybiAkKGlucHV0KS52YWwodmFsdWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgJCh3aW5kb3cpLmtleXVwKGtleVVwKS5rZXlkb3duKGtleURvd24pO1xuICAgICQoJ2lucHV0W3R5cGU9bnVtYmVyXSwgaW5wdXRbdHlwZT1yYW5nZV0nKS5iaW5kKCdtb3VzZXdoZWVsJywgbW91c2VXaGVlbCk7XG4gICAgJCgnaW5wdXRbdHlwZT1yYW5nZV0nKS5jaGFuZ2UocmFuZ2VDaGFuZ2VkKS5tb3VzZW1vdmUocmFuZ2VDaGFuZ2VkKTtcbiAgICAkKCcubnVtYmVyLW1pbnVzJykuY2hpbGRyZW4oJ2J1dHRvbicpLmNsaWNrKG51bWJlckRlY3JlYXNlKTtcbiAgICByZXR1cm4gJCgnLm51bWJlci1wbHVzJykuY2hpbGRyZW4oJ2J1dHRvbicpLmNsaWNrKG51bWJlckluY3JlYXNlKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGksIGxhc3RUaW1lLCBsZW4sIHZlbmRvciwgdmVuZG9ycztcblxuICBsYXN0VGltZSA9IDA7XG5cbiAgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuXG4gIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHZlbmRvcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZlbmRvciA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvciArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3IgKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdmVuZG9yICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgIH1cbiAgfVxuXG4gIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaywgZWxlbWVudCkge1xuICAgIHZhciBjdXJyVGltZSwgaWQsIHRpbWVUb0NhbGw7XG4gICAgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xuICAgIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcbiAgICB9LCB0aW1lVG9DYWxsKTtcbiAgICByZXR1cm4gaWQ7XG4gIH0pO1xuXG4gIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCAod2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgJChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJCgnLmltYWdlLXByZXZpZXcnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGlkLCBwcmV2aWV3O1xuICAgICAgcHJldmlldyA9IHRoaXM7XG4gICAgICBpZCA9ICQodGhpcykuZGF0YSgnZm9yJyk7XG4gICAgICByZXR1cm4gJCgnIycgKyBpZCkuY2hhbmdlKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBwYXRoO1xuICAgICAgICBwYXRoID0gVVJMLmNyZWF0ZU9iamVjdFVSTChldmVudC50YXJnZXQuZmlsZXNbMF0pO1xuICAgICAgICBpZiAocGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICQocHJldmlldykuYXR0cignc3JjJywgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH0pLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIH0pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgYnV0dG9uLCBzZWxlY3QsIHNldDtcblxuICBzZXQgPSBmdW5jdGlvbihsYW5nKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9sYW5nLycgKyBsYW5nO1xuICB9O1xuXG4gIGJ1dHRvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXQoJCh0aGlzKS5kYXRhKCdsYW5nJykpO1xuICB9O1xuXG4gIHNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXQoJCh0aGlzKS52YWwoKSk7XG4gIH07XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICAkKCcubGFuZ3VhZ2Utc2VsZWN0JykuY2hhbmdlKHNlbGVjdCk7XG4gICAgcmV0dXJuICQoJy5sYW5ndWFnZS1idXR0b24nKS5jbGljayhidXR0b24pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgbmF2Zml4O1xuXG4gIG5hdmZpeCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoZWlnaHQ7XG4gICAgaGVpZ2h0ID0gJCgnI21haW5OYXYnKS5oZWlnaHQoKSArIDEwO1xuICAgIHJldHVybiAkKCdib2R5JykuY3NzKCdwYWRkaW5nLXRvcCcsIGhlaWdodCArICdweCcpO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuYXZmaXgoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmF2Zml4KCk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBpbWFnZUZvckZyYW1lLCByZWZyZXNoUGxhbnQ7XG5cbiAgaW1hZ2VGb3JGcmFtZSA9IGZ1bmN0aW9uKGZyYW1lKSB7XG4gICAgcmV0dXJuICcvaW1hZ2VzL3BsYW50cy9wbGFudC0nICsgZnJhbWUgKyAnLnBuZyc7XG4gIH07XG5cbiAgcmVmcmVzaFBsYW50ID0gZnVuY3Rpb24ocGxhbnQpIHtcbiAgICB2YXIgZW5kLCBmcmFtZSwgbm93LCBzdGFydCwgd2F0ZXJpbmc7XG4gICAgbm93ID0gTWF0aC5yb3VuZCgobmV3IERhdGUpLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHN0YXJ0ID0gcGFyc2VJbnQoJChwbGFudCkuZGF0YSgnc3RhcnQnKSk7XG4gICAgZW5kID0gcGFyc2VJbnQoJChwbGFudCkuZGF0YSgnZW5kJykpO1xuICAgIHdhdGVyaW5nID0gcGFyc2VJbnQoJChwbGFudCkuZGF0YSgnd2F0ZXJpbmcnKSk7XG4gICAgbm93ID0gTWF0aC5taW4obm93LCB3YXRlcmluZyk7XG4gICAgZnJhbWUgPSBNYXRoLmZsb29yKDE3ICogTWF0aC5jbGFtcCgobm93IC0gc3RhcnQpIC8gKGVuZCAtIHN0YXJ0KSwgMCwgMSkpO1xuICAgICQocGxhbnQpLmF0dHIoJ3NyYycsIGltYWdlRm9yRnJhbWUoZnJhbWUpKTtcbiAgICBpZiAoZnJhbWUgPCAxNykge1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVmcmVzaFBsYW50KHBsYW50KTtcbiAgICAgIH0pLCAxMDAwKTtcbiAgICB9XG4gIH07XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICAkKCcucGxhbnRhdGlvbi1wbGFudCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVmcmVzaFBsYW50KHRoaXMpO1xuICAgIH0pO1xuICAgIHJldHVybiAkKCcjc2VlZHNNb2RhbCcpLm9uKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBzbG90O1xuICAgICAgc2xvdCA9ICQoZXZlbnQucmVsYXRlZFRhcmdldCkuZGF0YSgnc2xvdCcpO1xuICAgICAgcmV0dXJuICQodGhpcykuZmluZCgnaW5wdXRbbmFtZT1zbG90XScpLnZhbChzbG90KTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGZpbGwsIGxvYWQsIGxvYWRlZCwgbWVzc2FnZSwgbm90aWZ5LCBzZXRQcm9ncmVzcywgc2V0VmFsdWUsIHNldFZhbHVlcywgdXJsO1xuXG4gIHVybCA9ICcvYXBpL2NoYXJhY3Rlcic7XG5cbiAgc2V0UHJvZ3Jlc3MgPSBmdW5jdGlvbihvYmplY3QsIHZhbHVlLCBtaW5WYWx1ZSwgbWF4VmFsdWUsIGxhc3RVcGRhdGUsIG5leHRVcGRhdGUpIHtcbiAgICB2YXIgYmFyLCBiYXNlLCBjaGlsZCwgdGltZXI7XG4gICAgYmFyID0gJCgnLicgKyBvYmplY3QgKyAnLWJhcicpO1xuICAgIHRpbWVyID0gJCgnLicgKyBvYmplY3QgKyAnLXRpbWVyJyk7XG4gICAgaWYgKGJhci5sZW5ndGggPiAwKSB7XG4gICAgICBjaGlsZCA9ICQoYmFyKS5jaGlsZHJlbignLnByb2dyZXNzLWJhcicpO1xuICAgICAgJChjaGlsZCkuZGF0YSgnbWF4JywgbWF4VmFsdWUpLmRhdGEoJ21pbicsIG1pblZhbHVlKS5kYXRhKCdub3cnLCB2YWx1ZSk7XG4gICAgICBpZiAodHlwZW9mIChiYXNlID0gYmFyWzBdKS51cGRhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBiYXNlLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXIubGVuZ3RoID4gMCkge1xuICAgICAgY2hpbGQgPSAkKHRpbWVyKS5jaGlsZHJlbignLnByb2dyZXNzLWJhcicpO1xuICAgICAgaWYgKG5leHRVcGRhdGUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJChjaGlsZCkuZGF0YSgnbWF4JywgbmV4dFVwZGF0ZSkuZGF0YSgnbWluJywgbGFzdFVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJChjaGlsZCkuZGF0YSgnbWF4JywgMSkuZGF0YSgnbWluJywgMCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHNldFZhbHVlcyA9IGZ1bmN0aW9uKG9iamVjdCwgdmFsdWUsIG1pblZhbHVlLCBtYXhWYWx1ZSkge1xuICAgICQoJy4nICsgb2JqZWN0ICsgJy1ub3cnKS50ZXh0KHZhbHVlKTtcbiAgICAkKCcuJyArIG9iamVjdCArICctbWluJykudGV4dChtaW5WYWx1ZSk7XG4gICAgcmV0dXJuICQoJy4nICsgb2JqZWN0ICsgJy1tYXgnKS50ZXh0KG1heFZhbHVlKTtcbiAgfTtcblxuICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKG9iamVjdCwgdmFsdWUpIHtcbiAgICByZXR1cm4gJCgnLicgKyBvYmplY3QpLnRleHQodmFsdWUpO1xuICB9O1xuXG4gIGZpbGwgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgdmFyIGssIHNjb3BlLCB2O1xuICAgIHNldFByb2dyZXNzKCdoZWFsdGgnLCBkYXRhLmhlYWx0aCwgMCwgZGF0YS5tYXhIZWFsdGgsIGRhdGEuaGVhbHRoVXBkYXRlLCBkYXRhLm5leHRIZWFsdGhVcGRhdGUpO1xuICAgIHNldFZhbHVlcygnaGVhbHRoJywgZGF0YS5oZWFsdGgsIDAsIGRhdGEubWF4SGVhbHRoKTtcbiAgICBzZXRQcm9ncmVzcygnZW5lcmd5JywgZGF0YS5lbmVyZ3ksIDAsIGRhdGEubWF4RW5lcmd5LCBkYXRhLmVuZXJneVVwZGF0ZSwgZGF0YS5uZXh0RW5lcmd5VXBkYXRlKTtcbiAgICBzZXRWYWx1ZXMoJ2VuZXJneScsIGRhdGEuZW5lcmd5LCAwLCBkYXRhLm1heEVuZXJneSk7XG4gICAgc2V0UHJvZ3Jlc3MoJ3dhbnRlZCcsIGRhdGEud2FudGVkLCAwLCA2LCBkYXRhLndhbnRlZFVwZGF0ZSwgZGF0YS5uZXh0V2FudGVkVXBkYXRlKTtcbiAgICBzZXRWYWx1ZXMoJ3dhbnRlZCcsIGRhdGEud2FudGVkLCAwLCA2KTtcbiAgICBzZXRQcm9ncmVzcygnZXhwZXJpZW5jZScsIGRhdGEuZXhwZXJpZW5jZSwgMCwgZGF0YS5tYXhFeHBlcmllbmNlLCBudWxsLCBudWxsKTtcbiAgICBzZXRWYWx1ZXMoJ2V4cGVyaWVuY2UnLCBkYXRhLmV4cGVyaWVuY2UsIDAsIGRhdGEubWF4RXhwZXJpZW5jZSk7XG4gICAgc2V0UHJvZ3Jlc3MoJ3BsYW50YXRvcicsIGRhdGEucGxhbnRhdG9yRXhwZXJpZW5jZSwgMCwgZGF0YS5wbGFudGF0b3JNYXhFeHBlcmllbmNlLCBudWxsLCBudWxsKTtcbiAgICBzZXRWYWx1ZXMoJ3BsYW50YXRvcicsIGRhdGEucGxhbnRhdG9yRXhwZXJpZW5jZSwgMCwgZGF0YS5wbGFudGF0b3JNYXhFeHBlcmllbmNlKTtcbiAgICBzZXRQcm9ncmVzcygnc211Z2dsZXInLCBkYXRhLnNtdWdnbGVyRXhwZXJpZW5jZSwgMCwgZGF0YS5zbXVnZ2xlck1heEV4cGVyaWVuY2UsIG51bGwsIG51bGwpO1xuICAgIHNldFZhbHVlcygnc211Z2dsZXInLCBkYXRhLnNtdWdnbGVyRXhwZXJpZW5jZSwgMCwgZGF0YS5zbXVnZ2xlck1heEV4cGVyaWVuY2UpO1xuICAgIHNldFByb2dyZXNzKCdkZWFsZXInLCBkYXRhLmRlYWxlckV4cGVyaWVuY2UsIDAsIGRhdGEuZGVhbGVyTWF4RXhwZXJpZW5jZSwgbnVsbCwgbnVsbCk7XG4gICAgc2V0VmFsdWVzKCdkZWFsZXInLCBkYXRhLmRlYWxlckV4cGVyaWVuY2UsIDAsIGRhdGEuZGVhbGVyTWF4RXhwZXJpZW5jZSk7XG4gICAgc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSkuc2NvcGUoKTtcbiAgICBpZiAoKHNjb3BlICE9IG51bGwpICYmIChzY29wZS5wbGF5ZXIgIT0gbnVsbCkpIHtcbiAgICAgIGZvciAoayBpbiBkYXRhKSB7XG4gICAgICAgIHYgPSBkYXRhW2tdO1xuICAgICAgICBzY29wZS5wbGF5ZXJba10gPSB2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNjb3BlLiRhcHBseSgpO1xuICAgIH1cbiAgfTtcblxuICBsb2FkZWQgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgZmlsbChkYXRhKTtcbiAgICBpZiAoZGF0YS5yZWxvYWQpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWZyZXNoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh3aW5kb3cuYWN0aXZlKSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgdXJsOiB1cmwgKyAnL25vdGlmaWNhdGlvbnMnLFxuICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBzdWNjZXNzOiBub3RpZnlcbiAgICAgICAgfSk7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgdXJsOiB1cmwgKyAnL21lc3NhZ2VzJyxcbiAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgc3VjY2VzczogbWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNldFRpbWVvdXQobG9hZCwgZGF0YS5uZXh0VXBkYXRlICogMTAwMCk7XG4gIH07XG5cbiAgbm90aWZ5ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHZhciBpLCBsZW4sIG47XG4gICAgZm9yIChpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbiA9IGRhdGFbaV07XG4gICAgICB3aW5kb3cubm90aWZ5KHtcbiAgICAgICAgdGl0bGU6ICc8c3Ryb25nPicgKyBuLnRpdGxlICsgJzwvc3Ryb25nPicsXG4gICAgICAgIG1lc3NhZ2U6ICcnLFxuICAgICAgICB1cmw6ICcvcmVwb3J0cy8nICsgbi5pZFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuYWN0aXZlKSB7XG4gICAgICByZXR1cm4gd2luZG93Lm5vdGlmeVNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgbWVzc2FnZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB2YXIgaSwgbGVuLCBuO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG4gPSBkYXRhW2ldO1xuICAgICAgd2luZG93Lm5vdGlmeSh7XG4gICAgICAgIHRpdGxlOiAnPHN0cm9uZz4nICsgbi5hdXRob3IgKyAnPC9zdHJvbmc+OiAnICsgbi50aXRsZSArICc8YnIvPicsXG4gICAgICAgIG1lc3NhZ2U6IG4uY29udGVudCxcbiAgICAgICAgdXJsOiAnL21lc3NhZ2VzL2luYm94LycgKyBuLmlkXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5hY3RpdmUpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubm90aWZ5U2hvdygpO1xuICAgIH1cbiAgfTtcblxuICBsb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQuYWpheCh7XG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgc3VjY2VzczogbG9hZGVkXG4gICAgfSk7XG4gIH07XG5cbiAgJCh3aW5kb3cpLmZvY3VzKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBsb2FkKCk7XG4gIH0pO1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxvYWQoKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIHNxdWFyZTtcblxuICBzcXVhcmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJCgnLnNxdWFyZScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoJCh0aGlzKS5kYXRhKCdzcXVhcmUnKSA9PT0gJ3dpZHRoJykge1xuICAgICAgICByZXR1cm4gJCh0aGlzKS53aWR0aCgkKHRoaXMpLmhlaWdodCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLmhlaWdodCgkKHRoaXMpLndpZHRoKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcXVhcmUoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3F1YXJlKCk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBjaGFuZ2VkLCByYW5kb20sIHJhbmRvbUluLCByb2xsO1xuXG4gIGNoYW5nZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudCwgZGlmZiwgbGVmdCwgb2xkLCByZWYsIHJlZjEsIHJlZjIsIHZhbDtcbiAgICBjdXJyZW50ID0gcGFyc2VJbnQoKHJlZiA9ICQoJyNjdXJyZW50U3RhdGlzdGljc1BvaW50cycpLnRleHQoKSkgIT0gbnVsbCA/IHJlZiA6IDApO1xuICAgIGxlZnQgPSBwYXJzZUludCgkKCcjc3RhdGlzdGljc1BvaW50cycpLnRleHQoKSk7XG4gICAgb2xkID0gcGFyc2VJbnQoKHJlZjEgPSAkKHRoaXMpLmRhdGEoJ29sZCcpKSAhPSBudWxsID8gcmVmMSA6IDApO1xuICAgIHZhbCA9IHBhcnNlSW50KChyZWYyID0gJCh0aGlzKS52YWwoKSkgIT0gbnVsbCA/IHJlZjIgOiAwKTtcbiAgICBkaWZmID0gdmFsIC0gb2xkO1xuICAgIGlmIChkaWZmID4gbGVmdCkge1xuICAgICAgZGlmZiA9IGxlZnQ7XG4gICAgfVxuICAgIHZhbCA9IG9sZCArIGRpZmY7XG4gICAgbGVmdCAtPSBkaWZmO1xuICAgIGlmICghaXNOYU4oZGlmZikpIHtcbiAgICAgICQodGhpcykudmFsKHZhbCkuZGF0YSgnb2xkJywgdmFsKTtcbiAgICAgICQoJyNzdGF0aXN0aWNzUG9pbnRzJykudGV4dChsZWZ0KTtcbiAgICAgIHJldHVybiAkKCcuc3RhdGlzdGljJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlZjM7XG4gICAgICAgIHZhbCA9IHBhcnNlSW50KChyZWYzID0gJCh0aGlzKS52YWwoKSkgIT0gbnVsbCA/IHJlZjMgOiAwKTtcbiAgICAgICAgcmV0dXJuICQodGhpcykuYXR0cignbWF4JywgbGVmdCArIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmFuZG9tID0gZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pO1xuICB9O1xuXG4gIHJhbmRvbUluID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgaW5kZXg7XG4gICAgaW5kZXggPSByYW5kb20oMCwgYXJyYXkubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIGFycmF5W2luZGV4XTtcbiAgfTtcblxuICByb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGosIHBvaW50cywgcmVmLCByb2xsYWJsZSwgc3RhdGlzdGljLCB2YWw7XG4gICAgcm9sbGFibGUgPSAkKCcuc3RhdGlzdGljLnJvbGxhYmxlJyk7XG4gICAgJChyb2xsYWJsZSkudmFsKDApLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIHBvaW50cyA9IHBhcnNlSW50KCQoJyNzdGF0aXN0aWNzUG9pbnRzJykudGV4dCgpKTtcbiAgICBmb3IgKGkgPSBqID0gMSwgcmVmID0gcG9pbnRzOyAxIDw9IHJlZiA/IGogPD0gcmVmIDogaiA+PSByZWY7IGkgPSAxIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgc3RhdGlzdGljID0gcmFuZG9tSW4ocm9sbGFibGUpO1xuICAgICAgdmFsID0gcGFyc2VJbnQoJChzdGF0aXN0aWMpLnZhbCgpKTtcbiAgICAgICQoc3RhdGlzdGljKS52YWwodmFsICsgMSk7XG4gICAgfVxuICAgIHJldHVybiAkKHJvbGxhYmxlKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgfTtcblxuICAkKGZ1bmN0aW9uKCkge1xuICAgICQoJy5zdGF0aXN0aWMnKS5iaW5kKCdrZXl1cCBpbnB1dCBjaGFuZ2UnLCBjaGFuZ2VkKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAkKCcuc3RhdFJvbGxlcicpLmNsaWNrKHJvbGwpO1xuICAgIHJldHVybiByb2xsKCk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciByZWZyZXNoLCByZWZyZXNoaW5nLCB1cGRhdGU7XG5cbiAgcmVmcmVzaGluZyA9IGZhbHNlO1xuXG4gIHJlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXJlZnJlc2hpbmcpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWZyZXNoKCk7XG4gICAgfVxuICAgIHJldHVybiByZWZyZXNoaW5nID0gdHJ1ZTtcbiAgfTtcblxuICB1cGRhdGUgPSBmdW5jdGlvbih0aW1lcikge1xuICAgIHZhciBiYXIsIGNhLCBjYiwgbGFiZWwsIG1heCwgbWluLCBub3csIHBlcmNlbnQsIHJlZiwgcmVmMSwgcmVsb2FkLCByZXZlcnNlZCwgc3RvcCwgdGltZTtcbiAgICBiYXIgPSAkKHRpbWVyKS5jaGlsZHJlbignLnByb2dyZXNzLWJhcicpLmxhc3QoKTtcbiAgICBsYWJlbCA9ICQodGltZXIpLmNoaWxkcmVuKCcucHJvZ3Jlc3MtbGFiZWwnKTtcbiAgICB0aW1lID0gTWF0aC5yb3VuZCgobmV3IERhdGUpLmdldFRpbWUoKSAvIDEwMDAuMCk7XG4gICAgbWluID0gJChiYXIpLmRhdGEoJ21pbicpO1xuICAgIG1heCA9ICQoYmFyKS5kYXRhKCdtYXgnKTtcbiAgICBzdG9wID0gJChiYXIpLmRhdGEoJ3N0b3AnKTtcbiAgICBjYSA9ICQoYmFyKS5kYXRhKCdjYScpO1xuICAgIGNiID0gJChiYXIpLmRhdGEoJ2NiJyk7XG4gICAgcmV2ZXJzZWQgPSBCb29sZWFuKChyZWYgPSAkKGJhcikuZGF0YSgncmV2ZXJzZWQnKSkgIT0gbnVsbCA/IHJlZiA6IGZhbHNlKTtcbiAgICByZWxvYWQgPSBCb29sZWFuKChyZWYxID0gJChiYXIpLmRhdGEoJ3JlbG9hZCcpKSAhPSBudWxsID8gcmVmMSA6IHRydWUpO1xuICAgIGlmIChzdG9wICE9IG51bGwpIHtcbiAgICAgIHRpbWUgPSBNYXRoLm1pbih0aW1lLCBzdG9wKTtcbiAgICB9XG4gICAgbm93ID0gTWF0aC5jbGFtcCh0aW1lLCBtaW4sIG1heCk7XG4gICAgcGVyY2VudCA9IChub3cgLSBtaW4pIC8gKG1heCAtIG1pbik7XG4gICAgaWYgKHJldmVyc2VkKSB7XG4gICAgICBwZXJjZW50ID0gMSAtIHBlcmNlbnQ7XG4gICAgfVxuICAgICQoYmFyKS5jc3MoJ3dpZHRoJywgKHBlcmNlbnQgKiAxMDApICsgJyUnKTtcbiAgICBpZiAoKGNhICE9IG51bGwpICYmIChjYiAhPSBudWxsKSkge1xuICAgICAgJChiYXIpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIE1hdGgubGVycENvbG9ycyhwZXJjZW50LCBjYSwgY2IpKTtcbiAgICB9XG4gICAgJChsYWJlbCkudGV4dCh0eXBlb2Ygd2luZG93LnRpbWVGb3JtYXQgPT09IFwiZnVuY3Rpb25cIiA/IHdpbmRvdy50aW1lRm9ybWF0KG1heCAtIG5vdykgOiB2b2lkIDApO1xuICAgIGlmICh0aW1lID4gbWF4ICYmIHJlbG9hZCkge1xuICAgICAgcmVmcmVzaCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB1cGRhdGUodGltZXIsIDEwMDApO1xuICAgIH0pO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQoJy5wcm9ncmVzcy10aW1lJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB1cGRhdGUodGhpcyk7XG4gICAgfSk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbnMsIHRyaWdnZXI7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBodG1sOiB0cnVlLFxuICAgICAgICBwbGFjZW1lbnQ6ICdhdXRvIGxlZnQnXG4gICAgICB9O1xuICAgICAgdHJpZ2dlciA9ICQodGhpcykuZGF0YSgndHJpZ2dlcicpO1xuICAgICAgaWYgKHRyaWdnZXIgIT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zLnRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgICAgfVxuICAgICAgcmV0dXJuICQodGhpcykudG9vbHRpcChvcHRpb25zKTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgJChmdW5jdGlvbigpIHtcbiAgICB2YXIgY2xpY2tlZCwgbG9hZCwgcmVjZWl2ZSwgc2hvdywgdHV0b3JpYWxzO1xuICAgIHR1dG9yaWFscyA9IHt9O1xuICAgICQoJy50dXRvcmlhbC1zdGVwJykucG9wb3Zlcih7XG4gICAgICB0cmlnZ2VyOiAnbWFudWFsJyxcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbSdcbiAgICB9KTtcbiAgICBzaG93ID0gZnVuY3Rpb24oc3RlcCkge1xuICAgICAgaWYgKHN0ZXAgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJChzdGVwLmVsZW1lbnRzKS5iaW5kKCdjbGljaycsIGNsaWNrZWQpLmFkZENsYXNzKCd0dXRvcmlhbC1hY3RpdmUnKS5maXJzdCgpLnBvcG92ZXIoJ3Nob3cnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNsaWNrZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBuZXh0O1xuICAgICAgbmV4dCA9IHR1dG9yaWFsc1t0aGlzLnN0ZXAubmFtZV0uc2hpZnQoKTtcbiAgICAgIGlmIChuZXh0ICE9IG51bGwpIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICB1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXG4gICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLnN0ZXAubmFtZSxcbiAgICAgICAgICAgIHN0YWdlOiBuZXh0LmluZGV4XG4gICAgICAgICAgfSxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc2hvdyhuZXh0KTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgdXJsOiAnL2FwaS9jaGFyYWN0ZXIvdHV0b3JpYWwnLFxuICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5zdGVwLm5hbWUsXG4gICAgICAgICAgICBzdGFnZTogdGhpcy5zdGVwLmluZGV4ICsgMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJCh0aGlzLnN0ZXAuZWxlbWVudHMpLnVuYmluZCgnY2xpY2snLCBjbGlja2VkKS5yZW1vdmVDbGFzcygndHV0b3JpYWwtYWN0aXZlJykucG9wb3ZlcignaGlkZScpO1xuICAgIH07XG4gICAgcmVjZWl2ZSA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZSwgZGF0YSkge1xuICAgICAgdmFyIGJvZHksIGJ0bjEsIGJ0bjIsIGNvbnRlbnQsIGRpYWxvZywgZm9vdGVyLCBncm91cCwgaGVhZGVyLCBtb2RhbCwgdGl0bGU7XG4gICAgICBpZiAoZGF0YS5zdGFnZSA8IDApIHtcbiAgICAgICAgbW9kYWwgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdtb2RhbCBmYWRlJyk7XG4gICAgICAgIGRpYWxvZyA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWRpYWxvZycpO1xuICAgICAgICBjb250ZW50ID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnbW9kYWwtY29udGVudCcpO1xuICAgICAgICBoZWFkZXIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdtb2RhbC1oZWFkZXInKTtcbiAgICAgICAgYm9keSA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWJvZHknKTtcbiAgICAgICAgZm9vdGVyID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnbW9kYWwtZm9vdGVyJyk7XG4gICAgICAgIHRpdGxlID0gJCgnPGg0PjwvaDQ+JykuYWRkQ2xhc3MoJ21vZGFsLXRpdGxlJyk7XG4gICAgICAgIGdyb3VwID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnYnRuLWdyb3VwJyk7XG4gICAgICAgIGJ0bjEgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdidG4gYnRuLXN1Y2Nlc3MnKS5hdHRyKCd2YWx1ZScsICd5ZXMnKS50ZXh0KGkxOG4ueWVzKTtcbiAgICAgICAgYnRuMiA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ2J0biBidG4tZGFuZ2VyJykuYXR0cigndmFsdWUnLCAnbm8nKS50ZXh0KGkxOG4ubm8pO1xuICAgICAgICAkKGJ0bjEpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBhY3RpdmU6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICQobW9kYWwpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgcmV0dXJuIGxvYWQob2JqZWN0LCBuYW1lLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoYnRuMikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogJy9hcGkvY2hhcmFjdGVyL3R1dG9yaWFsJyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGFjdGl2ZTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuICQobW9kYWwpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKHRpdGxlKS50ZXh0KGRhdGEudGl0bGUpO1xuICAgICAgICAkKGJvZHkpLnRleHQoZGF0YS5kZXNjcmlwdGlvbik7XG4gICAgICAgICQoaGVhZGVyKS5hcHBlbmQodGl0bGUpO1xuICAgICAgICAkKGdyb3VwKS5hcHBlbmQoYnRuMikuYXBwZW5kKGJ0bjEpO1xuICAgICAgICAkKGZvb3RlcikuYXBwZW5kKGdyb3VwKTtcbiAgICAgICAgJChjb250ZW50KS5hcHBlbmQoaGVhZGVyKS5hcHBlbmQoYm9keSkuYXBwZW5kKGZvb3Rlcik7XG4gICAgICAgICQoZGlhbG9nKS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgICQobW9kYWwpLmFwcGVuZChkaWFsb2cpO1xuICAgICAgICAkKCdib2R5JykuYXBwZW5kKG1vZGFsKTtcbiAgICAgICAgcmV0dXJuICQobW9kYWwpLm1vZGFsKHtcbiAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICBrZXlib2FyZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9hZChvYmplY3QsIG5hbWUsIGRhdGEpO1xuICAgICAgfVxuICAgIH07XG4gICAgbG9hZCA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZSwgZGF0YSkge1xuICAgICAgdmFyIHR1dG9yaWFsO1xuICAgICAgdHV0b3JpYWwgPSBbXTtcbiAgICAgICQob2JqZWN0KS5maW5kKCcudHV0b3JpYWwtc3RlcCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbmRleCwgc3RlcDtcbiAgICAgICAgc3RlcCA9IG51bGw7XG4gICAgICAgIGluZGV4ID0gJCh0aGlzKS5kYXRhKCd0dXRvcmlhbC1pbmRleCcpO1xuICAgICAgICBpZiAoaW5kZXggPCBkYXRhLnN0YWdlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0dXRvcmlhbFtpbmRleF0gIT0gbnVsbCkge1xuICAgICAgICAgIHN0ZXAgPSB0dXRvcmlhbFtpbmRleF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RlcCA9IHtcbiAgICAgICAgICAgIGVsZW1lbnRzOiBbXSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICB9O1xuICAgICAgICAgIHR1dG9yaWFsW2luZGV4XSA9IHN0ZXA7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcC5lbGVtZW50cy5wdXNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGVwID0gc3RlcDtcbiAgICAgIH0pO1xuICAgICAgdHV0b3JpYWwgPSB0dXRvcmlhbC5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHR1dG9yaWFsc1tuYW1lXSA9IHR1dG9yaWFsO1xuICAgICAgcmV0dXJuIHNob3codHV0b3JpYWwuc2hpZnQoKSk7XG4gICAgfTtcbiAgICByZXR1cm4gJCgnW2RhdGEtdHV0b3JpYWw9dHJ1ZScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmFtZTtcbiAgICAgIG5hbWUgPSAkKHRoaXMpLmRhdGEoJ3R1dG9yaWFsLW5hbWUnKTtcbiAgICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICB1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmUoX3RoaXMsIG5hbWUsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGJhc2UsIGJhc2UxLCBiYXNlMiwgY2xvbmUsIG5vdGlmaWNhdGlvbnMsIHJlZnJlc2hpbmcsIHJlbE1vdXNlQ29vcmRzLCBzaG93Tm90aWZ5LCB0aW1lRm9ybWF0LCB0aW1lU2VwYXJhdGUsIHVwZGF0ZVByb2dyZXNzO1xuXG4gIHdpbmRvdy5mb3JtYXQgfHwgKHdpbmRvdy5mb3JtYXQgPSB7XG4gICAgdGltZToge1xuICAgICAgZGF5OiAnZCcsXG4gICAgICBob3VyOiAnaCcsXG4gICAgICBtaW51dGU6ICdtJyxcbiAgICAgIHNlY29uZDogJ3MnXG4gICAgfVxuICB9KTtcblxuICBpZiAod2luZG93LmFjdGl2ZSA9PSBudWxsKSB7XG4gICAgd2luZG93LmFjdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgJCh3aW5kb3cpLmZvY3VzKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB3aW5kb3cuYWN0aXZlID0gdHJ1ZTtcbiAgfSk7XG5cbiAgJCh3aW5kb3cpLmJsdXIoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5hY3RpdmUgPSBmYWxzZTtcbiAgfSk7XG5cbiAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5yZXNpemVUbykge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVG8pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZXNpemVUbyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJCh0aGlzKS50cmlnZ2VyKCdyZXNpemVkJyk7XG4gICAgfSwgNTAwKTtcbiAgfSk7XG5cbiAgd2luZG93LmxwYWQgfHwgKHdpbmRvdy5scGFkID0gZnVuY3Rpb24odmFsdWUsIHBhZGRpbmcpIHtcbiAgICB2YXIgaSwgaiwgcmVmLCB6ZXJvZXM7XG4gICAgemVyb2VzID0gXCIwXCI7XG4gICAgZm9yIChpID0gaiA9IDEsIHJlZiA9IHBhZGRpbmc7IDEgPD0gcmVmID8gaiA8PSByZWYgOiBqID49IHJlZjsgaSA9IDEgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICB6ZXJvZXMgKz0gXCIwXCI7XG4gICAgfVxuICAgIHJldHVybiAoemVyb2VzICsgdmFsdWUpLnNsaWNlKHBhZGRpbmcgKiAtMSk7XG4gIH0pO1xuXG4gIHRpbWVTZXBhcmF0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB2YWx1ZSArICcgJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICB0aW1lRm9ybWF0ID0gZnVuY3Rpb24odGV4dCwgdmFsdWUsIGZvcm1hdCkge1xuICAgIHRleHQgPSB0aW1lU2VwYXJhdGUodGV4dCk7XG4gICAgaWYgKHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgdGV4dCArPSB3aW5kb3cubHBhZCh2YWx1ZSwgMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRleHQgKz0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0ICsgZm9ybWF0O1xuICB9O1xuXG4gIHdpbmRvdy50aW1lRm9ybWF0IHx8ICh3aW5kb3cudGltZUZvcm1hdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGQsIGRhdGUsIGgsIG0sIHMsIHRleHQ7XG4gICAgdGV4dCA9ICcnO1xuICAgIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSAqIDEwMDApO1xuICAgIGQgPSBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG4gICAgaCA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBtID0gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG4gICAgcyA9IGRhdGUuZ2V0VVRDU2Vjb25kcygpO1xuICAgIGlmIChkID4gMCkge1xuICAgICAgdGV4dCArPSBkICsgZm9ybWF0LnRpbWUuZGF5O1xuICAgIH1cbiAgICBpZiAoaCA+IDApIHtcbiAgICAgIHRleHQgPSB0aW1lRm9ybWF0KHRleHQsIGgsIGZvcm1hdC50aW1lLmhvdXIpO1xuICAgIH1cbiAgICBpZiAoaCA+IDAgfHwgbSA+IDApIHtcbiAgICAgIHRleHQgPSB0aW1lRm9ybWF0KHRleHQsIG0sIGZvcm1hdC50aW1lLm1pbnV0ZSk7XG4gICAgfVxuICAgIGlmIChoID4gMCB8fCBtID4gMCB8fCBzID4gMCkge1xuICAgICAgdGV4dCA9IHRpbWVGb3JtYXQodGV4dCwgcywgZm9ybWF0LnRpbWUuc2Vjb25kKTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH0pO1xuXG4gIHdpbmRvdy50aW1lRm9ybWF0U2hvcnQgfHwgKHdpbmRvdy50aW1lRm9ybWF0U2hvcnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBkLCBkYXRlLCBoLCBtLCBzLCB0ZXh0O1xuICAgIHRleHQgPSAnJztcbiAgICBkYXRlID0gbmV3IERhdGUodmFsdWUgKiAxMDAwKTtcbiAgICBkID0gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xuICAgIGggPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgbSA9IGRhdGUuZ2V0VVRDTWludXRlcygpO1xuICAgIHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgICBpZiAoZCA+IDApIHtcbiAgICAgIHJldHVybiBkICsgZm9ybWF0LnRpbWUuZGF5O1xuICAgIH1cbiAgICBpZiAoaCA+IDApIHtcbiAgICAgIHJldHVybiB0aW1lRm9ybWF0KHRleHQsIGgsIGZvcm1hdC50aW1lLmhvdXIpO1xuICAgIH1cbiAgICBpZiAobSA+IDApIHtcbiAgICAgIHJldHVybiB0aW1lRm9ybWF0KHRleHQsIG0sIGZvcm1hdC50aW1lLm1pbnV0ZSk7XG4gICAgfVxuICAgIGlmIChzID4gMCkge1xuICAgICAgcmV0dXJuIHRpbWVGb3JtYXQodGV4dCwgcywgZm9ybWF0LnRpbWUuc2Vjb25kKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJlZnJlc2hpbmcgPSBmYWxzZTtcblxuICAoYmFzZSA9IHdpbmRvdy5sb2NhdGlvbikucmVmcmVzaCB8fCAoYmFzZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFyZWZyZXNoaW5nKSB7XG4gICAgICByZWZyZXNoaW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgIH1cbiAgfSk7XG5cbiAgbm90aWZpY2F0aW9ucyA9IFtdO1xuXG4gIHdpbmRvdy5ub3RpZnkgfHwgKHdpbmRvdy5ub3RpZnkgPSBmdW5jdGlvbihwcm9wcykge1xuICAgIHJldHVybiBub3RpZmljYXRpb25zLnB1c2gocHJvcHMpO1xuICB9KTtcblxuICBjbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXksIHRlbXA7XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICB0ZW1wID0gbmV3IG9iai5jb25zdHJ1Y3RvcigpO1xuICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgdGVtcFtrZXldID0gY2xvbmUob2JqW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcDtcbiAgfTtcblxuICBzaG93Tm90aWZ5ID0gZnVuY3Rpb24obiwgaSkge1xuICAgIGNvbnNvbGUubG9nKCdQJywgbiwgaSk7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuICAgICAgY29uc29sZS5sb2coJ1MnLCBuLCBpKTtcbiAgICAgIHJldHVybiAkLm5vdGlmeShuLCB7XG4gICAgICAgIHBsYWNlbWVudDoge1xuICAgICAgICAgIGZyb206ICdib3R0b20nXG4gICAgICAgIH0sXG4gICAgICAgIG1vdXNlX292ZXI6ICdwYXVzZSdcbiAgICAgIH0pO1xuICAgIH0pLCBpICogMTAwMCk7XG4gIH07XG5cbiAgd2luZG93Lm5vdGlmeVNob3cgfHwgKHdpbmRvdy5ub3RpZnlTaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluZGV4LCBqLCBsZW4sIG5vdGlmaWNhdGlvbjtcbiAgICBpZiAod2luZG93LmFjdGl2ZSkge1xuICAgICAgZm9yIChpbmRleCA9IGogPSAwLCBsZW4gPSBub3RpZmljYXRpb25zLmxlbmd0aDsgaiA8IGxlbjsgaW5kZXggPSArK2opIHtcbiAgICAgICAgbm90aWZpY2F0aW9uID0gbm90aWZpY2F0aW9uc1tpbmRleF07XG4gICAgICAgIHNob3dOb3RpZnkoJC5leHRlbmQoe30sIG5vdGlmaWNhdGlvbiksIGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub3RpZmljYXRpb25zID0gW107XG4gICAgfVxuICB9KTtcblxuICAkKHdpbmRvdykuZm9jdXMoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5ub3RpZnlTaG93KCk7XG4gIH0pO1xuXG4gIE1hdGguY2xhbXAgfHwgKE1hdGguY2xhbXAgPSBmdW5jdGlvbih2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odmFsdWUsIG1heCksIG1pbik7XG4gIH0pO1xuXG4gIE1hdGgubGVycCB8fCAoTWF0aC5sZXJwID0gZnVuY3Rpb24oaSwgYSwgYikge1xuICAgIHJldHVybiAoYSAqIGkpICsgKGIgKiAoMSAtIGkpKTtcbiAgfSk7XG5cbiAgTWF0aC5oZXhUb1JnYiB8fCAoTWF0aC5oZXhUb1JnYiA9IGZ1bmN0aW9uKGhleCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgcmVzdWx0ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXG4gICAgICAgIGc6IHBhcnNlSW50KHJlc3VsdFsyXSwgMTYpLFxuICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pO1xuXG4gIE1hdGgucmdiVG9IZXggfHwgKE1hdGgucmdiVG9IZXggPSBmdW5jdGlvbihyLCBnLCBiKSB7XG4gICAgcmV0dXJuIFwiI1wiICsgKCgxIDw8IDI0KSArIChyIDw8IDE2KSArIChnIDw8IDgpICsgYikudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xuICB9KTtcblxuICBNYXRoLmxlcnBDb2xvcnMgfHwgKE1hdGgubGVycENvbG9ycyA9IGZ1bmN0aW9uKGksIGEsIGIpIHtcbiAgICB2YXIgY2EsIGNiLCBjYztcbiAgICBjYSA9IE1hdGguaGV4VG9SZ2IoYSk7XG4gICAgY2IgPSBNYXRoLmhleFRvUmdiKGIpO1xuICAgIGNjID0ge1xuICAgICAgcjogTWF0aC5yb3VuZChNYXRoLmxlcnAoaSwgY2EuciwgY2IucikpLFxuICAgICAgZzogTWF0aC5yb3VuZChNYXRoLmxlcnAoaSwgY2EuZywgY2IuZykpLFxuICAgICAgYjogTWF0aC5yb3VuZChNYXRoLmxlcnAoaSwgY2EuYiwgY2IuYikpXG4gICAgfTtcbiAgICByZXR1cm4gTWF0aC5yZ2JUb0hleChjYy5yLCBjYy5nLCBjYy5iKTtcbiAgfSk7XG5cbiAgdXBkYXRlUHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmFyLCBjYSwgY2IsIGxhYmVsLCBtYXgsIG1pbiwgbm93LCBwZXJjZW50LCByZWYsIHJldmVyc2VkO1xuICAgIGJhciA9ICQodGhpcykuY2hpbGRyZW4oJy5wcm9ncmVzcy1iYXInKTtcbiAgICBsYWJlbCA9ICQodGhpcykuY2hpbGRyZW4oJy5wcm9ncmVzcy1sYWJlbCcpO1xuICAgIG1pbiA9ICQoYmFyKS5kYXRhKCdtaW4nKTtcbiAgICBtYXggPSAkKGJhcikuZGF0YSgnbWF4Jyk7XG4gICAgY2EgPSAkKGJhcikuZGF0YSgnY2EnKTtcbiAgICBjYiA9ICQoYmFyKS5kYXRhKCdjYicpO1xuICAgIG5vdyA9IE1hdGguY2xhbXAoJChiYXIpLmRhdGEoJ25vdycpLCBtaW4sIG1heCk7XG4gICAgcmV2ZXJzZWQgPSBCb29sZWFuKChyZWYgPSAkKGJhcikuZGF0YSgncmV2ZXJzZWQnKSkgIT0gbnVsbCA/IHJlZiA6IGZhbHNlKTtcbiAgICBwZXJjZW50ID0gKG5vdyAtIG1pbikgLyAobWF4IC0gbWluKSAqIDEwMDtcbiAgICBpZiAocmV2ZXJzZWQpIHtcbiAgICAgIHBlcmNlbnQgPSAxMDAgLSBwZXJjZW50O1xuICAgIH1cbiAgICAkKGJhcikuY3NzKCd3aWR0aCcsIHBlcmNlbnQgKyAnJScpO1xuICAgIGlmICgoY2EgIT0gbnVsbCkgJiYgKGNiICE9IG51bGwpKSB7XG4gICAgICAkKGJhcikuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgTWF0aC5sZXJwQ29sb3JzKHBlcmNlbnQgLyAxMDAsIGNhLCBjYikpO1xuICAgIH1cbiAgICByZXR1cm4gJChsYWJlbCkudGV4dChub3cgKyAnIC8gJyArIG1heCk7XG4gIH07XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJCgnLnByb2dyZXNzJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZSB8fCAodGhpcy51cGRhdGUgPSB1cGRhdGVQcm9ncmVzcyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJlbE1vdXNlQ29vcmRzID0gZnVuY3Rpb24gKGV2ZW50KXtcbiAgICB2YXIgdG90YWxPZmZzZXRYID0gMDtcbiAgICB2YXIgdG90YWxPZmZzZXRZID0gMDtcbiAgICB2YXIgY2FudmFzWCA9IDA7XG4gICAgdmFyIGNhbnZhc1kgPSAwO1xuICAgIHZhciBjdXJyZW50RWxlbWVudCA9IHRoaXM7XG5cbiAgICBkb3tcbiAgICAgICAgdG90YWxPZmZzZXRYICs9IGN1cnJlbnRFbGVtZW50Lm9mZnNldExlZnQgLSBjdXJyZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgICAgICB0b3RhbE9mZnNldFkgKz0gY3VycmVudEVsZW1lbnQub2Zmc2V0VG9wIC0gY3VycmVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIH1cbiAgICB3aGlsZShjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50Lm9mZnNldFBhcmVudClcblxuICAgIGNhbnZhc1ggPSBldmVudC5wYWdlWCAtIHRvdGFsT2Zmc2V0WDtcbiAgICBjYW52YXNZID0gZXZlbnQucGFnZVkgLSB0b3RhbE9mZnNldFk7XG5cbiAgICByZXR1cm4ge3g6Y2FudmFzWCwgeTpjYW52YXNZfVxufTtcblxuICBIVE1MQ2FudmFzRWxlbWVudC5wcm90b3R5cGUucmVsTW91c2VDb29yZHMgPSByZWxNb3VzZUNvb3JkcztcblxuICAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9sZFNob3c7XG4gICAgcmV0dXJuIG9sZFNob3cgPSAkLmZuLnNob3c7XG5cbiAgICAvKlxuICAgIFxuICAgIFxuICAgIFx0JC5mbi5zaG93ID0gKHNwZWVkLCBvbGRDYWxsYmFjaykgLT5cbiAgICBcbiAgICBcdFx0Y29uc29sZS5sb2coJ3Nob3cnLCB0aGlzKVxuICAgIFxuICAgIFx0XHRuZXdDYWxsYmFjayA9IC0+XG4gICAgXG4gICAgXHRcdFx0b2xkQ2FsbGJhY2suYXBwbHkodGhpcykgaWYgJC5pc0Z1bmN0aW9uKG9sZENhbGxiYWNrKVxuICAgIFx0XHRcdCQodGhpcykudHJpZ2dlcignYWZ0ZXJTaG93JylcbiAgICBcbiAgICBcdFx0JCh0aGlzKS50cmlnZ2VyKCdiZWZvcmVTaG93JylcbiAgICBcbiAgICBcdFx0ZGVlcCA9ICQodGhpcykuZmluZCgnW2RhdGEtZGVlcHNob3ddJylcbiAgICBcbiAgICBcdFx0aWYgZGVlcC5sZW5ndGhcbiAgICBcdFx0XHRkZWVwLnNob3coKVxuICAgIFxuICAgIFx0XHRvbGRTaG93LmFwcGx5KHRoaXMsIFtzcGVlZCwgbmV3Q2FsbGJhY2tdKVxuICAgICAqL1xuICB9KSgpO1xuXG4gIChiYXNlMSA9IFN0cmluZy5wcm90b3R5cGUpLmVzY2FwZSB8fCAoYmFzZTEuZXNjYXBlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgfSk7XG5cbiAgKGJhc2UyID0gU3RyaW5nLnByb3RvdHlwZSkucmVwbGFjZUFsbCB8fCAoYmFzZTIucmVwbGFjZUFsbCA9IGZ1bmN0aW9uKHNlYXJjaCwgcmVwbGFjZSkge1xuICAgIHJldHVybiB0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChzZWFyY2guZXNjYXBlKCksICdnaScpLCByZXBsYWNlKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ3Y0M1amIyWm1aV1VpTENKaGRtRjBZWEl1WTI5bVptVmxJaXdpWW1GMGRHeGxMbU52Wm1abFpTSXNJbU5vWVhRdVkyOW1abVZsSWl3aVkyeHZZMnN1WTI5bVptVmxJaXdpWkdsaGJHOW5MbU52Wm1abFpTSXNJbVZ0YjNScFkyOXVMbU52Wm1abFpTSXNJbVZ4ZFdGc2FYcGxjaTVqYjJabVpXVWlMQ0ptYjNKdExtTnZabVpsWlNJc0ltbGxabWw0TG1OdlptWmxaU0lzSW1sdFlXZGxVSEpsZG1sbGR5NWpiMlptWldVaUxDSnNZVzVuZFdGblpTNWpiMlptWldVaUxDSnVZWFptYVhndVkyOW1abVZsSWl3aWNHeGhiblJoZEdsdmJpNWpiMlptWldVaUxDSndiR0Y1WlhJdVkyOW1abVZsSWl3aWMzRjFZWEpsTG1OdlptWmxaU0lzSW5OMFlYUnBjM1JwWTNNdVkyOW1abVZsSWl3aWRHbHRaWEl1WTI5bVptVmxJaXdpZEc5dmJIUnBjQzVqYjJabVpXVWlMQ0owZFhSdmNtbGhiQzVqYjJabVpXVWlMQ0oxZEdsc2N5NWpiMlptWldVaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlRVRTdSVUZCUVN4SlFVRkRMRU5CUVVFc1IwRkJSQ3hIUVVGUExFOUJRVThzUTBGQlF5eE5RVUZTTEVOQlFXVXNUVUZCWml4RlFVRjFRaXhGUVVGMlFqczdSVUZKVUN4SlFVRkRMRU5CUVVFc1IwRkJSeXhEUVVGRExGVkJRVXdzUTBGQlowSXNaMEpCUVdoQ0xFVkJRV3RETEZOQlFVTXNUVUZCUkR0WFFVZHFReXhOUVVGTkxFTkJRVU1zUzBGQlVDeEhRVUZsTEZOQlFVTXNTMEZCUkN4RlFVRlJMRk5CUVZJN1FVRkZaQ3hWUVVGQk8wMUJRVUVzUTBGQlFTeDFRa0ZCU1N4WlFVRlpPMDFCUTJoQ0xFTkJRVUVzUjBGQlNTeEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRVZCUVZRc1JVRkJZU3hEUVVGaU8yRkJSVW9zU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4TFFVRkJMRWRCUVZFc1EwRkJia0lzUTBGQlFTeEhRVUYzUWp0SlFVeFdPMFZCU0d0Q0xFTkJRV3hET3p0RlFXTkJMRWxCUVVNc1EwRkJRU3hIUVVGSExFTkJRVU1zVlVGQlRDeERRVUZuUWl4clFrRkJhRUlzUlVGQmIwTXNVMEZCUXl4TlFVRkVMRWRCUVVFc1EwRkJjRU03UVVGc1FrRTdPenRCUTBwQk8wRkJRVUVzVFVGQlFUczdSVUZCUVN4UFFVRkJMRWRCUVZVc1UwRkJRVHRKUVVOVUxFTkJRVUVzUTBGQlJTeFRRVUZHTEVOQlFWa3NRMEZCUXl4WFFVRmlMRU5CUVhsQ0xGRkJRWHBDTzBsQlEwRXNRMEZCUVN4RFFVRkZMRk5CUVVZc1EwRkJXU3hEUVVGRExFZEJRV0lzUTBGQmFVSXNRMEZCUVN4RFFVRkZMRWxCUVVZc1EwRkJUeXhEUVVGRExFbEJRVklzUTBGQllTeFJRVUZpTEVOQlFXcENPMWRCUTBFc1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZETEZGQlFWSXNRMEZCYVVJc1VVRkJha0k3UlVGSVV6czdSVUZOVml4RFFVRkJMRU5CUVVVc1UwRkJRVHRYUVVORUxFTkJRVUVzUTBGQlJTeFRRVUZHTEVOQlFWa3NRMEZCUXl4TFFVRmlMRU5CUVcxQ0xFOUJRVzVDTEVOQlFUSkNMRU5CUVVNc1MwRkJOVUlzUTBGQlFTeERRVUZ0UXl4RFFVRkRMRTlCUVhCRExFTkJRVFJETEU5QlFUVkRPMFZCUkVNc1EwRkJSanRCUVU1Qk96czdRVU5HUVR0QlFVRkJMRTFCUVVFN08wVkJRVUVzVFVGQlFTeEhRVU5ETzBsQlFVRXNVVUZCUVN4RlFVRlZMRVZCUVZZN1NVRkRRU3hYUVVGQkxFVkJRV0VzUlVGRVlqdEpRVVZCTEZsQlFVRXNSVUZCWXl4RlFVWmtPMGxCUjBFc1RVRkJRU3hGUVVGUkxFTkJTRkk3U1VGSlFTeFJRVUZCTEVWQlFWVXNTVUZCUVN4SFFVRlBMRVZCU21wQ096czdSVUZSU3p0SlFVZFJMRzFDUVVGRExFbEJRVVFzUlVGQlR5eEpRVUZRTzBGQlJWb3NWVUZCUVR0TlFVRkJMRXRCUVVFc1IwRkJXU3hKUVVGQkxFdEJRVUVzUTBGQlFUdE5RVU5hTEV0QlFVc3NRMEZCUXl4SFFVRk9MRWRCUVZrc1NVRkJTU3hEUVVGRE8wMUJRMnBDTEV0QlFVc3NRMEZCUXl4TlFVRk9MRWRCUVdVc1EwRkJRU3hUUVVGQkxFdEJRVUU3WlVGQlFTeFRRVUZCTzJsQ1FVTmtMRXRCUVVNc1EwRkJRU3hOUVVGRUxFZEJRVlU3VVVGRVNUdE5RVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFN1RVRkxaaXhKUVVGRExFTkJRVUVzU1VGQlJDeEhRVUZSTzAxQlExSXNTVUZCUXl4RFFVRkJMRWxCUVVRc1IwRkJVU3hKUVVGSkxFTkJRVU03VFVGRFlpeEpRVUZETEVOQlFVRXNSVUZCUkN4SFFVRk5MRWxCUVVrc1EwRkJRenROUVVOWUxFbEJRVU1zUTBGQlFTeExRVUZFTEVkQlFWTXNTVUZCU1N4RFFVRkRPMDFCUTJRc1NVRkJReXhEUVVGQkxFMUJRVVFzUjBGQlZTeEpRVUZKTEVOQlFVTTdUVUZEWml4SlFVRkRMRU5CUVVFc1UwRkJSQ3hIUVVGaExFbEJRVWtzUTBGQlF6dEpRV1JPT3p0M1FrRnBRbUlzU1VGQlFTeEhRVUZOTEZOQlFVTXNUMEZCUkN4RlFVRlZMRWxCUVZZN1FVRkRUQ3hWUVVGQk8wMUJRVUVzU1VGQlJ5eEpRVUZETEVOQlFVRXNTVUZCUkN4TFFVRlRMRXRCUVZvN1VVRkRReXhQUVVGUExFTkJRVU1zVjBGQlVpeEhRVUZ6UWp0UlFVTjBRaXhQUVVGUExFTkJRVU1zVTBGQlVpeEhRVUZ2UWl4NVFrRkdja0k3VDBGQlFTeE5RVUZCTzFGQlNVTXNUMEZCVHl4RFFVRkRMRmRCUVZJc1IwRkJjMEk3VVVGRGRFSXNUMEZCVHl4RFFVRkRMRk5CUVZJc1IwRkJiMElzTUVKQlRISkNPenROUVU5QkxFOUJRVThzUTBGQlF5eFJRVUZTTEVOQlFXbENMRU5CUVdwQ0xFVkJRVzlDTEVOQlFYQkNMRVZCUVhWQ0xFbEJRWFpDTEVWQlFUWkNMRWxCUVRkQ08wMUJRMEVzVDBGQlR5eERRVUZETEZWQlFWSXNRMEZCYlVJc1EwRkJia0lzUlVGQmMwSXNRMEZCZEVJc1JVRkJlVUlzU1VGQmVrSXNSVUZCSzBJc1NVRkJMMEk3VFVGRlFTeEpRVUZITEcxQ1FVRklPMUZCUTBNc1QwRkJUeXhEUVVGRExGTkJRVklzUTBGQmEwSXNTVUZCUXl4RFFVRkJMRTFCUVc1Q0xFVkJRVEpDTEUxQlFVMHNRMEZCUXl4TlFVRnNReXhGUVVFd1F5eE5RVUZOTEVOQlFVTXNUVUZCYWtRc1JVRkJlVVFzU1VGQlFTeEhRVUZQTEUxQlFVMHNRMEZCUXl4TlFVRlFMRWRCUVdkQ0xFTkJRV2hHTEVWQlFXMUdMRWxCUVVFc1IwRkJUeXhOUVVGTkxFTkJRVU1zVFVGQlVDeEhRVUZuUWl4RFFVRXhSeXhGUVVSRU96dE5RVWRCTEVsQlFVRXNSMEZCVHl4SlFVRkRMRU5CUVVFc1NVRkJSQ3hIUVVGUkxFbEJRVklzUjBGQlpTeEpRVUZETEVOQlFVRXNTMEZCYUVJc1IwRkJkMEk3VFVGRkwwSXNUMEZCVHl4RFFVRkRMRWxCUVZJc1IwRkJaU3hOUVVGTkxFTkJRVU1zV1VGQlVDeEhRVUZ6UWp0TlFVTnlReXhQUVVGUExFTkJRVU1zVTBGQlVpeEhRVUZ2UWp0TlFVTndRaXhQUVVGUExFTkJRVU1zVTBGQlVpeEhRVUZ2UWp0TlFVTndRaXhQUVVGUExFTkJRVU1zVjBGQlVpeEhRVUZ6UWp0TlFVTjBRaXhQUVVGQkxFZEJRVlVzVDBGQlR5eERRVUZETEZkQlFWSXNRMEZCYjBJc1NVRkJjRUk3VFVGRFZpeFBRVUZQTEVOQlFVTXNVVUZCVWl4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUWl4RFFVRkRMRWxCUVVFc1IwRkJUeXhQUVVGUExFTkJRVU1zUzBGQmFFSXNRMEZCUVN4SFFVRjVRaXhEUVVGb1JDeEZRVUZ0UkN4TlFVRk5MRU5CUVVNc1dVRkJNVVE3VFVGRFFTeFBRVUZQTEVOQlFVTXNWVUZCVWl4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4RFFVRkRMRWxCUVVFc1IwRkJUeXhQUVVGUExFTkJRVU1zUzBGQmFFSXNRMEZCUVN4SFFVRjVRaXhEUVVGc1JDeEZRVUZ4UkN4TlFVRk5MRU5CUVVNc1dVRkJOVVE3VFVGSFFTeFBRVUZQTEVOQlFVTXNTVUZCVWl4SFFVRmxMRTFCUVUwc1EwRkJReXhYUVVGUUxFZEJRWEZDTzAxQlEzQkRMRTlCUVU4c1EwRkJReXhYUVVGU0xFZEJRWE5DTzAxQlEzUkNMRTlCUVU4c1EwRkJReXhUUVVGU0xFZEJRVzlDTzAxQlEzQkNMRTlCUVU4c1EwRkJReXhSUVVGU0xFTkJRV2xDTEUxQlFVMHNRMEZCUXl4TlFVRjRRaXhGUVVGblF5eEpRVUZCTEVkQlFVOHNUVUZCVFN4RFFVRkRMRmRCUVdRc1IwRkJORUlzVFVGQlRTeERRVUZETEUxQlFXNUZMRVZCUVRKRkxFbEJRVUVzUjBGQlR5eE5RVUZOTEVOQlFVTXNUVUZCVUN4SFFVRm5RaXhEUVVGc1J5eEZRVUZ4Unl4TlFVRk5MRU5CUVVNc1YwRkJOVWM3VFVGRFFTeFBRVUZQTEVOQlFVTXNWVUZCVWl4RFFVRnRRaXhOUVVGTkxFTkJRVU1zVFVGQk1VSXNSVUZCYTBNc1NVRkJRU3hIUVVGUExFMUJRVTBzUTBGQlF5eFhRVUZrTEVkQlFUUkNMRTFCUVUwc1EwRkJReXhOUVVGeVJTeEZRVUUyUlN4SlFVRkJMRWRCUVU4c1RVRkJUU3hEUVVGRExFMUJRVkFzUjBGQlowSXNRMEZCY0Vjc1JVRkJkVWNzVFVGQlRTeERRVUZETEZkQlFUbEhPMDFCUlVFc1QwRkJUeXhEUVVGRExGTkJRVklzUjBGQmIwSTdUVUZEY0VJc1QwRkJUeXhEUVVGRExGRkJRVklzUTBGQmFVSXNUVUZCVFN4RFFVRkRMRTFCUVhoQ0xFVkJRV2RETEVsQlFVRXNSMEZCVHl4TlFVRk5MRU5CUVVNc1YwRkJaQ3hIUVVFMFFpeE5RVUZOTEVOQlFVTXNUVUZCYmtVc1JVRkJNa1VzUTBGQlF5eEpRVUZCTEVkQlFVOHNUVUZCVFN4RFFVRkRMRTFCUVZBc1IwRkJaMElzUTBGQmVFSXNRMEZCUVN4SFFVRTJRaXhEUVVGRExFbEJRVU1zUTBGQlFTeE5RVUZFTEVkQlFWVXNTVUZCUXl4RFFVRkJMRk5CUVZvc1EwRkJlRWNzUlVGQlowa3NUVUZCVFN4RFFVRkRMRmRCUVhaSk8wMUJSVUVzU1VGQlFTeEhRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRk1MRU5CUVZjc1NVRkJReXhEUVVGQkxFMUJRVm9zUTBGQlFTeEhRVUZ6UWl4TFFVRjBRaXhIUVVFNFFpeEpRVUZETEVOQlFVRTdUVUZEZEVNc1QwRkJRU3hIUVVGVkxFOUJRVThzUTBGQlF5eFhRVUZTTEVOQlFXOUNMRWxCUVhCQ08wMUJRMVlzVDBGQlR5eERRVUZETEZOQlFWSXNSMEZCYjBJN1lVRkRjRUlzVDBGQlR5eERRVUZETEZGQlFWSXNRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNRMEZCUXl4SlFVRkJMRWRCUVU4c1QwRkJUeXhEUVVGRExFdEJRV2hDTEVOQlFVRXNSMEZCZVVJc1EwRkJhRVFzUlVGQmJVUXNTVUZCUVN4SFFVRlBMRTFCUVUwc1EwRkJReXhYUVVGUUxFZEJRWEZDTEVOQlFTOUZPMGxCY2tOTE96czdPenM3UlVFeVEwUTdjVUpCUlV3c1MwRkJRU3hIUVVORE8wMUJRVUVzU1VGQlFTeEZRVUZOTEVkQlFVNDdUVUZEUVN4SlFVRkJMRVZCUVUwc1IwRkVUanROUVVWQkxFbEJRVUVzUlVGQlRTeEhRVVpPT3pzN1NVRlBXU3huUWtGQlF5eFBRVUZFTzAxQlJWb3NTVUZCUXl4RFFVRkJMRTFCUVVRc1IwRkJWU3hEUVVGQkxFTkJRVVVzVDBGQlJpeERRVUZWTEVOQlFVTXNVVUZCV0N4RFFVRnZRaXhSUVVGd1FpeERRVUU0UWl4RFFVRkJMRU5CUVVFN1RVRkRlRU1zU1VGQlF5eERRVUZCTEU5QlFVUXNSMEZCVnl4SlFVRkRMRU5CUVVFc1RVRkJUU3hEUVVGRExGVkJRVklzUTBGQmJVSXNTVUZCYmtJN1RVRkZXQ3hKUVVGRExFTkJRVUVzVTBGQlJDeEhRVUZoTEVOQlFVTXNRMEZCUXl4VFFVRkdMRU5CUVZrc1EwRkJRU3hEUVVGRkxFOUJRVVlzUTBGQlZTeERRVUZETEZGQlFWZ3NRMEZCYjBJc1lVRkJjRUlzUTBGQmEwTXNRMEZCUXl4TFFVRnVReXhEUVVGQkxFTkJRVEJETEVOQlFVTXNTVUZCTTBNc1EwRkJRU3hEUVVGYU8wbEJURVE3TzNGQ1FWbGlMRWxCUVVFc1IwRkJUU3hUUVVGQk8wRkJSVXdzVlVGQlFUdE5RVUZCTEVsQlFVTXNRMEZCUVN4TFFVRkVMRWRCUVZNN1RVRkRWQ3hKUVVGRExFTkJRVUVzVlVGQlJDeEhRVUZqTzAxQlEyUXNTVUZCUXl4RFFVRkJMRXRCUVVRc1IwRkJVenROUVVOVUxFbEJRVU1zUTBGQlFTeE5RVUZFTEVkQlFWVTdUVUZEVml4SlFVRkRMRU5CUVVFc1MwRkJSQ3hIUVVGVE8wMUJSVlFzUTBGQlFTeERRVUZGTEVsQlFVTXNRMEZCUVN4TlFVRklMRU5CUVZVc1EwRkJReXhMUVVGWUxFTkJRV2xDTEVOQlFVRXNVMEZCUVN4TFFVRkJPMlZCUVVFc1UwRkJReXhMUVVGRU8ybENRVUZYTEV0QlFVTXNRMEZCUVN4TFFVRkVMRU5CUVU4c1MwRkJVRHRSUVVGWU8wMUJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRnFRanROUVVOQkxFTkJRVUVzUTBGQlJTeFJRVUZHTEVOQlFWY3NRMEZCUXl4UFFVRmFMRU5CUVc5Q0xFTkJRVUVzVTBGQlFTeExRVUZCTzJWQlFVRXNVMEZCUXl4TFFVRkVPMmxDUVVGWExFdEJRVU1zUTBGQlFTeEhRVUZFTEVOQlFVc3NTMEZCVER0UlFVRllPMDFCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZ3UWp0QlFVVkJPMEZCUVVFc1YwRkJRU3h4UTBGQlFUczdVVUZEUXl4VFFVRkJMRWRCUVdkQ0xFbEJRVUVzVTBGQlFTeERRVUZWTEV0QlFWWXNSVUZCYVVJc1NVRkJha0k3VVVGRGFFSXNTVUZCUXl4RFFVRkJMRlZCUVZjc1EwRkJRU3hUUVVGVExFTkJRVU1zUlVGQlZpeERRVUZhTEVkQlFUUkNPMEZCUmpkQ08wRkJTMEU3UVVGQlFTeFhRVUZCTEhkRFFVRkJPenRSUVVORExGTkJRVUVzUjBGQlowSXNTVUZCUVN4VFFVRkJMRU5CUVZVc1RVRkJWaXhGUVVGclFpeEpRVUZzUWp0UlFVTm9RaXhKUVVGRExFTkJRVUVzVlVGQlZ5eERRVUZCTEZOQlFWTXNRMEZCUXl4RlFVRldMRU5CUVZvc1IwRkJORUk3UVVGR04wSTdUVUZKUVN4SlFVRkRMRU5CUVVFc1QwRkJUeXhEUVVGRExFbEJRVlFzUjBGQlowSXNUVUZCVFN4RFFVRkRMRkZCUVZBc1IwRkJhMEk3VFVGSGJFTXNTVUZCUXl4RFFVRkJMRTFCUVVRc1IwRkJWU3hKUVVGRExFTkJRVUVzVTBGQlZTeERRVUZCTEV0QlFVRXNRMEZCVHl4RFFVRkJMRWxCUVVNc1EwRkJRU3hMUVVGRU8wMUJRelZDTEVsQlFVTXNRMEZCUVN4UlFVRkVMRWRCUVZrc1NVRkJReXhEUVVGQkxGVkJRVmNzUTBGQlFTeEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRkZCUVZJN1RVRkRlRUlzU1VGQlF5eERRVUZCTEZGQlFVUXNSMEZCV1N4SlFVRkRMRU5CUVVFc1ZVRkJWeXhEUVVGQkxFbEJRVU1zUTBGQlFTeE5RVUZOTEVOQlFVTXNVVUZCVWp0aFFVVjRRanRKUVROQ1N6czdjVUpCWjBOT0xHTkJRVUVzUjBGQlowSXNVMEZCUXl4UlFVRkVMRVZCUVZjc1VVRkJXRHRCUVVWbUxGVkJRVUU3VFVGQlFTeEpRVUZCTEVkQlFVOHNTVUZCUXl4RFFVRkJMRTFCUVUwc1EwRkJReXhOUVVGU0xFZEJRV2xDTzAxQlEzaENMRk5CUVVFc1IwRkJXU3hKUVVGRExFTkJRVUVzVFVGQlRTeERRVUZETEV0QlFWSXNSMEZCWjBJN1RVRkZOVUlzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRlVMRU5CUVVFN1RVRkRRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZOQlFWUXNRMEZCYlVJc1EwRkJReXhUUVVGQkxFZEJRVmtzU1VGQllpeERRVUZCTEVkQlFYRkNMRU5CUVhoRExFVkJRVEpETEVOQlFVTXNTVUZCUXl4RFFVRkJMRTFCUVUwc1EwRkJReXhOUVVGU0xFZEJRV2xDTEVsQlFXeENMRU5CUVVFc1IwRkJNRUlzUTBGQmNrVTdUVUZEUVN4UlFVRlJMRU5CUVVNc1NVRkJWQ3hEUVVGakxFbEJRVU1zUTBGQlFTeFBRVUZtTEVWQlFYZENMRWxCUVhoQ08wMUJRMEVzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4UFFVRlVMRU5CUVVFN1RVRkZRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEVsQlFWUXNRMEZCUVR0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeERRVUZ0UWl4RFFVRkRMRk5CUVVFc1IwRkJXU3hKUVVGaUxFTkJRVUVzUjBGQmNVSXNRMEZCY2tJc1IwRkJlVUlzVTBGQk5VTXNSVUZCZFVRc1EwRkJReXhKUVVGRExFTkJRVUVzVFVGQlRTeERRVUZETEUxQlFWSXNSMEZCYVVJc1NVRkJiRUlzUTBGQlFTeEhRVUV3UWl4RFFVRnFSanROUVVOQkxGRkJRVkVzUTBGQlF5eEpRVUZVTEVOQlFXTXNTVUZCUXl4RFFVRkJMRTlCUVdZc1JVRkJkMElzU1VGQmVFSTdZVUZEUVN4SlFVRkRMRU5CUVVFc1QwRkJUeXhEUVVGRExFOUJRVlFzUTBGQlFUdEpRV0psT3p0eFFrRm5RbWhDTEZGQlFVRXNSMEZCVlN4VFFVRkRMRWxCUVVRN1FVRkRWQ3hWUVVGQk8wMUJRVUVzVTBGQlFTeEhRVUZaTEVsQlFVTXNRMEZCUVN4TlFVRk5MRU5CUVVNc1MwRkJVaXhIUVVGblFqdE5RVU0xUWl4VlFVRkJMRWRCUVdFc1NVRkJReXhEUVVGQkxFMUJRVTBzUTBGQlF5eE5RVUZTTEVkQlFXbENPMDFCUXpsQ0xGTkJRVUVzUjBGQldTeEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVZJc1IwRkJhVUk3VFVGRk4wSXNWVUZCUVN4SFFVRmhPMDFCUTJJc1UwRkJRU3hIUVVGWkxGVkJRVUVzUjBGQllUdE5RVU42UWl4TFFVRkJMRWRCUVZFc1UwRkJRU3hIUVVGWkxFTkJRVU1zVTBGQlFTeEhRVUZaTEZWQlFXSXNRMEZCUVN4SFFVRXlRanROUVVNdlF5eExRVUZCTEVkQlFWRTdUVUZEVWl4TFFVRkJMRWRCUVZFc1EwRkJReXhUUVVGQkxFZEJRVmtzUjBGQllpeERRVUZCTEVkQlFXOUNPMDFCUXpWQ0xFdEJRVUVzUjBGQlVUdE5RVU5TTEZOQlFVRXNSMEZCV1R0TlFVVmFMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zU1VGQlZDeEhRVUZuUWl4TlFVRk5MRU5CUVVNc1VVRkJVQ3hIUVVGclFqdE5RVU5zUXl4UFFVRkJMRWRCUVZVc1NVRkJReXhEUVVGQkxFOUJRVThzUTBGQlF5eFhRVUZVTEVOQlFYRkNMRWxCUVhKQ08wMUJRMVlzUzBGQlFTeEhRVUZSTEV0QlFVRXNSMEZCVVN4UFFVRlBMRU5CUVVNc1MwRkJVaXhIUVVGblFqdE5RVU5vUXl4TFFVRkJMRWRCUVZFN1RVRkpVaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEVsQlFWUXNRMEZCUVR0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeEhRVUZ4UWp0TlFVTnlRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZOQlFWUXNRMEZCYlVJc1MwRkJia0lzUlVGQk1FSXNTMEZCTVVJN1RVRkRRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEV0QlFWUXNRMEZCWlN4TFFVRm1MRVZCUVhOQ0xFdEJRWFJDTzAxQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFZEJRWEZDTzAxQlEzSkNMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVjBGQlZDeEhRVUYxUWp0TlFVTjJRaXhKUVVGRExFTkJRVUVzVVVGQlJDeERRVUZWTEZOQlFWWXNSVUZCY1VJc1ZVRkJRU3hIUVVGaExFZEJRV3hETEVWQlFYVkRMRlZCUVhaRE8wMUJRMEVzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4UFFVRlVMRU5CUVVFN1RVRkZRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEVsQlFWUXNRMEZCUVR0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeERRVUZ0UWl4TFFVRnVRaXhGUVVFd1FpeExRVUV4UWp0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeEhRVUZ4UWp0TlFVTnlRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZGQlFWUXNRMEZCYTBJc1NVRkJiRUlzUlVGQmQwSXNRMEZCZUVJc1JVRkJNa0lzUTBGQk0wSTdZVUZEUVN4SlFVRkRMRU5CUVVFc1QwRkJUeXhEUVVGRExFOUJRVlFzUTBGQlFUdEpRV3BEVXpzN2NVSkJiME5XTEZGQlFVRXNSMEZCVlN4VFFVRkRMRXRCUVVRc1JVRkJVU3hYUVVGU0xFVkJRWEZDTEZkQlFYSkNPMEZCUTFRc1ZVRkJRVHROUVVGQkxFZEJRVUVzUjBGQlRTeEpRVUZKTEVOQlFVTXNSVUZCVEN4SFFVRlZMRU5CUVZZc1IwRkJZenROUVVOd1FpeEpRVUZCTEVkQlFVOHNTVUZCU1N4RFFVRkRMRVZCUVV3c1IwRkJWVHROUVVWcVFpeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRk5CUVZRc1EwRkJRVHROUVVOQkxFTkJRVUVzUjBGQlNTeEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRWRCUVZRc1EwRkJRU3hIUVVGblFqdE5RVU53UWl4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExFZEJRVXdzUTBGQlV5eEhRVUZVTEVOQlFVRXNSMEZCWjBJN1RVRkRjRUlzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4TlFVRlVMRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRU5CUVc1Q08wMUJRMEVzUjBGQlFTeEpRVUZQTzBGQlJWQXNWMEZCVXl4blJrRkJWRHRSUVVORExFTkJRVUVzUjBGQlNTeEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRWRCUVZRc1EwRkJRU3hIUVVGblFqdFJRVU53UWl4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExFZEJRVXdzUTBGQlV5eEhRVUZVTEVOQlFVRXNSMEZCWjBJN1VVRkRjRUlzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4TlFVRlVMRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRU5CUVc1Q08xRkJRMEVzUjBGQlFTeEpRVUZQTzFGQlJWQXNRMEZCUVN4SFFVRkpMRWxCUVVrc1EwRkJReXhIUVVGTUxFTkJRVk1zUjBGQlZDeERRVUZCTEVkQlFXZENPMUZCUTNCQ0xFTkJRVUVzUjBGQlNTeEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRWRCUVZRc1EwRkJRU3hIUVVGblFqdFJRVU53UWl4SlFVRkRMRU5CUVVFc1QwRkJUeXhEUVVGRExFMUJRVlFzUTBGQlowSXNRMEZCYUVJc1JVRkJiVUlzUTBGQmJrSTdVVUZEUVN4SFFVRkJMRWxCUVU4N1FVRlVVanROUVZkQkxFbEJRVU1zUTBGQlFTeFBRVUZQTEVOQlFVTXNUVUZCVkN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4RFFVRkRMRmRCUVhCQ08wMUJRMEVzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRlVMRU5CUVVFN1RVRkRRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEUxQlFWUXNRMEZCUVR0aFFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeERRVUZCTzBsQmVFSlRPenR4UWtFeVFsWXNWVUZCUVN4SFFVRlpMRk5CUVVFN1RVRkZXQ3hKUVVGSExFbEJRVU1zUTBGQlFTeFRRVUZWTEVOQlFVRXNTMEZCUVN4RFFVRmtPMlZCUlVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVVppTzA5QlFVRXNUVUZCUVR0bFFVMURMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGT1lqczdTVUZHVnpzN2NVSkJWMW9zU1VGQlFTeEhRVUZOTEZOQlFVTXNTMEZCUkR0QlFVVk1MRlZCUVVFN1RVRkJRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZOQlFWUXNSMEZCY1VJN1RVRkRja0lzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4VFFVRlVMRU5CUVcxQ0xFTkJRVzVDTEVWQlFYTkNMRU5CUVhSQ0xFVkJRWGxDTEVsQlFVTXNRMEZCUVN4TlFVRk5MRU5CUVVNc1MwRkJha01zUlVGQmQwTXNTVUZCUXl4RFFVRkJMRTFCUVUwc1EwRkJReXhOUVVGb1JEdE5RVU5CTEVsQlFVTXNRMEZCUVN4TlFVRkVMRWxCUVZjc1NVRkJReXhEUVVGQkxFdEJRVTBzUTBGQlFTeEpRVUZETEVOQlFVRXNTMEZCUkN4RFFVRlFMRWRCUVdsQ08wMUJRelZDTEU5QlFVRXNSMEZCVlR0TlFVVldMRWxCUVVjc1NVRkJReXhEUVVGQkxFdEJRVVFzUzBGQlZTeE5RVUZXTEVsQlFYRkNMRTlCUVhoQ08xRkJRME1zVFVGQlFTeEhRVUZUTEVsQlFVTXNRMEZCUVN4VFFVRlZMRU5CUVVFc1MwRkJRU3hEUVVGUExFTkJRVUVzU1VGQlF5eERRVUZCTEV0QlFVUTdVVUZETTBJc1VVRkJRU3hIUVVGWExFbEJRVU1zUTBGQlFTeFZRVUZYTEVOQlFVRXNUVUZCVFN4RFFVRkRMRkZCUVZBN1VVRkRka0lzVVVGQlFTeEhRVUZYTEVsQlFVTXNRMEZCUVN4VlFVRlhMRU5CUVVFc1RVRkJUU3hEUVVGRExGRkJRVkE3VVVGRmRrSXNTVUZCUnl4TlFVRk5MRU5CUVVNc1NVRkJVQ3hMUVVGbExFdEJRV3hDTzFWQlEwTXNVVUZCVVN4RFFVRkRMRTFCUVZRc1IwRkJhMElzVFVGQlRTeERRVUZETEU5QlJERkNPenRSUVVkQkxFbEJRVU1zUTBGQlFTeGpRVUZFTEVOQlFXZENMRkZCUVdoQ0xFVkJRVEJDTEZGQlFURkNPMUZCUlVFc1NVRkJSeXhKUVVGRExFTkJRVUVzVFVGQlJDeEhRVUZWTEVkQlFWWXNTVUZCYTBJc1EwRkJTU3hKUVVGRExFTkJRVUVzUzBGQk1VSTdWVUZEUXl4SlFVRkRMRU5CUVVFc1RVRkJSQ3hIUVVGVk8xVkJRMVlzVVVGQlVTeERRVUZETEZkQlFWUXNSMEZCZFVJc1VVRkJVU3hEUVVGRE8xVkJSV2hETEVsQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVZBc1MwRkJaU3hMUVVGc1FqdFpRVU5ETEZGQlFWRXNRMEZCUXl4VFFVRlVMRWRCUVhGQ0xFbEJRVWtzUTBGQlF5eEhRVUZNTEVOQlFWTXNVVUZCVVN4RFFVRkRMRTFCUVZRc1IwRkJhMElzVFVGQlRTeERRVUZETEUxQlFXeERMRVZCUVRCRExFTkJRVEZETEVWQlJIUkNPMWRCUVVFc1RVRkJRVHRaUVVkRExGRkJRVkVzUTBGQlF5eFRRVUZVTEVkQlFYRkNMRkZCUVZFc1EwRkJReXhQUVVndlFqczdWVUZMUVN4SlFVRkRMRU5CUVVFc1MwRkJSQ3hIUVVGVExFOUJWRlk3TzFGQlYwRXNUMEZCUVN4SFFVRlZMRTFCY2tKWU96dE5RWFZDUVN4SlFVRkhMRWxCUVVNc1EwRkJRU3hMUVVGRUxFdEJRVlVzVFVGQlZpeEpRVUZ4UWl4UFFVRjRRanRSUVVORExFMUJRVUVzUjBGQlV5eEpRVUZETEVOQlFVRXNVMEZCVlN4RFFVRkJMRXRCUVVFc1EwRkJUeXhEUVVGQkxFbEJRVU1zUTBGQlFTeExRVUZFTzFGQlF6TkNMRkZCUVVFc1IwRkJWeXhKUVVGRExFTkJRVUVzVlVGQlZ5eERRVUZCTEUxQlFVMHNRMEZCUXl4UlFVRlFPMUZCUTNaQ0xGRkJRVUVzUjBGQlZ5eEpRVUZETEVOQlFVRXNWVUZCVnl4RFFVRkJMRTFCUVUwc1EwRkJReXhSUVVGUU8xRkJSWFpDTEVsQlFVTXNRMEZCUVN4alFVRkVMRU5CUVdkQ0xGRkJRV2hDTEVWQlFUQkNMRkZCUVRGQ08xRkJSVUVzU1VGQlJ5eEpRVUZETEVOQlFVRXNUVUZCUkN4SlFVRlhMRWRCUVdRN1ZVRkRReXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZkQlFWUXNSMEZCZFVJc1NVRkJReXhEUVVGQk8xVkJRM2hDTEZGQlFWRXNRMEZCUXl4TlFVRlVMRWRCUVd0Q0xGRkJRVkVzUTBGQlF5eFpRVVkxUWp0VFFVRkJMRTFCUVVFN1ZVRkpReXhKUVVGSExFbEJRVU1zUTBGQlFTeE5RVUZFTEVsQlFWY3NSMEZCWkR0WlFVTkRMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVjBGQlZDeEhRVUYxUWp0WlFVVjJRaXhEUVVGQkxFZEJRVWtzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4SlFVRkRMRU5CUVVFc1RVRkJSQ3hIUVVGVkxFZEJRWEpDTEVWQlFUQkNMRU5CUVRGQ0xFVkJRVFpDTEVOQlFUZENPMWxCUTBvc1VVRkJVU3hEUVVGRExFMUJRVlFzUjBGQmEwSXNTVUZCU1N4RFFVRkRMRWxCUVV3c1EwRkJWU3hEUVVGV0xFVkJRV0VzVVVGQlVTeERRVUZETEZOQlFYUkNMRVZCUVdsRExGRkJRVkVzUTBGQlF5eFhRVUV4UXl4RlFVcHVRanRYUVVGQkxFMUJRVUU3V1VGUFF5eFJRVUZSTEVOQlFVTXNUVUZCVkN4SFFVRnJRaXhSUVVGUkxFTkJRVU03V1VGRE0wSXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhYUVVGVUxFZEJRWFZDTEVsQlFVa3NRMEZCUXl4SFFVRk1MRU5CUVZNc1IwRkJRU3hIUVVGTkxFbEJRVU1zUTBGQlFTeE5RVUZvUWl4RlFVRjNRaXhEUVVGNFFpeEZRVko0UWp0WFFVcEVPenRSUVdOQkxFbEJRVWNzU1VGQlF5eERRVUZCTEUxQlFVUXNSMEZCVlN4SFFVRmlPMVZCUTBNc1NVRkJReXhEUVVGQkxFMUJRVVFzUjBGQlZUdFZRVU5XTEVsQlFVTXNRMEZCUVN4TFFVRkVMRWRCUVZNc1QwRkdWanM3VVVGSlFTeEpRVUZITEUxQlFVMHNRMEZCUXl4SlFVRlFMRXRCUVdVc1MwRkJiRUk3VlVGRFF5eEpRVUZCTEVkQlFVOHNUVUZCVFN4RFFVRkRPMVZCUldRc1NVRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlZqdFpRVU5ETEVsQlFVRXNTVUZCVVN4SlFVUlVPMWRCU0VRN1UwRkJRU3hOUVVGQk8xVkJUME1zU1VGQlFTeEhRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRlFjRUk3TzFGQlYwRXNTVUZCUXl4RFFVRkJMRkZCUVVRc1EwRkJWU3hKUVVGV08xRkJSMEVzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4WFFVRlVMRWRCUVhWQ08xRkJRM1pDTEU5QlFVRXNSMEZCVlN4TlFYaERXRHM3VFVFd1EwRXNTVUZCUnl4SlFVRkRMRU5CUVVFc1MwRkJSQ3hMUVVGVkxFMUJRVllzU1VGQmNVSXNUMEZCZUVJN1VVRkZReXhWUVVGQkxFZEJRV0VzU1VGQlF5eERRVUZCTEZOQlFWVXNRMEZCUVN4TFFVRkJMRU5CUVU4c1EwRkJRU3hKUVVGRExFTkJRVUVzUzBGQlJEdFJRVU12UWl4VlFVRkJMRWRCUVdFc1NVRkJReXhEUVVGQkxGTkJRVlVzUTBGQlFTeExRVUZCTEVOQlFVOHNRMEZCUVN4SlFVRkRMRU5CUVVFc1MwRkJSQ3hIUVVGVExFTkJRVlE3VVVGSEwwSXNXVUZCUVN4SFFVRmxMRWxCUVVNc1EwRkJRU3hWUVVGWExFTkJRVUVzVlVGQlZTeERRVUZETEZGQlFWZzdVVUZETTBJc1dVRkJRU3hIUVVGbExFbEJRVU1zUTBGQlFTeFZRVUZYTEVOQlFVRXNWVUZCVlN4RFFVRkRMRkZCUVZnN1VVRkhNMElzVVVGQlFTeEhRVUZYTEVOQlFVTXNTVUZCUXl4RFFVRkJMRTFCUVUwc1EwRkJReXhOUVVGU0xFZEJRV2xDTEVOQlFXeENMRU5CUVVFc1IwRkJkVUlzU1VGQlF5eERRVUZCTzFGQlJXNURMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zU1VGQlZDeERRVUZCTzFGQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFTkJRVzFDTEVOQlFXNUNMRVZCUVhOQ0xFTkJRVU1zVVVGQmRrSTdVVUZEUVN4SlFVRkRMRU5CUVVFc1kwRkJSQ3hEUVVGblFpeFpRVUZvUWl4RlFVRTRRaXhaUVVFNVFqdFJRVU5CTEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1QwRkJWQ3hEUVVGQk8xRkJSMEVzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4SlFVRlVMRU5CUVVFN1VVRkRRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZOQlFWUXNRMEZCYlVJc1EwRkJia0lzUlVGQmMwSXNTVUZCUXl4RFFVRkJMRTFCUVUwc1EwRkJReXhOUVVGU0xFZEJRV2xDTEZGQlFYWkRPMUZCUlVFc1NVRkJSeXhyUWtGQlNEdFZRVU5ETEZsQlFVRXNSMEZCWlN4SlFVRkRMRU5CUVVFc1ZVRkJWeXhEUVVGQkxGVkJRVlVzUTBGQlF5eFJRVUZZTzFWQlF6TkNMRmxCUVVFc1IwRkJaU3hKUVVGRExFTkJRVUVzVlVGQlZ5eERRVUZCTEZWQlFWVXNRMEZCUXl4UlFVRllPMVZCUlROQ0xFbEJRVWNzVlVGQlZTeERRVUZETEVsQlFWZ3NTMEZCYlVJc1MwRkJkRUk3V1VGRFF5eFpRVUZaTEVOQlFVTXNUVUZCWWl4SFFVRnpRaXhWUVVGVkxFTkJRVU1zVDBGRWJFTTdPMVZCUjBFc1NVRkJReXhEUVVGQkxHTkJRVVFzUTBGQlowSXNXVUZCYUVJc1JVRkJPRUlzV1VGQk9VSXNSVUZRUkR0VFFVRkJMRTFCUVVFN1ZVRlZReXhKUVVGQkxFZEJRVThzU1VGQlF5eERRVUZCTEZWQlFVUXNRMEZCUVR0VlFVTlFMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeEhRVUZ4UWp0VlFVTnlRaXhQUVVGQkxFZEJRVlVzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4WFFVRlVMRU5CUVhGQ0xFbEJRWEpDTzFWQlExWXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhSUVVGVUxFTkJRV3RDTEVsQlFXeENMRVZCUVhkQ0xFTkJRVU1zU1VGQlF5eERRVUZCTEUxQlFVMHNRMEZCUXl4TFFVRlNMRWRCUVdkQ0xFOUJRVThzUTBGQlF5eExRVUY2UWl4RFFVRkJMRWRCUVd0RExFTkJRVEZFTEVWQlFUWkVMRU5CUVVNc1NVRkJReXhEUVVGQkxFMUJRVTBzUTBGQlF5eE5RVUZTTEVkQlFXbENMRVZCUVd4Q0xFTkJRVUVzUjBGQmQwSXNRMEZCY2tZc1JVRmlSRHM3VVVGbFFTeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRTlCUVZRc1EwRkJRVHRSUVVWQkxFbEJRVWNzU1VGQlF5eERRVUZCTEUxQlFVUXNSMEZCVlN4SFFVRmlPMVZCUTBNc1NVRkJReXhEUVVGQkxFdEJRVVE3VlVGRFFTeEpRVUZETEVOQlFVRXNUVUZCUkN4SFFVRlZPMVZCUTFZc1NVRkJSeXhyUWtGQlNEdFpRVU5ETEVsQlFVTXNRMEZCUVN4TFFVRkVMRWRCUVZNc1QwRkVWanRYUVVGQkxFMUJRVUU3V1VGSFF5eEpRVUZETEVOQlFVRXNTMEZCUkN4SFFVRlRMRTFCU0ZZN1YwRklSRHM3VVVGUlFTeFBRVUZCTEVkQlFWVXNUVUU1UTFnN08wMUJhVVJCTEVsQlFVY3NTVUZCUXl4RFFVRkJMRXRCUVVRc1MwRkJWU3hMUVVGV0xFbEJRVzlDTEU5QlFYWkNPMUZCUTBNc1NVRkJRU3hIUVVGUExFbEJRVU1zUTBGQlFTeFZRVUZFTEVOQlFVRTdVVUZEVUN4SlFVRkRMRU5CUVVFc1RVRkJSQ3hIUVVGVk8xRkJRMVlzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4VFFVRlVMRWRCUVhGQ08xRkJRM0pDTEU5QlFVRXNSMEZCVlN4SlFVRkRMRU5CUVVFc1QwRkJUeXhEUVVGRExGZEJRVlFzUTBGQmNVSXNTVUZCY2tJN1VVRkRWaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZGQlFWUXNRMEZCYTBJc1NVRkJiRUlzUlVGQmQwSXNRMEZCUXl4SlFVRkRMRU5CUVVFc1RVRkJUU3hEUVVGRExFdEJRVklzUjBGQlowSXNUMEZCVHl4RFFVRkRMRXRCUVhwQ0xFTkJRVUVzUjBGQmEwTXNRMEZCTVVRc1JVRkJOa1FzUTBGQlF5eEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVZJc1IwRkJhVUlzUlVGQmJFSXNRMEZCUVN4SFFVRjNRaXhEUVVGeVJqdFJRVU5CTEU5QlFVRXNSMEZCVlN4TlFVNVlPenROUVZkQkxFdEJRVUVzUjBGQlVTeEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRXRCUVZJc1IwRkJaMEk3VFVGRGVFSXNUVUZCUVN4SFFVRlRMRWxCUVVNc1EwRkJRU3hOUVVGTkxFTkJRVU1zVFVGQlVpeEhRVUZwUWp0TlFVVXhRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEVsQlFWUXNRMEZCUVR0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVjBGQlZDeEhRVUYxUWp0TlFVTjJRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZOQlFWUXNSMEZCY1VJN1RVRkRja0lzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4UlFVRlVMRU5CUVd0Q0xFTkJRV3hDTEVWQlFYRkNMRTFCUVVFc1IwRkJVeXhGUVVFNVFpeEZRVUZyUXl4TFFVRnNReXhGUVVGNVF5eEZRVUY2UXp0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVlVGQlZDeERRVUZ2UWl4RFFVRndRaXhGUVVGMVFpeE5RVUZCTEVkQlFWTXNSVUZCYUVNc1JVRkJiME1zUzBGQmNFTXNSVUZCTWtNc1JVRkJNME03VFVGRlFTeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRk5CUVZRc1IwRkJjVUk3VFVGRGNrSXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhSUVVGVUxFTkJRV3RDTEVOQlFXeENMRVZCUVhGQ0xFMUJRVUVzUjBGQlV5eEZRVUU1UWl4RlFVRnJReXhMUVVGQkxFZEJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRWxCUVVNc1EwRkJRU3hMUVVGRUxFZEJRVk1zUTBGQlF5eEpRVUZETEVOQlFVRXNVMEZCVlN4RFFVRkJMRXRCUVVFc1EwRkJUU3hEUVVGRExFMUJRV3hDTEVkQlFUSkNMRU5CUVRWQ0xFTkJRV3hDTEVWQlFXdEVMRU5CUVd4RUxFTkJRVVFzUTBGQk1VTXNSVUZCYTBjc1JVRkJiRWM3VFVGRFFTeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRk5CUVZRc1IwRkJjVUk3UVVGRmNrSTdRVUZCUVN4WFFVRkJMSEZEUVVGQk96dFJRVVZETEVsQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVV3c1MwRkJZU3hUUVVGb1FqdFZRVU5ETEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1YwRkJWQ3hIUVVGMVFpeFZRVVI0UWpzN1VVRkhRU3hGUVVGQkxFZEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCVEN4SFFVRlZMRU5CUVVNc1NVRkJReXhEUVVGQkxGTkJRVlVzUTBGQlFTeExRVUZCTEVOQlFVMHNRMEZCUXl4TlFVRnNRaXhIUVVFeVFpeERRVUUxUWl4RFFVRllMRU5CUVVFc1IwRkJOa003VVVGRmJFUXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFTkJRVUU3VVVGRFFTeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRTFCUVZRc1EwRkJaMElzUlVGQlFTeEhRVUZMTEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1UwRkJWQ3hIUVVGeFFpeERRVUV4UWl4SFFVRTRRaXhEUVVFNVF5eEZRVUZwUkN4TlFVRkJMRWRCUVZNc1JVRkJNVVE3VVVGRFFTeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRTFCUVZRc1EwRkJaMElzUlVGQlFTeEhRVUZMTEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1UwRkJWQ3hIUVVGeFFpeERRVUV4UWl4SFFVRTRRaXhEUVVFNVF5eEZRVUZwUkN4TlFVRnFSRHRSUVVOQkxFbEJRVU1zUTBGQlFTeFBRVUZQTEVOQlFVTXNUVUZCVkN4RFFVRkJPMEZCVmtRN1lVRlpRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEU5QlFWUXNRMEZCUVR0SlFUZEtTenM3Y1VKQmEwdE9MRXRCUVVFc1IwRkJUeXhUUVVGRExFdEJRVVE3UVVGRFRpeFZRVUZCTzAxQlFVRXNUVUZCUVN4SFFVRlRMRWxCUVVNc1EwRkJRU3hOUVVGTkxFTkJRVU1zWTBGQlVpeERRVUYxUWl4TFFVRjJRanROUVVOVUxFTkJRVUVzUjBGQlNTeE5RVUZOTEVOQlFVTTdUVUZEV0N4RFFVRkJMRWRCUVVrc1RVRkJUU3hEUVVGRE8wMUJSVmdzUTBGQlFTeEhRVUZKTzAxQlEwb3NRMEZCUVN4SFFVRkpMRU5CUVVFc1IwRkJTU3hKUVVGRExFTkJRVUVzVFVGQlRTeERRVUZETEV0QlFWb3NSMEZCYjBJN1RVRkRlRUlzUTBGQlFTeEhRVUZKTEVsQlFVTXNRMEZCUVN4TlFVRk5MRU5CUVVNc1RVRkJVaXhIUVVGcFFqdE5RVU55UWl4RFFVRkJMRWRCUVVrc1EwRkJRU3hIUVVGSk8wMUJSMUlzU1VGQlJ5eERRVUZCTEVsQlFVc3NRMEZCVEN4SlFVRlhMRU5CUVVFc1NVRkJTeXhEUVVGb1FpeEpRVUZ6UWl4RFFVRkJMRWxCUVVzc1EwRkJNMElzU1VGQmFVTXNRMEZCUVN4SlFVRkxMRU5CUVhwRE8xRkJRME1zU1VGQlF5eERRVUZCTEV0QlFVUXNSMEZCVXl4SlFVRkpMRU5CUVVNc1MwRkJUQ3hEUVVGWExFTkJRVU1zUTBGQlFTeEhRVUZKTEVOQlFVd3NRMEZCUVN4SFFVRlZMRU5CUVVNc1EwRkJRU3hIUVVGSkxFTkJRVXdzUTBGQlZpeEhRVUZ2UWl4RFFVRkRMRWxCUVVNc1EwRkJRU3hUUVVGVkxFTkJRVUVzUzBGQlFTeERRVUZOTEVOQlFVTXNUVUZCYkVJc1IwRkJNa0lzUTBGQk5VSXNRMEZCTDBJN1VVRkRWQ3hKUVVGRExFTkJRVUVzUzBGQlJDeEhRVUZUTzJWQlExUXNTVUZCUXl4RFFVRkJMRTFCUVVRc1IwRkJWU3hKUVVoWU96dEpRVmhOT3p0eFFrRm5RbEFzUjBGQlFTeEhRVUZMTEZOQlFVTXNTMEZCUkR0TlFVVktMRWxCUVVjc1MwRkJTeXhEUVVGRExFdEJRVTRzUzBGQlpTeEZRVUZzUWp0UlFVTkRMRWxCUVVNc1EwRkJRU3hMUVVGRUxFZEJRVk1zUTBGQlF5eEpRVUZETEVOQlFVRXNUVUZFV2pzN1RVRkpRU3hKUVVGSExFdEJRVXNzUTBGQlF5eExRVUZPTEV0QlFXVXNSVUZCYkVJN1VVRkRReXhKUVVGRExFTkJRVUVzUzBGQlJDeEhRVUZUTEVsQlFVa3NRMEZCUXl4SFFVRk1MRU5CUVZNc1NVRkJReXhEUVVGQkxFdEJRVVFzUjBGQlV5eERRVUZzUWl4RlFVRnhRaXhEUVVGeVFqdFJRVU5VTEVsQlFVTXNRMEZCUVN4TlFVRkVMRWRCUVZVN1VVRkRWaXhKUVVGRExFTkJRVUVzUzBGQlJDeEhRVUZUTEU5QlNGWTdPMDFCUzBFc1NVRkJSeXhMUVVGTExFTkJRVU1zUzBGQlRpeExRVUZsTEVWQlFXeENPMUZCUTBNc1NVRkJReXhEUVVGQkxFdEJRVVFzUjBGQlV5eEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRWxCUVVNc1EwRkJRU3hMUVVGRUxFZEJRVk1zUTBGQmJFSXNSVUZCY1VJc1NVRkJReXhEUVVGQkxGTkJRVlVzUTBGQlFTeExRVUZCTEVOQlFVMHNRMEZCUXl4TlFVRnNRaXhIUVVFeVFpeERRVUZvUkR0UlFVTlVMRWxCUVVNc1EwRkJRU3hOUVVGRUxFZEJRVlU3WlVGRFZpeEpRVUZETEVOQlFVRXNTMEZCUkN4SFFVRlRMRTlCU0ZZN08wbEJXRWs3TzNGQ1FXbENUQ3haUVVGQkxFZEJRV01zVTBGQlF5eEpRVUZFTzBGQlJXSXNWVUZCUVR0TlFVRkJMRXRCUVVFc1IwRkJVU3hKUVVGSkxFTkJRVU1zUjBGQlRDeERRVUZUTEVsQlFVRXNSMEZCVHl4SlFVRkRMRU5CUVVFc1VVRkJha0lzUlVGQk1rSXNRMEZCTTBJN1RVRkRVaXhKUVVGRExFTkJRVUVzVVVGQlJDeEhRVUZaTzAxQlExb3NTVUZCUXl4RFFVRkJMRmRCUVVRc1NVRkJaMEk3UVVGRmFFSXNZVUZCVFN4SlFVRkRMRU5CUVVFc1YwRkJSQ3hKUVVGblFpeE5RVUZOTEVOQlFVTXNVVUZCTjBJN1VVRkZReXhKUVVGRExFTkJRVUVzVjBGQlJDeEpRVUZuUWl4TlFVRk5MRU5CUVVNN1VVRkRka0lzU1VGQlF5eERRVUZCTEVsQlFVUXNRMEZCVFN4TlFVRk5MRU5CUVVNc1VVRkJVQ3hIUVVGclFpeEpRVUY0UWp0TlFVaEVPMkZCUzBFc1RVRkJUU3hEUVVGRExIRkNRVUZRTEVOQlFUWkNMRU5CUVVFc1UwRkJRU3hMUVVGQk8yVkJRVUVzVTBGQlF5eEpRVUZFTzJsQ1FVRlZMRXRCUVVNc1EwRkJRU3haUVVGRUxFTkJRV01zU1VGQlpEdFJRVUZXTzAxQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hEUVVFM1FqdEpRVmhoT3p0eFFrRmpaQ3hMUVVGQkxFZEJRVThzVTBGQlFUdE5RVVZPTEVsQlFVY3NTVUZCUXl4RFFVRkJMRWxCUVVRc1EwRkJRU3hEUVVGSU8xRkJSVU1zU1VGQlF5eERRVUZCTEZGQlFVUXNSMEZCWjBJc1NVRkJRU3hKUVVGQkxFTkJRVUVzUTBGQlRTeERRVUZETEU5QlFWQXNRMEZCUVR0UlFVTm9RaXhKUVVGRExFTkJRVUVzVjBGQlJDeEhRVUZsTzJWQlEyWXNTVUZCUXl4RFFVRkJMRmxCUVVRc1EwRkJZeXhKUVVGRExFTkJRVUVzVVVGQlppeEZRVXBFT3p0SlFVWk5PenM3T3pzN1JVRlhVaXhEUVVGQkxFTkJRVVVzVTBGQlFUdFhRVVZFTEVOQlFVRXNRMEZCUlN4VFFVRkdMRU5CUVZrc1EwRkJReXhKUVVGaUxFTkJRV3RDTEUxQlFXeENMRVZCUVRCQ0xGTkJRVUU3UVVGRmVrSXNWVUZCUVR0TlFVRkJMRTFCUVVFc1IwRkJZU3hKUVVGQkxFMUJRVUVzUTBGQlR5eEpRVUZRTzJGQlEySXNUVUZCVFN4RFFVRkRMRXRCUVZBc1EwRkJRVHRKUVVoNVFpeERRVUV4UWl4RFFVdERMRU5CUVVNc1RVRk1SaXhEUVV0VExGVkJURlFzUTBGTGIwSXNRMEZCUXl4UFFVeHlRaXhEUVVzMlFpeE5RVXczUWp0RlFVWkRMRU5CUVVZN1FVRndZa0U3T3p0QlEwVkJPMFZCUVUwc1NVRkJReXhEUVVGQk8wRkJSVTRzVVVGQlFUczdTVUZCUVN4UlFVRkJMRWRCUVZjN1RVRkZWaXhWUVVGQkxFVkJRVmtzU1VGR1JqdE5RVWRXTEZOQlFVRXNSVUZCVnl4SlFVaEVPMDFCU1ZZc1YwRkJRU3hGUVVGaExFbEJTa2c3VFVGTFZpeFJRVUZCTEVWQlFWVXNRMEZNUVR0TlFVMVdMRTlCUVVFc1JVRkJVeXhEUVU1RE8wMUJUMVlzVTBGQlFTeEZRVUZYTEVOQlVFUTdUVUZSVml4VFFVRkJMRVZCUVZjc1IwRlNSRHROUVZOV0xGRkJRVUVzUlVGQlZTeEZRVlJCTzAxQlZWWXNTVUZCUVN4RlFVRk5MRWRCVmtrN1RVRlpWaXhUUVVGQkxFVkJRVmNzU1VGYVJEdE5RV0ZXTEZsQlFVRXNSVUZCWXl4SlFXSktPMDFCWTFZc1UwRkJRU3hGUVVGWExFVkJaRVE3VFVGbFZpeFpRVUZCTEVWQlFXTXNSVUZtU2p0TlFXZENWaXhWUVVGQkxFVkJRVmtzVFVGb1FrWTdUVUZwUWxZc1lVRkJRU3hGUVVGbExFdEJha0pNT3pzN1NVRnZRbGdzVVVGQlFTeEhRVUZYTzAxQlJWWXNUMEZCUVN4RlFVRlRMR0ZCUmtNN096dEpRVkZGTEdOQlFVTXNUMEZCUkN4RlFVRlZMRTlCUVZZN1FVRkpXaXhWUVVGQk8wMUJRVUVzUjBGQlFTeEhRVUZOTEVOQlFVTXNRMEZCUXl4TlFVRkdMRU5CUVZNc1JVRkJWQ3hGUVVGaExGRkJRV0lzUlVGQmRVSXNUMEZCZGtJN1RVRkZUaXhKUVVGRExFTkJRVUVzVlVGQlJDeEhRVUZqTEVkQlFVY3NRMEZCUXp0TlFVTnNRaXhKUVVGRExFTkJRVUVzVTBGQlJDeEhRVUZoTEVkQlFVY3NRMEZCUXp0TlFVTnFRaXhKUVVGRExFTkJRVUVzVTBGQlJDeEhRVUZwUWl4SlFVRkJMRk5CUVVFc1EwRkJRVHROUVVkcVFpeEpRVUZETEVOQlFVRXNVMEZCUkN4SFFVRmhMRWRCUVVjc1EwRkJRenROUVVOcVFpeEpRVUZETEVOQlFVRXNXVUZCUkN4SFFVRm5RaXhIUVVGSExFTkJRVU03VFVGRGNFSXNTVUZCUXl4RFFVRkJMRmxCUVVRc1IwRkJaMElzUjBGQlJ5eERRVUZETzAxQlEzQkNMRWxCUVVNc1EwRkJRU3hUUVVGRUxFZEJRV0VzUjBGQlJ5eERRVUZETzAxQlEycENMRWxCUVVNc1EwRkJRU3hoUVVGRUxFZEJRV2xDTEVkQlFVY3NRMEZCUXp0TlFVTnlRaXhKUVVGRExFTkJRVUVzVlVGQlJDeEhRVUZqTEVkQlFVY3NRMEZCUXp0TlFVbHNRaXhKUVVGRExFTkJRVUVzUzBGQlJDeEhRVUZUTEVOQlFVRXNRMEZCUlN4UFFVRkdMRU5CUVZVc1EwRkJReXhKUVVGWUxFTkJRV2RDTEZGQlFXaENPMDFCUTFRc1NVRkJReXhEUVVGQkxFMUJRVVFzUjBGQlZTeERRVUZCTEVOQlFVVXNUMEZCUml4RFFVRlZMRU5CUVVNc1NVRkJXQ3hEUVVGblFpeFRRVUZvUWp0TlFVTldMRWxCUVVNc1EwRkJRU3hQUVVGRUxFZEJRVmNzUTBGQlFTeERRVUZGTEU5QlFVWXNRMEZCVlN4RFFVRkRMRWxCUVZnc1EwRkJaMElzVDBGQmFFSTdUVUZEV0N4SlFVRkRMRU5CUVVFc1VVRkJSQ3hIUVVGWkxFTkJRVUVzUTBGQlJTeFBRVUZHTEVOQlFWVXNRMEZCUXl4SlFVRllMRU5CUVdkQ0xGRkJRV2hDTzAxQlExb3NTVUZCUXl4RFFVRkJMRmxCUVVRc1IwRkJaMElzUTBGQlFTeERRVUZGTEU5QlFVWXNRMEZCVlN4RFFVRkRMRWxCUVZnc1EwRkJaMElzV1VGQmFFSTdUVUZIYUVJc1NVRkJReXhEUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZZTEVOQlFXMUNMRWxCUVVNc1EwRkJRU3haUVVGd1FpeEZRVUZyUXl4SlFVRkRMRU5CUVVFc1MwRkJia003VFVGRlFTeEpRVUZETEVOQlFVRXNUVUZCVHl4RFFVRkJMRU5CUVVFc1EwRkJSU3hEUVVGRExGTkJRVmdzUjBGQmRVSXNTVUZCUXl4RFFVRkJMRTFCUVU4c1EwRkJRU3hEUVVGQkxFTkJRVVVzUTBGQlF6dE5RVVZzUXl4RFFVRkJMRU5CUVVVc1NVRkJReXhEUVVGQkxFdEJRVWdzUTBGQlV5eERRVUZETEU5QlFWWXNRMEZCYTBJc1EwRkJRU3hUUVVGQkxFdEJRVUU3WlVGQlFTeFRRVUZETEV0QlFVUTdhVUpCUVZjc1MwRkJReXhEUVVGQkxFdEJRVVFzUTBGQlR5eExRVUZRTzFGQlFWZzdUVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFTkJRV3hDTzAxQlIwRXNRMEZCUVN4RFFVRkZMRWxCUVVNc1EwRkJRU3hQUVVGSUxFTkJRVmNzUTBGQlF5eExRVUZhTEVOQlFXMUNMRU5CUVVFc1UwRkJRU3hMUVVGQk8yVkJRVUVzVTBGQlFUdFZRVVZzUWl4TFFVRkRMRU5CUVVFc1NVRkJSQ3hEUVVGQk8ybENRVU5CTEV0QlFVTXNRMEZCUVN4VlFVRkVMRU5CUVVFN1VVRklhMEk3VFVGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVc1Q08wMUJUVUVzUTBGQlFTeERRVUZGTEVsQlFVTXNRMEZCUVN4UlFVRklMRU5CUVZrc1EwRkJReXhMUVVGaUxFTkJRVzlDTEVOQlFVRXNVMEZCUVN4TFFVRkJPMlZCUVVFc1UwRkJRVHRwUWtGRmJrSXNTMEZCUXl4RFFVRkJMRmRCUVVRc1EwRkJRVHRSUVVadFFqdE5RVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJjRUk3VFVGUFFTeEpRVUZETEVOQlFVRXNVVUZCUkN4SFFVRlpMRWRCUVVjc1EwRkJRenROUVVkb1FpeEpRVUZETEVOQlFVRXNTVUZCUkN4SFFVRlJMRWRCUVVjc1EwRkJRenROUVVWYUxFbEJRVU1zUTBGQlFTeFJRVUZFTEVkQlFWa3NSMEZCUnl4RFFVRkRPMDFCUTJoQ0xFbEJRVU1zUTBGQlFTeEpRVUZFTEVkQlFWRXNTVUZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhEUVVGTExFbEJRVUVzU1VGQlFTeERRVUZCTEVOQlFVd3NRMEZCV1N4RFFVRkRMRTlCUVdJc1EwRkJRU3hEUVVGQkxFZEJRWGxDTEVsQlFYQkRMRU5CUVVFc1IwRkJORU1zU1VGQlF5eERRVUZCTzAxQlJYSkVMRWxCUVVNc1EwRkJRU3hMUVVGRUxFTkJRVUU3VFVGRFFTeEpRVUZETEVOQlFVRXNTVUZCUkN4SFFVRlJMRWxCUVVrc1EwRkJReXhIUVVGTUxFTkJRVk1zU1VGQlF5eERRVUZCTEVsQlFVUXNSMEZCVVN4SFFVRkhMRU5CUVVNc1QwRkJja0lzUlVGQk9FSXNRMEZCT1VJN1RVRkhVaXhKUVVGRExFTkJRVUVzVDBGQlJDeERRVUZCTzBsQk0wUlpPenR0UWtGdFJXSXNXVUZCUVN4SFFVRmpMRk5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkE3UVVGRllpeFZRVUZCTzAxQlFVRXNTVUZCUVN4clJFRkJaME1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNN1RVRkZha1FzU1VGQlJ5eGpRVUZCTEVsQlFWVXNUMEZCVHl4SlFVRlFMRXRCUVdkQ0xGRkJRVGRDTzBGQlJVTXNZVUZCUVN4VFFVRkJPenRWUVVORExFbEJRVUVzUjBGQlR5eEpRVUZKTEVOQlFVTXNUMEZCVEN4RFFVRmhMRWRCUVVFc1IwRkJUU3hEUVVGdVFpeEZRVUZ6UWl4RFFVRjBRanRCUVVSU0xGTkJSa1E3TzJGQlMwRTdTVUZVWVRzN2JVSkJZV1FzUzBGQlFTeEhRVUZQTEZOQlFVTXNTVUZCUkN4RlFVRlBMRWxCUVZBN1FVRkZUaXhWUVVGQk8wMUJRVUVzUzBGQlFTeEhRVUZSTEVOQlFVRXNRMEZCUlN4aFFVRkdMRU5CUTFBc1EwRkJReXhSUVVSTkxFTkJRMGNzVDBGRVNDeERRVVZRTEVOQlFVTXNVVUZHVFN4RFFVVkhMR05CUmtnc1EwRkhVQ3hEUVVGRExFbEJTRTBzUTBGSFJDeEpRVUZETEVOQlFVRXNXVUZCUkN4RFFVRmpMRWxCUVdRc1JVRkJiMElzU1VGQmNFSXNRMEZJUXp0aFFVdFNMRU5CUVVFc1EwRkJSU3hKUVVGRExFTkJRVUVzVFVGQlNDeERRVU5ETEVOQlFVTXNUVUZFUml4RFFVTlRMRXRCUkZRN1NVRlFUVHM3YlVKQlZWQXNTMEZCUVN4SFFVRlBMRk5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkE3WVVGRlRpeExRVUZCTEVOQlFVMHNTVUZCUXl4RFFVRkJMRmxCUVVRc1EwRkJZeXhKUVVGa0xFVkJRVzlDTEVsQlFYQkNMRU5CUVU0N1NVRkdUVHM3YlVKQlQxQXNTMEZCUVN4SFFVRlBMRk5CUVVFN1lVRkRUaXhKUVVGRExFTkJRVUVzU1VGQlJDeEhRVUZSTEVsQlFVa3NRMEZCUXl4TFFVRk1MRU5CUVZjc1EwRkJTeXhKUVVGQkxFbEJRVUVzUTBGQlFTeERRVUZNTEVOQlFWa3NRMEZCUXl4UFFVRmlMRU5CUVVFc1EwRkJRU3hIUVVGNVFpeEpRVUZ3UXp0SlFVUkdPenR0UWtGSlVDeEpRVUZCTEVkQlFVMHNVMEZCUVR0QlFVVk1MRlZCUVVFN1RVRkJRU3hIUVVGQkxFZEJRVTBzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4RFFVRkxMRWxCUVVFc1NVRkJRU3hEUVVGQkxFTkJRVXdzUTBGQldTeERRVUZETEU5QlFXSXNRMEZCUVN4RFFVRkJMRWRCUVhsQ0xFbEJRWEJETzAxQlEwNHNUMEZCUVN4SFFVRlZMRU5CUVVFc1EwRkJSU3hKUVVGRExFTkJRVUVzUzBGQlNDeERRVUZUTEVOQlFVTXNSMEZCVml4RFFVRkJPMDFCUlZZc1QwRkJRU3hIUVVGVkxFOUJRVThzUTBGQlF5eExRVUZTTEVOQlFXTXNWMEZCWkR0TlFVbFdMRWxCUVVjc2FVSkJRVUVzU1VGQllTeHZRa0ZCYUVJN1VVRkRReXhQUVVGQkxFZEJRVlVzVDBGQlVTeERRVUZCTEVOQlFVRTdRVUZGYkVJc1lVRkJRU3hoUVVGQk96dFZRVVZETEVsQlFVY3NUMEZCVHl4RFFVRkRMRmRCUVZJc1EwRkJRU3hEUVVGQkxFdEJRWGxDTEVOQlFVTXNRMEZCUXl4WFFVRkdMRU5CUVVFc1EwRkJOVUk3V1VGRlF5eEpRVUZCTEVkQlFVOHNTVUZCU3l4RFFVRkJMRU5CUVVFN1dVRkZXaXhKUVVGSExFOUJRVThzU1VGQlVDeExRVUZuUWl4VlFVRnVRanRqUVVORExFbEJRVWtzUTBGQlF5eEpRVUZNTEVOQlFWVXNTVUZCVmp0QlFVTkJMSEZDUVVaRU8yRkJTa1E3TzBGQlJrUTdVVUZWUVN4SlFVRkRMRU5CUVVFc1MwRkJSQ3hEUVVGUExHRkJRVkFzUlVGQmMwSTdWVUZCUXl4TlFVRkJMRVZCUVZFc1QwRkJWRHRUUVVGMFFqdEJRVU5CTEdWQlpFUTdPMDFCYVVKQkxFbEJRVWNzU1VGQlF5eERRVUZCTEZOQlFVbzdVVUZGUXl4SlFVRkhMRTlCUVU4c1EwRkJReXhOUVVGU0xFZEJRV2xDTEVsQlFVTXNRMEZCUVN4VFFVRnlRanRWUVVORExFbEJRVU1zUTBGQlFTeExRVUZFTEVOQlFVOHNWVUZCVUN4RlFVRnRRanRaUVVGRExFdEJRVUVzUlVGQlR5eEpRVUZETEVOQlFVRXNVMEZCVkR0WFFVRnVRanRCUVVOQkxHbENRVVpFT3p0UlFVbEJMRWxCUVVjc1QwRkJUeXhEUVVGRExFMUJRVklzUjBGQmFVSXNTVUZCUXl4RFFVRkJMRk5CUVhKQ08xVkJRME1zUzBGQlFTeERRVUZOTEZOQlFVNHNSVUZCYVVJN1dVRkJReXhMUVVGQkxFVkJRVThzU1VGQlF5eERRVUZCTEZOQlFWUTdWMEZCYWtJN1FVRkRRU3hwUWtGR1JEczdVVUZKUVN4SlFVRkhMRWxCUVVNc1EwRkJRU3hKUVVGRUxFZEJRVkVzU1VGQlF5eERRVUZCTEZGQlFWUXNSMEZCYjBJc1IwRkJka0k3VlVGRFF5eEpRVUZETEVOQlFVRXNTMEZCUkN4RFFVRlBMRlZCUVZBN1FVRkRRU3hwUWtGR1JEczdVVUZMUVN4SlFVRkJMRWRCUVU4c1EwRkJReXhEUVVGRExFMUJRVVlzUTBGQlV5eEZRVUZVTEVWQlFXRXNTVUZCUXl4RFFVRkJMRk5CUVdRc1JVRkJlVUk3VlVGQlF5eFBRVUZCTEVWQlFWTXNRMEZCUVN4RFFVRkZMRWxCUVVNc1EwRkJRU3hMUVVGSUxFTkJRVk1zUTBGQlF5eEhRVUZXTEVOQlFVRXNRMEZCVmp0VFFVRjZRanRSUVVWUUxFTkJRVU1zUTBGQlF5eEpRVUZHTEVOQlFVODdWVUZGVGl4SFFVRkJMRVZCUVVzc1NVRkJReXhEUVVGQkxGVkJSa0U3VlVGSFRpeFBRVUZCTEVWQlFWTXNRMEZCUVN4VFFVRkJMRXRCUVVFN2JVSkJRVUVzVTBGQlF5eEpRVUZFTzNGQ1FVRlZMRXRCUVVNc1EwRkJRU3hOUVVGRUxFTkJRVkVzU1VGQlVqdFpRVUZXTzFWQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hEUVVoSU8xVkJTVTRzU1VGQlFTeEZRVUZOTEVsQlNrRTdWVUZMVGl4UlFVRkJMRVZCUVZVc1RVRk1TanRWUVUxT0xFMUJRVUVzUlVGQlVTeEpRVUZETEVOQlFVRXNWVUZPU0R0VFFVRlFPMUZCVTBFc1NVRkJReXhEUVVGQkxFbEJRVVFzUjBGQlVUdGxRVU5TTEVOQlFVRXNRMEZCUlN4SlFVRkRMRU5CUVVFc1QwRkJTQ3hEUVVGWExFTkJRVU1zU1VGQldpeERRVUZwUWl4TlFVRnFRaXhGUVVGNVFpeEpRVUZETEVOQlFVRXNTVUZCUkN4SFFVRlJMRWxCUVVNc1EwRkJRU3hSUVVGc1F5eEZRVE5DUkR0UFFVRkJMRTFCUVVFN1pVRXJRa01zU1VGQlF5eERRVUZCTEV0QlFVUXNRMEZCVHl4WlFVRlFMRVZCTDBKRU96dEpRVEZDU3pzN2JVSkJORVJPTEU5QlFVRXNSMEZCVXl4VFFVRkJPMEZCUlZJc1ZVRkJRVHROUVVGQkxFbEJRVWNzU1VGQlF5eERRVUZCTEZsQlFVbzdVVUZGUXl4SlFVRkJMRWRCUVU4c1EwRkJReXhEUVVGRExFMUJRVVlzUTBGQlV5eEZRVUZVTEVWQlFXRXNTVUZCUXl4RFFVRkJMRmxCUVdRc1JVRkJORUk3VlVGQlF5eEpRVUZCTEVWQlFVMHNTVUZCUXl4RFFVRkJMRWxCUVZJN1UwRkJOVUk3VVVGRlVDeERRVUZETEVOQlFVTXNTVUZCUml4RFFVRlBPMVZCUlU0c1IwRkJRU3hGUVVGTExFbEJRVU1zUTBGQlFTeFZRVVpCTzFWQlIwNHNTVUZCUVN4RlFVRk5MRWxCU0VFN1ZVRkpUaXhSUVVGQkxFVkJRVlVzUTBGQlFTeFRRVUZCTEV0QlFVRTdiVUpCUVVFc1UwRkJRVHR4UWtGQlJ5eExRVUZETEVOQlFVRXNWVUZCUkN4RFFVRkJPMWxCUVVnN1ZVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlNrbzdWVUZMVGl4UFFVRkJMRVZCUVZNc1EwRkJRU3hUUVVGQkxFdEJRVUU3YlVKQlFVRXNVMEZCUXl4SlFVRkVPM0ZDUVVGVkxFdEJRVU1zUTBGQlFTeFZRVUZFTEVOQlFWa3NTVUZCV2p0WlFVRldPMVZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeERRVXhJTzFWQlRVNHNVVUZCUVN4RlFVRlZMRTFCVGtvN1ZVRlBUaXhOUVVGQkxFVkJRVkVzU1VGQlF5eERRVUZCTEdGQlVFZzdVMEZCVUR0bFFWVkJMRWxCUVVNc1EwRkJRU3hMUVVGRUxFTkJRVUVzUlVGa1JEdFBRVUZCTEUxQlFVRTdaVUZwUWtNc1NVRkJReXhEUVVGQkxFdEJRVVFzUTBGQlR5eGxRVUZRTEVWQmFrSkVPenRKUVVaUk96dHRRa0YxUWxRc1YwRkJRU3hIUVVGaExGTkJRVUU3WVVGRldpeERRVUZCTEVOQlFVVXNTVUZCUXl4RFFVRkJMRTFCUVVnc1EwRkJWU3hEUVVGRExFdEJRVmdzUTBGQlFUdEpRVVpaT3p0dFFrRkxZaXhWUVVGQkxFZEJRVmtzVTBGQlFUdGhRVVZZTEVOQlFVRXNRMEZCUlN4SlFVRkRMRU5CUVVFc1MwRkJTQ3hEUVVGVExFTkJRVU1zUjBGQlZpeERRVUZqTEVWQlFXUTdTVUZHVnpzN2JVSkJUVm9zVlVGQlFTeEhRVUZaTEZOQlFVTXNTVUZCUkR0aFFVTllMRU5CUVVFc1EwRkJSU3hUUVVGR0xFTkJRME1zUTBGQlF5eEpRVVJHTEVOQlEwOHNTVUZCUXl4RFFVRkJMRk5CUVZNc1EwRkJReXhOUVVGWUxFTkJRV3RDTEVsQlFVa3NRMEZCUXl4UFFVRjJRaXhEUVVSUUxFTkJSVU1zUTBGQlF5eE5RVVpHTEVOQlNVVXNRMEZCUVN4RFFVRkZMR2xDUVVGR0xFTkJRME1zUTBGQlF5eFJRVVJHTEVOQlExY3NWMEZFV0N4RFFVVkRMRU5CUVVNc1NVRkdSaXhEUVVWUExFMUJSbEFzUlVGRlpTeEpRVUZKTEVOQlFVTXNTVUZHY0VJc1EwRktSanRKUVVSWE96dHRRa0ZaV2l4VlFVRkJMRWRCUVZrc1UwRkJReXhKUVVGRU8wRkJSVmdzVlVGQlFUdE5RVUZCTEVkQlFVRXNSMEZCVFN4RFFVRkJMRU5CUVVVc1lVRkJSaXhEUVVOTUxFTkJRVU1zVVVGRVNTeERRVU5MTEV0QlJFd3NRMEZGVEN4RFFVRkRMRkZCUmtrc1EwRkZTeXhqUVVaTUxFTkJSMHdzUTBGQlF5eEpRVWhKTEVOQlIwTXNUVUZJUkN4RlFVZFRMRWxCUVVrc1EwRkJReXhKUVVoa0xFTkJTVXdzUTBGQlF5eEpRVXBKTEVOQlNVTXNVVUZLUkN4RlFVbFhMRWxCUVVrc1EwRkJReXhOUVVwb1FqdE5RVTFPTEVsQlFVRXNSMEZCVHl4RFFVRkJMRU5CUVVVc1lVRkJSaXhEUVVOT0xFTkJRVU1zVVVGRVN5eERRVU5KTEZWQlJFbzdUVUZIVUN4SlFVRkJMRWRCUVU4c1EwRkJRU3hEUVVGRkxHRkJRVVlzUTBGRFRpeERRVUZETEZGQlJFc3NRMEZEU1N4WFFVUktPMDFCUjFBc1NVRkJSeXh6UWtGQlNEdFJRVVZETEVsQlFVRXNSMEZCVHl4RFFVRkJMRU5CUVVVc1UwRkJSaXhEUVVOT0xFTkJRVU1zU1VGRVN5eERRVU5CTEUxQlJFRXNSVUZEVVN4SlFVRkRMRU5CUVVFc1dVRkJSQ3hEUVVGakxFbEJRVWtzUTBGQlF5eE5RVUZ1UWl4RFFVUlNMRU5CUlU0c1EwRkJReXhSUVVaTExFTkJSVWtzWVVGR1NpeEZRVVpTTzA5QlFVRXNUVUZCUVR0UlFVOURMRWxCUVVFc1IwRkJUeXhEUVVGQkxFTkJRVVVzWVVGQlJpeERRVU5PTEVOQlFVTXNVVUZFU3l4RFFVTkpMR0ZCUkVvc1JVRlFVanM3VFVGWlFTeEpRVUZCTEVkQlFVOHNRMEZCUVN4RFFVRkZMR0ZCUVVZc1EwRkRUaXhEUVVGRExGRkJSRXNzUTBGRFNTeGpRVVJLTzAxQlRWQXNUVUZCUVN4SFFVRlRMRU5CUVVFc1EwRkJSU3hoUVVGR0xFTkJRMUlzUTBGQlF5eFJRVVJQTEVOQlEwVXNaMEpCUkVZc1EwRkZVaXhEUVVGRExGRkJSazhzUTBGRlJTeGhRVVpHTEVOQlIxSXNRMEZCUXl4SlFVaFBMRU5CUjBZc1MwRklSU3hGUVVkTExFbEJRVWtzUTBGQlF5eE5RVWhXTzAxQlRWUXNUVUZCUVN4SFFVRlRMRU5CUVVFc1EwRkJSU3hUUVVGR0xFTkJRVmtzUTBGQlF5eE5RVUZpTEVOQlJWSXNRMEZCUVN4RFFVRkZMRzFDUVVGR0xFTkJRME1zUTBGQlF5eFJRVVJHTEVOQlExY3NWMEZFV0N4RFFVVkRMRU5CUVVNc1NVRkdSaXhEUVVWUExFbEJRVWtzUTBGQlF5eE5RVVphTEVOQlJsRTdUVUZQVkN4UFFVRkJMRWRCUVZVc1NVRkJReXhEUVVGQkxGVkJRVVFzUTBGQldTeEpRVUZhTzAxQlNWWXNRMEZCUVN4RFFVRkZMRWxCUVVZc1EwRkJUeXhEUVVGRExFMUJRVklzUTBGQlpTeE5RVUZtTEVOQlFYTkNMRU5CUVVNc1RVRkJka0lzUTBGQk9FSXNUVUZCT1VJN1RVRkRRU3hEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNUVUZCVWl4RFFVRmxMRTlCUVdZN1RVRkRRU3hEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNUVUZCVWl4RFFVRmxMRWxCUVdZN1RVRkRRU3hEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNUVUZCVWl4RFFVRmxMRWxCUVdZN1RVRkRRU3hEUVVGQkxFTkJRVVVzUjBGQlJpeERRVUZOTEVOQlFVTXNUVUZCVUN4RFFVRmpMRWxCUVdRc1EwRkJiVUlzUTBGQlF5eE5RVUZ3UWl4RFFVRXlRaXhKUVVFelFqdGhRVU5CTEVOQlFVRXNRMEZCUlN4SlFVRkRMRU5CUVVFc1RVRkJTQ3hEUVVGVkxFTkJRVU1zVFVGQldDeERRVUZyUWl4SFFVRnNRanRKUVhSRVZ6czdiVUpCZVVSYUxHRkJRVUVzUjBGQlpTeFRRVUZETEU5QlFVUXNSVUZCVlN4SlFVRldPMkZCUldRc1EwRkJRU3hEUVVGRkxFOUJRVVlzUTBGQlZTeERRVUZETEVsQlFWZ3NRMEZCWjBJc1pVRkJhRUlzUTBGQlowTXNRMEZCUXl4TlFVRnFReXhEUVVWRExFbEJRVU1zUTBGQlFTeFZRVUZFTEVOQlFWa3NTVUZCV2l4RFFVWkVPMGxCUm1NN08yMUNRVk5tTEZWQlFVRXNSMEZCV1N4VFFVRkRMRWxCUVVRN1FVRkhXQ3hWUVVGQk8wMUJRVUVzVFVGQlFTeEhRVUZUTEVOQlFVTXNTVUZCUXl4RFFVRkJMRTFCUVU4c1EwRkJRU3hEUVVGQkxFTkJRVVVzUTBGQlF5eFpRVUZZTEVkQlFUQkNMRWxCUVVNc1EwRkJRU3hOUVVGUExFTkJRVUVzUTBGQlFTeERRVUZGTEVOQlFVTXNVMEZCY2tNc1IwRkJhVVFzU1VGQlF5eERRVUZCTEUxQlFVOHNRMEZCUVN4RFFVRkJMRU5CUVVVc1EwRkJReXhaUVVFM1JDeERRVUZCTEVsQlFUaEZPMDFCUTNaR0xFOUJRVUVzUjBGQlZTeERRVUZCTEVOQlFVVXNTVUZCUXl4RFFVRkJMRTFCUVVnc1EwRkJWU3hEUVVGRExGRkJRVmdzUTBGQlFTeERRVUZ4UWl4RFFVRkRMRWxCUVhSQ0xFTkJRVUU3VFVGSlZpeEpRVUZITEU5QlFVOHNRMEZCUXl4TlFVRlNMRXRCUVd0Q0xFTkJRV3hDTEVsQlFYVkNMRU5CUVVNc1EwRkJRU3hEUVVGRkxFOUJRVVlzUTBGQlZTeERRVUZETEVWQlFWZ3NRMEZCWXl4bFFVRmtMRU5CUVROQ08xRkJSVU1zU1VGQlF5eERRVUZCTEZWQlFVUXNRMEZCV1N4SlFVRmFMRVZCUmtRN1QwRkJRU3hOUVVGQk8xRkJTME1zU1VGQlFTeEhRVUZQTEVOQlFVRXNRMEZCUlN4UFFVRkdMRU5CUVZVc1EwRkJReXhKUVVGWUxFTkJRV2RDTEUxQlFXaENPMUZCUTFBc1RVRkJRU3hIUVVGVExFTkJRVUVzUTBGQlJTeFBRVUZHTEVOQlFWVXNRMEZCUXl4SlFVRllMRU5CUVdkQ0xGRkJRV2hDTzFGQlJWUXNTVUZCUnl4TlFVRkJMRXRCUVZVc1NVRkJTU3hEUVVGRExFMUJRV1lzU1VGQk1FSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJUQ3hIUVVGWkxFbEJRV0lzUTBGQlFTeEpRVUZ6UWl4SlFVRkRMRU5CUVVFc1NVRkJjRVE3VlVGRlF5eEpRVUZETEVOQlFVRXNZVUZCUkN4RFFVRmxMRTlCUVdZc1JVRkJkMElzU1VGQmVFSXNSVUZHUkR0VFFVRkJMRTFCUVVFN1ZVRkxReXhKUVVGRExFTkJRVUVzVlVGQlJDeERRVUZaTEVsQlFWb3NSVUZNUkR0VFFWSkVPenROUVdsQ1FTeEpRVUZITEUxQlFVZzdaVUZEUXl4SlFVRkRMRU5CUVVFc1RVRkJUeXhEUVVGQkxFTkJRVUVzUTBGQlJTeERRVUZETEZOQlFWZ3NSMEZCZFVJc1NVRkJReXhEUVVGQkxFMUJRVThzUTBGQlFTeERRVUZCTEVOQlFVVXNRMEZCUXl4WlFVRllMRWRCUVRCQ0xFVkJSR3hFT3p0SlFYcENWenM3YlVKQkswSmFMRTFCUVVFc1IwRkJVU3hUUVVGRExFbEJRVVE3VFVGRlVDeEpRVUZyUXl4SlFVRkpMRU5CUVVNc1RVRkJUQ3hMUVVGbExFOUJRV3BFTzJWQlFVRXNTVUZCUXl4RFFVRkJMRXRCUVVRc1EwRkJUeXhKUVVGSkxFTkJRVU1zVFVGQldpeEZRVUZ2UWl4SlFVRkpMRU5CUVVNc1NVRkJla0lzUlVGQlFUczdTVUZHVHpzN2JVSkJTMUlzVlVGQlFTeEhRVUZaTEZOQlFVTXNTVUZCUkR0QlFVVllMRlZCUVVFN1FVRkJRVHRYUVVGQkxITkRRVUZCT3p0eFFrRkRReXhKUVVGRExFTkJRVUVzVlVGQlJDeERRVUZaTEU5QlFWbzdRVUZFUkRzN1NVRkdWenM3YlVKQlMxb3NWVUZCUVN4SFFVRlpMRk5CUVVFN1lVRkZXQ3hWUVVGQkxFTkJRVmNzUTBGQlFTeFRRVUZCTEV0QlFVRTdaVUZCUVN4VFFVRkJPMmxDUVVWV0xFdEJRVU1zUTBGQlFTeFBRVUZFTEVOQlFVRTdVVUZHVlR0TlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzUTBGQldDeEZRVWRGTEVsQlFVTXNRMEZCUVN4UlFVRkVMRWRCUVZrc1NVRklaRHRKUVVaWE96dHRRa0ZSV2l4TFFVRkJMRWRCUVU4c1UwRkJReXhMUVVGRU8wMUJSVTRzU1VGQlJ5eExRVUZMTEVOQlFVTXNTMEZCVGl4TFFVRmxMRVZCUVd4Q08xRkJRME1zU1VGQlF5eERRVUZCTEVsQlFVUXNRMEZCUVR0bFFVTkJMRWxCUVVNc1EwRkJRU3hWUVVGRUxFTkJRVUVzUlVGR1JEczdTVUZHVFRzN2JVSkJVMUFzV1VGQlFTeEhRVUZqTEZOQlFVTXNTVUZCUkR0QlFVVmlMR0ZCUVU4c1NVRkJReXhEUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZZTEVOQlFXMUNMRkZCUVc1Q0xFVkJRVFpDTEVsQlFUZENPMGxCUmswN096czdPenRGUVc5Q1ppeERRVUZCTEVOQlFVVXNVMEZCUVR0QlFVVkVMRkZCUVVFN1NVRkJRU3hOUVVGQkxFZEJRVk1zVTBGQlFUdEJRVVZTTEZWQlFVRTdUVUZCUVN4SFFVRkJMRWRCUVUwc1NVRkJTU3hEUVVGRExFdEJRVXdzUTBGQlZ5eERRVUZMTEVsQlFVRXNTVUZCUVN4RFFVRkJMRU5CUVV3c1EwRkJXU3hEUVVGRExFOUJRV0lzUTBGQlFTeERRVUZCTEVkQlFYbENMRWxCUVhCRE8wMUJSVTRzUTBGQlFTeERRVUZGTEd0Q1FVRkdMRU5CUVhGQ0xFTkJRVU1zU1VGQmRFSXNRMEZCTWtJc1UwRkJRVHRCUVVVeFFpeFpRVUZCTzFGQlFVRXNTVUZCUVN4SFFVRlBMRkZCUVVFc1EwRkJVeXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTVUZCVWl4RFFVRmhMRTFCUVdJc1EwRkJWRHRSUVVOUUxGRkJRVUVzUjBGQlZ5eEhRVUZCTEVkQlFVMDdVVUZKYWtJc1NVRkJSeXhSUVVGQkxFZEJRVmNzUlVGQlpEdFZRVVZETEVsQlFVRXNSMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJSbXhDTzFOQlFVRXNUVUZCUVR0VlFVdERMRWxCUVVFc1IwRkJUeXhOUVVGTkxFTkJRVU1zWlVGQlVDeERRVUYxUWl4UlFVRjJRaXhGUVV4U096dGxRVTlCTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhKUVVGU0xFTkJRV0VzU1VGQlFTeEhRVUZQTEVkQlFWQXNSMEZCWVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRWEJETzAxQlpEQkNMRU5CUVROQ08wMUJhVUpCTEVOQlFVRXNRMEZCUlN4aFFVRkdMRU5CUVdkQ0xFTkJRVU1zU1VGQmFrSXNRMEZCYzBJc1UwRkJRVHRCUVVWeVFpeFpRVUZCTzFGQlFVRXNTVUZCUnl4RFFVRkJMRU5CUVVVc1NVRkJSaXhEUVVGUExFTkJRVU1zU1VGQlVpeERRVUZoTEZWQlFXSXNRMEZCUVN4TFFVRTBRaXhOUVVFdlFqdFZRVVZETEVsQlFVRXNSMEZCVHl4UlFVRkJMRU5CUVZNc1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZETEVsQlFWSXNRMEZCWVN4TlFVRmlMRU5CUVZRN1ZVRkRVQ3hKUVVGQkxFZEJRVThzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWxCUVZJc1EwRkJZU3hOUVVGaU8xVkJRMUFzVVVGQlFTeEhRVUZYTEVsQlFVRXNSMEZCVHp0VlFVZHNRaXhKUVVGSExGRkJRVUVzUjBGQlZ5eERRVUZrTzIxQ1FVVkRMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRME1zUTBGQlF5eEpRVVJHTEVOQlEwOHNUVUZCVFN4RFFVRkRMRlZCUVZBc1EwRkJhMElzVVVGQmJFSXNRMEZFVUN4RFFVVkRMRU5CUVVNc1VVRkdSaXhEUVVWWExGVkJSbGdzUlVGR1JEdFhRVUZCTEUxQlFVRTdiVUpCVDBNc1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGRFF5eERRVUZETEVsQlJFWXNRMEZEVHl4SlFVUlFMRU5CUlVNc1EwRkJReXhYUVVaR0xFTkJSV01zVlVGR1pDeEZRVkJFTzFkQlVFUTdPMDFCUm5GQ0xFTkJRWFJDTzJGQmRVSkJMRlZCUVVFc1EwRkJWeXhOUVVGWUxFVkJRVzFDTEVsQlFXNUNPMGxCTlVOUk8xZEJPRU5VTEUxQlFVRXNRMEZCUVR0RlFXaEVReXhEUVVGR08wRkJOMWhCT3pzN1FVTkJRVHRCUVVGQkxFMUJRVUU3TzBWQlFVRXNUVUZCUVN4SFFVRlRMRk5CUVVFN1FVRkZVaXhSUVVGQk8wbEJRVUVzU1VGQlFTeEhRVUZYTEVsQlFVRXNTVUZCUVN4RFFVRkJPMGxCUTFnc1IwRkJRU3hIUVVGTkxFbEJRVWtzUTBGQlF5eExRVUZNTEVOQlFWY3NTVUZCU1N4RFFVRkRMRTlCUVV3c1EwRkJRU3hEUVVGQkxFZEJRV2xDTEVsQlFUVkNPMGxCUTA0c1EwRkJRU3hEUVVGRkxHVkJRVVlzUTBGQmEwSXNRMEZCUXl4SlFVRnVRaXhEUVVGM1FpeEpRVUZKTEVOQlFVTXNWMEZCVEN4RFFVRkJMRU5CUVhoQ08wbEJSVUVzUTBGQlFTeERRVUZGTEZsQlFVWXNRMEZCWlN4RFFVRkRMRWxCUVdoQ0xFTkJRWEZDTEZOQlFVRTdRVUZGY0VJc1ZVRkJRVHROUVVGQkxFVkJRVUVzUjBGQlN5eERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1NVRkJVaXhEUVVGaExFbEJRV0k3WVVGRFRDeERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1NVRkJVaXhEUVVGaExFMUJRVTBzUTBGQlF5eFZRVUZRTEVOQlFXdENMRWxCUVVrc1EwRkJReXhIUVVGTUxFTkJRVk1zUlVGQlFTeEhRVUZMTEVkQlFXUXNSVUZCYlVJc1EwRkJia0lzUTBGQmJFSXNRMEZCWWp0SlFVaHZRaXhEUVVGeVFqdFhRVTlCTEZWQlFVRXNRMEZCVnl4TlFVRllMRVZCUVcxQ0xFbEJRVzVDTzBWQllsRTdPMFZCYVVKVUxFTkJRVUVzUTBGQlJTeFRRVUZCTzFkQlEwUXNUVUZCUVN4RFFVRkJPMFZCUkVNc1EwRkJSanRCUVdwQ1FUczdPMEZEUVVFN1FVRkJRU3hOUVVGQk96dEZRVUZCTEU5QlFVRXNSMEZCVlRzN1JVRkhWaXhKUVVGQkxFZEJRVThzVTBGQlF5eE5RVUZFTzBGQlJVNHNVVUZCUVR0SlFVRkJMRmRCUVVFc2VVUkJRV2RFTzBsQlNXaEVMRU5CUVVFc1EwRkJSU3hOUVVGR0xFTkJRVk1zUTBGQlF5eEpRVUZXTEVOQlFXVXNaMEpCUVdZc1JVRkJhVU1zVTBGQlF5eExRVUZFTzJGQlJXaERMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eEpRVUZTTEVOQlFXRXNVMEZCWWl4RFFVRjFRaXhEUVVGRExFOUJRWGhDTEVOQlFXZERMRTFCUVdoRE8wbEJSbWRETEVOQlFXcERPMGxCVFVFc1NVRkJSeXhYUVVGSU8yRkJSVU1zUTBGQlFTeERRVUZGTEUxQlFVWXNRMEZCVXl4RFFVRkRMRXRCUVZZc1EwRkJaMEk3VVVGQlF5eFJRVUZCTEVWQlFWVXNTVUZCV0R0UlFVRnBRaXhKUVVGQkxFVkJRVTBzU1VGQmRrSTdVVUZCTmtJc1VVRkJRU3hGUVVGVkxFbEJRWFpETzA5QlFXaENMRVZCUmtRN1MwRkJRU3hOUVVGQk8yRkJUVU1zUTBGQlFTeERRVUZGTEUxQlFVWXNRMEZCVXl4RFFVRkRMRXRCUVZZc1EwRkJaMEk3VVVGQlF5eFJRVUZCTEVWQlFWVXNVVUZCV0R0UlFVRnhRaXhKUVVGQkxFVkJRVTBzU1VGQk0wSTdVVUZCYVVNc1VVRkJRU3hGUVVGVkxFdEJRVE5ETzA5QlFXaENMRVZCVGtRN08wVkJXazA3TzBWQmNVSlFMRU5CUVVFc1EwRkJSU3hUUVVGQk8wbEJRMFFzVDBGQlFTeEhRVUZWTEVOQlFVRXNRMEZCUlN4cFFrRkJSanRYUVVkV0xFTkJRVUVzUTBGQlJTeFBRVUZHTEVOQlFWVXNRMEZCUXl4SlFVRllMRU5CUVdkQ0xGTkJRVU1zUzBGQlJEdE5RVVZtTEVsQlFVY3NTMEZCUVN4TFFVRlRMRU5CUVZvN1VVRkRReXhKUVVGQkxFTkJRVXNzU1VGQlRDeEZRVVJFT3p0TlFVZEJMRWxCUVVjc1MwRkJRU3hIUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFWSXNSMEZCYVVJc1EwRkJiRUlzUTBGQldEdGxRVU5ETEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhGUVVGU0xFTkJRVmNzYVVKQlFWZ3NSVUZCT0VJc1UwRkJReXhMUVVGRU8ybENRVVUzUWl4SlFVRkJMRU5CUVVzc1QwRkJVU3hEUVVGQkxFdEJRVUVzUjBGQlVTeERRVUZTTEVOQlFXSTdVVUZHTmtJc1EwRkJPVUlzUlVGRVJEczdTVUZNWlN4RFFVRm9RanRGUVVwRExFTkJRVVk3UVVGNFFrRTdPenRCUTBOQk8wRkJRVUVzVFVGQlFUczdSVUZCVFN4SlFVRkRMRU5CUVVFN1FVRkZUaXhSUVVGQk96dEpRVUZCTEZGQlFVRXNSMEZCVnp0TlFVVldMRk5CUVVFc1JVRkJWenRSUVVWV0xFbEJRVUVzUlVGQlRTeFhRVVpKTzFGQlIxWXNTVUZCUVN4RlFVRk5MRlZCU0VrN1VVRkpWaXhKUVVGQkxFVkJRVTBzVTBGS1NUdFJRVXRXTEVsQlFVRXNSVUZCVFN4WFFVeEpPMUZCVFZZc1NVRkJRU3hGUVVGTkxHZENRVTVKTzFGQlQxWXNTMEZCUVN4RlFVRlBMR1ZCVUVjN1VVRlJWaXhKUVVGQkxFVkJRVTBzV1VGU1NUdFBRVVpFTzAxQllWWXNSMEZCUVN4RlFVRkxMREJDUVdKTE96czdTVUZyUWtVc2JVSkJRVU1zUjBGQlJDeEZRVUZOTEZOQlFVNDdUVUZGV2l4SlFVRkRMRU5CUVVFc1IwRkJSQ3hwUWtGQlR5eE5RVUZOTEZGQlFWRXNRMEZCUXp0TlFVTjBRaXhKUVVGRExFTkJRVUVzUjBGQlJDeEhRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRkdMRU5CUVZNc1JVRkJWQ3hGUVVGaExGRkJRVkVzUTBGQlF5eFRRVUYwUWl4elFrRkJhVU1zV1VGQldTeEZRVUUzUXp0SlFVaExPenQzUWtGTllpeE5RVUZCTEVkQlFWRXNVMEZCUXl4SlFVRkVPMEZCUlZBc1ZVRkJRVHRCUVVGQk8wRkJRVUVzVjBGQlFTeFJRVUZCT3p0UlFVVkRMRWRCUVVFc1IwRkJUU3hKUVVGRExFTkJRVUVzUjBGQlJ5eERRVUZETEU5QlFVd3NRMEZCWVN4UlFVRmlMRVZCUVhWQ0xFTkJRWFpDTzFGQlEwNHNVVUZCUVN4SFFVRlhMRFpDUVVGQkxFZEJRV2RETEVkQlFXaERMRWRCUVhORExGTkJRWFJETEVkQlFXdEVMRU5CUVd4RUxFZEJRWE5FTEZkQlFYUkVMRWRCUVc5RkxFTkJRWEJGTEVkQlFYZEZPMUZCUTI1R0xFbEJRVUVzUjBGQlR5eEpRVUZKTEVOQlFVTXNWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4UlFVRnVRanRCUVVwU08yRkJUMEU3U1VGVVR6czdkMEpCVjFJc1QwRkJRU3hIUVVGVExGTkJRVU1zVFVGQlJDeEZRVUZUTEUxQlFWUTdZVUZGVWl4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zVDBGQlZpeERRVUZyUWp0UlFVVnFRaXhKUVVGQkxFVkJRVTBzU1VGR1Z6dFJRVWRxUWl4UFFVRkJMRVZCUVZNc1QwRklVVHRSUVVscVFpeFRRVUZCTEVWQlFWY3NTMEZLVFR0UlFVdHFRaXhMUVVGQkxFVkJRVThzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TFFVeE1PMUZCVFdwQ0xFOUJRVUVzUlVGQlV5eERRVUZCTEZOQlFVRXNTMEZCUVR0cFFrRkJRU3hUUVVGQk8yMUNRVUZITEV0QlFVTXNRMEZCUVN4cFFrRkJSQ3hEUVVGdFFpeE5RVUZ1UWp0VlFVRklPMUZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeERRVTVSTzFGQlQycENMRkZCUVVFc1JVRkJWU3d3U2tGUVR6dFBRVUZzUWp0SlFVWlJPenQzUWtGWlZDeHBRa0ZCUVN4SFFVRnRRaXhUUVVGRExFMUJRVVE3UVVGRmJFSXNWVUZCUVR0TlFVRkJMRk5CUVVFc1IwRkJXU3hEUVVGQkxFTkJRVVVzWVVGQlJqdEJRVVZhTzBGQlFVRXNWMEZCUVN4UlFVRkJPenRSUVVORExFZEJRVUVzUjBGQlRTeEpRVUZETEVOQlFVRXNSMEZCUnl4RFFVRkRMRTlCUVV3c1EwRkJZU3hSUVVGaUxFVkJRWFZDTEVOQlFYWkNPMUZCUTA0c1IwRkJRU3hIUVVGTkxFTkJRVUVzUTBGQlJTeGhRVUZHTEVOQlEwd3NRMEZCUXl4UlFVUkpMRU5CUTBzc1ZVRkVUQ3hEUVVWTUxFTkJRVU1zU1VGR1NTeERRVVZETEV0QlJrUXNSVUZGVVN4SFFVWlNMRU5CUjB3c1EwRkJReXhKUVVoSkxFTkJSME1zUzBGSVJDeEZRVWRSTEVOQlNGSXNRMEZKVEN4RFFVRkRMRWxCU2trc1EwRkpReXhQUVVwRUxFVkJTVlVzUTBGS1ZpeERRVXRNTEVOQlFVTXNTMEZNU1N4RFFVdEZMRk5CUVVFN2FVSkJSVTRzUTBGQlFTeERRVUZGTEUxQlFVWXNRMEZCVXl4RFFVRkRMRWRCUVZZc1EwRkJZeXhEUVVGQkxFTkJRVVVzVFVGQlJpeERRVUZUTEVOQlFVTXNSMEZCVml4RFFVRkJMRU5CUVVFc1IwRkJhMElzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWxCUVZJc1EwRkJZU3hMUVVGaUxFTkJRV2hETzFGQlJrMHNRMEZNUmp0UlFWVk9MRU5CUVVFc1EwRkJSU3hUUVVGR0xFTkJRVmtzUTBGQlF5eE5RVUZpTEVOQlFXOUNMRWRCUVhCQ08wRkJXa1E3UVVGalFTeGhRVUZQTzBsQmJFSlhPenM3T3pzN1JVRTBRbkJDTEU5QlFVRXNSMEZCVlRzN1JVRkhWaXhEUVVGQkxFTkJRVVVzVTBGQlFUdEJRVVZFTEZGQlFVRTdTVUZCUVN4VFFVRkJMRWRCUVdkQ0xFbEJRVUVzVTBGQlFTeERRVUZCTzFkQlJXaENMRU5CUVVFc1EwRkJSU3gxUWtGQlJpeERRVUV3UWl4RFFVRkRMRWxCUVROQ0xFTkJRV2RETEZOQlFVRTdRVUZGTDBJc1ZVRkJRVHROUVVGQkxFbEJRVUVzUjBGQlR5eERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1NVRkJVaXhEUVVGQk8wMUJRMUFzU1VGQlFTeEhRVUZQTEZOQlFWTXNRMEZCUXl4TlFVRldMRU5CUVdsQ0xFbEJRV3BDTzJGQlExQXNRMEZCUVN4RFFVRkZMRWxCUVVZc1EwRkJUeXhEUVVGRExFbEJRVklzUTBGQllTeEpRVUZpTzBsQlNpdENMRU5CUVdoRE8wVkJTa01zUTBGQlJqdEJRV2hHUVRzN08wRkRTRUU3UVVGQlFTeE5RVUZCT3p0RlFVRkJMRTFCUVVFc1IwRkRRenRKUVVGQkxFVkJRVUVzUlVGQlNTeEhRVUZLTzBsQlEwRXNSVUZCUVN4RlFVRkpMRWRCUkVvN1NVRkZRU3hGUVVGQkxFVkJRVWtzU1VGR1NqczdPMFZCVFVRc1UwRkJRU3hIUVVGWkxGTkJRVUU3UVVGRFdDeFJRVUZCTzBsQlFVRXNTMEZCUVN4SFFVRlJMRU5CUVVFc1EwRkJSU3hOUVVGR0xFTkJRVk1zUTBGQlF5eExRVUZXTEVOQlFVRTdTVUZGVWl4SlFVRkhMRXRCUVVFc1IwRkJVU3hOUVVGTkxFTkJRVU1zUlVGQmJFSTdZVUZEUXl4RFFVRkRMRWxCUVVRc1JVRkVSRHRMUVVGQkxFMUJSVXNzU1VGQlJ5eExRVUZCTEVkQlFWRXNUVUZCVFN4RFFVRkRMRVZCUVd4Q08yRkJRMG9zUTBGQlF5eEpRVUZFTEVWQlFVOHNTVUZCVUN4RlFVUkpPMHRCUVVFc1RVRkZRU3hKUVVGSExFdEJRVUVzUjBGQlVTeE5RVUZOTEVOQlFVTXNSVUZCYkVJN1lVRkRTaXhEUVVGRExFbEJRVVFzUlVGQlR5eEpRVUZRTEVWQlFXRXNTVUZCWWl4RlFVUkpPMHRCUVVFc1RVRkJRVHRoUVVkS0xFTkJRVU1zU1VGQlJDeEZRVUZQTEVsQlFWQXNSVUZCWVN4SlFVRmlMRVZCUVcxQ0xFbEJRVzVDTEVWQlNFazdPMFZCVUUwN08wVkJZVm9zVlVGQlFTeEhRVUZoTEZOQlFVTXNUVUZCUkR0QlFVTmFMRkZCUVVFN1NVRkJRU3hOUVVGQkxFZEJRVk03UVVGRFZDeFRRVUZCTEhkRFFVRkJPenRCUVVORExGZEJRVk1zTWtKQlFWUTdVVUZEUXl4TlFVRk5MRU5CUVVNc1NVRkJVQ3hEUVVGWkxFMUJRVUVzUjBGQlR5eERRVUZRTEVkQlFWTXNSMEZCVkN4SFFVRlpMRU5CUVhoQ08wRkJSRVE3UVVGRVJEdFhRVWRCTzBWQlRGazdPMFZCVTJJc1QwRkJRU3hIUVVGVkxGTkJRVU1zVFVGQlJDeEZRVUZUTEUxQlFWUTdRVUZEVkN4UlFVRkJPMEZCUVVFc1UwRkJRU3gzUTBGQlFUczdUVUZEUXl4TlFVRkJMRWRCUVdFc1NVRkJRU3hOUVVGQkxFTkJRVThzVFVGQlFTeEhRVUZQTEVOQlFWQXNSMEZCVXl4VFFVRm9RanROUVVOaUxFbEJRVUVzT0VSQlFUaERMRU5CUVVFc1EwRkJRVHROUVVNNVF5eEpRVUY1UWl4WlFVRjZRanRCUVVGQkxHVkJRVThzVVVGQlFTeERRVUZUTEVsQlFWUXNSVUZCVURzN1FVRklSRHRCUVVsQkxGZEJRVTg3UlVGTVJUczdSVUZWVml4UlFVRkJMRWRCUVZjc1UwRkJRVHRCUVVOV0xGRkJRVUU3U1VGQlFTeE5RVUZCTEVkQlFWTXNVMEZCUVN4RFFVRkJPMGxCUTFRc1QwRkJRU3hIUVVGVkxGVkJRVUVzUTBGQlZ5eE5RVUZZTzBsQlExWXNVVUZCUVN4SFFVRlhMRWRCUVVFc1IwRkJUU3hQUVVGUExFTkJRVU1zU1VGQlVpeERRVUZoTEVsQlFXSTdWMEZQYWtJc1EwRkJRU3hEUVVGRkxHVkJRVVlzUTBGQmEwSXNRMEZCUXl4SlFVRnVRaXhEUVVGM1FpeFRRVUZCTzBGQlJYWkNMRlZCUVVFN1RVRkJRU3hQUVVGQkxFZEJRVlU3VFVGRFZpeEhRVUZCTEVkQlFVMDdUVUZEVGl4SFFVRkJMRWRCUVUwN1RVRkZUaXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNVVUZCVWl4RFFVRnBRaXhSUVVGcVFpeERRVUV3UWl4RFFVRkRMRWxCUVROQ0xFTkJRV2RETEZOQlFVRTdRVUZETDBJc1dVRkJRVHRSUVVGQkxFbEJRVUVzUjBGQlR5eFBRVUZCTEVOQlFWRXNTVUZCVWl4RlFVRmpMRTFCUVdRN1VVRkRVQ3hIUVVGQkxFbEJRVTg3VVVGTFVDeEpRVUZITEVkQlFVRXNSMEZCVFN4RlFVRlVPMVZCUTBNc1IwRkJRU3hKUVVGUE8xVkJRMUFzUjBGQlFTeEhRVVpFT3pzN1ZVRkxRU3hQUVVGUkxFTkJRVUVzUjBGQlFTeEpRVUZST3p0bFFVTm9RaXhQUVVGUkxFTkJRVUVzUjBGQlFTeERRVUZTTEVkQlFXVXNTVUZCU1N4RFFVRkRMRWRCUVV3c1EwRkJVeXhQUVVGUkxFTkJRVUVzUjBGQlFTeERRVUZxUWl4RlFVRjFRaXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNUVUZCVWl4RFFVRkJMRU5CUVhaQ08wMUJZbWRDTEVOQlFXaERPMDFCWjBKQkxFZEJRVUVzUjBGQlRUdE5RVU5PTEVkQlFVRXNSMEZCVFR0TlFVTk9MRWRCUVVFc1IwRkJUVHROUVVWT0xFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4UlFVRlNMRU5CUVdsQ0xGRkJRV3BDTEVOQlFUQkNMRU5CUVVNc1NVRkJNMElzUTBGQlowTXNVMEZCUVR0UlFVTXZRaXhIUVVGQkxFbEJRVThzVDBGQlFTeERRVUZSTEVsQlFWSXNSVUZCWXl4TlFVRmtPenRWUVVOUUxFMUJRVTg3TzFGQlJWQXNTVUZCUnl4SFFVRkJMRWRCUVUwc1JVRkJWRHRWUVVORExFZEJRVUVzU1VGQlR6dFZRVU5RTEVkQlFVRTdWVUZEUVN4SFFVRkJMRWRCUVUwc1MwRklVRHM3WlVGTFFTeERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1RVRkJVaXhEUVVGbExFOUJRVkVzUTBGQlFTeEhRVUZCTEVOQlFYWkNPMDFCVkN0Q0xFTkJRV2hETzAxQlYwRXNSVUZCUVN4SFFVRkxMRWxCUVVrc1EwRkJReXhMUVVGTUxFTkJRVmNzUTBGQlF5eEZRVUZCTEVkQlFVc3NSMEZCVGl4RFFVRkJMRWRCUVdFc1EwRkJlRUk3VFVGRFRDeEpRVUZITEdGQlFVRXNTVUZCVXl4RlFVRkJMRWRCUVVzc1EwRkJha0k3VVVGRFF5eERRVUZCTEVkQlFVa3NUVUZCVHl4RFFVRkJMRU5CUVVFN1FVRkZXQ3hoUVVGVExESkNRVUZVTzFWQlEwTXNRMEZCUVN4RFFVRkZMRWRCUVVZc1EwRkJUU3hEUVVGRExGZEJRVkFzUTBGQmJVSXNUVUZCUVN4SFFVRlBMRU5CUVZBc1IwRkJVeXhWUVVGVUxFZEJRVzFDTEVOQlFYUkRPMEZCUkVRN1pVRkZRU3hEUVVGQkxFTkJRVVVzUjBGQlJpeERRVUZOTEVOQlFVTXNVVUZCVUN4RFFVRm5RaXhOUVVGQkxFZEJRVThzUTBGQlVDeEhRVUZUTEZWQlFWUXNSMEZCYlVJc1JVRkJia01zUlVGTVJEczdTVUYwUTNWQ0xFTkJRWGhDTzBWQlZsVTdPMFZCZFVSWUxGZEJRVUVzUjBGQll5eFRRVUZCTzFkQlEySXNRMEZCUVN4RFFVRkZMRXRCUVVZc1EwRkRReXhEUVVGRExFVkJSRVlzUTBGRFN5eE5RVVJNTEVWQlEyRXNVVUZFWWp0RlFVUmhPenRGUVV0a0xFTkJRVUVzUTBGQlJTeFRRVUZCTEVkQlFVRXNRMEZCUmp0QlFXNUhRVHM3TzBGRFFVRTdRVUZCUVN4TlFVRkJPenRGUVVGQkxFdEJRVUVzUjBGQlVUczdSVUZIVWl4UFFVRkJMRWRCUVZVc1UwRkJReXhMUVVGRU8wbEJRMVFzU1VGQll5eExRVUZMTEVOQlFVTXNTMEZCVGl4TFFVRmxMRVZCUVRkQ08wMUJRVUVzUzBGQlFTeEhRVUZSTEVkQlFWSTdPMGxCUTBFc1NVRkJaU3hMUVVGTExFTkJRVU1zUzBGQlRpeExRVUZsTEVWQlFUbENPMkZCUVVFc1MwRkJRU3hIUVVGUkxFbEJRVkk3TzBWQlJsTTdPMFZCU1ZZc1MwRkJRU3hIUVVGUkxGTkJRVU1zUzBGQlJEdEpRVU5RTEVsQlFXRXNTMEZCU3l4RFFVRkRMRXRCUVU0c1MwRkJaU3hGUVVGbUxFbEJRWEZDTEV0QlFVc3NRMEZCUXl4TFFVRk9MRXRCUVdVc1JVRkJha1E3WVVGQlFTeExRVUZCTEVkQlFWRXNSVUZCVWpzN1JVRkVUenM3UlVGSlVpeFZRVUZCTEVkQlFXRXNVMEZCUXl4TFFVRkVPMEZCUTFvc1VVRkJRVHRKUVVGQkxFOUJRVThzUTBGQlF5eEhRVUZTTEVOQlFWa3NXVUZCV2p0SlFVTkJMRWRCUVVFc1IwRkJUU3hSUVVGQkxEWkRRVUZuUXl4RFFVRm9RenRKUVVOT0xFZEJRVUVzUjBGQlRTeFJRVUZCTEN0RFFVRm5ReXhIUVVGb1F6dEpRVU5PTEVsQlFVRXNSMEZCVHl4UlFVRkJMR2RFUVVGcFF5eERRVUZxUXp0SlFVVlFMRTFCUVVFc1IwRkJVeXhMUVVGTExFTkJRVU1zVFVGQlRpeEhRVUZsTEVsQlFXWXNSMEZCYzBJN1NVRkRMMElzUzBGQlFTeEhRVUZSTEZGQlFVRXNlVU5CUVhsQ0xFTkJRWHBDTzBsQlExSXNTMEZCUVN4SFFVRlJMRWxCUVVrc1EwRkJReXhMUVVGTUxFTkJRVmNzUzBGQlFTeEhRVUZSTEUxQlFXNUNMRVZCUVRKQ0xFZEJRVE5DTEVWQlFXZERMRWRCUVdoRE8wbEJSVklzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZEUXl4RFFVRkRMRWRCUkVZc1EwRkRUU3hMUVVST0xFTkJSVU1zUTBGQlF5eFBRVVpHTEVOQlJWVXNVVUZHVmp0WFFVbEJMRXRCUVVzc1EwRkJReXhqUVVGT0xFTkJRVUU3UlVGa1dUczdSVUZuUW1Jc1dVRkJRU3hIUVVGbExGTkJRVU1zUzBGQlJEdEJRVU5rTEZGQlFVRTdTVUZCUVN4UFFVRlBMRU5CUVVNc1IwRkJVaXhEUVVGWkxHTkJRVm83U1VGRFFTeE5RVUZCTEVkQlFWTXNRMEZCUVN4RFFVRkZMRWxCUVVZc1EwRkJUeXhEUVVGRExFMUJRVklzUTBGQlFTeERRVUZuUWl4RFFVRkRMRkZCUVdwQ0xFTkJRVEJDTEdOQlFURkNPMGxCUTFRc1RVRkJRU3h2UkVGQmNVTTdTVUZEY2tNc1MwRkJRU3h4UkVGQmJVTTdTVUZEYmtNc1MwRkJRU3d5UTBGQmQwSTdWMEZGZUVJc1EwRkJRU3hEUVVGRkxFMUJRVVlzUTBGQlV5eERRVUZETEVsQlFWWXNRMEZCWlN4TlFVRkJMRWRCUVZNc1MwRkJWQ3hIUVVGcFFpeExRVUZvUXp0RlFWQmpPenRGUVZWbUxHTkJRVUVzUjBGQmFVSXNVMEZCUXl4TFFVRkVPMEZCUTJoQ0xGRkJRVUU3U1VGQlFTeFBRVUZQTEVOQlFVTXNSMEZCVWl4RFFVRlpMR2RDUVVGYU8wbEJRMEVzUzBGQlFTeEhRVUZSTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhOUVVGU0xFTkJRVUVzUTBGQlowSXNRMEZCUXl4TlFVRnFRaXhEUVVGQkxFTkJRWGxDTEVOQlFVTXNVVUZCTVVJc1EwRkJiVU1zVDBGQmJrTTdTVUZEVWl4SFFVRkJMRWRCUVUwc1VVRkJRU3c0UTBGQmFVTXNRMEZCYWtNN1NVRkRUaXhIUVVGQkxFZEJRVTBzVVVGQlFTeG5SRUZCYVVNc1IwRkJha003U1VGRFRpeEpRVUZCTEVkQlFVOHNVVUZCUVN4cFJFRkJhME1zUTBGQmJFTTdTVUZGVUN4TFFVRkJMRWRCUVZFc1VVRkJRU3d3UTBGQk1rSXNRMEZCTTBJN1NVRkRVaXhMUVVGQkxFZEJRVkVzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4TFFVRkJMRWRCUVZFc1MwRkJRU3hIUVVGUkxFbEJRVE5DTEVWQlFXbERMRWRCUVdwRExFVkJRWE5ETEVkQlFYUkRPMWRCUTFJc1EwRkJRU3hEUVVGRkxFdEJRVVlzUTBGQlVTeERRVUZETEVkQlFWUXNRMEZCWVN4TFFVRmlMRU5CUVcxQ0xFTkJRVU1zVDBGQmNFSXNRMEZCTkVJc1VVRkJOVUk3UlVGVVowSTdPMFZCV1dwQ0xHTkJRVUVzUjBGQmFVSXNVMEZCUXl4TFFVRkVPMEZCUTJoQ0xGRkJRVUU3U1VGQlFTeFBRVUZQTEVOQlFVTXNSMEZCVWl4RFFVRlpMR2RDUVVGYU8wbEJRMEVzUzBGQlFTeEhRVUZSTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhOUVVGU0xFTkJRVUVzUTBGQlowSXNRMEZCUXl4TlFVRnFRaXhEUVVGQkxFTkJRWGxDTEVOQlFVTXNVVUZCTVVJc1EwRkJiVU1zVDBGQmJrTTdTVUZEVWl4SFFVRkJMRWRCUVUwc1VVRkJRU3c0UTBGQmFVTXNRMEZCYWtNN1NVRkRUaXhIUVVGQkxFZEJRVTBzVVVGQlFTeG5SRUZCYVVNc1IwRkJha003U1VGRFRpeEpRVUZCTEVkQlFVOHNVVUZCUVN4cFJFRkJhME1zUTBGQmJFTTdTVUZGVUN4TFFVRkJMRWRCUVZFc1VVRkJRU3d3UTBGQk1rSXNRMEZCTTBJN1NVRkRVaXhMUVVGQkxFZEJRVkVzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4TFFVRkJMRWRCUVZFc1MwRkJRU3hIUVVGUkxFbEJRVE5DTEVWQlFXbERMRWRCUVdwRExFVkJRWE5ETEVkQlFYUkRPMWRCUTFJc1EwRkJRU3hEUVVGRkxFdEJRVVlzUTBGQlVTeERRVUZETEVkQlFWUXNRMEZCWVN4TFFVRmlMRU5CUVcxQ0xFTkJRVU1zVDBGQmNFSXNRMEZCTkVJc1VVRkJOVUk3UlVGVVowSTdPMFZCWTJwQ0xFTkJRVUVzUTBGQlJTeFRRVUZCTzBsQlEwUXNRMEZCUVN4RFFVRkZMRTFCUVVZc1EwRkRReXhEUVVGRExFdEJSRVlzUTBGRFVTeExRVVJTTEVOQlJVTXNRMEZCUXl4UFFVWkdMRU5CUlZVc1QwRkdWanRKUVVsQkxFTkJRVUVzUTBGQlJTeDFRMEZCUml4RFFVTkRMRU5CUVVNc1NVRkVSaXhEUVVOUExGbEJSRkFzUlVGRGNVSXNWVUZFY2tJN1NVRkhRU3hEUVVGQkxFTkJRVVVzYlVKQlFVWXNRMEZEUXl4RFFVRkRMRTFCUkVZc1EwRkRVeXhaUVVSVUxFTkJSVU1zUTBGQlF5eFRRVVpHTEVOQlJWa3NXVUZHV2p0SlFVbEJMRU5CUVVFc1EwRkJSU3hsUVVGR0xFTkJRV3RDTEVOQlFVTXNVVUZCYmtJc1EwRkJORUlzVVVGQk5VSXNRMEZEUXl4RFFVRkRMRXRCUkVZc1EwRkRVU3hqUVVSU08xZEJTVUVzUTBGQlFTeERRVUZGTEdOQlFVWXNRMEZCYVVJc1EwRkJReXhSUVVGc1FpeERRVUV5UWl4UlFVRXpRaXhEUVVORExFTkJRVU1zUzBGRVJpeERRVU5STEdOQlJGSTdSVUZvUWtNc1EwRkJSanRCUVM5RVFUczdPMEZEUVVFN1FVRkJRU3hOUVVGQk96dEZRVUZCTEZGQlFVRXNSMEZCVnpzN1JVRkRXQ3hQUVVGQkxFZEJRVlVzUTBGQlF5eFJRVUZFTEVWQlFWY3NTMEZCV0RzN1JVRkZWaXhKUVVGSExFTkJRVWtzVFVGQlRTeERRVUZETEhGQ1FVRmtPMEZCUTBrc1UwRkJRU3g1UTBGQlFUczdUVUZEU1N4TlFVRk5MRU5CUVVNc2NVSkJRVkFzUjBGQkswSXNUVUZCVHl4RFFVRkJMRTFCUVVFc1IwRkJVeXgxUWtGQlZEdE5RVU4wUXl4TlFVRk5MRU5CUVVNc2IwSkJRVkFzUjBGQk9FSXNUVUZCVHl4RFFVRkJMRTFCUVVFc1IwRkJVeXh6UWtGQlZDeERRVUZRTEVsQlFUSkRMRTFCUVU4c1EwRkJRU3hOUVVGQkxFZEJRVk1zTmtKQlFWUTdRVUZHY0VZc1MwRkVTanM3TzBWQlMwRXNUVUZCVFN4RFFVRkRMREJDUVVGUUxFMUJRVTBzUTBGQlF5eDNRa0ZCTUVJc1UwRkJReXhSUVVGRUxFVkJRVmNzVDBGQldEdEJRVU0zUWl4UlFVRkJPMGxCUVVFc1VVRkJRU3hIUVVGbExFbEJRVUVzU1VGQlFTeERRVUZCTEVOQlFVMHNRMEZCUXl4UFFVRlFMRU5CUVVFN1NVRkRaaXhWUVVGQkxFZEJRV0VzU1VGQlNTeERRVUZETEVkQlFVd3NRMEZCVXl4RFFVRlVMRVZCUVZrc1JVRkJRU3hIUVVGTExFTkJRVU1zVVVGQlFTeEhRVUZYTEZGQlFWb3NRMEZCYWtJN1NVRkZZaXhGUVVGQkxFZEJRVXNzVFVGQlRTeERRVUZETEZWQlFWQXNRMEZCYTBJc1UwRkJRVHRoUVVOdVFpeFJRVUZCTEVOQlFWTXNVVUZCUVN4SFFVRlhMRlZCUVhCQ08wbEJSRzFDTEVOQlFXeENMRVZCUlVnc1ZVRkdSenRYUVVsTU8wVkJValpDT3p0RlFWVnFReXhOUVVGTkxFTkJRVU1zZVVKQlFWQXNUVUZCVFN4RFFVRkRMSFZDUVVGNVFpeFRRVUZETEVWQlFVUTdWMEZETlVJc1dVRkJRU3hEUVVGaExFVkJRV0k3UlVGRU5FSTdRVUZzUW1oRE96czdRVU5KUVR0RlFVRkJMRU5CUVVFc1EwRkJSU3hUUVVGQk8xZEJRMFFzUTBGQlFTeERRVUZGTEdkQ1FVRkdMRU5CUVcxQ0xFTkJRVU1zU1VGQmNFSXNRMEZCZVVJc1UwRkJRVHRCUVVONFFpeFZRVUZCTzAxQlFVRXNUMEZCUVN4SFFVRlZPMDFCUTFZc1JVRkJRU3hIUVVGTExFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4SlFVRlNMRU5CUVdFc1MwRkJZanRoUVVOTUxFTkJRVUVzUTBGQlJTeEhRVUZCTEVkQlFVMHNSVUZCVWl4RFFVRlhMRU5CUVVNc1RVRkJXaXhEUVVGdFFpeFRRVUZETEV0QlFVUTdRVUZGYkVJc1dVRkJRVHRSUVVGQkxFbEJRVUVzUjBGQlR5eEhRVUZITEVOQlFVTXNaVUZCU2l4RFFVRnZRaXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVMHNRMEZCUVN4RFFVRkJMRU5CUVhaRE8xRkJRMUFzU1VGQkswSXNXVUZCTDBJN2FVSkJRVUVzUTBGQlFTeERRVUZGTEU5QlFVWXNRMEZCVlN4RFFVRkRMRWxCUVZnc1EwRkJaMElzUzBGQmFFSXNSVUZCZFVJc1NVRkJka0lzUlVGQlFUczdUVUZJYTBJc1EwRkJia0lzUTBGTlF5eERRVUZETEU5QlRrWXNRMEZOVlN4UlFVNVdPMGxCU0hkQ0xFTkJRWHBDTzBWQlJFTXNRMEZCUmp0QlFVRkJPenM3UVVOR1FUdEJRVUZCTEUxQlFVRTdPMFZCUVVFc1IwRkJRU3hIUVVGTkxGTkJRVU1zU1VGQlJEdFhRVU5NTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJhRUlzUjBGQmRVSXNVVUZCUVN4SFFVRlhPMFZCUkRkQ096dEZRVTlPTEUxQlFVRXNSMEZCVXl4VFFVRkJPMWRCUTFJc1IwRkJRU3hEUVVGSkxFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4SlFVRlNMRU5CUVdFc1RVRkJZaXhEUVVGS08wVkJSRkU3TzBWQlNWUXNUVUZCUVN4SFFVRlRMRk5CUVVFN1YwRkRVaXhIUVVGQkxFTkJRVWtzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWRCUVZJc1EwRkJRU3hEUVVGS08wVkJSRkU3TzBWQlMxUXNRMEZCUVN4RFFVRkZMRk5CUVVFN1NVRkRSQ3hEUVVGQkxFTkJRVVVzYTBKQlFVWXNRMEZCY1VJc1EwRkJReXhOUVVGMFFpeERRVUUyUWl4TlFVRTNRanRYUVVOQkxFTkJRVUVzUTBGQlJTeHJRa0ZCUml4RFFVRnhRaXhEUVVGRExFdEJRWFJDTEVOQlFUUkNMRTFCUVRWQ08wVkJSa01zUTBGQlJqdEJRV2hDUVRzN08wRkRSa0U3UVVGQlFTeE5RVUZCT3p0RlFVRkJMRTFCUVVFc1IwRkJVeXhUUVVGQk8wRkJRMUlzVVVGQlFUdEpRVUZCTEUxQlFVRXNSMEZCVXl4RFFVRkJMRU5CUVVVc1ZVRkJSaXhEUVVGaExFTkJRVU1zVFVGQlpDeERRVUZCTEVOQlFVRXNSMEZCZVVJN1YwRkRiRU1zUTBGQlFTeERRVUZGTEUxQlFVWXNRMEZCVXl4RFFVRkRMRWRCUVZZc1EwRkJZeXhoUVVGa0xFVkJRVFpDTEUxQlFVRXNSMEZCVXl4SlFVRjBRenRGUVVaUk96dEZRVXRVTEVOQlFVRXNRMEZCUlN4VFFVRkJPMGxCUTBRc1EwRkJRU3hEUVVGRkxFMUJRVVlzUTBGQlV5eERRVUZETEUxQlFWWXNRMEZCYVVJc1UwRkJRVHRoUVVGSExFMUJRVUVzUTBGQlFUdEpRVUZJTEVOQlFXcENPMWRCUTBFc1RVRkJRU3hEUVVGQk8wVkJSa01zUTBGQlJqdEJRVXhCT3pzN1FVTkZRVHRCUVVGQkxFMUJRVUU3TzBWQlFVRXNZVUZCUVN4SFFVRm5RaXhUUVVGRExFdEJRVVE3VjBGRFppeDFRa0ZCUVN4SFFVRXdRaXhMUVVFeFFpeEhRVUZyUXp0RlFVUnVRanM3UlVGSGFFSXNXVUZCUVN4SFFVRmxMRk5CUVVNc1MwRkJSRHRCUVVOa0xGRkJRVUU3U1VGQlFTeEhRVUZCTEVkQlFVMHNTVUZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhEUVVGRExFbEJRVWtzU1VGQlRDeERRVUZWTEVOQlFVTXNUMEZCV0N4RFFVRkJMRU5CUVVFc1IwRkJkVUlzU1VGQmJFTTdTVUZEVGl4TFFVRkJMRWRCUVZFc1VVRkJRU3hEUVVGVExFTkJRVUVzUTBGQlJTeExRVUZHTEVOQlFWRXNRMEZCUXl4SlFVRlVMRU5CUVdNc1QwRkJaQ3hEUVVGVU8wbEJRMUlzUjBGQlFTeEhRVUZOTEZGQlFVRXNRMEZCVXl4RFFVRkJMRU5CUVVVc1MwRkJSaXhEUVVGUkxFTkJRVU1zU1VGQlZDeERRVUZqTEV0QlFXUXNRMEZCVkR0SlFVTk9MRkZCUVVFc1IwRkJWeXhSUVVGQkxFTkJRVk1zUTBGQlFTeERRVUZGTEV0QlFVWXNRMEZCVVN4RFFVRkRMRWxCUVZRc1EwRkJZeXhWUVVGa0xFTkJRVlE3U1VGRFdDeEhRVUZCTEVkQlFVMHNTVUZCU1N4RFFVRkRMRWRCUVV3c1EwRkJVeXhIUVVGVUxFVkJRV01zVVVGQlpEdEpRVU5PTEV0QlFVRXNSMEZCVVN4SlFVRkpMRU5CUVVNc1MwRkJUQ3hEUVVGWExFVkJRVUVzUjBGQlN5eEpRVUZKTEVOQlFVTXNTMEZCVEN4RFFVRlhMRU5CUVVNc1IwRkJRU3hIUVVGTkxFdEJRVkFzUTBGQlFTeEhRVUZuUWl4RFFVRkRMRWRCUVVFc1IwRkJUU3hMUVVGUUxFTkJRVE5DTEVWQlFUQkRMRU5CUVRGRExFVkJRVFpETEVOQlFUZERMRU5CUVdoQ08wbEJRMUlzUTBGQlFTeERRVUZGTEV0QlFVWXNRMEZCVVN4RFFVRkRMRWxCUVZRc1EwRkJZeXhMUVVGa0xFVkJRWEZDTEdGQlFVRXNRMEZCWXl4TFFVRmtMRU5CUVhKQ08wbEJSVUVzU1VGQk5FTXNTMEZCUVN4SFFVRlJMRVZCUVhCRU8yRkJRVUVzVlVGQlFTeERRVUZYTEVOQlFVTXNVMEZCUVR0bFFVRkhMRmxCUVVFc1EwRkJZU3hMUVVGaU8wMUJRVWdzUTBGQlJDeERRVUZZTEVWQlFXOURMRWxCUVhCRExFVkJRVUU3TzBWQlZHTTdPMFZCVjJZc1EwRkJRU3hEUVVGRkxGTkJRVUU3U1VGRFJDeERRVUZCTEVOQlFVVXNiVUpCUVVZc1EwRkJjMElzUTBGQlF5eEpRVUYyUWl4RFFVRTBRaXhUUVVGQk8yRkJRVWNzV1VGQlFTeERRVUZoTEVsQlFXSTdTVUZCU0N4RFFVRTFRanRYUVVWQkxFTkJRVUVzUTBGQlJTeGhRVUZHTEVOQlFXZENMRU5CUVVNc1JVRkJha0lzUTBGQmIwSXNaVUZCY0VJc1JVRkJjVU1zVTBGQlF5eExRVUZFTzBGQlEzQkRMRlZCUVVFN1RVRkJRU3hKUVVGQkxFZEJRVThzUTBGQlFTeERRVUZGTEV0QlFVc3NRMEZCUXl4aFFVRlNMRU5CUVhOQ0xFTkJRVU1zU1VGQmRrSXNRMEZCTkVJc1RVRkJOVUk3WVVGRFVDeERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1NVRkJVaXhEUVVGaExHdENRVUZpTEVOQlFXZERMRU5CUVVNc1IwRkJha01zUTBGQmNVTXNTVUZCY2tNN1NVRkdiME1zUTBGQmNrTTdSVUZJUXl4RFFVRkdPMEZCWkVFN096dEJRMFpCTzBGQlFVRXNUVUZCUVRzN1JVRkJRU3hIUVVGQkxFZEJRVTA3TzBWQlIwNHNWMEZCUVN4SFFVRmpMRk5CUVVNc1RVRkJSQ3hGUVVGVExFdEJRVlFzUlVGQlowSXNVVUZCYUVJc1JVRkJNRUlzVVVGQk1VSXNSVUZCYjBNc1ZVRkJjRU1zUlVGQlowUXNWVUZCYUVRN1FVRkZZaXhSUVVGQk8wbEJRVUVzUjBGQlFTeEhRVUZOTEVOQlFVRXNRMEZCUlN4SFFVRkJMRWRCUVUwc1RVRkJUaXhIUVVGbExFMUJRV3BDTzBsQlEwNHNTMEZCUVN4SFFVRlJMRU5CUVVFc1EwRkJSU3hIUVVGQkxFZEJRVTBzVFVGQlRpeEhRVUZsTEZGQlFXcENPMGxCUjFJc1NVRkJSeXhIUVVGSExFTkJRVU1zVFVGQlNpeEhRVUZoTEVOQlFXaENPMDFCUTBNc1MwRkJRU3hIUVVGUkxFTkJRVUVzUTBGQlJTeEhRVUZHTEVOQlFVMHNRMEZCUXl4UlFVRlFMRU5CUVdkQ0xHVkJRV2hDTzAxQlJWSXNRMEZCUVN4RFFVRkZMRXRCUVVZc1EwRkRReXhEUVVGRExFbEJSRVlzUTBGRFR5eExRVVJRTEVWQlEyTXNVVUZFWkN4RFFVVkRMRU5CUVVNc1NVRkdSaXhEUVVWUExFdEJSbEFzUlVGRll5eFJRVVprTEVOQlIwTXNRMEZCUXl4SlFVaEdMRU5CUjA4c1MwRklVQ3hGUVVkakxFdEJTR1E3TzFsQlNVMHNRMEZCUXp0UFFWQlNPenRKUVZWQkxFbEJRVWNzUzBGQlN5eERRVUZETEUxQlFVNHNSMEZCWlN4RFFVRnNRanROUVVORExFdEJRVUVzUjBGQlVTeERRVUZCTEVOQlFVVXNTMEZCUml4RFFVRlJMRU5CUVVNc1VVRkJWQ3hEUVVGclFpeGxRVUZzUWp0TlFVVlNMRWxCUVVjc2EwSkJRVWc3WlVGRFF5eERRVUZCTEVOQlFVVXNTMEZCUml4RFFVTkRMRU5CUVVNc1NVRkVSaXhEUVVOUExFdEJSRkFzUlVGRFl5eFZRVVJrTEVOQlJVTXNRMEZCUXl4SlFVWkdMRU5CUlU4c1MwRkdVQ3hGUVVWakxGVkJSbVFzUlVGRVJEdFBRVUZCTEUxQlFVRTdaVUZMUXl4RFFVRkJMRU5CUVVVc1MwRkJSaXhEUVVORExFTkJRVU1zU1VGRVJpeERRVU5QTEV0QlJGQXNSVUZEWXl4RFFVUmtMRU5CUlVNc1EwRkJReXhKUVVaR0xFTkJSVThzUzBGR1VDeEZRVVZqTEVOQlJtUXNSVUZNUkR0UFFVaEVPenRGUVdoQ1lUczdSVUUyUW1Rc1UwRkJRU3hIUVVGWkxGTkJRVU1zVFVGQlJDeEZRVUZUTEV0QlFWUXNSVUZCWjBJc1VVRkJhRUlzUlVGQk1FSXNVVUZCTVVJN1NVRkRXQ3hEUVVGQkxFTkJRVVVzUjBGQlFTeEhRVUZOTEUxQlFVNHNSMEZCWlN4TlFVRnFRaXhEUVVORExFTkJRVU1zU1VGRVJpeERRVU5QTEV0QlJGQTdTVUZIUVN4RFFVRkJMRU5CUVVVc1IwRkJRU3hIUVVGTkxFMUJRVTRzUjBGQlpTeE5RVUZxUWl4RFFVTkRMRU5CUVVNc1NVRkVSaXhEUVVOUExGRkJSRkE3VjBGSFFTeERRVUZCTEVOQlFVVXNSMEZCUVN4SFFVRk5MRTFCUVU0c1IwRkJaU3hOUVVGcVFpeERRVU5ETEVOQlFVTXNTVUZFUml4RFFVTlBMRkZCUkZBN1JVRlFWenM3UlVGVldpeFJRVUZCTEVkQlFWY3NVMEZCUXl4TlFVRkVMRVZCUVZNc1MwRkJWRHRYUVVOV0xFTkJRVUVzUTBGQlJTeEhRVUZCTEVkQlFVMHNUVUZCVWl4RFFVTkRMRU5CUVVNc1NVRkVSaXhEUVVOUExFdEJSRkE3UlVGRVZUczdSVUZQV0N4SlFVRkJMRWRCUVU4c1UwRkJReXhKUVVGRU8wRkJRMDRzVVVGQlFUdEpRVUZCTEZkQlFVRXNRMEZCV1N4UlFVRmFMRVZCUVhOQ0xFbEJRVWtzUTBGQlF5eE5RVUV6UWl4RlFVRnRReXhEUVVGdVF5eEZRVUZ6UXl4SlFVRkpMRU5CUVVNc1UwRkJNME1zUlVGQmMwUXNTVUZCU1N4RFFVRkRMRmxCUVRORUxFVkJRWGxGTEVsQlFVa3NRMEZCUXl4blFrRkJPVVU3U1VGRFFTeFRRVUZCTEVOQlFWVXNVVUZCVml4RlFVRnZRaXhKUVVGSkxFTkJRVU1zVFVGQmVrSXNSVUZCYVVNc1EwRkJha01zUlVGQmIwTXNTVUZCU1N4RFFVRkRMRk5CUVhwRE8wbEJSVUVzVjBGQlFTeERRVUZaTEZGQlFWb3NSVUZCYzBJc1NVRkJTU3hEUVVGRExFMUJRVE5DTEVWQlFXMURMRU5CUVc1RExFVkJRWE5ETEVsQlFVa3NRMEZCUXl4VFFVRXpReXhGUVVGelJDeEpRVUZKTEVOQlFVTXNXVUZCTTBRc1JVRkJlVVVzU1VGQlNTeERRVUZETEdkQ1FVRTVSVHRKUVVOQkxGTkJRVUVzUTBGQlZTeFJRVUZXTEVWQlFXOUNMRWxCUVVrc1EwRkJReXhOUVVGNlFpeEZRVUZwUXl4RFFVRnFReXhGUVVGdlF5eEpRVUZKTEVOQlFVTXNVMEZCZWtNN1NVRkZRU3hYUVVGQkxFTkJRVmtzVVVGQldpeEZRVUZ6UWl4SlFVRkpMRU5CUVVNc1RVRkJNMElzUlVGQmJVTXNRMEZCYmtNc1JVRkJjME1zUTBGQmRFTXNSVUZCZVVNc1NVRkJTU3hEUVVGRExGbEJRVGxETEVWQlFUUkVMRWxCUVVrc1EwRkJReXhuUWtGQmFrVTdTVUZEUVN4VFFVRkJMRU5CUVZVc1VVRkJWaXhGUVVGdlFpeEpRVUZKTEVOQlFVTXNUVUZCZWtJc1JVRkJhVU1zUTBGQmFrTXNSVUZCYjBNc1EwRkJjRU03U1VGRlFTeFhRVUZCTEVOQlFWa3NXVUZCV2l4RlFVRXdRaXhKUVVGSkxFTkJRVU1zVlVGQkwwSXNSVUZCTWtNc1EwRkJNME1zUlVGQk9FTXNTVUZCU1N4RFFVRkRMR0ZCUVc1RUxFVkJRV3RGTEVsQlFXeEZMRVZCUVhkRkxFbEJRWGhGTzBsQlEwRXNVMEZCUVN4RFFVRlZMRmxCUVZZc1JVRkJkMElzU1VGQlNTeERRVUZETEZWQlFUZENMRVZCUVhsRExFTkJRWHBETEVWQlFUUkRMRWxCUVVrc1EwRkJReXhoUVVGcVJEdEpRVWRCTEZkQlFVRXNRMEZCV1N4WFFVRmFMRVZCUVhsQ0xFbEJRVWtzUTBGQlF5eHRRa0ZCT1VJc1JVRkJiVVFzUTBGQmJrUXNSVUZCYzBRc1NVRkJTU3hEUVVGRExITkNRVUV6UkN4RlFVRnRSaXhKUVVGdVJpeEZRVUY1Uml4SlFVRjZSanRKUVVOQkxGTkJRVUVzUTBGQlZTeFhRVUZXTEVWQlFYVkNMRWxCUVVrc1EwRkJReXh0UWtGQk5VSXNSVUZCYVVRc1EwRkJha1FzUlVGQmIwUXNTVUZCU1N4RFFVRkRMSE5DUVVGNlJEdEpRVVZCTEZkQlFVRXNRMEZCV1N4VlFVRmFMRVZCUVhkQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCTjBJc1JVRkJhVVFzUTBGQmFrUXNSVUZCYjBRc1NVRkJTU3hEUVVGRExIRkNRVUY2UkN4RlFVRm5SaXhKUVVGb1JpeEZRVUZ6Uml4SlFVRjBSanRKUVVOQkxGTkJRVUVzUTBGQlZTeFZRVUZXTEVWQlFYTkNMRWxCUVVrc1EwRkJReXhyUWtGQk0wSXNSVUZCSzBNc1EwRkJMME1zUlVGQmEwUXNTVUZCU1N4RFFVRkRMSEZDUVVGMlJEdEpRVVZCTEZkQlFVRXNRMEZCV1N4UlFVRmFMRVZCUVhOQ0xFbEJRVWtzUTBGQlF5eG5Ra0ZCTTBJc1JVRkJOa01zUTBGQk4wTXNSVUZCWjBRc1NVRkJTU3hEUVVGRExHMUNRVUZ5UkN4RlFVRXdSU3hKUVVFeFJTeEZRVUZuUml4SlFVRm9SanRKUVVOQkxGTkJRVUVzUTBGQlZTeFJRVUZXTEVWQlFXOUNMRWxCUVVrc1EwRkJReXhuUWtGQmVrSXNSVUZCTWtNc1EwRkJNME1zUlVGQk9FTXNTVUZCU1N4RFFVRkRMRzFDUVVGdVJEdEpRWFZDUVN4TFFVRkJMRWRCUVZFc1QwRkJUeXhEUVVGRExFOUJRVklzUTBGQlowSXNVVUZCVVN4RFFVRkRMRWxCUVhwQ0xFTkJRVGhDTEVOQlFVTXNTMEZCTDBJc1EwRkJRVHRKUVVWU0xFbEJRVWNzWlVGQlFTeEpRVUZYTEhOQ1FVRmtPMEZCZFVKRExGZEJRVUVzVTBGQlFUczdVVUZEUXl4TFFVRkxMRU5CUVVNc1RVRkJUeXhEUVVGQkxFTkJRVUVzUTBGQllpeEhRVUZyUWp0QlFVUnVRanRoUVVkQkxFdEJRVXNzUTBGQlF5eE5RVUZPTEVOQlFVRXNSVUV4UWtRN08wVkJPVU5OT3p0RlFUWkZVQ3hOUVVGQkxFZEJRVk1zVTBGQlF5eEpRVUZFTzBsQlJWSXNTVUZCUVN4RFFVRkxMRWxCUVV3N1NVRkZRU3hKUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZTTzAxQlJVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGb1FpeERRVUZCTEVWQlJrUTdTMEZCUVN4TlFVRkJPMDFCU1VNc1NVRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlZqdFJRVU5ETEVOQlFVTXNRMEZCUXl4SlFVRkdMRU5CUVU4N1ZVRkZUaXhIUVVGQkxFVkJRVXNzUjBGQlFTeEhRVUZOTEdkQ1FVWk1PMVZCUjA0c1VVRkJRU3hGUVVGVkxFMUJTRW83VlVGSlRpeE5RVUZCTEVWQlFWRXNTMEZLUmp0VlFVdE9MRTlCUVVFc1JVRkJVeXhOUVV4SU8xTkJRVkE3VVVGUlFTeERRVUZETEVOQlFVTXNTVUZCUml4RFFVRlBPMVZCUlU0c1IwRkJRU3hGUVVGTExFZEJRVUVzUjBGQlRTeFhRVVpNTzFWQlIwNHNVVUZCUVN4RlFVRlZMRTFCU0VvN1ZVRkpUaXhOUVVGQkxFVkJRVkVzUzBGS1JqdFZRVXRPTEU5QlFVRXNSVUZCVXl4UFFVeElPMU5CUVZBc1JVRlVSRHRQUVVwRU96dFhRWEZDUVN4VlFVRkJMRU5CUVZjc1NVRkJXQ3hGUVVGcFFpeEpRVUZKTEVOQlFVTXNWVUZCVEN4SFFVRnJRaXhKUVVGdVF6dEZRWHBDVVRzN1JVRTBRbFFzVFVGQlFTeEhRVUZUTEZOQlFVTXNTVUZCUkR0QlFVTlNMRkZCUVVFN1FVRkJRU3hUUVVGQkxITkRRVUZCT3p0TlFVTkRMRTFCUVUwc1EwRkJReXhOUVVGUUxFTkJRV003VVVGRllpeExRVUZCTEVWQlFVOHNWVUZCUVN4SFFVRmhMRU5CUVVNc1EwRkJReXhMUVVGbUxFZEJRWFZDTEZkQlJtcENPMUZCUjJJc1QwRkJRU3hGUVVGVExFVkJTRWs3VVVGSllpeEhRVUZCTEVWQlFVc3NWMEZCUVN4SFFVRmpMRU5CUVVNc1EwRkJReXhGUVVwU08wOUJRV1E3UVVGRVJEdEpRVk5CTEVsQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVZZN1lVRkRReXhOUVVGTkxFTkJRVU1zVlVGQlVDeERRVUZCTEVWQlJFUTdPMFZCVmxFN08wVkJZVlFzVDBGQlFTeEhRVUZWTEZOQlFVTXNTVUZCUkR0QlFVTlVMRkZCUVVFN1FVRkJRU3hUUVVGQkxITkRRVUZCT3p0TlFVTkRMRTFCUVUwc1EwRkJReXhOUVVGUUxFTkJRV003VVVGRllpeExRVUZCTEVWQlFVOHNWVUZCUVN4SFFVRmhMRU5CUVVNc1EwRkJReXhOUVVGbUxFZEJRWGRDTEdGQlFYaENMRWRCUVhkRExFTkJRVU1zUTBGQlF5eExRVUV4UXl4SFFVRnJSQ3hQUVVZMVF6dFJRVWRpTEU5QlFVRXNSVUZCVXl4RFFVRkRMRU5CUVVNc1QwRklSVHRSUVVsaUxFZEJRVUVzUlVGQlN5eHJRa0ZCUVN4SFFVRnhRaXhEUVVGRExFTkJRVU1zUlVGS1pqdFBRVUZrTzBGQlJFUTdTVUZUUVN4SlFVRkhMRTFCUVUwc1EwRkJReXhOUVVGV08yRkJRME1zVFVGQlRTeERRVUZETEZWQlFWQXNRMEZCUVN4RlFVUkVPenRGUVZaVE96dEZRV1ZXTEVsQlFVRXNSMEZCVHl4VFFVRkJPMWRCUlU0c1EwRkJReXhEUVVGRExFbEJRVVlzUTBGQlR6dE5RVVZPTEVkQlFVRXNSVUZCU3l4SFFVWkRPMDFCUjA0c1VVRkJRU3hGUVVGVkxFMUJTRW83VFVGSlRpeE5RVUZCTEVWQlFWRXNTMEZLUmp0TlFVdE9MRTlCUVVFc1JVRkJVeXhOUVV4SU8wdEJRVkE3UlVGR1RUczdSVUZoVUN4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zUzBGQlZpeERRVUZuUWl4VFFVRkJPMWRCUTJZc1NVRkJRU3hEUVVGQk8wVkJSR1VzUTBGQmFFSTdPMFZCU1VFc1EwRkJRU3hEUVVGRkxGTkJRVUU3VjBGRFJDeEpRVUZCTEVOQlFVRTdSVUZFUXl4RFFVRkdPMEZCZGsxQk96czdRVU5EUVR0QlFVRkJMRTFCUVVFN08wVkJRVUVzVFVGQlFTeEhRVUZUTEZOQlFVRTdWMEZGVWl4RFFVRkJMRU5CUVVVc1UwRkJSaXhEUVVGWkxFTkJRVU1zU1VGQllpeERRVUZyUWl4VFFVRkJPMDFCUldwQ0xFbEJRVWNzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWxCUVZJc1EwRkJZU3hSUVVGaUxFTkJRVUVzUzBGQk1FSXNUMEZCTjBJN1pVRkZReXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTMEZCVWl4RFFVRmpMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eE5RVUZTTEVOQlFVRXNRMEZCWkN4RlFVWkVPMDlCUVVFc1RVRkJRVHRsUVV0RExFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4TlFVRlNMRU5CUVdVc1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZETEV0QlFWSXNRMEZCUVN4RFFVRm1MRVZCVEVRN08wbEJSbWxDTEVOQlFXeENPMFZCUmxFN08wVkJWMVFzUTBGQlFTeERRVUZGTEZOQlFVRTdTVUZEUkN4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zVFVGQlZpeERRVUZwUWl4VFFVRkJPMkZCUTJoQ0xFMUJRVUVzUTBGQlFUdEpRVVJuUWl4RFFVRnFRanRYUVVkQkxFMUJRVUVzUTBGQlFUdEZRVXBETEVOQlFVWTdRVUZZUVRzN08wRkRRVUU3UVVGQlFTeE5RVUZCT3p0RlFVRkJMRTlCUVVFc1IwRkJWU3hUUVVGQk8wRkJRMVFzVVVGQlFUdEpRVUZCTEU5QlFVRXNSMEZCVlN4UlFVRkJMRGhFUVVGcFJDeERRVUZxUkR0SlFVTldMRWxCUVVFc1IwRkJUeXhSUVVGQkxFTkJRVk1zUTBGQlFTeERRVUZGTEcxQ1FVRkdMRU5CUVhOQ0xFTkJRVU1zU1VGQmRrSXNRMEZCUVN4RFFVRlVPMGxCUTFBc1IwRkJRU3hIUVVGTkxGRkJRVUVzSzBOQlFXZERMRU5CUVdoRE8wbEJRMDRzUjBGQlFTeEhRVUZOTEZGQlFVRXNlVU5CUVRCQ0xFTkJRVEZDTzBsQlEwNHNTVUZCUVN4SFFVRlBMRWRCUVVFc1IwRkJUVHRKUVVWaUxFbEJRV1VzU1VGQlFTeEhRVUZQTEVsQlFYUkNPMDFCUVVFc1NVRkJRU3hIUVVGUExFdEJRVkE3TzBsQlEwRXNSMEZCUVN4SFFVRk5MRWRCUVVFc1IwRkJUVHRKUVVOYUxFbEJRVUVzU1VGQlVUdEpRVVZTTEVsQlFVY3NRMEZCU1N4TFFVRkJMRU5CUVUwc1NVRkJUaXhEUVVGUU8wMUJSVU1zUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZEUXl4RFFVRkRMRWRCUkVZc1EwRkRUU3hIUVVST0xFTkJSVU1zUTBGQlF5eEpRVVpHTEVOQlJVOHNTMEZHVUN4RlFVVmpMRWRCUm1RN1RVRkpRU3hEUVVGQkxFTkJRVVVzYlVKQlFVWXNRMEZEUXl4RFFVRkRMRWxCUkVZc1EwRkRUeXhKUVVSUU8yRkJSMEVzUTBGQlFTeERRVUZGTEZsQlFVWXNRMEZCWlN4RFFVRkRMRWxCUVdoQ0xFTkJRWEZDTEZOQlFVRTdRVUZEY0VJc1dVRkJRVHRSUVVGQkxFZEJRVUVzUjBGQlRTeFJRVUZCTEhsRFFVRjVRaXhEUVVGNlFqdGxRVU5PTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhKUVVGU0xFTkJRV0VzUzBGQllpeEZRVUZ2UWl4SlFVRkJMRWRCUVU4c1IwRkJNMEk3VFVGR2IwSXNRMEZCY2tJc1JVRlVSRHM3UlVGWVV6czdSVUY1UWxZc1RVRkJRU3hIUVVGVExGTkJRVU1zUjBGQlJDeEZRVUZOTEVkQlFVNDdWMEZCWXl4SlFVRkpMRU5CUVVNc1MwRkJUQ3hEUVVGWExFbEJRVWtzUTBGQlF5eE5RVUZNTEVOQlFVRXNRMEZCUVN4SFFVRm5RaXhEUVVGRExFZEJRVUVzUjBGQlRTeEhRVUZRTEVOQlFXaENMRWRCUVRoQ0xFZEJRWHBETzBWQlFXUTdPMFZCUlZRc1VVRkJRU3hIUVVGWExGTkJRVU1zUzBGQlJEdEJRVU5XTEZGQlFVRTdTVUZCUVN4TFFVRkJMRWRCUVZFc1RVRkJRU3hEUVVGUExFTkJRVkFzUlVGQlZTeExRVUZMTEVOQlFVTXNUVUZCVGl4SFFVRmxMRU5CUVhwQ08xZEJRMUlzUzBGQlRTeERRVUZCTEV0QlFVRTdSVUZHU1RzN1JVRlJXQ3hKUVVGQkxFZEJRVThzVTBGQlFUdEJRVVZPTEZGQlFVRTdTVUZCUVN4UlFVRkJMRWRCUVZjc1EwRkJRU3hEUVVGRkxIRkNRVUZHTzBsQlExZ3NRMEZCUVN4RFFVRkZMRkZCUVVZc1EwRkJWeXhEUVVGRExFZEJRVm9zUTBGQlowSXNRMEZCYUVJc1EwRkJhMElzUTBGQlF5eFBRVUZ1UWl4RFFVRXlRaXhSUVVFelFqdEpRVU5CTEUxQlFVRXNSMEZCVXl4UlFVRkJMRU5CUVZNc1EwRkJRU3hEUVVGRkxHMUNRVUZHTEVOQlFYTkNMRU5CUVVNc1NVRkJka0lzUTBGQlFTeERRVUZVTzBGQlIxUXNVMEZCVXl4cFJrRkJWRHROUVVWRExGTkJRVUVzUjBGQldTeFJRVUZCTEVOQlFWTXNVVUZCVkR0TlFVTmFMRWRCUVVFc1IwRkJUU3hSUVVGQkxFTkJRVk1zUTBGQlFTeERRVUZGTEZOQlFVWXNRMEZCV1N4RFFVRkRMRWRCUVdJc1EwRkJRU3hEUVVGVU8wMUJRMDRzUTBGQlFTeERRVUZGTEZOQlFVWXNRMEZCV1N4RFFVRkRMRWRCUVdJc1EwRkJhVUlzUjBGQlFTeEhRVUZOTEVOQlFYWkNPMEZCU2tRN1YwRlBRU3hEUVVGQkxFTkJRVVVzVVVGQlJpeERRVUZYTEVOQlFVTXNUMEZCV2l4RFFVRnZRaXhSUVVGd1FqdEZRV1JOT3p0RlFYRkNVQ3hEUVVGQkxFTkJRVVVzVTBGQlFUdEpRVU5FTEVOQlFVRXNRMEZCUlN4WlFVRkdMRU5CUTBNc1EwRkJReXhKUVVSR0xFTkJRMDhzYjBKQlJGQXNSVUZETmtJc1QwRkVOMElzUTBGRlF5eERRVUZETEU5QlJrWXNRMEZGVlN4UlFVWldPMGxCU1VFc1EwRkJRU3hEUVVGRkxHRkJRVVlzUTBGRFF5eERRVUZETEV0QlJFWXNRMEZEVVN4SlFVUlNPMWRCUjBFc1NVRkJRU3hEUVVGQk8wVkJVa01zUTBGQlJqdEJRWGhFUVRzN08wRkRRVUU3UVVGQlFTeE5RVUZCT3p0RlFVRkJMRlZCUVVFc1IwRkJZVHM3UlVGRllpeFBRVUZCTEVkQlFWVXNVMEZCUVR0SlFVTlVMRWxCUVRaQ0xFTkJRVWtzVlVGQmFrTTdUVUZCUVN4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRV2hDTEVOQlFVRXNSVUZCUVRzN1YwRkRRU3hWUVVGQkxFZEJRV0U3UlVGR1NqczdSVUZKVml4TlFVRkJMRWRCUVZNc1UwRkJReXhMUVVGRU8wRkJRMUlzVVVGQlFUdEpRVUZCTEVkQlFVRXNSMEZCVFN4RFFVRkJMRU5CUVVVc1MwRkJSaXhEUVVGUkxFTkJRVU1zVVVGQlZDeERRVUZyUWl4bFFVRnNRaXhEUVVGclF5eERRVUZETEVsQlFXNURMRU5CUVVFN1NVRkRUaXhMUVVGQkxFZEJRVkVzUTBGQlFTeERRVUZGTEV0QlFVWXNRMEZCVVN4RFFVRkRMRkZCUVZRc1EwRkJhMElzYVVKQlFXeENPMGxCUTFJc1NVRkJRU3hIUVVGUExFbEJRVWtzUTBGQlF5eExRVUZNTEVOQlFWY3NRMEZCUXl4SlFVRkpMRWxCUVV3c1EwRkJWU3hEUVVGRExFOUJRVmdzUTBGQlFTeERRVUZCTEVkQlFYVkNMRTFCUVd4RE8wbEJSMUFzUjBGQlFTeEhRVUZOTEVOQlFVRXNRMEZCUlN4SFFVRkdMRU5CUVUwc1EwRkJReXhKUVVGUUxFTkJRVmtzUzBGQldqdEpRVU5PTEVkQlFVRXNSMEZCVFN4RFFVRkJMRU5CUVVVc1IwRkJSaXhEUVVGTkxFTkJRVU1zU1VGQlVDeERRVUZaTEV0QlFWbzdTVUZEVGl4SlFVRkJMRWRCUVU4c1EwRkJRU3hEUVVGRkxFZEJRVVlzUTBGQlRTeERRVUZETEVsQlFWQXNRMEZCV1N4TlFVRmFPMGxCUTFBc1JVRkJRU3hIUVVGTExFTkJRVUVzUTBGQlJTeEhRVUZHTEVOQlFVMHNRMEZCUXl4SlFVRlFMRU5CUVZrc1NVRkJXanRKUVVOTUxFVkJRVUVzUjBGQlN5eERRVUZCTEVOQlFVVXNSMEZCUml4RFFVRk5MRU5CUVVNc1NVRkJVQ3hEUVVGWkxFbEJRVm83U1VGSlRDeFJRVUZCTEVkQlFWY3NUMEZCUVN4cFJFRkJhME1zUzBGQmJFTTdTVUZEV0N4TlFVRkJMRWRCUVZNc1QwRkJRU3hwUkVGQlowTXNTVUZCYUVNN1NVRkZWQ3hKUVVGSExGbEJRVWc3VFVGRFF5eEpRVUZCTEVkQlFVOHNTVUZCU1N4RFFVRkRMRWRCUVV3c1EwRkJVeXhKUVVGVUxFVkJRV1VzU1VGQlppeEZRVVJTT3p0SlFVZEJMRWRCUVVFc1IwRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVsQlFWZ3NSVUZCYVVJc1IwRkJha0lzUlVGQmMwSXNSMEZCZEVJN1NVRkhUaXhQUVVGQkxFZEJRVlVzUTBGQlF5eEhRVUZCTEVkQlFVMHNSMEZCVUN4RFFVRkJMRWRCUVdNc1EwRkJReXhIUVVGQkxFZEJRVTBzUjBGQlVEdEpRVU40UWl4SlFVRjVRaXhSUVVGNlFqdE5RVUZCTEU5QlFVRXNSMEZCVlN4RFFVRkJMRWRCUVVrc1VVRkJaRHM3U1VGTFFTeERRVUZCTEVOQlFVVXNSMEZCUml4RFFVRk5MRU5CUVVNc1IwRkJVQ3hEUVVGWExFOUJRVmdzUlVGQmIwSXNRMEZCUXl4UFFVRkJMRWRCUVZVc1IwRkJXQ3hEUVVGQkxFZEJRV3RDTEVkQlFYUkRPMGxCUTBFc1NVRkJiMFVzV1VGQlFTeEpRVUZSTEZsQlFUVkZPMDFCUVVFc1EwRkJRU3hEUVVGRkxFZEJRVVlzUTBGQlRTeERRVUZETEVkQlFWQXNRMEZCVnl4clFrRkJXQ3hGUVVFclFpeEpRVUZKTEVOQlFVTXNWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeEZRVUY1UWl4RlFVRjZRaXhGUVVFMlFpeEZRVUUzUWl4RFFVRXZRaXhGUVVGQk96dEpRVU5CTEVOQlFVRXNRMEZCUlN4TFFVRkdMRU5CUVZFc1EwRkJReXhKUVVGVUxESkRRVUZqTEUxQlFVMHNRMEZCUXl4WFFVRlpMRWRCUVVFc1IwRkJUU3hoUVVGMlF6dEpRVVZCTEVsQlFXRXNTVUZCUVN4SFFVRlBMRWRCUVZBc1NVRkJaU3hOUVVFMVFqdE5RVUZCTEU5QlFVRXNRMEZCUVN4RlFVRkJPenRYUVVWQkxGVkJRVUVzUTBGQlZ5eFRRVUZCTzJGQlFVY3NUVUZCUVN4RFFVRlBMRXRCUVZBc1JVRkJZeXhKUVVGa08wbEJRVWdzUTBGQldEdEZRVzVEVVRzN1JVRnpRMVFzUTBGQlFTeERRVUZGTEZOQlFVRTdWMEZEUkN4RFFVRkJMRU5CUVVVc1owSkJRVVlzUTBGQmJVSXNRMEZCUXl4SlFVRndRaXhEUVVGNVFpeFRRVUZCTzJGQlEzaENMRTFCUVVFc1EwRkJUeXhKUVVGUU8wbEJSSGRDTEVOQlFYcENPMFZCUkVNc1EwRkJSanRCUVRWRFFUczdPMEZEUkVFN1JVRkJRU3hEUVVGQkxFTkJRVVVzVTBGQlFUdFhRVU5FTEVOQlFVRXNRMEZCUlN4NVFrRkJSaXhEUVVFMFFpeERRVUZETEVsQlFUZENMRU5CUVd0RExGTkJRVUU3UVVGRmFrTXNWVUZCUVR0TlFVRkJMRTlCUVVFc1IwRkJWVHRSUVVWVUxFbEJRVUVzUlVGQlRTeEpRVVpITzFGQlIxUXNVMEZCUVN4RlFVRlhMRmRCU0VZN08wMUJUVllzVDBGQlFTeEhRVUZWTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhKUVVGU0xFTkJRV0VzVTBGQllqdE5RVVZXTEVsQlFVY3NaVUZCU0R0UlFVTkRMRTlCUVU4c1EwRkJReXhQUVVGU0xFZEJRV3RDTEZGQlJHNUNPenRoUVVsQkxFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4UFFVRlNMRU5CUVdkQ0xFOUJRV2hDTzBsQlpHbERMRU5CUVd4RE8wVkJSRU1zUTBGQlJqdEJRVUZCT3pzN1FVTkRRVHRGUVVGQkxFTkJRVUVzUTBGQlJTeFRRVUZCTzBGQlJVUXNVVUZCUVR0SlFVRkJMRk5CUVVFc1IwRkJXVHRKUVVOYUxFTkJRVUVzUTBGQlJTeG5Ra0ZCUml4RFFVRnRRaXhEUVVGRExFOUJRWEJDTEVOQlFUUkNPMDFCUVVNc1QwRkJRU3hGUVVGVExGRkJRVlk3VFVGQmIwSXNVMEZCUVN4RlFVRlhMRkZCUVM5Q08wdEJRVFZDTzBsQlJVRXNTVUZCUVN4SFFVRlBMRk5CUVVNc1NVRkJSRHROUVVWT0xFbEJRVWNzV1VGQlNEdGxRVVZETEVOQlFVRXNRMEZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVQ3hEUVVORExFTkJRVU1zU1VGRVJpeERRVU5QTEU5QlJGQXNSVUZEWjBJc1QwRkVhRUlzUTBGRlF5eERRVUZETEZGQlJrWXNRMEZGVnl4cFFrRkdXQ3hEUVVkRExFTkJRVU1zUzBGSVJpeERRVUZCTEVOQlNVTXNRMEZCUXl4UFFVcEdMRU5CU1ZVc1RVRktWaXhGUVVaRU96dEpRVVpOTzBsQlYxQXNUMEZCUVN4SFFVRlZMRk5CUVVFN1FVRkZWQ3hWUVVGQk8wMUJRVUVzU1VGQlFTeEhRVUZQTEZOQlFWVXNRMEZCUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVllzUTBGQlpTeERRVUZETEV0QlFURkNMRU5CUVVFN1RVRkZVQ3hKUVVGSExGbEJRVWc3VVVGRlF5eERRVUZETEVOQlFVTXNTVUZCUml4RFFVRlBPMVZCUlU0c1IwRkJRU3hGUVVGTExIbENRVVpETzFWQlIwNHNVVUZCUVN4RlFVRlZMRTFCU0VvN1ZVRkpUaXhKUVVGQkxFVkJRVTA3V1VGQlF5eEpRVUZCTEVWQlFVMHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGcVFqdFpRVUYxUWl4TFFVRkJMRVZCUVU4c1NVRkJTU3hEUVVGRExFdEJRVzVETzFkQlNrRTdWVUZMVGl4TlFVRkJMRVZCUVZFc1RVRk1SanRUUVVGUU8xRkJVVUVzVlVGQlFTeERRVUZYTEZOQlFVRTdhVUpCUlZZc1NVRkJRU3hEUVVGTExFbEJRVXc3VVVGR1ZTeERRVUZZTEVWQlIwVXNSMEZJUml4RlFWWkVPMDlCUVVFc1RVRkJRVHRSUVdWRExFTkJRVU1zUTBGQlF5eEpRVUZHTEVOQlFVODdWVUZGVGl4SFFVRkJMRVZCUVVzc2VVSkJSa003VlVGSFRpeFJRVUZCTEVWQlFWVXNUVUZJU2p0VlFVbE9MRWxCUVVFc1JVRkJUVHRaUVVGRExFbEJRVUVzUlVGQlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVdwQ08xbEJRWFZDTEV0QlFVRXNSVUZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVllzUjBGQmEwSXNRMEZCYUVRN1YwRktRVHRWUVV0T0xFMUJRVUVzUlVGQlVTeE5RVXhHTzFOQlFWQXNSVUZtUkRzN1lVRXdRa0VzUTBGQlFTeERRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJXaXhEUVVGeFFpeERRVUZETEUxQlFYUkNMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRMRTlCUVhSRExFTkJRME1zUTBGQlF5eFhRVVJHTEVOQlEyTXNhVUpCUkdRc1EwRkZReXhEUVVGRExFOUJSa1lzUTBGRlZTeE5RVVpXTzBsQk9VSlRPMGxCYlVOV0xFOUJRVUVzUjBGQlZTeFRRVUZETEUxQlFVUXNSVUZCVXl4SlFVRlVMRVZCUVdVc1NVRkJaanRCUVVWVUxGVkJRVUU3VFVGQlFTeEpRVUZITEVsQlFVa3NRMEZCUXl4TFFVRk1MRWRCUVdFc1EwRkJhRUk3VVVGSFF5eExRVUZCTEVkQlFWRXNRMEZCUVN4RFFVRkZMR0ZCUVVZc1EwRkJaMElzUTBGQlF5eFJRVUZxUWl4RFFVRXdRaXhaUVVFeFFqdFJRVU5TTEUxQlFVRXNSMEZCVXl4RFFVRkJMRU5CUVVVc1lVRkJSaXhEUVVGblFpeERRVUZETEZGQlFXcENMRU5CUVRCQ0xHTkJRVEZDTzFGQlExUXNUMEZCUVN4SFFVRlZMRU5CUVVFc1EwRkJSU3hoUVVGR0xFTkJRV2RDTEVOQlFVTXNVVUZCYWtJc1EwRkJNRUlzWlVGQk1VSTdVVUZEVml4TlFVRkJMRWRCUVZNc1EwRkJRU3hEUVVGRkxHRkJRVVlzUTBGQlowSXNRMEZCUXl4UlFVRnFRaXhEUVVFd1FpeGpRVUV4UWp0UlFVTlVMRWxCUVVFc1IwRkJUeXhEUVVGQkxFTkJRVVVzWVVGQlJpeERRVUZuUWl4RFFVRkRMRkZCUVdwQ0xFTkJRVEJDTEZsQlFURkNPMUZCUTFBc1RVRkJRU3hIUVVGVExFTkJRVUVzUTBGQlJTeGhRVUZHTEVOQlFXZENMRU5CUVVNc1VVRkJha0lzUTBGQk1FSXNZMEZCTVVJN1VVRkRWQ3hMUVVGQkxFZEJRVkVzUTBGQlFTeERRVUZGTEZkQlFVWXNRMEZCWXl4RFFVRkRMRkZCUVdZc1EwRkJkMElzWVVGQmVFSTdVVUZGVWl4TFFVRkJMRWRCUVZFc1EwRkJRU3hEUVVGRkxHRkJRVVlzUTBGQlowSXNRMEZCUXl4UlFVRnFRaXhEUVVFd1FpeFhRVUV4UWp0UlFVTlNMRWxCUVVFc1IwRkJUeXhEUVVGQkxFTkJRVVVzWVVGQlJpeERRVUZuUWl4RFFVRkRMRkZCUVdwQ0xFTkJRVEJDTEdsQ1FVRXhRaXhEUVVFMFF5eERRVUZETEVsQlFUZERMRU5CUVd0RUxFOUJRV3hFTEVWQlFUSkVMRXRCUVRORUxFTkJRV2xGTEVOQlFVTXNTVUZCYkVVc1EwRkJkVVVzU1VGQlNTeERRVUZETEVkQlFUVkZPMUZCUTFBc1NVRkJRU3hIUVVGUExFTkJRVUVzUTBGQlJTeGhRVUZHTEVOQlFXZENMRU5CUVVNc1VVRkJha0lzUTBGQk1FSXNaMEpCUVRGQ0xFTkJRVEpETEVOQlFVTXNTVUZCTlVNc1EwRkJhVVFzVDBGQmFrUXNSVUZCTUVRc1NVRkJNVVFzUTBGQkswUXNRMEZCUXl4SlFVRm9SU3hEUVVGeFJTeEpRVUZKTEVOQlFVTXNSVUZCTVVVN1VVRkZVQ3hEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTMEZCVWl4RFFVRmpMRk5CUVVFN1ZVRkZZaXhEUVVGRExFTkJRVU1zU1VGQlJpeERRVUZQTzFsQlJVNHNSMEZCUVN4RlFVRkxMSGxDUVVaRE8xbEJSMDRzVVVGQlFTeEZRVUZWTEUxQlNFbzdXVUZKVGl4SlFVRkJMRVZCUVUwN1kwRkJReXhKUVVGQkxFVkJRVTBzU1VGQlVEdGpRVUZoTEUxQlFVRXNSVUZCVVN4RFFVRnlRanRoUVVwQk8xbEJTMDRzVFVGQlFTeEZRVUZSTEUxQlRFWTdWMEZCVUR0VlFWRkJMRU5CUVVFc1EwRkJSU3hMUVVGR0xFTkJRVkVzUTBGQlF5eExRVUZVTEVOQlFXVXNUVUZCWmp0cFFrRkZRU3hKUVVGQkxFTkJRVXNzVFVGQlRDeEZRVUZoTEVsQlFXSXNSVUZCYlVJc1NVRkJia0k3VVVGYVlTeERRVUZrTzFGQlpVRXNRMEZCUVN4RFFVRkZMRWxCUVVZc1EwRkJUeXhEUVVGRExFdEJRVklzUTBGQll5eFRRVUZCTzFWQlJXSXNRMEZCUXl4RFFVRkRMRWxCUVVZc1EwRkJUenRaUVVWT0xFZEJRVUVzUlVGQlN5eDVRa0ZHUXp0WlFVZE9MRkZCUVVFc1JVRkJWU3hOUVVoS08xbEJTVTRzU1VGQlFTeEZRVUZOTzJOQlFVTXNTVUZCUVN4RlFVRk5MRWxCUVZBN1kwRkJZU3hOUVVGQkxFVkJRVkVzUTBGQmNrSTdZVUZLUVR0WlFVdE9MRTFCUVVFc1JVRkJVU3hOUVV4R08xZEJRVkE3YVVKQlVVRXNRMEZCUVN4RFFVRkZMRXRCUVVZc1EwRkJVU3hEUVVGRExFdEJRVlFzUTBGQlpTeE5RVUZtTzFGQlZtRXNRMEZCWkR0UlFXTkJMRU5CUVVFc1EwRkJSU3hMUVVGR0xFTkJRME1zUTBGQlF5eEpRVVJHTEVOQlEwOHNTVUZCU1N4RFFVRkRMRXRCUkZvN1VVRkhRU3hEUVVGQkxFTkJRVVVzU1VGQlJpeERRVU5ETEVOQlFVTXNTVUZFUml4RFFVTlBMRWxCUVVrc1EwRkJReXhYUVVSYU8xRkJSMEVzUTBGQlFTeERRVUZGTEUxQlFVWXNRMEZEUXl4RFFVRkRMRTFCUkVZc1EwRkRVeXhMUVVSVU8xRkJTVUVzUTBGQlFTeERRVUZGTEV0QlFVWXNRMEZEUXl4RFFVRkRMRTFCUkVZc1EwRkRVeXhKUVVSVUxFTkJSVU1zUTBGQlF5eE5RVVpHTEVOQlJWTXNTVUZHVkR0UlFVbEJMRU5CUVVFc1EwRkJSU3hOUVVGR0xFTkJRME1zUTBGQlF5eE5RVVJHTEVOQlExTXNTMEZFVkR0UlFVbEJMRU5CUVVFc1EwRkJSU3hQUVVGR0xFTkJRME1zUTBGQlF5eE5RVVJHTEVOQlExTXNUVUZFVkN4RFFVVkRMRU5CUVVNc1RVRkdSaXhEUVVWVExFbEJSbFFzUTBGSFF5eERRVUZETEUxQlNFWXNRMEZIVXl4TlFVaFVPMUZCUzBFc1EwRkJRU3hEUVVGRkxFMUJRVVlzUTBGRFF5eERRVUZETEUxQlJFWXNRMEZEVXl4UFFVUlVPMUZCUjBFc1EwRkJRU3hEUVVGRkxFdEJRVVlzUTBGRFF5eERRVUZETEUxQlJFWXNRMEZEVXl4TlFVUlVPMUZCUjBFc1EwRkJRU3hEUVVGRkxFMUJRVVlzUTBGRFF5eERRVUZETEUxQlJFWXNRMEZEVXl4TFFVUlVPMlZCUjBFc1EwRkJRU3hEUVVGRkxFdEJRVVlzUTBGQlVTeERRVUZETEV0QlFWUXNRMEZCWlR0VlFVRkRMRkZCUVVFc1JVRkJWU3hSUVVGWU8xVkJRWEZDTEVsQlFVRXNSVUZCVFN4SlFVRXpRanRWUVVGcFF5eFJRVUZCTEVWQlFWVXNTMEZCTTBNN1UwRkJaaXhGUVRWRlJEdFBRVUZCTEUxQlFVRTdaVUZuUmtNc1NVRkJRU3hEUVVGTExFMUJRVXdzUlVGQllTeEpRVUZpTEVWQlFXMUNMRWxCUVc1Q0xFVkJhRVpFT3p0SlFVWlRPMGxCYzBaV0xFbEJRVUVzUjBGQlR5eFRRVUZETEUxQlFVUXNSVUZCVXl4SlFVRlVMRVZCUVdVc1NVRkJaanRCUVVWT0xGVkJRVUU3VFVGQlFTeFJRVUZCTEVkQlFWYzdUVUZGV0N4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zU1VGQlZpeERRVUZsTEdkQ1FVRm1MRU5CUVdkRExFTkJRVU1zU1VGQmFrTXNRMEZCYzBNc1UwRkJRVHRCUVVWeVF5eFpRVUZCTzFGQlFVRXNTVUZCUVN4SFFVRlBPMUZCUTFBc1MwRkJRU3hIUVVGUkxFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4SlFVRlNMRU5CUVdFc1owSkJRV0k3VVVGRlVpeEpRVUZWTEV0QlFVRXNSMEZCVVN4SlFVRkpMRU5CUVVNc1MwRkJka0k3UVVGQlFTeHBRa0ZCUVRzN1VVRkpRU3hKUVVGSExIVkNRVUZJTzFWQlEwTXNTVUZCUVN4SFFVRlBMRkZCUVZNc1EwRkJRU3hMUVVGQkxFVkJSR3BDTzFOQlFVRXNUVUZCUVR0VlFVZERMRWxCUVVFc1IwRkJUenRaUVVWT0xGRkJRVUVzUlVGQlZTeEZRVVpLTzFsQlIwNHNTVUZCUVN4RlFVRk5MRWxCU0VFN1dVRkpUaXhMUVVGQkxFVkJRVThzUzBGS1JEczdWVUZOVUN4UlFVRlRMRU5CUVVFc1MwRkJRU3hEUVVGVUxFZEJRV3RDTEV0QlZHNUNPenRSUVZsQkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCWkN4RFFVRnRRaXhKUVVGdVFqdGxRVU5CTEVsQlFVa3NRMEZCUXl4SlFVRk1MRWRCUVZrN1RVRjBRbmxDTEVOQlFYUkRPMDFCZVVKQkxGRkJRVUVzUjBGQlZ5eFJRVUZSTEVOQlFVTXNUVUZCVkN4RFFVRm5RaXhUUVVGRExFOUJRVVE3VVVGRk1VSXNTVUZCUnl4bFFVRklPMEZCUTBNc2FVSkJRVThzUzBGRVVqdFRRVUZCTEUxQlFVRTdRVUZIUXl4cFFrRkJUeXhOUVVoU096dE5RVVl3UWl4RFFVRm9RanROUVZWWUxGTkJRVlVzUTBGQlFTeEpRVUZCTEVOQlFWWXNSMEZCYTBJN1lVRkRiRUlzU1VGQlFTeERRVUZMTEZGQlFWRXNRMEZCUXl4TFFVRlVMRU5CUVVFc1EwRkJURHRKUVhoRFRUdFhRVGhEVUN4RFFVRkJMRU5CUVVVc2NVSkJRVVlzUTBGQmQwSXNRMEZCUXl4SlFVRjZRaXhEUVVFNFFpeFRRVUZCTzBGQlJUZENMRlZCUVVFN1RVRkJRU3hKUVVGQkxFZEJRVThzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWxCUVZJc1EwRkJZU3hsUVVGaU8yRkJSVkFzUTBGQlF5eERRVUZETEVsQlFVWXNRMEZCVHp0UlFVVk9MRWRCUVVFc1JVRkJTeXg1UWtGR1F6dFJRVWRPTEZGQlFVRXNSVUZCVlN4TlFVaEtPMUZCU1U0c1NVRkJRU3hGUVVGTk8xVkJRVU1zU1VGQlFTeEZRVUZOTEVsQlFWQTdVMEZLUVR0UlFVdE9MRTFCUVVFc1JVRkJVU3hMUVV4R08xRkJUVTRzVDBGQlFTeEZRVUZUTEVOQlFVRXNVMEZCUVN4TFFVRkJPMmxDUVVGQkxGTkJRVU1zU1VGQlJEdFpRVU5TTEVsQlFUWkNMRWxCUVVrc1EwRkJReXhOUVVGc1F6dHhRa0ZCUVN4UFFVRkJMRU5CUVZFc1MwRkJVaXhGUVVGakxFbEJRV1FzUlVGQmIwSXNTVUZCY0VJc1JVRkJRVHM3VlVGRVVUdFJRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc1EwRk9TRHRQUVVGUU8wbEJTalpDTEVOQlFUbENPMFZCZGt4RExFTkJRVVk3UVVGQlFUczdPMEZEUkVFN1FVRkJRU3hOUVVGQk96dEZRVUZCTEUxQlFVMHNRMEZCUXl4WFFVRlFMRTFCUVUwc1EwRkJReXhUUVVOT08wbEJRVUVzU1VGQlFTeEZRVU5ETzAxQlFVRXNSMEZCUVN4RlFVRkxMRWRCUVV3N1RVRkRRU3hKUVVGQkxFVkJRVTBzUjBGRVRqdE5RVVZCTEUxQlFVRXNSVUZCVVN4SFFVWlNPMDFCUjBFc1RVRkJRU3hGUVVGUkxFZEJTRkk3UzBGRVJEczdPenRKUVZORUxFMUJRVTBzUTBGQlF5eFRRVUZWT3pzN1JVRkpha0lzUTBGQlFTeERRVUZGTEUxQlFVWXNRMEZCVXl4RFFVRkRMRXRCUVZZc1EwRkJaMElzVTBGQlFUdFhRVU5tTEUxQlFVMHNRMEZCUXl4TlFVRlFMRWRCUVdkQ08wVkJSRVFzUTBGQmFFSTdPMFZCUjBFc1EwRkJRU3hEUVVGRkxFMUJRVVlzUTBGQlV5eERRVUZETEVsQlFWWXNRMEZCWlN4VFFVRkJPMWRCUTJRc1RVRkJUU3hEUVVGRExFMUJRVkFzUjBGQlowSTdSVUZFUml4RFFVRm1PenRGUVVkQkxFTkJRVUVzUTBGQlJTeE5RVUZHTEVOQlFWTXNRMEZCUXl4TlFVRldMRU5CUVdsQ0xGTkJRVUU3U1VGRGFFSXNTVUZCSzBJc1NVRkJTU3hEUVVGRExGRkJRWEJETzAxQlFVRXNXVUZCUVN4RFFVRmhMRWxCUVVrc1EwRkJReXhSUVVGc1FpeEZRVUZCT3p0WFFVTkJMRWxCUVVrc1EwRkJReXhSUVVGTUxFZEJRV2RDTEZWQlFVRXNRMEZCVnl4VFFVRkJPMkZCUXpGQ0xFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4UFFVRlNMRU5CUVdkQ0xGTkJRV2hDTzBsQlJEQkNMRU5CUVZnc1JVRkZaQ3hIUVVaak8wVkJSa0VzUTBGQmFrSTdPMFZCVTBFc1RVRkJUU3hEUVVGRExGTkJRVkFzVFVGQlRTeERRVUZETEU5QlFWTXNVMEZCUXl4TFFVRkVMRVZCUVZFc1QwRkJVanRCUVVOa0xGRkJRVUU3U1VGQlFTeE5RVUZCTEVkQlFWTTdRVUZEVkN4VFFVRjFRaXhyUmtGQmRrSTdUVUZCUVN4TlFVRkJMRWxCUVZVN1FVRkJWanRYUVVWQkxFTkJRVU1zVFVGQlFTeEhRVUZUTEV0QlFWWXNRMEZCWjBJc1EwRkJReXhMUVVGcVFpeERRVUYxUWl4UFFVRkJMRWRCUVZVc1EwRkJReXhEUVVGc1F6dEZRVXBqT3p0RlFVOW9RaXhaUVVGQkxFZEJRV1VzVTBGQlF5eExRVUZFTzBsQlEyUXNTVUZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUaXhIUVVGbExFTkJRV3hDTzJGQlEwTXNTMEZCUVN4SFFVRlJMRWxCUkZRN1MwRkJRU3hOUVVGQk8yRkJSME1zVFVGSVJEczdSVUZFWXpzN1JVRk5aaXhWUVVGQkxFZEJRV0VzVTBGQlF5eEpRVUZFTEVWQlFVOHNTMEZCVUN4RlFVRmpMRTFCUVdRN1NVRkRXaXhKUVVGQkxFZEJRVThzV1VGQlFTeERRVUZoTEVsQlFXSTdTVUZGVUN4SlFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTUxFZEJRV01zUTBGQmFrSTdUVUZEUXl4SlFVRkJMRWxCUVZFc1RVRkJUU3hEUVVGRExFbEJRVkFzUTBGQldTeExRVUZhTEVWQlFXMUNMRU5CUVc1Q0xFVkJSRlE3UzBGQlFTeE5RVUZCTzAxQlIwTXNTVUZCUVN4SlFVRlJMRTFCU0ZRN08xZEJTMEVzU1VGQlFTeEhRVUZQTzBWQlVrczdPMFZCVjJJc1RVRkJUU3hEUVVGRExHVkJRVkFzVFVGQlRTeERRVUZETEdGQlFXVXNVMEZCUXl4TFFVRkVPMEZCUlhKQ0xGRkJRVUU3U1VGQlFTeEpRVUZCTEVkQlFVODdTVUZEVUN4SlFVRkJMRWRCUVZjc1NVRkJRU3hKUVVGQkxFTkJRVXNzUzBGQlFTeEhRVUZSTEVsQlFXSTdTVUZEV0N4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExGVkJRVXdzUTBGQlFTeERRVUZCTEVkQlFXOUNPMGxCUTNoQ0xFTkJRVUVzUjBGQlNTeEpRVUZKTEVOQlFVTXNWMEZCVEN4RFFVRkJPMGxCUTBvc1EwRkJRU3hIUVVGSkxFbEJRVWtzUTBGQlF5eGhRVUZNTEVOQlFVRTdTVUZEU2l4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExHRkJRVXdzUTBGQlFUdEpRVWRLTEVsQlFTdENMRU5CUVVFc1IwRkJTU3hEUVVGdVF6dE5RVUZCTEVsQlFVRXNTVUZCVVN4RFFVRkJMRWRCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUY0UWpzN1NVRkRRU3hKUVVGblJDeERRVUZCTEVkQlFVa3NRMEZCY0VRN1RVRkJRU3hKUVVGQkxFZEJRVThzVlVGQlFTeERRVUZYTEVsQlFWZ3NSVUZCYVVJc1EwRkJha0lzUlVGQmIwSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGb1F5eEZRVUZRT3p0SlFVTkJMRWxCUVd0RUxFTkJRVUVzUjBGQlNTeERRVUZLTEVsQlFWTXNRMEZCUVN4SFFVRkpMRU5CUVM5RU8wMUJRVUVzU1VGQlFTeEhRVUZQTEZWQlFVRXNRMEZCVnl4SlFVRllMRVZCUVdsQ0xFTkJRV3BDTEVWQlFXOUNMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQmFFTXNSVUZCVURzN1NVRkRRU3hKUVVGclJDeERRVUZCTEVkQlFVa3NRMEZCU2l4SlFVRlRMRU5CUVVFc1IwRkJTU3hEUVVGaUxFbEJRV3RDTEVOQlFVRXNSMEZCU1N4RFFVRjRSVHROUVVGQkxFbEJRVUVzUjBGQlR5eFZRVUZCTEVOQlFWY3NTVUZCV0N4RlFVRnBRaXhEUVVGcVFpeEZRVUZ2UWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRV2hETEVWQlFWQTdPMWRCUlVFN1JVRm1jVUk3TzBWQmFVSjBRaXhOUVVGTkxFTkJRVU1zYjBKQlFWQXNUVUZCVFN4RFFVRkRMR3RDUVVGdlFpeFRRVUZETEV0QlFVUTdRVUZGTVVJc1VVRkJRVHRKUVVGQkxFbEJRVUVzUjBGQlR6dEpRVU5RTEVsQlFVRXNSMEZCVnl4SlFVRkJMRWxCUVVFc1EwRkJTeXhMUVVGQkxFZEJRVkVzU1VGQllqdEpRVU5ZTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJUQ3hEUVVGQkxFTkJRVUVzUjBGQmIwSTdTVUZEZUVJc1EwRkJRU3hIUVVGSkxFbEJRVWtzUTBGQlF5eFhRVUZNTEVOQlFVRTdTVUZEU2l4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExHRkJRVXdzUTBGQlFUdEpRVU5LTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGQk8wbEJSMG9zU1VGQk9FSXNRMEZCUVN4SFFVRkpMRU5CUVd4RE8wRkJRVUVzWVVGQlR5eERRVUZCTEVkQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGMlFqczdTVUZEUVN4SlFVRm5SQ3hEUVVGQkxFZEJRVWtzUTBGQmNFUTdRVUZCUVN4aFFVRlBMRlZCUVVFc1EwRkJWeXhKUVVGWUxFVkJRV2xDTEVOQlFXcENMRVZCUVc5Q0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCYUVNc1JVRkJVRHM3U1VGRFFTeEpRVUZyUkN4RFFVRkJMRWRCUVVrc1EwRkJkRVE3UVVGQlFTeGhRVUZQTEZWQlFVRXNRMEZCVnl4SlFVRllMRVZCUVdsQ0xFTkJRV3BDTEVWQlFXOUNMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQmFFTXNSVUZCVURzN1NVRkRRU3hKUVVGclJDeERRVUZCTEVkQlFVa3NRMEZCZEVRN1FVRkJRU3hoUVVGUExGVkJRVUVzUTBGQlZ5eEpRVUZZTEVWQlFXbENMRU5CUVdwQ0xFVkJRVzlDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJhRU1zUlVGQlVEczdSVUZpTUVJN08wVkJhMEl6UWl4VlFVRkJMRWRCUVdFN08xVkJSMklzVFVGQlRTeERRVUZETEZOQlFWRXNRMEZCUXl4blFrRkJSQ3hEUVVGRExGVkJRVmtzVTBGQlFUdEpRVU16UWl4SlFVRkhMRU5CUVVrc1ZVRkJVRHROUVVORExGVkJRVUVzUjBGQllUdGhRVU5pTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJhRUlzUTBGQmRVSXNTVUZCZGtJc1JVRkdSRHM3UlVGRU1rSTdPMFZCVVRWQ0xHRkJRVUVzUjBGQlowSTdPMFZCUTJoQ0xFMUJRVTBzUTBGQlF5eFhRVUZRTEUxQlFVMHNRMEZCUXl4VFFVRlhMRk5CUVVNc1MwRkJSRHRYUVVOcVFpeGhRVUZoTEVOQlFVTXNTVUZCWkN4RFFVRnRRaXhMUVVGdVFqdEZRVVJwUWpzN1JVRkpiRUlzUzBGQlFTeEhRVUZSTEZOQlFVTXNSMEZCUkR0QlFVTlFMRkZCUVVFN1NVRkJRU3hKUVVGbExFZEJRVUVzUzBGQlR5eEpRVUZRTEVsQlFXVXNUMEZCVVN4SFFVRlNMRXRCUVd0Q0xGRkJRV2hFTzBGQlFVRXNZVUZCVHl4SlFVRlFPenRKUVVOQkxFbEJRVUVzUjBGQlZ5eEpRVUZCTEVkQlFVY3NRMEZCUXl4WFFVRktMRU5CUVVFN1FVRkRXQ3hUUVVGQkxGVkJRVUU3VFVGRFF5eEpRVUZMTEVOQlFVRXNSMEZCUVN4RFFVRk1MRWRCUVZrc1MwRkJRU3hEUVVGTkxFZEJRVWtzUTBGQlFTeEhRVUZCTEVOQlFWWTdRVUZFWWp0WFFVVkJPMFZCVEU4N08wVkJUMUlzVlVGQlFTeEhRVUZoTEZOQlFVTXNRMEZCUkN4RlFVRkpMRU5CUVVvN1NVRkRXaXhQUVVGUExFTkJRVU1zUjBGQlVpeERRVUZaTEVkQlFWb3NSVUZCYVVJc1EwRkJha0lzUlVGQmIwSXNRMEZCY0VJN1YwRkRRU3hWUVVGQkxFTkJRVmNzUTBGQlF5eFRRVUZCTzAxQlExZ3NUMEZCVHl4RFFVRkRMRWRCUVZJc1EwRkJXU3hIUVVGYUxFVkJRV2xDTEVOQlFXcENMRVZCUVc5Q0xFTkJRWEJDTzJGQlEwRXNRMEZCUXl4RFFVRkRMRTFCUVVZc1EwRkJVeXhEUVVGVUxFVkJRVms3VVVGRldDeFRRVUZCTEVWQlFWYzdWVUZGVml4SlFVRkJMRVZCUVUwc1VVRkdTVHRUUVVaQk8xRkJUVmdzVlVGQlFTeEZRVUZaTEU5QlRrUTdUMEZCV2p0SlFVWlhMRU5CUVVRc1EwRkJXQ3hGUVZWUExFTkJRVUVzUjBGQlNTeEpRVlpZTzBWQlJsazdPMFZCYVVKaUxFMUJRVTBzUTBGQlF5eGxRVUZRTEUxQlFVMHNRMEZCUXl4aFFVRmxMRk5CUVVFN1FVRkRja0lzVVVGQlFUdEpRVUZCTEVsQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVZZN1FVRkZReXhYUVVGQkxDdEVRVUZCT3p0UlFVTkRMRlZCUVVFc1EwRkJWeXhEUVVGRExFTkJRVU1zVFVGQlJpeERRVUZUTEVWQlFWUXNSVUZCWVN4WlFVRmlMRU5CUVZnc1JVRkJkVU1zUzBGQmRrTTdRVUZFUkR0aFFVVkJMR0ZCUVVFc1IwRkJaMElzUjBGS2FrSTdPMFZCUkhGQ096dEZRVk4wUWl4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zUzBGQlZpeERRVUZuUWl4VFFVRkJPMWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVkFzUTBGQlFUdEZRVUZJTEVOQlFXaENPenRGUVZsQkxFbEJRVWtzUTBGQlF5eFZRVUZNTEVsQlFVa3NRMEZCUXl4UlFVRlZMRk5CUVVNc1MwRkJSQ3hGUVVGUkxFZEJRVklzUlVGQllTeEhRVUZpTzFkQlEyUXNTVUZCU1N4RFFVRkRMRWRCUVV3c1EwRkJVeXhKUVVGSkxFTkJRVU1zUjBGQlRDeERRVUZUTEV0QlFWUXNSVUZCWjBJc1IwRkJhRUlzUTBGQlZDeEZRVUVyUWl4SFFVRXZRanRGUVVSak96dEZRVWxtTEVsQlFVa3NRMEZCUXl4VFFVRk1MRWxCUVVrc1EwRkJReXhQUVVGVExGTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NSVUZCVHl4RFFVRlFPMWRCUTJJc1EwRkJReXhEUVVGQkxFZEJRVWtzUTBGQlRDeERRVUZCTEVkQlFWVXNRMEZCUXl4RFFVRkJMRWRCUVVrc1EwRkJReXhEUVVGQkxFZEJRVWtzUTBGQlRDeERRVUZNTzBWQlJFYzdPMFZCUzJRc1NVRkJTU3hEUVVGRExHRkJRVXdzU1VGQlNTeERRVUZETEZkQlFXRXNVMEZCUXl4SFFVRkVPMEZCUTJRc1VVRkJRVHRKUVVGQkxFMUJRVUVzUjBGQlV5d3lRMEZCTWtNc1EwRkJReXhKUVVFMVF5eERRVUZwUkN4SFFVRnFSRHRKUVVOVUxFbEJTMHNzVFVGTVREdEJRVUZCTEdGQlFVODdVVUZEU0N4RFFVRkJMRVZCUVVjc1VVRkJRU3hEUVVGVExFMUJRVThzUTBGQlFTeERRVUZCTEVOQlFXaENMRVZCUVc5Q0xFVkJRWEJDTEVOQlJFRTdVVUZGU0N4RFFVRkJMRVZCUVVjc1VVRkJRU3hEUVVGVExFMUJRVThzUTBGQlFTeERRVUZCTEVOQlFXaENMRVZCUVc5Q0xFVkJRWEJDTEVOQlJrRTdVVUZIU0N4RFFVRkJMRVZCUVVjc1VVRkJRU3hEUVVGVExFMUJRVThzUTBGQlFTeERRVUZCTEVOQlFXaENMRVZCUVc5Q0xFVkJRWEJDTEVOQlNFRTdVVUZCVURzN1YwRk5RVHRGUVZKak96dEZRVlZzUWl4SlFVRkpMRU5CUVVNc1lVRkJUQ3hKUVVGSkxFTkJRVU1zVjBGQllTeFRRVUZETEVOQlFVUXNSVUZCU1N4RFFVRktMRVZCUVU4c1EwRkJVRHRCUVVOa0xGZEJRVThzUjBGQlFTeEhRVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkJMRWxCUVVzc1JVRkJUaXhEUVVGQkxFZEJRVmtzUTBGQlF5eERRVUZCTEVsQlFVc3NSVUZCVGl4RFFVRmFMRWRCUVhkQ0xFTkJRVU1zUTBGQlFTeEpRVUZMTEVOQlFVNHNRMEZCZUVJc1IwRkJiVU1zUTBGQmNFTXNRMEZCYzBNc1EwRkJReXhSUVVGMlF5eERRVUZuUkN4RlFVRm9SQ3hEUVVGdFJDeERRVUZETEV0QlFYQkVMRU5CUVRCRUxFTkJRVEZFTzBWQlJFTTdPMFZCU1d4Q0xFbEJRVWtzUTBGQlF5eGxRVUZNTEVsQlFVa3NRMEZCUXl4aFFVRmxMRk5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUlVGQlR5eERRVUZRTzBGQlJXNUNMRkZCUVVFN1NVRkJRU3hGUVVGQkxFZEJRVXNzU1VGQlNTeERRVUZETEZGQlFVd3NRMEZCWXl4RFFVRmtPMGxCUTB3c1JVRkJRU3hIUVVGTExFbEJRVWtzUTBGQlF5eFJRVUZNTEVOQlFXTXNRMEZCWkR0SlFVVk1MRVZCUVVFc1IwRkJTenROUVVOS0xFTkJRVUVzUlVGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCVEN4RFFVRlhMRWxCUVVrc1EwRkJReXhKUVVGTUxFTkJRVlVzUTBGQlZpeEZRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRm9RaXhGUVVGdFFpeEZRVUZGTEVOQlFVTXNRMEZCZEVJc1EwRkJXQ3hEUVVSRE8wMUJSVW9zUTBGQlFTeEZRVUZITEVsQlFVa3NRMEZCUXl4TFFVRk1MRU5CUVZjc1NVRkJTU3hEUVVGRExFbEJRVXdzUTBGQlZTeERRVUZXTEVWQlFXRXNSVUZCUlN4RFFVRkRMRU5CUVdoQ0xFVkJRVzFDTEVWQlFVVXNRMEZCUXl4RFFVRjBRaXhEUVVGWUxFTkJSa003VFVGSFNpeERRVUZCTEVWQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhKUVVGSkxFTkJRVU1zU1VGQlRDeERRVUZWTEVOQlFWWXNSVUZCWVN4RlFVRkZMRU5CUVVNc1EwRkJhRUlzUlVGQmJVSXNSVUZCUlN4RFFVRkRMRU5CUVhSQ0xFTkJRVmdzUTBGSVF6czdRVUZOVEN4WFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGTUxFTkJRV01zUlVGQlJTeERRVUZETEVOQlFXcENMRVZCUVc5Q0xFVkJRVVVzUTBGQlF5eERRVUYyUWl4RlFVRXdRaXhGUVVGRkxFTkJRVU1zUTBGQk4wSTdSVUZZV1RzN1JVRnBRbkJDTEdOQlFVRXNSMEZCYVVJc1UwRkJRVHRCUVVOb1FpeFJRVUZCTzBsQlFVRXNSMEZCUVN4SFFVRk5MRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eFJRVUZTTEVOQlFXbENMR1ZCUVdwQ08wbEJRMDRzUzBGQlFTeEhRVUZSTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhSUVVGU0xFTkJRV2xDTEdsQ1FVRnFRanRKUVVWU0xFZEJRVUVzUjBGQlRTeERRVUZCTEVOQlFVVXNSMEZCUml4RFFVRk5MRU5CUVVNc1NVRkJVQ3hEUVVGWkxFdEJRVm83U1VGRFRpeEhRVUZCTEVkQlFVMHNRMEZCUVN4RFFVRkZMRWRCUVVZc1EwRkJUU3hEUVVGRExFbEJRVkFzUTBGQldTeExRVUZhTzBsQlEwNHNSVUZCUVN4SFFVRkxMRU5CUVVFc1EwRkJSU3hIUVVGR0xFTkJRVTBzUTBGQlF5eEpRVUZRTEVOQlFWa3NTVUZCV2p0SlFVTk1MRVZCUVVFc1IwRkJTeXhEUVVGQkxFTkJRVVVzUjBGQlJpeERRVUZOTEVOQlFVTXNTVUZCVUN4RFFVRlpMRWxCUVZvN1NVRkRUQ3hIUVVGQkxFZEJRVTBzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4RFFVRkJMRU5CUVVVc1IwRkJSaXhEUVVGTkxFTkJRVU1zU1VGQlVDeERRVUZaTEV0QlFWb3NRMEZCV0N4RlFVRXJRaXhIUVVFdlFpeEZRVUZ2UXl4SFFVRndRenRKUVVOT0xGRkJRVUVzUjBGQlZ5eFBRVUZCTEdsRVFVRnJReXhMUVVGc1F6dEpRVVZZTEU5QlFVRXNSMEZCVlN4RFFVRkRMRWRCUVVFc1IwRkJUU3hIUVVGUUxFTkJRVUVzUjBGQll5eERRVUZETEVkQlFVRXNSMEZCVFN4SFFVRlFMRU5CUVdRc1IwRkJORUk3U1VGRGRFTXNTVUZCTWtJc1VVRkJNMEk3VFVGQlFTeFBRVUZCTEVkQlFWVXNSMEZCUVN4SFFVRk5MRkZCUVdoQ096dEpRVTFCTEVOQlFVRXNRMEZCUlN4SFFVRkdMRU5CUVUwc1EwRkJReXhIUVVGUUxFTkJRVmNzVDBGQldDeEZRVUZ2UWl4UFFVRkJMRWRCUVZVc1IwRkJPVUk3U1VGRFFTeEpRVUV3UlN4WlFVRkJMRWxCUVZFc1dVRkJiRVk3VFVGQlFTeERRVUZCTEVOQlFVVXNSMEZCUml4RFFVRk5MRU5CUVVNc1IwRkJVQ3hEUVVGWExHdENRVUZZTEVWQlFTdENMRWxCUVVrc1EwRkJReXhWUVVGTUxFTkJRV2RDTEU5QlFVRXNSMEZCVlN4SFFVRXhRaXhGUVVFclFpeEZRVUV2UWl4RlFVRnRReXhGUVVGdVF5eERRVUV2UWl4RlFVRkJPenRYUVVsQkxFTkJRVUVzUTBGQlJTeExRVUZHTEVOQlFWRXNRMEZCUXl4SlFVRlVMRU5CUVdNc1IwRkJRU3hIUVVGTkxFdEJRVTRzUjBGQll5eEhRVUUxUWp0RlFYWkNaMEk3TzBWQmVVSnFRaXhEUVVGQkxFTkJRVVVzVTBGQlFUdFhRVU5FTEVOQlFVRXNRMEZCUlN4WFFVRkdMRU5CUVdNc1EwRkJReXhKUVVGbUxFTkJRVzlDTEZOQlFVRTdZVUZEYmtJc1NVRkJTU3hEUVVGRExGZEJRVXdzU1VGQlNTeERRVUZETEZOQlFWYzdTVUZFUnl4RFFVRndRanRGUVVSRExFTkJRVVk3TzBWQlRVRXNZMEZCUVN4SFFVRnBRanM3T3pzN096czdPenM3T3pzN096czdPenRGUVcxQ2FrSXNhVUpCUVdsQ0xFTkJRVU1zVTBGQlV5eERRVUZETEdOQlFUVkNMRWRCUVRaRE96dEZRVmszUXl4RFFVRkRMRk5CUVVFN1FVRkZRU3hSUVVGQk8xZEJRVUVzVDBGQlFTeEhRVUZWTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN08wRkJSV1k3T3pzN096czdPenM3T3pzN096czdPenM3T3p0RlFVcEJMRU5CUVVRc1EwRkJRU3hEUVVGQk96dFhRV3REUVN4TlFVRk5MRU5CUVVNc1ZVRkJVeXhEUVVGRExHZENRVUZFTEVOQlFVTXNVMEZCVnl4VFFVRkJPMWRCUXpOQ0xFbEJRVWtzUTBGQlF5eFBRVUZNTEVOQlFXRXNOa0pCUVdJc1JVRkJORU1zVFVGQk5VTTdSVUZFTWtJN08xZEJTelZDTEUxQlFVMHNRMEZCUXl4VlFVRlRMRU5CUVVNc2IwSkJRVVFzUTBGQlF5eGhRVUZsTEZOQlFVTXNUVUZCUkN4RlFVRlRMRTlCUVZRN1YwRkRMMElzU1VGQlNTeERRVUZETEU5QlFVd3NRMEZCYVVJc1NVRkJRU3hOUVVGQkxFTkJRVThzVFVGQlRTeERRVUZETEUxQlFWQXNRMEZCUVN4RFFVRlFMRVZCUVhkQ0xFbEJRWGhDTEVOQlFXcENMRVZCUVdkRUxFOUJRV2hFTzBWQlJDdENPMEZCYkZOb1F5SXNJbVpwYkdVaU9pSmhjSEF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1QVlYQndJRDBnWVc1bmRXeGhjaTV0YjJSMWJHVW9KMmRoYldVbkxDQmJYU2xjY2x4dVhISmNibHh5WEc1Y2NseHVRR0Z3Y0M1amIyNTBjbTlzYkdWeUtDZEhZVzFsUTI5dWRISnZiR3hsY2ljc0lDZ2tjMk52Y0dVcElDMCtYSEpjYmx4eVhHNWNjbHh1WEhRa2MyTnZjR1V1Y205MWJtUWdQU0FvZG1Gc2RXVXNJSEJ5WldOcGMybHZiaWtnTFQ1Y2NseHVYSEpjYmx4MFhIUndJRDBnY0hKbFkybHphVzl1SUQ4Z01GeHlYRzVjZEZ4MGJpQTlJRTFoZEdndWNHOTNLREV3TENCd0tWeHlYRzVjY2x4dVhIUmNkRTFoZEdndWNtOTFibVFvZG1Gc2RXVWdLaUJ1S1NBdklHNWNjbHh1WEhKY2JpbGNjbHh1WEhKY2JseHlYRzVjY2x4dVFHRndjQzVqYjI1MGNtOXNiR1Z5S0NkUWJHRjVaWEpEYjI1MGNtOXNiR1Z5Snl3Z0tDUnpZMjl3WlNrZ0xUNWNjbHh1WEhKY2JseHlYRzRwWEhKY2JseHlYRzRpTENKY2NseHVYSEpjYm1Oc2FXTnJaV1FnUFNBdFBseHlYRzVjZENRb0p5NWhkbUYwWVhJbktTNXlaVzF2ZG1WRGJHRnpjeWduWVdOMGFYWmxKeWxjY2x4dVhIUWtLQ2NqWVhaaGRHRnlKeWt1ZG1Gc0tDUW9kR2hwY3lrdVpHRjBZU2duWVhaaGRHRnlKeWtwWEhKY2JseDBKQ2gwYUdsektTNWhaR1JEYkdGemN5Z25ZV04wYVhabEp5bGNjbHh1WEhKY2JseHlYRzRrSUMwK1hISmNibHgwSkNnbkxtRjJZWFJoY2ljcExtTnNhV05yS0dOc2FXTnJaV1FwTG1acGNuTjBLQ2t1ZEhKcFoyZGxjaWduWTJ4cFkyc25LU0lzSW1OdmJtWnBaeUE5WEhKY2JseDBabTl1ZEZOcGVtVTZJRE13WEhKY2JseDBZbUZ5Um05dWRGTnBlbVU2SURJd1hISmNibHgwYm1GdFpVWnZiblJUYVhwbE9pQXpNRnh5WEc1Y2RHMWhjbWRwYmpvZ05WeHlYRzVjZEdsdWRHVnlkbUZzT2lBeE1EQXdJQzhnTmpCY2NseHVYSEpjYmx4eVhHNWNjbHh1WTJ4aGMzTWdRMmhoY21GamRHVnlYSEpjYmx4eVhHNWNjbHh1WEhSamIyNXpkSEoxWTNSdmNqb2dLSFJsWVcwc0lHUmhkR0VwSUMwK1hISmNibHh5WEc1Y2RGeDBhVzFoWjJVZ1BTQnVaWGNnU1cxaFoyVW9LVnh5WEc1Y2RGeDBhVzFoWjJVdWMzSmpJRDBnWkdGMFlTNWhkbUYwWVhKY2NseHVYSFJjZEdsdFlXZGxMbTl1Ykc5aFpDQTlJRDArWEhKY2JseDBYSFJjZEVCaGRtRjBZWElnUFNCcGJXRm5aVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkRngwUUhSbFlXMGdQU0IwWldGdFhISmNibHgwWEhSQWJtRnRaU0E5SUdSaGRHRXVibUZ0WlZ4eVhHNWNkRngwUUdsa0lEMGdaR0YwWVM1cFpGeHlYRzVjZEZ4MFFHeGxkbVZzSUQwZ1pHRjBZUzVzWlhabGJGeHlYRzVjZEZ4MFFHaGxZV3gwYUNBOUlHUmhkR0V1YUdWaGJIUm9YSEpjYmx4MFhIUkFiV0Y0U0dWaGJIUm9JRDBnWkdGMFlTNXRZWGhJWldGc2RHaGNjbHh1WEhKY2JseHlYRzVjZEdSeVlYYzZJQ2hqYjI1MFpYaDBMQ0J6YVhwbEtTQXRQbHh5WEc1Y2RGeDBhV1lnUUhSbFlXMGdQVDBnSjNKbFpDZGNjbHh1WEhSY2RGeDBZMjl1ZEdWNGRDNXpkSEp2YTJWVGRIbHNaU0E5SUNkeVoySmhLREl4Tnl3Z09ETXNJRGM1TENBeEtTZGNjbHh1WEhSY2RGeDBZMjl1ZEdWNGRDNW1hV3hzVTNSNWJHVWdQU0FuY21kaVlTZ3lNVGNzSURnekxDQTNPU3dnTUM0MEtTZGNjbHh1WEhSY2RHVnNjMlZjY2x4dVhIUmNkRngwWTI5dWRHVjRkQzV6ZEhKdmEyVlRkSGxzWlNBOUlDZHlaMkpoS0RVeExDQXhNaklzSURFNE15d2dNU2tuWEhKY2JseDBYSFJjZEdOdmJuUmxlSFF1Wm1sc2JGTjBlV3hsSUQwZ0ozSm5ZbUVvTlRFc0lERXlNaXdnTVRnekxDQXdMalFwSjF4eVhHNWNjbHh1WEhSY2RHTnZiblJsZUhRdVptbHNiRkpsWTNRb01Dd2dNQ3dnYzJsNlpTd2djMmw2WlNsY2NseHVYSFJjZEdOdmJuUmxlSFF1YzNSeWIydGxVbVZqZENnd0xDQXdMQ0J6YVhwbExDQnphWHBsS1Z4eVhHNWNjbHh1WEhSY2RHbG1JRUJoZG1GMFlYSS9YSEpjYmx4MFhIUmNkR052Ym5SbGVIUXVaSEpoZDBsdFlXZGxLRUJoZG1GMFlYSXNJR052Ym1acFp5NXRZWEpuYVc0c0lHTnZibVpwWnk1dFlYSm5hVzRzSUhOcGVtVWdMU0JqYjI1bWFXY3ViV0Z5WjJsdUlDb2dNaXdnYzJsNlpTQXRJR052Ym1acFp5NXRZWEpuYVc0Z0tpQXlLVnh5WEc1Y2NseHVYSFJjZEhSbGVIUWdQU0JBYm1GdFpTQXJJQ2NnS0NjZ0t5QkFiR1YyWld3Z0t5QW5LU2RjY2x4dVhISmNibHgwWEhSamIyNTBaWGgwTG1admJuUWdQU0JqYjI1bWFXY3VibUZ0WlVadmJuUlRhWHBsSUNzZ0ozQjRJRkp2WW05MGJ5ZGNjbHh1WEhSY2RHTnZiblJsZUhRdWJHbHVaVmRwWkhSb0lEMGdNVnh5WEc1Y2RGeDBZMjl1ZEdWNGRDNW1hV3hzVTNSNWJHVWdQU0FuSTBaR1JrWkdSaWRjY2x4dVhIUmNkR052Ym5SbGVIUXVjM1J5YjJ0bFUzUjViR1VnUFNBbkl6QXdNREF3TUNkY2NseHVYSFJjZEcxbFlYTjFjbVVnUFNCamIyNTBaWGgwTG0xbFlYTjFjbVZVWlhoMEtIUmxlSFFwWEhKY2JseDBYSFJqYjI1MFpYaDBMbVpwYkd4VVpYaDBLSFJsZUhRc0lDaHphWHBsSUMwZ2JXVmhjM1Z5WlM1M2FXUjBhQ2tnTHlBeUxDQmpiMjVtYVdjdWJtRnRaVVp2Ym5SVGFYcGxLVnh5WEc1Y2RGeDBZMjl1ZEdWNGRDNXpkSEp2YTJWVVpYaDBLSFJsZUhRc0lDaHphWHBsSUMwZ2JXVmhjM1Z5WlM1M2FXUjBhQ2tnTHlBeUxDQmpiMjVtYVdjdWJtRnRaVVp2Ym5SVGFYcGxLVnh5WEc1Y2NseHVYSEpjYmx4MFhIUmpiMjUwWlhoMExtWnZiblFnUFNCamIyNW1hV2N1WW1GeVJtOXVkRk5wZW1VZ0t5QW5jSGdnVW05aWIzUnZKMXh5WEc1Y2RGeDBZMjl1ZEdWNGRDNXpkSEp2YTJWVGRIbHNaU0E5SUNkeVoySmhLREFzSURBc0lEQXNJREF1TnlrblhISmNibHgwWEhSamIyNTBaWGgwTG1acGJHeFRkSGxzWlNBOUlDZHlaMkpoS0RBc0lEQXNJREFzSURBdU5Da25YSEpjYmx4MFhIUmpiMjUwWlhoMExtWnBiR3hTWldOMEtHTnZibVpwWnk1dFlYSm5hVzRzSUhOcGVtVWdMU0JqYjI1bWFXY3VZbUZ5Um05dWRGTnBlbVVnTFNCamIyNW1hV2N1YldGeVoybHVMQ0J6YVhwbElDMGdZMjl1Wm1sbkxtMWhjbWRwYmlBcUlESXNJR052Ym1acFp5NWlZWEpHYjI1MFUybDZaU2xjY2x4dVhIUmNkR052Ym5SbGVIUXVjM1J5YjJ0bFVtVmpkQ2hqYjI1bWFXY3ViV0Z5WjJsdUxDQnphWHBsSUMwZ1kyOXVabWxuTG1KaGNrWnZiblJUYVhwbElDMGdZMjl1Wm1sbkxtMWhjbWRwYml3Z2MybDZaU0F0SUdOdmJtWnBaeTV0WVhKbmFXNGdLaUF5TENCamIyNW1hV2N1WW1GeVJtOXVkRk5wZW1VcFhISmNibHh5WEc1Y2RGeDBZMjl1ZEdWNGRDNW1hV3hzVTNSNWJHVWdQU0FuY21kaVlTZ3lNVGNzSURnekxDQTNPU3dnTVNrblhISmNibHgwWEhSamIyNTBaWGgwTG1acGJHeFNaV04wS0dOdmJtWnBaeTV0WVhKbmFXNHNJSE5wZW1VZ0xTQmpiMjVtYVdjdVltRnlSbTl1ZEZOcGVtVWdMU0JqYjI1bWFXY3ViV0Z5WjJsdUxDQW9jMmw2WlNBdElHTnZibVpwWnk1dFlYSm5hVzRnS2lBeUtTQXFJQ2hBYUdWaGJIUm9JQzhnUUcxaGVFaGxZV3gwYUNrc0lHTnZibVpwWnk1aVlYSkdiMjUwVTJsNlpTbGNjbHh1WEhKY2JseDBYSFIwWlhoMElEMGdUV0YwYUM1eWIzVnVaQ2hBYUdWaGJIUm9LU0FySUNjZ0x5QW5JQ3NnUUcxaGVFaGxZV3gwYUZ4eVhHNWNkRngwYldWaGMzVnlaU0E5SUdOdmJuUmxlSFF1YldWaGMzVnlaVlJsZUhRb2RHVjRkQ2xjY2x4dVhIUmNkR052Ym5SbGVIUXVabWxzYkZOMGVXeGxJRDBnSnlNd01EQXdNREFuWEhKY2JseDBYSFJqYjI1MFpYaDBMbVpwYkd4VVpYaDBLSFJsZUhRc0lDaHphWHBsSUMwZ2JXVmhjM1Z5WlM1M2FXUjBhQ2tnTHlBeUxDQnphWHBsSUMwZ1kyOXVabWxuTG1KaGNrWnZiblJUYVhwbElDOGdNaWxjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWpiR0Z6Y3lCQ1lYUjBiR1ZjY2x4dVhISmNibHgwYzNCbFpXUTZJRnh5WEc1Y2RGeDBkbWxsZHpvZ015NHdYSEpjYmx4MFhIUnBibVp2T2lBekxqQmNjbHh1WEhSY2RHNWxlSFE2SURNdU1GeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJqYjI1emRISjFZM1J2Y2pvZ0tHVnNaVzFsYm5RcElDMCtYSEpjYmx4eVhHNWNkRngwUUdOaGJuWmhjeUE5SUNRb1pXeGxiV1Z1ZENrdVkyaHBiR1J5Wlc0b0oyTmhiblpoY3ljcFd6QmRYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDQTlJRUJqWVc1MllYTXVaMlYwUTI5dWRHVjRkQ2duTW1RbktWeHlYRzVjY2x4dVhIUmNkRUJpWVhSMGJHVk1iMmNnUFNBa0xuQmhjbk5sU2xOUFRpZ2tLR1ZzWlcxbGJuUXBMbU5vYVd4a2NtVnVLQ2N1WW1GMGRHeGxMV3h2WnljcExtWnBjbk4wS0NrdWRHVjRkQ2dwS1Z4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2RHeHZZV1E2SUMwK1hISmNibHh5WEc1Y2RGeDBRR2x1WkdWNElEMGdNRnh5WEc1Y2RGeDBRR05vWVhKaFkzUmxjbk1nUFNCYlhWeHlYRzVjZEZ4MFFITjBZWFJsSUQwZ0ozWnBaWGNuWEhKY2JseDBYSFJBYjJabWMyVjBJRDBnTUZ4eVhHNWNkRngwUUhCaGRYTmxJRDBnWm1Gc2MyVmNjbHh1WEhKY2JseDBYSFFrS0VCallXNTJZWE1wTG1Oc2FXTnJLQ2hsZG1WdWRDa2dQVDRnUUdOc2FXTnJLR1YyWlc1MEtTbGNjbHh1WEhSY2RDUW9aRzlqZFcxbGJuUXBMbXRsZVdSdmQyNG9LR1YyWlc1MEtTQTlQaUJBYTJWNUtHVjJaVzUwS1NsY2NseHVYSEpjYmx4MFhIUm1iM0lnWkdGMFlTQnBiaUJBWW1GMGRHeGxURzluV3lkMFpXRnRjeWRkV3lkeVpXUW5YVnh5WEc1Y2RGeDBYSFJqYUdGeVlXTjBaWElnUFNCdVpYY2dRMmhoY21GamRHVnlLQ2R5WldRbkxDQmtZWFJoS1Z4eVhHNWNkRngwWEhSQVkyaGhjbUZqZEdWeWMxdGphR0Z5WVdOMFpYSXVhV1JkSUQwZ1kyaGhjbUZqZEdWeVhISmNibHh5WEc1Y2NseHVYSFJjZEdadmNpQmtZWFJoSUdsdUlFQmlZWFIwYkdWTWIyZGJKM1JsWVcxekoxMWJKMkpzZFdVblhWeHlYRzVjZEZ4MFhIUmphR0Z5WVdOMFpYSWdQU0J1WlhjZ1EyaGhjbUZqZEdWeUtDZGliSFZsSnl3Z1pHRjBZU2xjY2x4dVhIUmNkRngwUUdOb1lYSmhZM1JsY25OYlkyaGhjbUZqZEdWeUxtbGtYU0E5SUdOb1lYSmhZM1JsY2x4eVhHNWNjbHh1WEhSY2RFQmpiMjUwWlhoMExtWnZiblFnUFNCamIyNW1hV2N1Wm05dWRGTnBlbVVnS3lBbmNIZ2dVbTlpYjNSdkoxeHlYRzVjY2x4dVhISmNibHgwWEhSQVlXTjBhVzl1SUQwZ1FHSmhkSFJzWlV4dloxc25iRzluSjExYlFHbHVaR1Y0WFZ4eVhHNWNkRngwUUdGMGRHRmphMlZ5SUQwZ1FHTm9ZWEpoWTNSbGNuTmJRR0ZqZEdsdmJpNWhkSFJoWTJ0bGNsMWNjbHh1WEhSY2RFQmtaV1psYm1SbGNpQTlJRUJqYUdGeVlXTjBaWEp6VzBCaFkzUnBiMjR1WkdWbVpXNWtaWEpkWEhKY2JseHlYRzVjZEZ4MGRISjFaVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhSa2NtRjNRMmhoY21GamRHVnljem9nS0dGMGRHRmphMlZ5TENCa1pXWmxibVJsY2lrZ0xUNWNjbHh1WEhKY2JseDBYSFJ6YVhwbElEMGdRR05oYm5aaGN5NW9aV2xuYUhRZ0tpQXdMalpjY2x4dVhIUmNkR2hoYkdaWGFXUjBhQ0E5SUVCallXNTJZWE11ZDJsa2RHZ2dMeUF5WEhKY2JseHlYRzVjZEZ4MFFHTnZiblJsZUhRdWMyRjJaU2dwWEhKY2JseDBYSFJBWTI5dWRHVjRkQzUwY21GdWMyeGhkR1VvS0doaGJHWlhhV1IwYUNBdElITnBlbVVwSUM4Z01pd2dLRUJqWVc1MllYTXVhR1ZwWjJoMElDMGdjMmw2WlNrZ0x5QXlLVnh5WEc1Y2RGeDBZWFIwWVdOclpYSXVaSEpoZHloQVkyOXVkR1Y0ZEN3Z2MybDZaU2xjY2x4dVhIUmNkRUJqYjI1MFpYaDBMbkpsYzNSdmNtVW9LVnh5WEc1Y2NseHVYSFJjZEVCamIyNTBaWGgwTG5OaGRtVW9LVnh5WEc1Y2RGeDBRR052Ym5SbGVIUXVkSEpoYm5Oc1lYUmxLQ2hvWVd4bVYybGtkR2dnTFNCemFYcGxLU0F2SURJZ0t5Qm9ZV3htVjJsa2RHZ3NJQ2hBWTJGdWRtRnpMbWhsYVdkb2RDQXRJSE5wZW1VcElDOGdNaWxjY2x4dVhIUmNkR1JsWm1WdVpHVnlMbVJ5WVhjb1FHTnZiblJsZUhRc0lITnBlbVVwWEhKY2JseDBYSFJBWTI5dWRHVjRkQzV5WlhOMGIzSmxLQ2xjY2x4dVhISmNibHh5WEc1Y2RHUnlZWGRKYm1adk9pQW9kR1Y0ZENrZ0xUNWNjbHh1WEhSY2RHaGhiR1pYYVdSMGFDQTlJRUJqWVc1MllYTXVkMmxrZEdnZ0x5QXlYSEpjYmx4MFhIUm9ZV3htU0dWcFoyaDBJRDBnUUdOaGJuWmhjeTVvWldsbmFIUWdMeUF5WEhKY2JseDBYSFJpYkc5amExTnBlbVVnUFNCQVkyRnVkbUZ6TG1obGFXZG9kQ0FxSURBdU5seHlYRzVjY2x4dVhIUmNkSE4wWVhKU1lXUnBkWE1nUFNBMU1GeHlYRzVjZEZ4MGMzUmhjbGRwWkhSb0lEMGdjM1JoY2xKaFpHbDFjeUFxSURKY2NseHVYSFJjZEhOMFlYSllJRDBnYUdGc1psZHBaSFJvSUNzZ0tHSnNiMk5yVTJsNlpTQXJJSE4wWVhKU1lXUnBkWE1wSUM4Z01seHlYRzVjZEZ4MGMzUmhjbGtnUFNCb1lXeG1TR1ZwWjJoMFhISmNibHgwWEhSemRHRnlWeUE5SUNoaWJHOWphMU5wZW1VZ0tpQXdMamNwSUM4Z2MzUmhjbGRwWkhSb1hISmNibHgwWEhSemRHRnlTQ0E5SURFdU1seHlYRzVjZEZ4MGMzUmhjbEJwYTJWeklEMGdNVE5jY2x4dVhISmNibHgwWEhSQVkyOXVkR1Y0ZEM1bWIyNTBJRDBnWTI5dVptbG5MbVp2Ym5SVGFYcGxJQ3NnSjNCNElGSnZZbTkwYnlkY2NseHVYSFJjZEcxbFlYTjFjbVVnUFNCQVkyOXVkR1Y0ZEM1dFpXRnpkWEpsVkdWNGRDaDBaWGgwS1Z4eVhHNWNkRngwZEdWNGRGZ2dQU0J6ZEdGeVdDQXRJRzFsWVhOMWNtVXVkMmxrZEdnZ0x5QXlYSEpjYmx4MFhIUjBaWGgwV1NBOUlHaGhiR1pJWldsbmFIUmNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUmNkRUJqYjI1MFpYaDBMbk5oZG1Vb0tWeHlYRzVjZEZ4MFFHTnZiblJsZUhRdWJHbHVaVmRwWkhSb0lEMGdNbHh5WEc1Y2RGeDBRR052Ym5SbGVIUXVkSEpoYm5Oc1lYUmxLSE4wWVhKWUxDQnpkR0Z5V1NsY2NseHVYSFJjZEVCamIyNTBaWGgwTG5OallXeGxLSE4wWVhKWExDQnpkR0Z5U0NsY2NseHVYSFJjZEVCamIyNTBaWGgwTG1acGJHeFRkSGxzWlNBOUlDY2pSa1pHUmtaR0oxeHlYRzVjZEZ4MFFHTnZiblJsZUhRdWMzUnliMnRsVTNSNWJHVWdQU0FuSXpBd01EQXdNQ2RjY2x4dVhIUmNkRUJrY21GM1UzUmhjaWh6ZEdGeVVHbHJaWE1zSUhOMFlYSlNZV1JwZFhNZ0tpQXdMallzSUhOMFlYSlNZV1JwZFhNcFhISmNibHgwWEhSQVkyOXVkR1Y0ZEM1eVpYTjBiM0psS0NsY2NseHVYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNXpZWFpsS0NsY2NseHVYSFJjZEVCamIyNTBaWGgwTG5SeVlXNXpiR0YwWlNoMFpYaDBXQ3dnZEdWNGRGa3BYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNW1hV3hzVTNSNWJHVWdQU0FuSXpBd01EQXdNQ2RjY2x4dVhIUmNkRUJqYjI1MFpYaDBMbVpwYkd4VVpYaDBLSFJsZUhRc0lEQXNJREFwWEhKY2JseDBYSFJBWTI5dWRHVjRkQzV5WlhOMGIzSmxLQ2xjY2x4dVhISmNibHh5WEc1Y2RHUnlZWGRUZEdGeU9pQW9jR2xyWlhNc0lHbHVibVZ5VW1Ga2FYVnpMQ0J2ZFhSbGNsSmhaR2wxY3lrZ0xUNWNjbHh1WEhSY2RISnZkQ0E5SUUxaGRHZ3VVRWtnTHlBeUlDb2dNMXh5WEc1Y2RGeDBjM1JsY0NBOUlFMWhkR2d1VUVrZ0x5QndhV3RsYzF4eVhHNWNjbHh1WEhSY2RFQmpiMjUwWlhoMExtSmxaMmx1VUdGMGFDZ3BYSEpjYmx4MFhIUjRJRDBnVFdGMGFDNWpiM01vY205MEtTQXFJRzkxZEdWeVVtRmthWFZ6WEhKY2JseDBYSFI1SUQwZ1RXRjBhQzV6YVc0b2NtOTBLU0FxSUc5MWRHVnlVbUZrYVhWelhISmNibHgwWEhSQVkyOXVkR1Y0ZEM1dGIzWmxWRzhvZUN3Z2VTbGNjbHh1WEhSY2RISnZkQ0FyUFNCemRHVndYSEpjYmx4eVhHNWNkRngwWm05eUlHa2dhVzRnV3pFdUxuQnBhMlZ6WFZ4eVhHNWNkRngwWEhSNElEMGdUV0YwYUM1amIzTW9jbTkwS1NBcUlHbHVibVZ5VW1Ga2FYVnpYSEpjYmx4MFhIUmNkSGtnUFNCTllYUm9Mbk5wYmloeWIzUXBJQ29nYVc1dVpYSlNZV1JwZFhOY2NseHVYSFJjZEZ4MFFHTnZiblJsZUhRdWJHbHVaVlJ2S0hnc0lIa3BYSEpjYmx4MFhIUmNkSEp2ZENBclBTQnpkR1Z3WEhKY2JseHlYRzVjZEZ4MFhIUjRJRDBnVFdGMGFDNWpiM01vY205MEtTQXFJRzkxZEdWeVVtRmthWFZ6WEhKY2JseDBYSFJjZEhrZ1BTQk5ZWFJvTG5OcGJpaHliM1FwSUNvZ2IzVjBaWEpTWVdScGRYTmNjbHh1WEhSY2RGeDBRR052Ym5SbGVIUXViR2x1WlZSdktIZ3NJSGtwWEhKY2JseDBYSFJjZEhKdmRDQXJQU0J6ZEdWd1hISmNibHh5WEc1Y2RGeDBRR052Ym5SbGVIUXViR2x1WlZSdktEQXNJQzF2ZFhSbGNsSmhaR2wxY3lsY2NseHVYSFJjZEVCamIyNTBaWGgwTG1acGJHd29LVnh5WEc1Y2RGeDBRR052Ym5SbGVIUXVjM1J5YjJ0bEtDbGNjbHh1WEhSY2RFQmpiMjUwWlhoMExtTnNiM05sVUdGMGFDZ3BYSEpjYmx4MFhIUmNjbHh1WEhKY2JseDBaMlYwUlc1a1ZHVjRkRG9nTFQ1Y2NseHVYSEpjYmx4MFhIUnBaaUJBWW1GMGRHeGxURzluV3lkM2FXNG5YVnh5WEc1Y2NseHVYSFJjZEZ4MGFURTRiaTVpWVhSMGJHVXVkMmx1WEhKY2JseHlYRzVjZEZ4MFpXeHpaVnh5WEc1Y2NseHVYSFJjZEZ4MGFURTRiaTVpWVhSMGJHVXViRzl6WlZ4eVhHNWNjbHh1WEhKY2JseDBaSEpoZHpvZ0tHUmxiSFJoS1MwK1hISmNibHh5WEc1Y2RGeDBRR052Ym5SbGVIUXVabWxzYkZOMGVXeGxJRDBnSnlOR1JrWkdSa1luWEhKY2JseDBYSFJBWTI5dWRHVjRkQzVqYkdWaGNsSmxZM1FvTUN3Z01Dd2dRR05oYm5aaGN5NTNhV1IwYUN3Z1FHTmhiblpoY3k1b1pXbG5hSFFwWEhKY2JseDBYSFJBYjJabWMyVjBJQ3M5SUVCemNHVmxaRnRBYzNSaGRHVmRJQ29nWkdWc2RHRmNjbHh1WEhSY2RHRnVhVzFoZEdVZ1BTQjBjblZsWEhKY2JseHlYRzVjZEZ4MGFXWWdRSE4wWVhSbElEMDlJQ2QyYVdWM0p5QmhibVFnWVc1cGJXRjBaVnh5WEc1Y2RGeDBYSFJoWTNScGIyNGdQU0JBWW1GMGRHeGxURzluV3lkc2IyY25YVnRBYVc1a1pYaGRYSEpjYmx4MFhIUmNkR0YwZEdGamEyVnlJRDBnUUdOb1lYSmhZM1JsY25OYllXTjBhVzl1TG1GMGRHRmphMlZ5WFZ4eVhHNWNkRngwWEhSa1pXWmxibVJsY2lBOUlFQmphR0Z5WVdOMFpYSnpXMkZqZEdsdmJpNWtaV1psYm1SbGNsMWNjbHh1WEhKY2JseDBYSFJjZEdsbUtHRmpkR2x2Ymk1MGVYQmxJRDA5SUNkb2FYUW5LVnh5WEc1Y2RGeDBYSFJjZEdSbFptVnVaR1Z5TG1obFlXeDBhQ0E5SUdGamRHbHZiaTVvWldGc2RHaGNjbHh1WEhKY2JseDBYSFJjZEVCa2NtRjNRMmhoY21GamRHVnljeWhoZEhSaFkydGxjaXdnWkdWbVpXNWtaWElwWEhKY2JseHlYRzVjZEZ4MFhIUnBaaWhBYjJabWMyVjBJRDRnTVM0d0lHRnVaQ0J1YjNRZ1FIQmhkWE5sS1Z4eVhHNWNkRngwWEhSY2RFQnZabVp6WlhRZ1BTQXdMakJjY2x4dVhIUmNkRngwWEhSa1pXWmxibVJsY2k1emRHRnlkRWhsWVd4MGFDQTlJR1JsWm1WdVpHVnlMbWhsWVd4MGFGeHlYRzVjY2x4dVhIUmNkRngwWEhScFppQmhZM1JwYjI0dWRIbHdaU0E5UFNBbmFHbDBKMXh5WEc1Y2RGeDBYSFJjZEZ4MFpHVm1aVzVrWlhJdVpXNWtTR1ZoYkhSb0lEMGdUV0YwYUM1dFlYZ29aR1ZtWlc1a1pYSXVhR1ZoYkhSb0lDMGdZV04wYVc5dUxtUmhiV0ZuWlN3Z01DbGNjbHh1WEhSY2RGeDBYSFJsYkhObFhISmNibHgwWEhSY2RGeDBYSFJrWldabGJtUmxjaTVsYm1SSVpXRnNkR2dnUFNCa1pXWmxibVJsY2k1b1pXRnNkR2hjY2x4dVhISmNibHgwWEhSY2RGeDBRSE4wWVhSbElEMGdKMmx1Wm04blhISmNibHh5WEc1Y2RGeDBYSFJoYm1sdFlYUmxJRDBnWm1Gc2MyVmNjbHh1WEhKY2JseDBYSFJwWmlCQWMzUmhkR1VnUFQwZ0oybHVabThuSUdGdVpDQmhibWx0WVhSbFhISmNibHgwWEhSY2RHRmpkR2x2YmlBOUlFQmlZWFIwYkdWTWIyZGJKMnh2WnlkZFcwQnBibVJsZUYxY2NseHVYSFJjZEZ4MFlYUjBZV05yWlhJZ1BTQkFZMmhoY21GamRHVnljMXRoWTNScGIyNHVZWFIwWVdOclpYSmRYSEpjYmx4MFhIUmNkR1JsWm1WdVpHVnlJRDBnUUdOb1lYSmhZM1JsY25OYllXTjBhVzl1TG1SbFptVnVaR1Z5WFZ4eVhHNWNjbHh1WEhSY2RGeDBRR1J5WVhkRGFHRnlZV04wWlhKektHRjBkR0ZqYTJWeUxDQmtaV1psYm1SbGNpbGNjbHh1WEhKY2JseDBYSFJjZEdsbUlFQnZabVp6WlhRZ1BEMGdNUzR3WEhKY2JseDBYSFJjZEZ4MFFHTnZiblJsZUhRdVoyeHZZbUZzUVd4d2FHRWdQU0JBYjJabWMyVjBYSEpjYmx4MFhIUmNkRngwWkdWbVpXNWtaWEl1YUdWaGJIUm9JRDBnWkdWbVpXNWtaWEl1YzNSaGNuUklaV0ZzZEdoY2NseHVYSFJjZEZ4MFpXeHpaVnh5WEc1Y2RGeDBYSFJjZEdsbUlFQnZabVp6WlhRZ1BEMGdNaTR3WEhKY2JseDBYSFJjZEZ4MFhIUkFZMjl1ZEdWNGRDNW5iRzlpWVd4QmJIQm9ZU0E5SURFdU1GeHlYRzVjY2x4dVhIUmNkRngwWEhSY2RHa2dQU0JOWVhSb0xtTnNZVzF3S0VCdlptWnpaWFFnTFNBeExqQXNJREFzSURFcFhISmNibHgwWEhSY2RGeDBYSFJrWldabGJtUmxjaTVvWldGc2RHZ2dQU0JOWVhSb0xteGxjbkFvYVN3Z1pHVm1aVzVrWlhJdVpXNWtTR1ZoYkhSb0xDQmtaV1psYm1SbGNpNXpkR0Z5ZEVobFlXeDBhQ2xjY2x4dVhISmNibHgwWEhSY2RGeDBaV3h6WlZ4eVhHNWNkRngwWEhSY2RGeDBaR1ZtWlc1a1pYSXVhR1ZoYkhSb0lEMGdaR1ZtWlc1a1pYSXVaVzVrU0dWaGJIUm9YSEpjYmx4MFhIUmNkRngwWEhSQVkyOXVkR1Y0ZEM1bmJHOWlZV3hCYkhCb1lTQTlJRTFoZEdndWJXRjRLRE11TUNBdElFQnZabVp6WlhRc0lEQXBYSEpjYmx4eVhHNWNkRngwWEhScFppaEFiMlptYzJWMElENGdOQzR3S1Z4eVhHNWNkRngwWEhSY2RFQnZabVp6WlhRZ1BTQXdMakJjY2x4dVhIUmNkRngwWEhSQWMzUmhkR1VnUFNBbmJtVjRkQ2RjY2x4dVhISmNibHgwWEhSY2RHbG1JR0ZqZEdsdmJpNTBlWEJsSUQwOUlDZG9hWFFuWEhKY2JseDBYSFJjZEZ4MGRHVjRkQ0E5SUdGamRHbHZiaTVrWVcxaFoyVmNjbHh1WEhKY2JseDBYSFJjZEZ4MGFXWWdZV04wYVc5dUxtTnlhWFJjY2x4dVhIUmNkRngwWEhSY2RIUmxlSFFnS3owZ0p5RW5YSEpjYmx4eVhHNWNkRngwWEhSbGJITmxYSEpjYmx4MFhIUmNkRngwZEdWNGRDQTlJR2t4T0c0dVltRjBkR3hsTG1SdlpHZGxYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBYSFJjZEVCa2NtRjNTVzVtYnloMFpYaDBLVnh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkRUJqYjI1MFpYaDBMbWRzYjJKaGJFRnNjR2hoSUQwZ01TNHdYSEpjYmx4MFhIUmNkR0Z1YVcxaGRHVWdQU0JtWVd4elpWeHlYRzVjY2x4dVhIUmNkR2xtSUVCemRHRjBaU0E5UFNBbmJtVjRkQ2NnWVc1a0lHRnVhVzFoZEdWY2NseHVYSEpjYmx4MFhIUmNkSEJ5WlhaQlkzUnBiMjRnUFNCQVltRjBkR3hsVEc5bld5ZHNiMmNuWFZ0QWFXNWtaWGhkWEhKY2JseDBYSFJjZEc1bGVIUkJZM1JwYjI0Z1BTQkFZbUYwZEd4bFRHOW5XeWRzYjJjblhWdEFhVzVrWlhnZ0t5QXhYVnh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkSEJ5WlhaQmRIUmhZMnRsY2lBOUlFQmphR0Z5WVdOMFpYSnpXM0J5WlhaQlkzUnBiMjR1WVhSMFlXTnJaWEpkWEhKY2JseDBYSFJjZEhCeVpYWkVaV1psYm1SbGNpQTlJRUJqYUdGeVlXTjBaWEp6VzNCeVpYWkJZM1JwYjI0dVpHVm1aVzVrWlhKZFhISmNibHh5WEc1Y2NseHVYSFJjZEZ4MGNHOXphWFJwYjI0Z1BTQW9RR05oYm5aaGN5NW9aV2xuYUhRZ0x5QXlLU0FxSUVCdlptWnpaWFJjY2x4dVhISmNibHgwWEhSY2RFQmpiMjUwWlhoMExuTmhkbVVvS1Z4eVhHNWNkRngwWEhSQVkyOXVkR1Y0ZEM1MGNtRnVjMnhoZEdVb01Dd2dMWEJ2YzJsMGFXOXVLVnh5WEc1Y2RGeDBYSFJBWkhKaGQwTm9ZWEpoWTNSbGNuTW9jSEpsZGtGMGRHRmphMlZ5TENCd2NtVjJSR1ZtWlc1a1pYSXBYSEpjYmx4MFhIUmNkRUJqYjI1MFpYaDBMbkpsYzNSdmNtVW9LVnh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkRUJqYjI1MFpYaDBMbk5oZG1Vb0tWeHlYRzVjZEZ4MFhIUkFZMjl1ZEdWNGRDNTBjbUZ1YzJ4aGRHVW9NQ3dnUUdOaGJuWmhjeTVvWldsbmFIUWdMU0J3YjNOcGRHbHZiaWxjY2x4dVhISmNibHgwWEhSY2RHbG1JRzVsZUhSQlkzUnBiMjQvWEhKY2JseDBYSFJjZEZ4MGJtVjRkRUYwZEdGamEyVnlJRDBnUUdOb1lYSmhZM1JsY25OYmJtVjRkRUZqZEdsdmJpNWhkSFJoWTJ0bGNsMWNjbHh1WEhSY2RGeDBYSFJ1WlhoMFJHVm1aVzVrWlhJZ1BTQkFZMmhoY21GamRHVnljMXR1WlhoMFFXTjBhVzl1TG1SbFptVnVaR1Z5WFZ4eVhHNWNjbHh1WEhSY2RGeDBYSFJwWmlodVpYaDBRV04wYVc5dUxuUjVjR1VnUFQwZ0oyaHBkQ2NwWEhKY2JseDBYSFJjZEZ4MFhIUnVaWGgwUkdWbVpXNWtaWEl1YUdWaGJIUm9JRDBnYm1WNGRFRmpkR2x2Ymk1b1pXRnNkR2hjY2x4dVhISmNibHgwWEhSY2RGeDBRR1J5WVhkRGFHRnlZV04wWlhKektHNWxlSFJCZEhSaFkydGxjaXdnYm1WNGRFUmxabVZ1WkdWeUtWeHlYRzVjY2x4dVhIUmNkRngwWld4elpWeHlYRzVjZEZ4MFhIUmNkSFJsZUhRZ1BTQkFaMlYwUlc1a1ZHVjRkQ2dwWEhKY2JseDBYSFJjZEZ4MFFHTnZiblJsZUhRdVptbHNiRk4wZVd4bElEMGdKeU13TURBd01EQW5YSEpjYmx4MFhIUmNkRngwYldWaGMzVnlaU0E5SUVCamIyNTBaWGgwTG0xbFlYTjFjbVZVWlhoMEtIUmxlSFFwWEhKY2JseDBYSFJjZEZ4MFFHTnZiblJsZUhRdVptbHNiRlJsZUhRb2RHVjRkQ3dnS0VCallXNTJZWE11ZDJsa2RHZ2dMU0J0WldGemRYSmxMbmRwWkhSb0tTQXZJRElzSUNoQVkyRnVkbUZ6TG1obGFXZG9kQ0F0SURFMUtTQXZJRElwWEhKY2JseHlYRzVjZEZ4MFhIUkFZMjl1ZEdWNGRDNXlaWE4wYjNKbEtDbGNjbHh1WEhKY2JseDBYSFJjZEdsbUlFQnZabVp6WlhRZ1BpQXlMakJjY2x4dVhIUmNkRngwWEhSQWFXNWtaWGdySzF4eVhHNWNkRngwWEhSY2RFQnZabVp6WlhRZ1BTQXdMakJjY2x4dVhIUmNkRngwWEhScFppQnVaWGgwUVdOMGFXOXVQMXh5WEc1Y2RGeDBYSFJjZEZ4MFFITjBZWFJsSUQwZ0ozWnBaWGNuWEhKY2JseDBYSFJjZEZ4MFpXeHpaVnh5WEc1Y2RGeDBYSFJjZEZ4MFFITjBZWFJsSUQwZ0oyVnVaQ2RjY2x4dVhISmNibHgwWEhSY2RHRnVhVzFoZEdVZ1BTQm1ZV3h6WlZ4eVhHNWNjbHh1WEhKY2JseDBYSFJwWmlCQWMzUmhkR1VnUFQwZ0oyVnVaQ2NnWVc1a0lHRnVhVzFoZEdWY2NseHVYSFJjZEZ4MGRHVjRkQ0E5SUVCblpYUkZibVJVWlhoMEtDbGNjbHh1WEhSY2RGeDBRRzltWm5ObGRDQTlJREF1TUZ4eVhHNWNkRngwWEhSQVkyOXVkR1Y0ZEM1bWFXeHNVM1I1YkdVZ1BTQW5JekF3TURBd01DZGNjbHh1WEhSY2RGeDBiV1ZoYzNWeVpTQTlJRUJqYjI1MFpYaDBMbTFsWVhOMWNtVlVaWGgwS0hSbGVIUXBYSEpjYmx4MFhIUmNkRUJqYjI1MFpYaDBMbVpwYkd4VVpYaDBLSFJsZUhRc0lDaEFZMkZ1ZG1GekxuZHBaSFJvSUMwZ2JXVmhjM1Z5WlM1M2FXUjBhQ2tnTHlBeUxDQW9RR05oYm5aaGN5NW9aV2xuYUhRZ0xTQXhOU2tnTHlBeUtWeHlYRzVjZEZ4MFhIUmhibWx0WVhSbElEMGdabUZzYzJWY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBYSFIzYVdSMGFDQTlJRUJqWVc1MllYTXVkMmxrZEdnZ0xTQTBYSEpjYmx4MFhIUm9aV2xuYUhRZ1BTQkFZMkZ1ZG1GekxtaGxhV2RvZENBdElESmNjbHh1WEhKY2JseDBYSFJBWTI5dWRHVjRkQzV6WVhabEtDbGNjbHh1WEhSY2RFQmpiMjUwWlhoMExuTjBjbTlyWlZOMGVXeGxJRDBnSjNKblltRW9NQ3dnTUN3Z01Dd2dNQzQzS1NkY2NseHVYSFJjZEVCamIyNTBaWGgwTG1acGJHeFRkSGxzWlNBOUlDZHlaMkpoS0RBc0lEQXNJREFzSURBdU5Da25YSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNW1hV3hzVW1WamRDZ3lMQ0JvWldsbmFIUWdMU0F5TUN3Z2QybGtkR2dzSURJd0tWeHlYRzVjZEZ4MFFHTnZiblJsZUhRdWMzUnliMnRsVW1WamRDZ3lMQ0JvWldsbmFIUWdMU0F5TUN3Z2QybGtkR2dzSURJd0tWeHlYRzVjY2x4dVhIUmNkRUJqYjI1MFpYaDBMbVpwYkd4VGRIbHNaU0E5SUNjak5VSkRNRVJGSjF4eVhHNWNkRngwUUdOdmJuUmxlSFF1Wm1sc2JGSmxZM1FvTWl3Z2FHVnBaMmgwSUMwZ01qQXNJSGRwWkhSb0lDb2dLRTFoZEdndWJXbHVLRUJwYm1SbGVDQXZJQ2hBWW1GMGRHeGxURzluV3lkc2IyY25YUzVzWlc1bmRHZ2dMU0F4S1N3Z01Ta3BMQ0F5TUNsY2NseHVYSFJjZEVCamIyNTBaWGgwTG14cGJtVlhhV1IwYUNBOUlEVmNjbHh1WEhKY2JseDBYSFJtYjNJZ2JXRnlheUJwYmlCQVltRjBkR3hsVEc5bld5ZHRZWEpyY3lkZFhISmNibHh5WEc1Y2RGeDBYSFJwWmlCdFlYSnJMblI1Y0dVZ1BUMGdKMlpoYVc1MFpXUW5YSEpjYmx4MFhIUmNkRngwUUdOdmJuUmxlSFF1YzNSeWIydGxVM1I1YkdVZ1BTQW5JMFE1TlRNMFJpZGNjbHh1WEhKY2JseDBYSFJjZEdGMElEMGdLRzFoY21zdVlYUWdMeUFvUUdKaGRIUnNaVXh2WjFzbmJHOW5KMTB1YkdWdVozUm9JQzBnTVNrcElDb2dkMmxrZEdoY2NseHVYSEpjYmx4MFhIUmNkRUJqYjI1MFpYaDBMbUpsWjJsdVVHRjBhQ2dwWEhKY2JseDBYSFJjZEVCamIyNTBaWGgwTG0xdmRtVlVieWhoZENBdElFQmpiMjUwWlhoMExteHBibVZYYVdSMGFDQXZJRElnS3lBeUxDQm9aV2xuYUhRZ0xTQXlNQ2xjY2x4dVhIUmNkRngwUUdOdmJuUmxlSFF1YkdsdVpWUnZLR0YwSUMwZ1FHTnZiblJsZUhRdWJHbHVaVmRwWkhSb0lDOGdNaUFySURJc0lHaGxhV2RvZENsY2NseHVYSFJjZEZ4MFFHTnZiblJsZUhRdWMzUnliMnRsS0NsY2NseHVYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNXlaWE4wYjNKbEtDbGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHgwWTJ4cFkyczZJQ2hsZG1WdWRDa2dMVDVjY2x4dVhIUmNkR052YjNKa2N5QTlJRUJqWVc1MllYTXVjbVZzVFc5MWMyVkRiMjl5WkhNb1pYWmxiblFwWEhKY2JseDBYSFI0SUQwZ1kyOXZjbVJ6TG5oY2NseHVYSFJjZEhrZ1BTQmpiMjl5WkhNdWVWeHlYRzVjY2x4dVhIUmNkR3dnUFNBeVhISmNibHgwWEhSeUlEMGdiQ0FySUVCallXNTJZWE11ZDJsa2RHZ2dMU0EwWEhKY2JseDBYSFJpSUQwZ1FHTmhiblpoY3k1b1pXbG5hSFFnTFNBeVhISmNibHgwWEhSMElEMGdZaUF0SURJd1hISmNibHh5WEc1Y2NseHVYSFJjZEdsbUlIZ2dQajBnYkNCaGJtUWdlQ0E4UFNCeUlHRnVaQ0I1SUQ0OUlIUWdZVzVrSUhrZ1BEMGdZbHh5WEc1Y2RGeDBYSFJBYVc1a1pYZ2dQU0JOWVhSb0xuSnZkVzVrS0NoNElDMGdiQ2tnTHlBb2NpQXRJR3dwSUNvZ0tFQmlZWFIwYkdWTWIyZGJKMnh2WnlkZExteGxibWQwYUNBdElERXBLVnh5WEc1Y2RGeDBYSFJBYzNSaGRHVWdQU0FuZG1sbGR5ZGNjbHh1WEhSY2RGeDBRRzltWm5ObGRDQTlJREF1TUZ4eVhHNWNjbHh1WEhSclpYazZJQ2hsZG1WdWRDa2dMVDVjY2x4dVhISmNibHgwWEhScFppQmxkbVZ1ZEM1M2FHbGphQ0E5UFNBek1seHlYRzVjZEZ4MFhIUkFjR0YxYzJVZ1BTQWhRSEJoZFhObFhISmNibHh5WEc1Y2NseHVYSFJjZEdsbUlHVjJaVzUwTG5kb2FXTm9JRDA5SURNM1hISmNibHgwWEhSY2RFQnBibVJsZUNBOUlFMWhkR2d1YldGNEtFQnBibVJsZUNBdElERXNJREFwWEhKY2JseDBYSFJjZEVCdlptWnpaWFFnUFNBeExqQmNjbHh1WEhSY2RGeDBRSE4wWVhSbElEMGdKM1pwWlhjblhISmNibHh5WEc1Y2RGeDBhV1lnWlhabGJuUXVkMmhwWTJnZ1BUMGdNemxjY2x4dVhIUmNkRngwUUdsdVpHVjRJRDBnVFdGMGFDNXRhVzRvUUdsdVpHVjRJQ3NnTVN3Z1FHSmhkSFJzWlV4dloxc25iRzluSjEwdWJHVnVaM1JvSUMwZ01TbGNjbHh1WEhSY2RGeDBRRzltWm5ObGRDQTlJREV1TUZ4eVhHNWNkRngwWEhSQWMzUmhkR1VnUFNBbmRtbGxkeWRjY2x4dVhISmNibHh5WEc1Y2RISmxjWFZsYzNSR2NtRnRaVG9nS0hScGJXVXBJQzArWEhKY2JseHlYRzVjZEZ4MFpHVnNkR0VnUFNCTllYUm9MbTFoZUNoMGFXMWxJQzBnUUd4aGMzUlVhVzFsTENBd0tWeHlYRzVjZEZ4MFFHeGhjM1JVYVcxbElEMGdkR2x0WlZ4eVhHNWNkRngwUUdGalkzVnRkV3hoZEc5eUlDczlJR1JsYkhSaFhISmNibHh5WEc1Y2RGeDBkMmhwYkdVZ1FHRmpZM1Z0ZFd4aGRHOXlJRDQ5SUdOdmJtWnBaeTVwYm5SbGNuWmhiRnh5WEc1Y2NseHVYSFJjZEZ4MFFHRmpZM1Z0ZFd4aGRHOXlJQzA5SUdOdmJtWnBaeTVwYm5SbGNuWmhiRnh5WEc1Y2RGeDBYSFJBWkhKaGR5aGpiMjVtYVdjdWFXNTBaWEoyWVd3Z0x5QXhNREF3S1Z4eVhHNWNjbHh1WEhSY2RIZHBibVJ2ZHk1eVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW9LSFJwYldVcElEMCtJRUJ5WlhGMVpYTjBSbkpoYldVb2RHbHRaU2twWEhKY2JseHlYRzVjY2x4dVhIUnpkR0Z5ZERvZ0xUNWNjbHh1WEhKY2JseDBYSFJwWmlCQWJHOWhaQ2dwWEhKY2JseHlYRzVjZEZ4MFhIUkFiR0Z6ZEZScGJXVWdQU0J1WlhjZ1JHRjBaU2dwTG1kbGRGUnBiV1VvS1Z4eVhHNWNkRngwWEhSQVlXTmpkVzExYkdGMGIzSWdQU0F3TGpCY2NseHVYSFJjZEZ4MFFISmxjWFZsYzNSR2NtRnRaU2hBYkdGemRGUnBiV1VwWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc0a0tDMCtYSEpjYmx4eVhHNWNkQ1FvSnk1aVlYUjBiR1VuS1M1aWFXNWtLQ2R6YUc5M0p5d2dMVDVjY2x4dVhISmNibHgwWEhSaVlYUjBiR1VnUFNCdVpYY2dRbUYwZEd4bEtIUm9hWE1wWEhKY2JseDBYSFJpWVhSMGJHVXVjM1JoY25Rb0tWeHlYRzVjZEZ4eVhHNWNkQ2t1Wm1sc2RHVnlLQ2M2ZG1semFXSnNaU2NwTG5SeWFXZG5aWElvSjNOb2IzY25LVnh5WEc1Y2NseHVLU0lzSWx4eVhHNWNjbHh1WTJ4aGMzTWdRRU5vWVhSY2NseHVYSEpjYmx4MFpHVm1ZWFZzZEhNZ1BTQjdYSEpjYmx4eVhHNWNkRngwYldWemMyRm5aVlZ5YkRvZ2JuVnNiQ3hjY2x4dVhIUmNkSEJzWVhsbGNsVnliRG9nYm5Wc2JDeGNjbHh1WEhSY2RHVnRiM1JwWTI5dVZYSnNPaUJ1ZFd4c0xGeHlYRzVjZEZ4MGFXNTBaWEoyWVd3NklESXNYSEpjYmx4MFhIUm9hWE4wYjNKNU9pQXdMRnh5WEc1Y2RGeDBiV2x1VEdWdVozUm9PaUF4TEZ4eVhHNWNkRngwYldGNFRHVnVaM1JvT2lBMU1USXNYSEpjYmx4MFhIUmpiMjlzWkc5M2Jqb2dOakFzWEhKY2JseDBYSFJxYjJsdU9pQXhNakFzWEhKY2JseHlYRzVjZEZ4MFlXeHNiM2RUWlc1a09pQjBjblZsTEZ4eVhHNWNkRngwWVd4c2IzZFNaV05sYVhabE9pQjBjblZsTEZ4eVhHNWNkRngwYzJWdVpFVjRkSEpoT2lCN2ZTeGNjbHh1WEhSY2RISmxZMlZwZG1WRmVIUnlZVG9nZTMwc1hISmNibHgwWEhSelpXNWtUV1YwYUc5a09pQW5VRTlUVkNjc1hISmNibHgwWEhSeVpXTmxhWFpsVFdWMGFHOWtPaUFuUjBWVUp5eGNjbHh1WEhSOVhISmNibHh5WEc1Y2RHTnZiVzFoYm1SeklEMGdlMXh5WEc1Y2NseHVYSFJjZENkamJHVmhjaWM2SUNkamJHVmhjazkxZEhCMWRDY3NYSEpjYmx4MGZWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJqYjI1emRISjFZM1J2Y2pvZ0tHVnNaVzFsYm5Rc0lHOXdkR2x2Ym5NcElDMCtYSEpjYmx4eVhHNWNkRngwSTJGc1pYSjBLQ2QzWld4amIyMWxKeWxjY2x4dVhISmNibHgwWEhSdmNIUWdQU0FrTG1WNGRHVnVaQ2g3ZlN3Z1pHVm1ZWFZzZEhNc0lHOXdkR2x2Ym5NcFhISmNibHh5WEc1Y2RGeDBRRzFsYzNOaFoyVlZjbXdnUFNCdmNIUXViV1Z6YzJGblpWVnliRnh5WEc1Y2RGeDBRSEJzWVhsbGNsVnliQ0E5SUc5d2RDNXdiR0Y1WlhKVmNteGNjbHh1WEhSY2RFQmxiVzkwYVdOdmJuTWdQU0J1WlhjZ1JXMXZkR2xqYjI1ektDbGNjbHh1WEhKY2JseHlYRzVjZEZ4MFFHRnNiRzkzVTJWdVpDQTlJRzl3ZEM1aGJHeHZkMU5sYm1SY2NseHVYSFJjZEVCaGJHeHZkMUpsWTJWcGRtVWdQU0J2Y0hRdVlXeHNiM2RTWldObGFYWmxYSEpjYmx4MFhIUkFjbVZqWldsMlpVVjRkSEpoSUQwZ2IzQjBMbkpsWTJWcGRtVkZlSFJ5WVZ4eVhHNWNkRngwUUhObGJtUkZlSFJ5WVNBOUlHOXdkQzV6Wlc1a1JYaDBjbUZjY2x4dVhIUmNkRUJ5WldObGFYWmxUV1YwYUc5a0lEMGdiM0IwTG5KbFkyVnBkbVZOWlhSb2IyUmNjbHh1WEhSY2RFQnpaVzVrVFdWMGFHOWtJRDBnYjNCMExuTmxibVJOWlhSb2IyUmNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUmNkRUJwYm5CMWRDQTlJQ1FvWld4bGJXVnVkQ2t1Wm1sdVpDZ25MbWx1Y0hWMEp5bGNjbHh1WEhSY2RFQnZkWFJ3ZFhRZ1BTQWtLR1ZzWlcxbGJuUXBMbVpwYm1Rb0p5NXZkWFJ3ZFhRbktWeHlYRzVjZEZ4MFFITmxibVJDZEc0Z1BTQWtLR1ZzWlcxbGJuUXBMbVpwYm1Rb0p5NXpaVzVrSnlsY2NseHVYSFJjZEVCamJHVmhja0owYmlBOUlDUW9aV3hsYldWdWRDa3VabWx1WkNnbkxtTnNaV0Z5SnlsY2NseHVYSFJjZEVCbGJXOTBhV052Ym5OQ2RHNGdQU0FrS0dWc1pXMWxiblFwTG1acGJtUW9KeTVsYlc5MGFXTnZibk1uS1Z4eVhHNWNjbHh1WEhKY2JseDBYSFJBWlcxdmRHbGpiMjV6TG5CdmNHOTJaWElvUUdWdGIzUnBZMjl1YzBKMGJpd2dRR2x1Y0hWMEtWeHlYRzVjY2x4dVhIUmNkRUJ2ZFhSd2RYUmJNRjB1YzJOeWIyeHNWRzl3SUQwZ1FHOTFkSEIxZEZzd1hTNXpZM0p2Ykd4SVpXbG5hSFJjY2x4dVhISmNibHgwWEhRa0tFQnBibkIxZENrdWEyVjVaRzkzYmlnb1pYWmxiblFwSUQwK0lFQnZia3RsZVNobGRtVnVkQ2twWEhKY2JseHlYRzVjY2x4dVhIUmNkQ1FvUUhObGJtUkNkRzRwTG1Oc2FXTnJLQ0E5UGx4eVhHNWNjbHh1WEhSY2RGeDBRSE5sYm1Rb0tWeHlYRzVjZEZ4MFhIUkFZMnhsWVhKSmJuQjFkQ2dwWEhKY2JseDBYSFFwWEhKY2JseHlYRzVjZEZ4MEpDaEFZMnhsWVhKQ2RHNHBMbU5zYVdOcktDQTlQbHh5WEc1Y2NseHVYSFJjZEZ4MFFHTnNaV0Z5VDNWMGNIVjBLQ2xjY2x4dVhIUmNkQ2xjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJjZEVCcGJuUmxjblpoYkNBOUlHOXdkQzVwYm5SbGNuWmhiRnh5WEc1Y2NseHVYSEpjYmx4MFhIUkFhbTlwYmlBOUlHOXdkQzVxYjJsdVhISmNibHh5WEc1Y2RGeDBRR052YjJ4a2IzZHVJRDBnYjNCMExtTnZiMnhrYjNkdVhISmNibHgwWEhSQWMyVnVkQ0E5SUUxaGRHZ3VjbTkxYm1Rb0tHNWxkeUJFWVhSbEtDa3BMbWRsZEZScGJXVW9LU0F2SURFd01EQXBJQzBnUUdOdmIyeGtiM2R1WEhKY2JseHlYRzVjZEZ4MFFIUnZkV05vS0NsY2NseHVYSFJjZEVCMGFXMWxJRDBnVFdGMGFDNXRZWGdvUUhScGJXVWdMU0J2Y0hRdWFHbHpkRzl5ZVN3Z01DbGNjbHh1WEhKY2JseHlYRzVjZEZ4MFFISmxZMlZwZG1Vb0tWeHlYRzVjZEZ4MFhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBaMlYwUlhKeWIzSlVaWGgwT2lBb2JtRnRaU3dnWVhKbmN5a2dMVDVjY2x4dVhISmNibHgwWEhSMFpYaDBJRDBnYVRFNGJpNWphR0YwTG1WeWNtOXljMXR1WVcxbFhTQS9JR2t4T0c0dVkyaGhkQzVsY25KdmNuTXVkVzVyYm05M2JseHlYRzVjY2x4dVhIUmNkR2xtSUdGeVozTS9JR0Z1WkNCMGVYQmxiMllvWVhKbmN5a2dQVDBnSjI5aWFtVmpkQ2RjY2x4dVhISmNibHgwWEhSY2RHWnZjaUJyTENCMklHOW1JR0Z5WjNOY2NseHVYSFJjZEZ4MFhIUjBaWGgwSUQwZ2RHVjRkQzV5WlhCc1lXTmxLQ2M2SnlBcklHc3NJSFlwWEhKY2JseHlYRzVjZEZ4MGRHVjRkRnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkR1Z5Y205eU9pQW9ibUZ0WlN3Z1lYSm5jeWtnTFQ1Y2NseHVYSEpjYmx4MFhIUmhiR1Z5ZENBOUlDUW9KenhrYVhZK1BDOWthWFkrSnlsY2NseHVYSFJjZEZ4MExtRmtaRU5zWVhOektDZGhiR1Z5ZENjcFhISmNibHgwWEhSY2RDNWhaR1JEYkdGemN5Z25ZV3hsY25RdFpHRnVaMlZ5SnlsY2NseHVYSFJjZEZ4MExuUmxlSFFvUUdkbGRFVnljbTl5VkdWNGRDaHVZVzFsTENCaGNtZHpLU2xjY2x4dVhISmNibHgwWEhRa0tFQnZkWFJ3ZFhRcFhISmNibHgwWEhSY2RDNWhjSEJsYm1Rb1lXeGxjblFwWEhKY2JseHlYRzVjZEdGc1pYSjBPaUFvYm1GdFpTd2dZWEpuY3lrZ0xUNWNjbHh1WEhKY2JseDBYSFJoYkdWeWRDaEFaMlYwUlhKeWIzSlVaWGgwS0c1aGJXVXNJR0Z5WjNNcEtWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFIwYjNWamFEb2dMVDVjY2x4dVhIUmNkRUIwYVcxbElEMGdUV0YwYUM1eWIzVnVaQ2dvYm1WM0lFUmhkR1VvS1NrdVoyVjBWR2x0WlNncElDOGdNVEF3TUNsY2NseHVYSEpjYmx4eVhHNWNkSE5sYm1RNklDMCtYSEpjYmx4eVhHNWNkRngwYm05M0lEMGdUV0YwYUM1eWIzVnVaQ2dvYm1WM0lFUmhkR1VvS1NrdVoyVjBWR2x0WlNncElDOGdNVEF3TUNsY2NseHVYSFJjZEcxbGMzTmhaMlVnUFNBa0tFQnBibkIxZENrdWRtRnNLQ2xjY2x4dVhISmNibHgwWEhSdFlYUmphR1Z6SUQwZ2JXVnpjMkZuWlM1dFlYUmphQ2d2WGx4Y0x5aGNYSGNyS1M5cEtWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2RGeDBhV1lnYldGMFkyaGxjejhnWVc1a0lHMWhkR05vWlhOYk1WMC9YSEpjYmx4MFhIUmNkR052YlcxaGJtUWdQU0J0WVhSamFHVnpXekZkWEhKY2JseHlYRzVjZEZ4MFhIUm1iM0lnYXl3Z2RpQnZaaUJqYjIxdFlXNWtjMXh5WEc1Y2NseHVYSFJjZEZ4MFhIUnBaaUJqYjIxdFlXNWtMblJ2VEc5M1pYSkRZWE5sS0NrZ1BUMGdheTUwYjB4dmQyVnlRMkZ6WlNncFhISmNibHh5WEc1Y2RGeDBYSFJjZEZ4MFpuVnVZeUE5SUhSb2FYTmJkbDFjY2x4dVhISmNibHgwWEhSY2RGeDBYSFJwWmlCMGVYQmxiMllvWm5WdVl5a2dQVDBnSjJaMWJtTjBhVzl1SjF4eVhHNWNkRngwWEhSY2RGeDBYSFJtZFc1akxtTmhiR3dvZEdocGN5bGNjbHh1WEhSY2RGeDBYSFJjZEZ4MGNtVjBkWEp1WEhKY2JseHlYRzVjZEZ4MFhIUkFaWEp5YjNJb0oyTnRaRTV2ZEVadmRXNWtKeXdnZXlkdVlXMWxKem9nWTI5dGJXRnVaSDBwWEhKY2JseDBYSFJjZEhKbGRIVnlibHh5WEc1Y2NseHVYSEpjYmx4MFhIUnBaaUJBWVd4c2IzZFRaVzVrWEhKY2JseHlYRzVjZEZ4MFhIUnBaaUJ0WlhOellXZGxMbXhsYm1kMGFDQThJRUJ0YVc1TVpXNW5kR2hjY2x4dVhIUmNkRngwWEhSQVlXeGxjblFvSjNSdmIxTm9iM0owSnl3Z2V5ZHRhVzRuT2lCQWJXbHVUR1Z1WjNSb2ZTbGNjbHh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdYSEpjYmx4eVhHNWNkRngwWEhScFppQnRaWE56WVdkbExteGxibWQwYUNBK0lFQnRZWGhNWlc1bmRHaGNjbHh1WEhSY2RGeDBYSFJoYkdWeWRDZ25kRzl2VEc5dVp5Y3NJSHNuYldGNEp6b2dRRzFoZUV4bGJtZDBhSDBwWEhKY2JseDBYSFJjZEZ4MGNtVjBkWEp1WEhKY2JseHlYRzVjZEZ4MFhIUnBaaUJBYzJWdWRDQXJJRUJqYjI5c1pHOTNiaUErSUc1dmQxeHlYRzVjZEZ4MFhIUmNkRUJoYkdWeWRDZ25ZMjl2YkdSdmQyNG5LVnh5WEc1Y2RGeDBYSFJjZEhKbGRIVnlibHh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkR1JoZEdFZ1BTQWtMbVY0ZEdWdVpDaDdmU3dnUUhObGJtUkZlSFJ5WVN3Z2UyMWxjM05oWjJVNklDUW9RR2x1Y0hWMEtTNTJZV3dvS1gwcFhISmNibHh5WEc1Y2RGeDBYSFFrTG1GcVlYZ29lMXh5WEc1Y2NseHVYSFJjZEZ4MFhIUjFjbXc2SUVCdFpYTnpZV2RsVlhKc0xGeHlYRzVjZEZ4MFhIUmNkSE4xWTJObGMzTTZJQ2hrWVhSaEtTQTlQaUJBYjI1VFpXNTBLR1JoZEdFcExGeHlYRzVjZEZ4MFhIUmNkR1JoZEdFNklHUmhkR0VzWEhKY2JseDBYSFJjZEZ4MFpHRjBZVlI1Y0dVNklDZHFjMjl1Snl4Y2NseHVYSFJjZEZ4MFhIUnRaWFJvYjJRNklFQnpaVzVrVFdWMGFHOWtMRngwWEhKY2JseDBYSFJjZEgwcFhISmNibHh5WEc1Y2RGeDBYSFJBYzJWdWRDQTlJRzV2ZDF4eVhHNWNkRngwWEhRa0tFQnpaVzVrUW5SdUtTNWtZWFJoS0NkMGFXMWxKeXdnUUhObGJuUWdLeUJBWTI5dmJHUnZkMjRwWEhKY2JseHlYRzVjZEZ4MFpXeHpaVnh5WEc1Y2NseHVYSFJjZEZ4MFFHVnljbTl5S0NkallXNXViM1JUWlc1a0p5bGNjbHh1WEhKY2JseHlYRzVjZEhKbFkyVnBkbVU2SUMwK1hISmNibHh5WEc1Y2RGeDBhV1lnUUdGc2JHOTNVbVZqWldsMlpWeHlYRzVjY2x4dVhIUmNkRngwWkdGMFlTQTlJQ1F1WlhoMFpXNWtLSHQ5TENCQWNtVmpaV2wyWlVWNGRISmhMQ0I3ZEdsdFpUb2dRSFJwYldWOUtWeHlYRzVjY2x4dVhIUmNkRngwSkM1aGFtRjRLSHRjY2x4dVhISmNibHgwWEhSY2RGeDBkWEpzT2lCQWJXVnpjMkZuWlZWeWJDeGNjbHh1WEhSY2RGeDBYSFJrWVhSaE9pQmtZWFJoTEZ4eVhHNWNkRngwWEhSY2RHTnZiWEJzWlhSbE9pQTlQaUJBYjI1RGIyMXdiR1YwWlNncExGeHlYRzVjZEZ4MFhIUmNkSE4xWTJObGMzTTZJQ2hrWVhSaEtTQTlQaUJBYjI1U1pXTmxhWFpsWkNoa1lYUmhLU3hjY2x4dVhIUmNkRngwWEhSa1lYUmhWSGx3WlRvZ0oycHpiMjRuTEZ4eVhHNWNkRngwWEhSY2RHMWxkR2h2WkRvZ1FISmxZMlZwZG1WTlpYUm9iMlFzWEhKY2JseDBYSFJjZEgwcFhISmNibHh5WEc1Y2RGeDBYSFJBZEc5MVkyZ29LVnh5WEc1Y2RGeDBaV3h6WlZ4eVhHNWNjbHh1WEhSY2RGeDBRR1Z5Y205eUtDZGpZVzV1YjNSU1pXTmxhWFpsSnlsY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhSamJHVmhjazkxZEhCMWREb2dMVDVjY2x4dVhISmNibHgwWEhRa0tFQnZkWFJ3ZFhRcExtVnRjSFI1S0NsY2NseHVYSEpjYmx4eVhHNWNkR05zWldGeVNXNXdkWFE2SUMwK1hISmNibHh5WEc1Y2RGeDBKQ2hBYVc1d2RYUXBMblpoYkNnbkp5bGNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUm5aWFJOWlhOellXZGxPaUFvWkdGMFlTa2dMVDVjY2x4dVhIUmNkQ1FvSnp4d1Bqd3ZjRDRuS1Z4eVhHNWNkRngwWEhRdWFIUnRiQ2hBWlcxdmRHbGpiMjV6TG1sdWMyVnlkQ2hrWVhSaExtMWxjM05oWjJVcEtWeHlYRzVjZEZ4MFhIUXVZWEJ3Wlc1a0tGeHlYRzVjY2x4dVhIUmNkRngwWEhRa0tDYzhjMjFoYkd3K1BDOXpiV0ZzYkQ0bktWeHlYRzVjZEZ4MFhIUmNkRngwTG1Ga1pFTnNZWE56S0NkamFHRjBMWFJwYldVbktWeHlYRzVjZEZ4MFhIUmNkRngwTG1SaGRHRW9KM1JwYldVbkxDQmtZWFJoTG5ScGJXVXBYSEpjYmx4MFhIUmNkQ2xjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJ1WlhkTlpYTnpZV2RsT2lBb1pHRjBZU2tnTFQ1Y2NseHVYSEpjYmx4MFhIUnliM2NnUFNBa0tDYzhaR2wyUGp3dlpHbDJQaWNwWEhKY2JseDBYSFJjZEM1aFpHUkRiR0Z6Y3lnbmNtOTNKeWxjY2x4dVhIUmNkRngwTG1Ga1pFTnNZWE56S0NkamFHRjBMVzFsYzNOaFoyVW5LVnh5WEc1Y2RGeDBYSFF1WkdGMFlTZ25kR2x0WlNjc0lHUmhkR0V1ZEdsdFpTbGNjbHh1WEhSY2RGeDBMbVJoZEdFb0oyRjFkR2h2Y2ljc0lHUmhkR0V1WVhWMGFHOXlLVnh5WEc1Y2NseHVYSFJjZEdOdmJERWdQU0FrS0NjOFpHbDJQand2WkdsMlBpY3BYSEpjYmx4MFhIUmNkQzVoWkdSRGJHRnpjeWduWTI5c0xYaHpMVEVuS1Z4eVhHNWNjbHh1WEhSY2RHTnZiRElnUFNBa0tDYzhaR2wyUGp3dlpHbDJQaWNwWEhKY2JseDBYSFJjZEM1aFpHUkRiR0Z6Y3lnblkyOXNMWGh6TFRFeEp5bGNjbHh1WEhKY2JseDBYSFJwWmlCQWNHeGhlV1Z5VlhKc1AxeHlYRzVjY2x4dVhIUmNkRngwWkdsMk1TQTlJQ1FvSnp4aFBqd3ZZVDRuS1Z4eVhHNWNkRngwWEhSY2RDNWhkSFJ5S0Nkb2NtVm1KeXdnUUdkbGRGQnNZWGxsY2xWeWJDaGtZWFJoTG1GMWRHaHZjaWtwWEhKY2JseDBYSFJjZEZ4MExtRmtaRU5zWVhOektDZGphR0YwTFdGMWRHaHZjaWNwWEhKY2JseDBYSFJsYkhObFhISmNibHgwWEhSY2NseHVYSFJjZEZ4MFpHbDJNU0E5SUNRb0p6eGthWFkrUEM5a2FYWStKeWxjY2x4dVhIUmNkRngwWEhRdVlXUmtRMnhoYzNNb0oyTm9ZWFF0WVhWMGFHOXlKeWxjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJjZEdScGRqSWdQU0FrS0NjOFpHbDJQand2WkdsMlBpY3BYSEpjYmx4MFhIUmNkQzVoWkdSRGJHRnpjeWduWTJoaGRDMWpiMjUwWlc1MEp5bGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHgwWEhSaGRtRjBZWElnUFNBa0tDYzhhVzFuUGp3dmFXMW5QaWNwWEhKY2JseDBYSFJjZEM1aFpHUkRiR0Z6Y3lnbmFXMW5MWEpsYzNCdmJuTnBkbVVuS1Z4eVhHNWNkRngwWEhRdVlXUmtRMnhoYzNNb0oyTm9ZWFF0WVhaaGRHRnlKeWxjY2x4dVhIUmNkRngwTG1GMGRISW9KM055WXljc0lHUmhkR0V1WVhaaGRHRnlLVnh5WEc1Y2NseHVYSEpjYmx4MFhIUmhkWFJvYjNJZ1BTQWtLQ2M4Y0Q0OEwzQStKeWt1WVhCd1pXNWtLRnh5WEc1Y2NseHVYSFJjZEZ4MEpDZ25QSE4wY205dVp6NDhMM04wY205dVp6NG5LVnh5WEc1Y2RGeDBYSFJjZEM1aFpHUkRiR0Z6Y3lnblkyaGhkQzF1WVcxbEp5bGNjbHh1WEhSY2RGeDBYSFF1ZEdWNGRDaGtZWFJoTG1GMWRHaHZjaWtzWEhKY2JseDBYSFFwWEhKY2JseHlYRzVjZEZ4MGJXVnpjMkZuWlNBOUlFQm5aWFJOWlhOellXZGxLR1JoZEdFcFhISmNibHh5WEc1Y2NseHVYSEpjYmx4MFhIUWtLR1JwZGpFcExtRndjR1Z1WkNoaGRtRjBZWElwTG1Gd2NHVnVaQ2hoZFhSb2IzSXBYSEpjYmx4MFhIUWtLR1JwZGpJcExtRndjR1Z1WkNodFpYTnpZV2RsS1Z4eVhHNWNkRngwSkNoamIyd3hLUzVoY0hCbGJtUW9aR2wyTVNsY2NseHVYSFJjZENRb1kyOXNNaWt1WVhCd1pXNWtLR1JwZGpJcFhISmNibHgwWEhRa0tISnZkeWt1WVhCd1pXNWtLR052YkRFcExtRndjR1Z1WkNoamIyd3lLVnh5WEc1Y2RGeDBKQ2hBYjNWMGNIVjBLUzVoY0hCbGJtUW9jbTkzS1Z4eVhHNWNjbHh1WEhKY2JseDBiVzlrYVdaNVRXVnpjMkZuWlRvZ0tHMWxjM05oWjJVc0lHUmhkR0VwSUMwK1hISmNibHh5WEc1Y2RGeDBKQ2h0WlhOellXZGxLUzVtYVc1a0tDY3VZMmhoZEMxamIyNTBaVzUwSnlrdVlYQndaVzVrS0Z4eVhHNWNjbHh1WEhSY2RGeDBRR2RsZEUxbGMzTmhaMlVvWkdGMFlTbGNjbHh1WEhSY2RDbGNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUmhaR1JOWlhOellXZGxPaUFvWkdGMFlTa3RQbHh5WEc1Y2NseHVYSEpjYmx4MFhIUnpZM0p2Ykd3Z1BTQW9RRzkxZEhCMWRGc3dYUzV6WTNKdmJHeElaV2xuYUhRZ0xTQkFiM1YwY0hWMFd6QmRMbk5qY205c2JGUnZjQ0F0SUVCdmRYUndkWFJiTUYwdVkyeHBaVzUwU0dWcFoyaDBLU0E4UFNBeFhISmNibHgwWEhSdFpYTnpZV2RsSUQwZ0pDaEFiM1YwY0hWMEtTNWphR2xzWkhKbGJpZ3BMbXhoYzNRb0tWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2RGeDBhV1lnYldWemMyRm5aUzVzWlc1bmRHZ2dQVDBnTUNCdmNpQWhKQ2h0WlhOellXZGxLUzVwY3lnbkxtTm9ZWFF0YldWemMyRm5aU2NwWEhKY2JseDBYSFJjZEZ4eVhHNWNkRngwWEhSQWJtVjNUV1Z6YzJGblpTaGtZWFJoS1Z4eVhHNWNkRngwWld4elpWeHlYRzVjY2x4dVhIUmNkRngwZEdsdFpTQTlJQ1FvYldWemMyRm5aU2t1WkdGMFlTZ25kR2x0WlNjcFhISmNibHgwWEhSY2RHRjFkR2h2Y2lBOUlDUW9iV1Z6YzJGblpTa3VaR0YwWVNnbllYVjBhRzl5SnlsY2NseHVYSEpjYmx4MFhIUmNkR2xtSUdGMWRHaHZjaUE5UFNCa1lYUmhMbUYxZEdodmNpQmhibVFnS0dSaGRHRXVkR2x0WlNBdElIUnBiV1VwSUR3OUlFQnFiMmx1WEhKY2JseDBYSFJjZEZ4MFhISmNibHgwWEhSY2RGeDBRRzF2WkdsbWVVMWxjM05oWjJVb2JXVnpjMkZuWlN3Z1pHRjBZU2xjY2x4dVhIUmNkRngwWld4elpWeHlYRzVjY2x4dVhIUmNkRngwWEhSQWJtVjNUV1Z6YzJGblpTaGtZWFJoS1Z4eVhHNWNjbHh1WEhKY2JseHlYRzVjZEZ4MGFXWWdjMk55YjJ4c1hISmNibHgwWEhSY2RFQnZkWFJ3ZFhSYk1GMHVjMk55YjJ4c1ZHOXdJRDBnUUc5MWRIQjFkRnN3WFM1elkzSnZiR3hJWldsbmFIUWdMU0F4WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2RHOXVVMlZ1ZERvZ0tHUmhkR0VwSUMwK1hISmNibHh5WEc1Y2RGeDBRR1Z5Y205eUtHUmhkR0V1Y21WaGMyOXVMQ0JrWVhSaExtRnlaM01wSUdsbUlHUmhkR0V1YzNSaGRIVnpJRDA5SUNkbGNuSnZjaWRjY2x4dVhISmNibHh5WEc1Y2RHOXVVbVZqWldsMlpXUTZJQ2hrWVhSaEtTQXRQbHh5WEc1Y2NseHVYSFJjZEdadmNpQnRaWE56WVdkbElHbHVJR1JoZEdGY2NseHVYSFJjZEZ4MFFHRmtaRTFsYzNOaFoyVW9iV1Z6YzJGblpTbGNjbHh1WEhKY2JseDBiMjVEYjIxd2JHVjBaVG9nTFQ1Y2NseHVYSEpjYmx4MFhIUnpaWFJVYVcxbGIzVjBLRDArWEhKY2JseHlYRzVjZEZ4MFhIUkFjbVZqWldsMlpTZ3BYSEpjYmx4MFhIUXNJRUJwYm5SbGNuWmhiQ0FxSURFd01EQXBYSEpjYmx4eVhHNWNjbHh1WEhSdmJrdGxlVG9nS0dWMlpXNTBLU0F0UGx4eVhHNWNjbHh1WEhSY2RHbG1JR1YyWlc1MExuZG9hV05vSUQwOUlERXpYSEpjYmx4MFhIUmNkRUJ6Wlc1a0tDbGNjbHh1WEhSY2RGeDBRR05zWldGeVNXNXdkWFFvS1Z4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUm5aWFJRYkdGNVpYSlZjbXc2SUNodVlXMWxLU0F0UGx4eVhHNWNjbHh1WEhSY2RISmxkSFZ5YmlCQWNHeGhlV1Z5VlhKc0xuSmxjR3hoWTJVb0ozdHVZVzFsZlNjc0lHNWhiV1VwWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1SkNndFBseHlYRzVjY2x4dVhIUjFjR1JoZEdVZ1BTQW9LU0F0UGx4eVhHNWNjbHh1WEhSY2RHNXZkeUE5SUUxaGRHZ3VjbTkxYm1Rb0tHNWxkeUJFWVhSbEtDa3BMbWRsZEZScGJXVW9LU0F2SURFd01EQXBYSEpjYmx4eVhHNWNkRngwSkNnbkxtTm9ZWFFnTG1Ob1lYUXRkR2x0WlNjcExtVmhZMmdvTFQ1Y2NseHVYSEpjYmx4MFhIUmNkSFJwYldVZ1BTQndZWEp6WlVsdWRDZ2tLSFJvYVhNcExtUmhkR0VvSjNScGJXVW5LU2xjY2x4dVhIUmNkRngwYVc1MFpYSjJZV3dnUFNCdWIzY2dMU0IwYVcxbFhISmNibHh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkR2xtSUdsdWRHVnlkbUZzSUR3Z05qQmNjbHh1WEhKY2JseDBYSFJjZEZ4MGRHVjRkQ0E5SUdreE9HNHVZMmhoZEM1bVpYZFRaV056WEhKY2JseDBYSFJjZEdWc2MyVmNjbHh1WEhKY2JseDBYSFJjZEZ4MGRHVjRkQ0E5SUhkcGJtUnZkeTUwYVcxbFJtOXliV0YwVTJodmNuUW9hVzUwWlhKMllXd3BYSEpjYmx4eVhHNWNkRngwWEhRa0tIUm9hWE1wTG5SbGVIUW9kR1Y0ZENBcklDY2dKeUFySUdreE9HNHVZMmhoZEM1aFoyOHBYSEpjYmx4MFhIUXBYSEpjYmx4eVhHNWNkRngwSkNnbkxtTm9ZWFFnTG5ObGJtUW5LUzVsWVdOb0tDMCtYSEpjYmx4eVhHNWNkRngwWEhScFppQWtLSFJvYVhNcExtUmhkR0VvSjJScGMyRmliR1ZrSnlrZ0lUMGdKM1J5ZFdVblhISmNibHh5WEc1Y2RGeDBYSFJjZEhScGJXVWdQU0J3WVhKelpVbHVkQ2drS0hSb2FYTXBMbVJoZEdFb0ozUnBiV1VuS1NsY2NseHVYSFJjZEZ4MFhIUjBaWGgwSUQwZ0pDaDBhR2x6S1M1a1lYUmhLQ2QwWlhoMEp5bGNjbHh1WEhSY2RGeDBYSFJwYm5SbGNuWmhiQ0E5SUhScGJXVWdMU0J1YjNkY2NseHVYSEpjYmx4eVhHNWNkRngwWEhSY2RHbG1JR2x1ZEdWeWRtRnNJRDRnTUZ4eVhHNWNjbHh1WEhSY2RGeDBYSFJjZENRb2RHaHBjeWxjY2x4dVhIUmNkRngwWEhSY2RGeDBMblJsZUhRb2QybHVaRzkzTG5ScGJXVkdiM0p0WVhRb2FXNTBaWEoyWVd3cEtWeHlYRzVjZEZ4MFhIUmNkRngwWEhRdVlXUmtRMnhoYzNNb0oyUnBjMkZpYkdWa0p5bGNjbHh1WEhSY2RGeDBYSFJsYkhObFhISmNibHh5WEc1Y2RGeDBYSFJjZEZ4MEpDaDBhR2x6S1Z4eVhHNWNkRngwWEhSY2RGeDBYSFF1ZEdWNGRDaDBaWGgwS1Z4eVhHNWNkRngwWEhSY2RGeDBYSFF1Y21WdGIzWmxRMnhoYzNNb0oyUnBjMkZpYkdWa0p5bGNjbHh1WEhKY2JseDBYSFFwWEhKY2JseHlYRzVjY2x4dVhIUmNkSE5sZEZScGJXVnZkWFFvZFhCa1lYUmxMQ0F4TURBd0tWeHlYRzVjY2x4dVhIUjFjR1JoZEdVb0tWeHlYRzRwSWl3aVhISmNibHh5WEc1MWNHUmhkR1VnUFNBb0tTQXRQbHh5WEc1Y2NseHVYSFJrWVhSbElEMGdibVYzSUVSaGRHVW9LVnh5WEc1Y2RHNXZkeUE5SUUxaGRHZ3VjbTkxYm1Rb1pHRjBaUzVuWlhSVWFXMWxLQ2tnTHlBeE1EQXdLVnh5WEc1Y2RDUW9KeTVqZFhKeVpXNTBMWFJwYldVbktTNTBaWGgwS0dSaGRHVXVkRzlWVkVOVGRISnBibWNvS1NsY2NseHVYSEpjYmx4MEpDZ25MblJwYldVdGJHVm1kQ2NwTG1WaFkyZ29MVDVjY2x4dVhISmNibHgwWEhSMGJ5QTlJQ1FvZEdocGN5a3VaR0YwWVNnbmRHOG5LVnh5WEc1Y2RGeDBKQ2gwYUdsektTNTBaWGgwS0hkcGJtUnZkeTUwYVcxbFJtOXliV0YwS0UxaGRHZ3ViV0Y0S0hSdklDMGdibTkzTENBd0tTa3BYSEpjYmx4MEtWeHlYRzVjY2x4dVhISmNibHgwYzJWMFZHbHRaVzkxZENoMWNHUmhkR1VzSURFd01EQXBYSEpjYmx4eVhHNWNjbHh1WEhKY2JpUWdMVDVjY2x4dVhIUjFjR1JoZEdVb0tTSXNJbHh5WEc1Y2NseHVaR2xoYkc5bmN5QTlJRnRkWEhKY2JseHlYRzVjY2x4dWMyaHZkeUE5SUNoa2FXRnNiMmNwSUMwK1hISmNibHh5WEc1Y2RHUnBjMjFwYzNOcFlteGxJRDBnS0NRb1pHbGhiRzluS1M1a1lYUmhLQ2RrYVhOdGFYTnphV0pzWlNjcEtTQS9JSFJ5ZFdWY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhRa0tHUnBZV3h2WnlrdVltbHVaQ2duYzJodmQyNHVZbk11Ylc5a1lXd25MQ0FvWlhabGJuUXBJQzArWEhKY2JseHlYRzVjZEZ4MEpDaDBhR2x6S1M1bWFXNWtLQ2N1WW1GMGRHeGxKeWt1ZEhKcFoyZGxjaWduYzJodmR5Y3BYSEpjYmx4MEtWeHlYRzVjY2x4dVhISmNibHgwYVdZZ1pHbHpiV2x6YzJsaWJHVmNjbHh1WEhKY2JseDBYSFFrS0dScFlXeHZaeWt1Ylc5a1lXd29lMkpoWTJ0a2NtOXdPaUIwY25WbExDQnphRzkzT2lCMGNuVmxMQ0JyWlhsaWIyRnlaRG9nZEhKMVpYMHBYSEpjYmx4eVhHNWNkR1ZzYzJWY2NseHVYSEpjYmx4MFhIUWtLR1JwWVd4dlp5a3ViVzlrWVd3b2UySmhZMnRrY205d09pQW5jM1JoZEdsakp5d2djMmh2ZHpvZ2RISjFaU3dnYTJWNVltOWhjbVE2SUdaaGJITmxmU2xjY2x4dVhISmNibHh5WEc0a0lDMCtYSEpjYmx4MFpHbGhiRzluY3lBOUlDUW9KeTV0YjJSaGJDNWhkWFJ2YzJodmR5Y3BYSEpjYmx4eVhHNWNjbHh1WEhRa0tHUnBZV3h2WjNNcExtVmhZMmdvS0dsdVpHVjRLU0F0UGx4eVhHNWNjbHh1WEhSY2RHbG1JR2x1WkdWNElEMDlJREJjY2x4dVhIUmNkRngwYzJodmR5aDBhR2x6S1Z4eVhHNWNjbHh1WEhSY2RHbG1JR2x1WkdWNElEd2dLR1JwWVd4dlozTXViR1Z1WjNSb0lDMGdNU2xjY2x4dVhIUmNkRngwSkNoMGFHbHpLUzV2YmlnbmFHbGtaR1Z1TG1KekxtMXZaR0ZzSnl3Z0tHVjJaVzUwS1NBdFBseHlYRzVjY2x4dVhIUmNkRngwWEhSemFHOTNLR1JwWVd4dlozTmJhVzVrWlhnZ0t5QXhYU2xjY2x4dVhIUmNkRngwS1Z4eVhHNWNkQ2tpTENKY2NseHVYSEpjYmx4eVhHNWpiR0Z6Y3lCQVJXMXZkR2xqYjI1elhISmNibHh5WEc1Y2RHUmxabUYxYkhSeklEMGdlMXh5WEc1Y2NseHVYSFJjZEdWdGIzUnBZMjl1Y3pvZ2UxeHlYRzVjY2x4dVhIUmNkRngwSnpzcEp6b2dKMkpzYVc1ckxuQnVaeWNzWEhKY2JseDBYSFJjZENjNlJDYzZJQ2RuY21sdUxuQnVaeWNzWEhKY2JseDBYSFJjZENjNktDYzZJQ2R6WVdRdWNHNW5KeXhjY2x4dVhIUmNkRngwSnpvcEp6b2dKM050YVd4bExuQnVaeWNzWEhKY2JseDBYSFJjZENkQ0tTYzZJQ2R6ZFc1bmJHRnpjMlZ6TG5CdVp5Y3NYSEpjYmx4MFhIUmNkQ2RQTG04bk9pQW5jM1Z5Y0hKcGMyVmtMbkJ1Wnljc1hISmNibHgwWEhSY2RDYzZjQ2M2SUNkMGIyNW5kV1V1Y0c1bkp5d2dYSEpjYmx4MFhIUjlMRnh5WEc1Y2NseHVYSFJjZEhWeWJEb2dKeTlwYldGblpYTXZaVzF2ZEdsamIyNXpMM3R1WVcxbGZTY3NYSEpjYmx4MGZWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2RHTnZibk4wY25WamRHOXlPaUFvZFhKc0xDQmxiVzkwYVdOdmJuTXBJQzArWEhKY2JseHlYRzVjZEZ4MFFIVnliQ0E5SUhWeWJDQS9JR1JsWm1GMWJIUnpMblZ5YkZ4eVhHNWNkRngwUUhObGRDQTlJQ1F1WlhoMFpXNWtLSHQ5TENCa1pXWmhkV3gwY3k1bGJXOTBhV052Ym5Nc0lHVnRiM1JwWTI5dWN5QS9JSHQ5S1Z4eVhHNWNjbHh1WEhKY2JseDBhVzV6WlhKME9pQW9kR1Y0ZENrZ0xUNWNjbHh1WEhKY2JseDBYSFJtYjNJZ2F5d2dkaUJ2WmlCQWMyVjBYSEpjYmx4eVhHNWNkRngwWEhSMWNtd2dQU0JBZFhKc0xuSmxjR3hoWTJVb0ozdHVZVzFsZlNjc0lIWXBYSEpjYmx4MFhIUmNkR1Z0YjNScFkyOXVJRDBnSnp4cGJXY2dZMnhoYzNNOVhDSmxiVzkwYVdOdmJsd2lJSE55WXoxY0lpY2dLeUIxY213Z0t5QW5YQ0lnWVd4MFBWd2lKeUFySUdzZ0t5QW5YQ0lnZEdsMGJHVTlYQ0luSUNzZ2F5QXJJQ2RjSWk4K0oxeHlYRzVjZEZ4MFhIUjBaWGgwSUQwZ2RHVjRkQzV5WlhCc1lXTmxRV3hzS0dzc0lHVnRiM1JwWTI5dUtWeHlYRzVjY2x4dVhISmNibHgwWEhSMFpYaDBYSEpjYmx4eVhHNWNkSEJ2Y0c5MlpYSTZJQ2hpZFhSMGIyNHNJRzkxZEhCMWRDa2dMVDVjY2x4dVhISmNibHgwWEhRa0tHSjFkSFJ2YmlrdWNHOXdiM1psY2loN1hISmNibHh5WEc1Y2RGeDBYSFJvZEcxc09pQjBjblZsTEZ4eVhHNWNkRngwWEhSMGNtbG5aMlZ5T2lBblkyeHBZMnNuTEZ4eVhHNWNkRngwWEhSd2JHRmpaVzFsYm5RNklDZDBiM0FuTEZ4eVhHNWNkRngwWEhSMGFYUnNaVG9nYVRFNGJpNWxiVzkwYVdOdmJuTXVkR2wwYkdVc1hISmNibHgwWEhSY2RHTnZiblJsYm5RNklEMCtJRUJuWlhSUWIzQnZkbVZ5UTI5dWRHVnVkQ2h2ZFhSd2RYUXBMRnh5WEc1Y2RGeDBYSFIwWlcxd2JHRjBaVG9nSnp4a2FYWWdZMnhoYzNNOVhDSndiM0J2ZG1WeVhDSWdjbTlzWlQxY0luUnZiMngwYVhCY0lqNDhaR2wySUdOc1lYTnpQVndpWVhKeWIzZGNJajQ4TDJScGRqNDhhRE1nWTJ4aGMzTTlYQ0p3YjNCdmRtVnlMWFJwZEd4bFhDSStQQzlvTXo0OFpHbDJJR05zWVhOelBWd2ljRzl3YjNabGNpMWpiMjUwWlc1MElHVnRiM1JwWTI5dUxXTnZiblJoYVc1bGNsd2lQand2WkdsMlBqd3ZaR2wyUGljc1hISmNibHgwWEhSOUtWeHlYRzVjY2x4dVhIUm5aWFJRYjNCdmRtVnlRMjl1ZEdWdWREb2dLRzkxZEhCMWRDa2dMVDVjY2x4dVhISmNibHgwWEhSamIyNTBZV2x1WlhJZ1BTQWtLQ2M4WkdsMlBqd3ZaR2wyUGljcFhISmNibHh5WEc1Y2RGeDBabTl5SUdzc0lIWWdiMllnUUhObGRGeHlYRzVjZEZ4MFhIUjFjbXdnUFNCQWRYSnNMbkpsY0d4aFkyVW9KM3R1WVcxbGZTY3NJSFlwWEhKY2JseDBYSFJjZEdsdFp5QTlJQ1FvSnp4cGJXYytQQzlwYldjK0p5bGNjbHh1WEhSY2RGeDBYSFF1WVdSa1EyeGhjM01vSjJWdGIzUnBZMjl1SnlsY2NseHVYSFJjZEZ4MFhIUXVZWFIwY2lnbmMzSmpKeXdnZFhKc0tWeHlYRzVjZEZ4MFhIUmNkQzVoZEhSeUtDZGhiSFFuTENCcktWeHlYRzVjZEZ4MFhIUmNkQzVoZEhSeUtDZDBhWFJzWlNjc0lHc3BYSEpjYmx4MFhIUmNkRngwTG1Oc2FXTnJLQzArWEhKY2JseHlYRzVjZEZ4MFhIUmNkRngwSkNodmRYUndkWFFwTG5aaGJDZ2tLRzkxZEhCMWRDa3VkbUZzS0NrZ0t5QWtLSFJvYVhNcExtRjBkSElvSjJGc2RDY3BLVnh5WEc1Y2RGeDBYSFJjZENsY2NseHVYSEpjYmx4MFhIUmNkQ1FvWTI5dWRHRnBibVZ5S1M1aGNIQmxibVFvYVcxbktWeHlYRzVjY2x4dVhIUmNkSEpsZEhWeWJpQmpiMjUwWVdsdVpYSmNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WTI5MWJuUmxjaUE5SURCY2NseHVYSEpjYmx4eVhHNGtLQzArWEhKY2JseHlYRzVjZEdWdGIzUnBZMjl1Y3lBOUlHNWxkeUJGYlc5MGFXTnZibk1vS1Z4eVhHNWNjbHh1WEhRa0tDZGJaR0YwWVMxbGJXOTBhV052Ym5NOWRISjFaVjBuS1M1bFlXTm9LQzArWEhKY2JseHlYRzVjZEZ4MGRHVjRkQ0E5SUNRb2RHaHBjeWt1ZEdWNGRDZ3BYSEpjYmx4MFhIUjBaWGgwSUQwZ1pXMXZkR2xqYjI1ekxtbHVjMlZ5ZENoMFpYaDBLVnh5WEc1Y2RGeDBKQ2gwYUdsektTNW9kRzFzS0hSbGVIUXBYSEpjYmx4MEtWeHlYRzRwSWl3aWQybGtkR2h6SUQxY2NseHVYSFI0Y3pvZ056WTRMRnh5WEc1Y2RITnRPaUE1T1RJc1hISmNibHgwYldRNklERXlNREFzWEhKY2JseHlYRzVjY2x4dVhISmNibWRsZEZCeVpXWnBlQ0E5SUMwK1hISmNibHgwZDJsa2RHZ2dQU0FrS0hkcGJtUnZkeWt1ZDJsa2RHZ29LVnh5WEc1Y2NseHVYSFJwWmlCM2FXUjBhQ0E4SUhkcFpIUm9jeTU0YzF4eVhHNWNkRngwV3lkNGN5ZGRYSEpjYmx4MFpXeHpaU0JwWmlCM2FXUjBhQ0E4SUhkcFpIUm9jeTV6YlZ4eVhHNWNkRngwV3lkemJTY3NJQ2Q0Y3lkZFhISmNibHgwWld4elpTQnBaaUIzYVdSMGFDQThJSGRwWkhSb2N5NXRaRnh5WEc1Y2RGeDBXeWR0WkNjc0lDZHpiU2NzSUNkNGN5ZGRYSEpjYmx4MFpXeHpaVnh5WEc1Y2RGeDBXeWRzWnljc0lDZHRaQ2NzSUNkemJTY3NJQ2Q0Y3lkZFhISmNibHh5WEc1Y2NseHVaMlYwUTI5c2RXMXVjeUE5SUNod2NtVm1hWGdwSUMwK1hISmNibHgwY21WemRXeDBJRDBnVzExY2NseHVYSFJtYjNJZ2NDQnBiaUJ3Y21WbWFYaGNjbHh1WEhSY2RHWnZjaUJwSUdsdUlGc3hMaTR4TWwxY2NseHVYSFJjZEZ4MGNtVnpkV3gwTG5CMWMyZ29YQ0pqYjJ3dEkzdHdmUzBqZTJsOVhDSXBYSEpjYmx4MGNtVnpkV3gwWEhKY2JseHlYRzVjY2x4dVhISmNibWRsZEZOcGVtVWdQU0FvYjJKcVpXTjBMQ0J3Y21WbWFYZ3BJQzArWEhKY2JseDBabTl5SUhBZ2FXNGdjSEpsWm1sNFhISmNibHgwWEhSeVpXZGxlSEFnUFNCdVpYY2dVbVZuUlhod0tGd2lZMjlzTFNON2NIMHRLRnhjWEZ4a0t5bGNJaWxjY2x4dVhIUmNkSE5wZW1VZ1BTQWtLRzlpYW1WamRDa3VZWFIwY2lnblkyeGhjM01uS1M1dFlYUmphQ2h5WldkbGVIQXBQMXN4WFZ4eVhHNWNkRngwY21WMGRYSnVJSEJoY25ObFNXNTBLSE5wZW1VcElHbG1JSE5wZW1VL1hISmNibHgwY21WMGRYSnVJRzUxYkd4Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JtVnhkV0ZzYVhwbElEMGdMVDVjY2x4dVhIUndjbVZtYVhnZ1BTQm5aWFJRY21WbWFYZ29LVnh5WEc1Y2RHTnZiSFZ0Ym5NZ1BTQm5aWFJEYjJ4MWJXNXpLSEJ5WldacGVDbGNjbHh1WEhSelpXeGxZM1J2Y2lBOUlDY3VKeUFySUdOdmJIVnRibk11YW05cGJpZ25MQzRuS1Z4eVhHNWNkRnh5WEc1Y2RDTmpiMjV6YjJ4bExteHZaeWduY0hKbFptbDRPaUFuTENCd2NtVm1hWGdwWEhKY2JseDBJMk52Ym5OdmJHVXViRzluS0NkamIyeDFiVzV6T2lBbkxDQmpiMngxYlc1ektWeHlYRzVjZENOamIyNXpiMnhsTG14dlp5Z25jMlZzWldOMGIzSTZJQ2NzSUhObGJHVmpkRzl5S1Z4eVhHNWNjbHh1WEhKY2JseDBKQ2duTG5KdmR5NWxjWFZoYkdsNlpTY3BMbVZoWTJnZ0xUNWNjbHh1WEhSY2RDTmpiMjV6YjJ4bExteHZaeWduYm1WM0lISnZkeWNwWEhKY2JseDBYSFJvWldsbmFIUnpJRDBnVzExY2NseHVYSFJjZEhKdmR5QTlJREJjY2x4dVhIUmNkSE4xYlNBOUlEQmNjbHh1WEhKY2JseDBYSFFrS0hSb2FYTXBMbU5vYVd4a2NtVnVLSE5sYkdWamRHOXlLUzVsWVdOb0lDMCtYSEpjYmx4MFhIUmNkSE5wZW1VZ1BTQm5aWFJUYVhwbEtIUm9hWE1zSUhCeVpXWnBlQ2xjY2x4dVhIUmNkRngwYzNWdElDczlJSE5wZW1WY2NseHVYSEpjYmx4MFhIUmNkQ05qYjI1emIyeGxMbXh2WnlnbmMybDZaVG9nSnl3Z2MybDZaU2xjY2x4dVhIUmNkRngwSTJOdmJuTnZiR1V1Ykc5bktDZHpkVzA2SUNjc0lITjFiU2xjY2x4dVhISmNibHgwWEhSY2RHbG1JSE4xYlNBK0lERXlYSEpjYmx4MFhIUmNkRngwYzNWdElDMDlJREV5WEhKY2JseDBYSFJjZEZ4MGNtOTNLeXRjY2x4dVhIUmNkRngwWEhRalkyOXVjMjlzWlM1c2IyY29KMjVsZUhRZ2NtOTNJQ2NzSUhKdmR5d2djMmw2WlNsY2NseHVYSEpjYmx4MFhIUmNkR2hsYVdkb2RITmJjbTkzWFNBL1BTQXdYSEpjYmx4MFhIUmNkR2hsYVdkb2RITmJjbTkzWFNBOUlFMWhkR2d1YldGNEtHaGxhV2RvZEhOYmNtOTNYU3dnSkNoMGFHbHpLUzVvWldsbmFIUW9LU2xjY2x4dVhIUmNkRngwSTJOdmJuTnZiR1V1Ykc5bktDZG9aV2xuYUhRZ0p5d2dhR1ZwWjJoMGMxdHliM2RkS1Z4eVhHNWNjbHh1WEhSY2RISnZkeUE5SURCY2NseHVYSFJjZEhOMWJTQTlJREJjY2x4dVhIUmNkR052YkNBOUlHNTFiR3hjY2x4dVhISmNibHgwWEhRa0tIUm9hWE1wTG1Ob2FXeGtjbVZ1S0hObGJHVmpkRzl5S1M1bFlXTm9JQzArWEhKY2JseDBYSFJjZEhOMWJTQXJQU0JuWlhSVGFYcGxLSFJvYVhNc0lIQnlaV1pwZUNsY2NseHVYSFJjZEZ4MFkyOXNJRDg5SUhSb2FYTmNjbHh1WEhKY2JseDBYSFJjZEdsbUlITjFiU0ErSURFeVhISmNibHgwWEhSY2RGeDBjM1Z0SUMwOUlERXlYSEpjYmx4MFhIUmNkRngwY205M0t5dGNjbHh1WEhSY2RGeDBYSFJqYjJ3Z1BTQjBhR2x6WEhKY2JseHlYRzVjZEZ4MFhIUWtLSFJvYVhNcExtaGxhV2RvZENob1pXbG5hSFJ6VzNKdmQxMHBYSEpjYmx4eVhHNWNkRngwYUhNZ1BTQk5ZWFJvTG5KdmRXNWtJQ2d4TWlBdElITjFiU2tnTHlBeVhISmNibHgwWEhScFppQmpiMncvSUdGdVpDQm9jeUErSURCY2NseHVYSFJjZEZ4MGNDQTlJSEJ5WldacGVGc3dYVnh5WEc1Y2NseHVYSFJjZEZ4MFptOXlJR2tnYVc0Z1d6RXVMakV5WFZ4eVhHNWNkRngwWEhSY2RDUW9ZMjlzS1M1eVpXMXZkbVZEYkdGemN5aGNJbU52YkMwamUzQjlMVzltWm5ObGRDMGplMmw5WENJcFhISmNibHgwWEhSY2RDUW9ZMjlzS1M1aFpHUkRiR0Z6Y3loY0ltTnZiQzBqZTNCOUxXOW1abk5sZEMwamUyaHpmVndpS1Z4eVhHNWNjbHh1WVdaMFpYSk1iMkZrWldRZ1BTQXRQbHh5WEc1Y2RDUW9KMmx0WnljcFhISmNibHgwWEhRdWIyNG9KMnh2WVdRbkxDQmxjWFZoYkdsNlpTbGNjbHh1WEhKY2JseHlYRzRrSUMwK1hISmNibHgwSTJGbWRHVnlURzloWkdWa0tDbGNjbHh1WEhRakpDaDNhVzVrYjNjcExtOXVLQ2R5WlhOcGVtVmtKeXdnWlhGMVlXeHBlbVVwWEhKY2JseDBJMlZ4ZFdGc2FYcGxLQ2tpTENKemNHVmxaQ0E5SURGY2NseHVYSEpjYmx4eVhHNXJaWGxFYjNkdUlEMGdLR1YyWlc1MEtTQXRQbHh5WEc1Y2RITndaV1ZrSUQwZ01UQWdhV1lnWlhabGJuUXVkMmhwWTJnZ1BUMGdNVGRjY2x4dVhIUnpjR1ZsWkNBOUlERXdNQ0JwWmlCbGRtVnVkQzUzYUdsamFDQTlQU0F4Tmx4eVhHNWNjbHh1YTJWNVZYQWdQU0FvWlhabGJuUXBJQzArWEhKY2JseDBjM0JsWldRZ1BTQXhJR2xtSUdWMlpXNTBMbmRvYVdOb0lEMDlJREUzSUc5eUlHVjJaVzUwTG5kb2FXTm9JRDA5SURFMlhISmNibHh5WEc1Y2NseHViVzkxYzJWWGFHVmxiQ0E5SUNobGRtVnVkQ2tnTFQ1Y2NseHVYSFJqYjI1emIyeGxMbXh2WnlnbmJXOTFjMlZYYUdWbGJDY3BYSEpjYmx4MGJXbHVJRDBnY0dGeWMyVkpiblFnS0NRb2RHaHBjeWt1WVhSMGNpZ25iV2x1SnlrZ1B5QXdLVnh5WEc1Y2RHMWhlQ0E5SUhCaGNuTmxTVzUwSUNna0tIUm9hWE1wTG1GMGRISW9KMjFoZUNjcElEOGdNVEF3S1Z4eVhHNWNkSE4wWlhBZ1BTQndZWEp6WlVsdWRDQW9KQ2gwYUdsektTNWhkSFJ5S0NkemRHVndKeWtnUHlBeEtWeHlYRzVjY2x4dVhIUmphR0Z1WjJVZ1BTQmxkbVZ1ZEM1a1pXeDBZVmtnS2lCemRHVndJQ29nYzNCbFpXUmNjbHh1WEhSMllXeDFaU0E5SUhCaGNuTmxTVzUwSUNRb2RHaHBjeWt1ZG1Gc0tDa2dQeUF3WEhKY2JseDBkbUZzZFdVZ1BTQk5ZWFJvTG1Oc1lXMXdJSFpoYkhWbElDc2dZMmhoYm1kbExDQnRhVzRzSUcxaGVGeHlYRzVjY2x4dVhIUWtLSFJvYVhNcFhISmNibHgwWEhRdWRtRnNJSFpoYkhWbFhISmNibHgwWEhRdWRISnBaMmRsY2lBblkyaGhibWRsSjF4eVhHNWNjbHh1WEhSbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BYSEpjYmx4eVhHNXlZVzVuWlVOb1lXNW5aV1FnUFNBb1pYWmxiblFwSUMwK1hISmNibHgwWTI5dWMyOXNaUzVzYjJjb0ozSmhibWRsUTJoaGJtZGxaQ2NwWEhKY2JseDBiM1YwY0hWMElEMGdKQ2gwYUdsektTNXdZWEpsYm5Rb0tTNWphR2xzWkhKbGJpZ25MbkpoYm1kbExYWmhiSFZsSnlsY2NseHVYSFJpWldadmNtVWdQU0FvSkNodmRYUndkWFFwTG1SaGRHRWdKMkpsWm05eVpTY3BJRDhnSnlkY2NseHVYSFJoWm5SbGNpQTlJQ2drS0c5MWRIQjFkQ2t1WkdGMFlTQW5ZV1owWlhJbktTQS9JQ2NuWEhKY2JseDBkbUZzZFdVZ1BTQWtLSFJvYVhNcExuWmhiQ2dwSUQ4Z01GeHlYRzVjY2x4dVhIUWtLRzkxZEhCMWRDa3VkR1Y0ZENCaVpXWnZjbVVnS3lCMllXeDFaU0FySUdGbWRHVnlYSEpjYmx4eVhHNWNjbHh1Ym5WdFltVnlSR1ZqY21WaGMyVWdQU0FvWlhabGJuUXBJQzArWEhKY2JseDBZMjl1YzI5c1pTNXNiMmNvSjI1MWJXSmxja1JsWTNKbFlYTmxKeWxjY2x4dVhIUnBibkIxZENBOUlDUW9kR2hwY3lrdWNHRnlaVzUwS0NrdWNHRnlaVzUwS0NrdVkyaHBiR1J5Wlc0b0oybHVjSFYwSnlsY2NseHVYSFJ0YVc0Z1BTQndZWEp6WlVsdWRDQW9KQ2hwYm5CMWRDa3VZWFIwY2lnbmJXbHVKeWtnUHlBd0tWeHlYRzVjZEcxaGVDQTlJSEJoY25ObFNXNTBJQ2drS0dsdWNIVjBLUzVoZEhSeUtDZHRZWGduS1NBL0lERXdNQ2xjY2x4dVhIUnpkR1Z3SUQwZ2NHRnljMlZKYm5RZ0tDUW9hVzV3ZFhRcExtRjBkSElvSjNOMFpYQW5LU0EvSURFcFhISmNibHh5WEc1Y2RIWmhiSFZsSUQwZ2NHRnljMlZKYm5RZ0tDUW9hVzV3ZFhRcExuWmhiQ2dwSUQ4Z01DbGNjbHh1WEhSMllXeDFaU0E5SUUxaGRHZ3VZMnhoYlhBb2RtRnNkV1VnTFNCemNHVmxaQ0FxSUhOMFpYQXNJRzFwYml3Z2JXRjRLVnh5WEc1Y2RDUW9hVzV3ZFhRcExuWmhiQ2gyWVd4MVpTa3VkSEpwWjJkbGNpZ25ZMmhoYm1kbEp5bGNjbHh1WEhKY2JseHlYRzV1ZFcxaVpYSkpibU55WldGelpTQTlJQ2hsZG1WdWRDa2dMVDVjY2x4dVhIUmpiMjV6YjJ4bExteHZaeWduYm5WdFltVnlTVzVqY21WaGMyVW5LVnh5WEc1Y2RHbHVjSFYwSUQwZ0pDaDBhR2x6S1M1d1lYSmxiblFvS1M1d1lYSmxiblFvS1M1amFHbHNaSEpsYmlnbmFXNXdkWFFuS1Z4eVhHNWNkRzFwYmlBOUlIQmhjbk5sU1c1MElDZ2tLR2x1Y0hWMEtTNWhkSFJ5S0NkdGFXNG5LU0EvSURBcFhISmNibHgwYldGNElEMGdjR0Z5YzJWSmJuUWdLQ1FvYVc1d2RYUXBMbUYwZEhJb0oyMWhlQ2NwSUQ4Z01UQXdLVnh5WEc1Y2RITjBaWEFnUFNCd1lYSnpaVWx1ZENBb0pDaHBibkIxZENrdVlYUjBjaWduYzNSbGNDY3BJRDhnTVNsY2NseHVYSEpjYmx4MGRtRnNkV1VnUFNCd1lYSnpaVWx1ZENBb0pDaHBibkIxZENrdWRtRnNLQ2tnUHlBd0tWeHlYRzVjZEhaaGJIVmxJRDBnVFdGMGFDNWpiR0Z0Y0NoMllXeDFaU0FySUhOd1pXVmtJQ29nYzNSbGNDd2diV2x1TENCdFlYZ3BYSEpjYmx4MEpDaHBibkIxZENrdWRtRnNLSFpoYkhWbEtTNTBjbWxuWjJWeUtDZGphR0Z1WjJVbktWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVKQ0F0UGlCY2NseHVYSFFrS0hkcGJtUnZkeWxjY2x4dVhIUmNkQzVyWlhsMWNDQnJaWGxWY0Z4eVhHNWNkRngwTG10bGVXUnZkMjRnYTJWNVJHOTNibHh5WEc1Y2NseHVYSFFrS0NkcGJuQjFkRnQwZVhCbFBXNTFiV0psY2wwc0lHbHVjSFYwVzNSNWNHVTljbUZ1WjJWZEp5bGNjbHh1WEhSY2RDNWlhVzVrSUNkdGIzVnpaWGRvWldWc0p5d2diVzkxYzJWWGFHVmxiRnh5WEc1Y2NseHVYSFFrS0NkcGJuQjFkRnQwZVhCbFBYSmhibWRsWFNjcFhISmNibHgwWEhRdVkyaGhibWRsSUhKaGJtZGxRMmhoYm1kbFpGeHlYRzVjZEZ4MExtMXZkWE5sYlc5MlpTQnlZVzVuWlVOb1lXNW5aV1JjY2x4dVhISmNibHgwSkNnbkxtNTFiV0psY2kxdGFXNTFjeWNwTG1Ob2FXeGtjbVZ1S0NkaWRYUjBiMjRuS1Z4eVhHNWNkRngwTG1Oc2FXTnJJRzUxYldKbGNrUmxZM0psWVhObFhISmNibHh5WEc1Y2NseHVYSFFrS0NjdWJuVnRZbVZ5TFhCc2RYTW5LUzVqYUdsc1pISmxiaWduWW5WMGRHOXVKeWxjY2x4dVhIUmNkQzVqYkdsamF5QnVkVzFpWlhKSmJtTnlaV0Z6WlZ4eVhHNWNjbHh1SWl3aWJHRnpkRlJwYldVZ1BTQXdYSEpjYm5abGJtUnZjbk1nUFNCYkozZGxZbXRwZENjc0lDZHRiM29uWFZ4eVhHNWNjbHh1YVdZZ2JtOTBJSGRwYm1SdmR5NXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1ZjY2x4dUlDQWdJR1p2Y2lCMlpXNWtiM0lnYVc0Z2RtVnVaRzl5YzF4eVhHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1eVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVWdQU0IzYVc1a2IzZGJkbVZ1Wkc5eUlDc2dKMUpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNkZFhISmNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xtTmhibU5sYkVGdWFXMWhkR2x2YmtaeVlXMWxJRDBnZDJsdVpHOTNXM1psYm1SdmNpQXJJQ2REWVc1alpXeEJibWx0WVhScGIyNUdjbUZ0WlNkZElIeDhJSGRwYm1SdmQxdDJaVzVrYjNJZ0t5QW5RMkZ1WTJWc1VtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxKMTFjY2x4dVhISmNibmRwYm1SdmR5NXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VnYjNJOUlDaGpZV3hzWW1GamF5d2daV3hsYldWdWRDa2dMVDVjY2x4dUlDQWdJR04xY25KVWFXMWxJRDBnYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsS0NsY2NseHVJQ0FnSUhScGJXVlViME5oYkd3Z1BTQk5ZWFJvTG0xaGVDZ3dMQ0F4TmlBdElDaGpkWEp5VkdsdFpTQXRJR3hoYzNSVWFXMWxLU2xjY2x4dVhISmNiaUFnSUNCcFpDQTlJSGRwYm1SdmR5NXpaWFJVYVcxbGIzVjBLQzArWEhKY2JpQWdJQ0FnSUNBZ1kyRnNiR0poWTJzb1kzVnljbFJwYldVZ0t5QjBhVzFsVkc5RFlXeHNLVnh5WEc0Z0lDQWdMQ0IwYVcxbFZHOURZV3hzS1Z4eVhHNWNjbHh1SUNBZ0lHbGtYSEpjYmx4eVhHNTNhVzVrYjNjdVkyRnVZMlZzUVc1cGJXRjBhVzl1Um5KaGJXVWdiM0k5SUNocFpDa2dMVDVjY2x4dUlDQWdJR05zWldGeVZHbHRaVzkxZENocFpDa2lMQ0pjY2x4dVhISmNibHh5WEc1Y2NseHVKQ0F0UGlCY2NseHVYSFFrS0NjdWFXMWhaMlV0Y0hKbGRtbGxkeWNwTG1WaFkyZ2dMVDVjY2x4dVhIUmNkSEJ5WlhacFpYY2dQU0IwYUdselhISmNibHgwWEhScFpDQTlJQ1FvZEdocGN5a3VaR0YwWVNnblptOXlKeWxjY2x4dVhIUmNkQ1FvSnlNbklDc2dhV1FwTG1Ob1lXNW5aU2dvWlhabGJuUXBJQzArSUZ4eVhHNWNjbHh1WEhSY2RGeDBjR0YwYUNBOUlGVlNUQzVqY21WaGRHVlBZbXBsWTNSVlVrd29aWFpsYm5RdWRHRnlaMlYwTG1acGJHVnpXekJkS1Z4eVhHNWNkRngwWEhRa0tIQnlaWFpwWlhjcExtRjBkSElnSjNOeVl5Y3NJSEJoZEdnZ2FXWWdjR0YwYUQ5Y2NseHVYSEpjYmx4MFhIUmNkRnh5WEc1Y2RGeDBLUzUwY21sbloyVnlJQ2RqYUdGdVoyVW5YSEpjYmlJc0lseHlYRzVjY2x4dWMyVjBJRDBnS0d4aGJtY3BJQzArWEhKY2JseDBkMmx1Wkc5M0xteHZZMkYwYVc5dUxtaHlaV1lnUFNBbkwyeGhibWN2SnlBcklHeGhibWRjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWlkWFIwYjI0Z1BTQW9LU0F0UGx4eVhHNWNkSE5sZENna0tIUm9hWE1wTG1SaGRHRW9KMnhoYm1jbktTbGNjbHh1WEhKY2JseHlYRzV6Wld4bFkzUWdQU0FvS1NBdFBseHlYRzVjZEhObGRDZ2tLSFJvYVhNcExuWmhiQ2dwS1Z4eVhHNWNjbHh1WEhKY2JseHlYRzRrSUMwK1hISmNibHgwSkNnbkxteGhibWQxWVdkbExYTmxiR1ZqZENjcExtTm9ZVzVuWlNoelpXeGxZM1FwWEhKY2JseDBKQ2duTG14aGJtZDFZV2RsTFdKMWRIUnZiaWNwTG1Oc2FXTnJLR0oxZEhSdmJpbGNjbHh1SWl3aWJtRjJabWw0SUQwZ0xUNWNjbHh1WEhSb1pXbG5hSFFnUFNBa0tDY2piV0ZwYms1aGRpY3BMbWhsYVdkb2RDZ3BJQ3NnTVRCY2NseHVYSFFrS0NkaWIyUjVKeWt1WTNOektDZHdZV1JrYVc1bkxYUnZjQ2NzSUdobGFXZG9kQ0FySUNkd2VDY3BYSEpjYmx4eVhHNWNjbHh1SkNBdFBseHlYRzVjZENRb2QybHVaRzkzS1M1eVpYTnBlbVVnTFQ0Z2JtRjJabWw0S0NsY2NseHVYSFJ1WVhabWFYZ29LU0lzSWx4eVhHNWNjbHh1YVcxaFoyVkdiM0pHY21GdFpTQTlJQ2htY21GdFpTa2dMVDVjY2x4dVhIUW5MMmx0WVdkbGN5OXdiR0Z1ZEhNdmNHeGhiblF0SnlBcklHWnlZVzFsSUNzZ0p5NXdibWNuWEhKY2JseHlYRzV5WldaeVpYTm9VR3hoYm5RZ1BTQW9jR3hoYm5RcElDMCtJRnh5WEc1Y2RHNXZkeUE5SUUxaGRHZ3VjbTkxYm1Rb0tHNWxkeUJFWVhSbEtTNW5aWFJVYVcxbEtDa2dMeUF4TURBd0tWeHlYRzVjZEhOMFlYSjBJRDBnY0dGeWMyVkpiblFnSkNod2JHRnVkQ2t1WkdGMFlTQW5jM1JoY25RblhISmNibHgwWlc1a0lEMGdjR0Z5YzJWSmJuUWdKQ2h3YkdGdWRDa3VaR0YwWVNBblpXNWtKMXh5WEc1Y2RIZGhkR1Z5YVc1bklEMGdjR0Z5YzJWSmJuUWdKQ2h3YkdGdWRDa3VaR0YwWVNBbmQyRjBaWEpwYm1jblhISmNibHgwYm05M0lEMGdUV0YwYUM1dGFXNGdibTkzTENCM1lYUmxjbWx1WjF4eVhHNWNkR1p5WVcxbElEMGdUV0YwYUM1bWJHOXZjaWd4TnlBcUlFMWhkR2d1WTJ4aGJYQW9LRzV2ZHlBdElITjBZWEowS1NBdklDaGxibVFnTFNCemRHRnlkQ2tzSURBc0lERXBLU0JjY2x4dVhIUWtLSEJzWVc1MEtTNWhkSFJ5SUNkemNtTW5MQ0JwYldGblpVWnZja1p5WVcxbElHWnlZVzFsWEhKY2JseHlYRzVjZEhObGRGUnBiV1Z2ZFhRZ0tDMCtJSEpsWm5KbGMyaFFiR0Z1ZENCd2JHRnVkQ2tzSURFd01EQWdhV1lnWm5KaGJXVWdQQ0F4TjF4eVhHNWNjbHh1SkNBdFBseHlYRzVjZENRb0p5NXdiR0Z1ZEdGMGFXOXVMWEJzWVc1MEp5a3VaV0ZqYUNBdFBpQnlaV1p5WlhOb1VHeGhiblFnZEdocGMxeHlYRzVjY2x4dVhIUWtLQ2NqYzJWbFpITk5iMlJoYkNjcExtOXVJQ2R6YUc5M0xtSnpMbTF2WkdGc0p5d2dLR1YyWlc1MEtTQXRQbHh5WEc1Y2RGeDBjMnh2ZENBOUlDUW9aWFpsYm5RdWNtVnNZWFJsWkZSaGNtZGxkQ2t1WkdGMFlTQW5jMnh2ZENkY2NseHVYSFJjZENRb2RHaHBjeWt1Wm1sdVpDZ25hVzV3ZFhSYmJtRnRaVDF6Ykc5MFhTY3BMblpoYkNCemJHOTBJaXdpZFhKc0lEMGdKeTloY0drdlkyaGhjbUZqZEdWeUp6dGNjbHh1WEhKY2JseHlYRzV6WlhSUWNtOW5jbVZ6Y3lBOUlDaHZZbXBsWTNRc0lIWmhiSFZsTENCdGFXNVdZV3gxWlN3Z2JXRjRWbUZzZFdVc0lHeGhjM1JWY0dSaGRHVXNJRzVsZUhSVmNHUmhkR1VwSUMwK1hISmNibHh5WEc1Y2RHSmhjaUE5SUNRb0p5NG5JQ3NnYjJKcVpXTjBJQ3NnSnkxaVlYSW5LVnh5WEc1Y2RIUnBiV1Z5SUQwZ0pDZ25MaWNnS3lCdlltcGxZM1FnS3lBbkxYUnBiV1Z5SnlsY2NseHVYSEpjYmx4eVhHNWNkR2xtSUdKaGNpNXNaVzVuZEdnZ1BpQXdYSEpjYmx4MFhIUmphR2xzWkNBOUlDUW9ZbUZ5S1M1amFHbHNaSEpsYmlBbkxuQnliMmR5WlhOekxXSmhjaWRjY2x4dVhISmNibHgwWEhRa0tHTm9hV3hrS1Z4eVhHNWNkRngwWEhRdVpHRjBZU0FuYldGNEp5d2diV0Y0Vm1Gc2RXVmNjbHh1WEhSY2RGeDBMbVJoZEdFZ0oyMXBiaWNzSUcxcGJsWmhiSFZsWEhKY2JseDBYSFJjZEM1a1lYUmhJQ2R1YjNjbkxDQjJZV3gxWlZ4eVhHNWNkRngwWW1GeVd6QmRMblZ3WkdGMFpUOG9LVnh5WEc1Y2NseHVYSEpjYmx4MGFXWWdkR2x0WlhJdWJHVnVaM1JvSUQ0Z01GeHlYRzVjZEZ4MFkyaHBiR1FnUFNBa0tIUnBiV1Z5S1M1amFHbHNaSEpsYmlBbkxuQnliMmR5WlhOekxXSmhjaWRjY2x4dVhISmNibHgwWEhScFppQnVaWGgwVlhCa1lYUmxQMXh5WEc1Y2RGeDBYSFFrS0dOb2FXeGtLVnh5WEc1Y2RGeDBYSFJjZEM1a1lYUmhJQ2R0WVhnbkxDQnVaWGgwVlhCa1lYUmxYSEpjYmx4MFhIUmNkRngwTG1SaGRHRWdKMjFwYmljc0lHeGhjM1JWY0dSaGRHVmNjbHh1WEhSY2RHVnNjMlZjY2x4dVhIUmNkRngwSkNoamFHbHNaQ2xjY2x4dVhIUmNkRngwWEhRdVpHRjBZU0FuYldGNEp5d2dNVnh5WEc1Y2RGeDBYSFJjZEM1a1lYUmhJQ2R0YVc0bkxDQXdYSEpjYmx4eVhHNWNjbHh1YzJWMFZtRnNkV1Z6SUQwZ0tHOWlhbVZqZEN3Z2RtRnNkV1VzSUcxcGJsWmhiSFZsTENCdFlYaFdZV3gxWlNrZ0xUNWNjbHh1WEhRa0tDY3VKeUFySUc5aWFtVmpkQ0FySUNjdGJtOTNKeWxjY2x4dVhIUmNkQzUwWlhoMElIWmhiSFZsWEhKY2JseHlYRzVjZENRb0p5NG5JQ3NnYjJKcVpXTjBJQ3NnSnkxdGFXNG5LVnh5WEc1Y2RGeDBMblJsZUhRZ2JXbHVWbUZzZFdWY2NseHVYSEpjYmx4MEpDZ25MaWNnS3lCdlltcGxZM1FnS3lBbkxXMWhlQ2NwWEhKY2JseDBYSFF1ZEdWNGRDQnRZWGhXWVd4MVpWeHlYRzVjY2x4dWMyVjBWbUZzZFdVZ1BTQW9iMkpxWldOMExDQjJZV3gxWlNrZ0xUNWNjbHh1WEhRa0tDY3VKeUFySUc5aWFtVmpkQ2xjY2x4dVhIUmNkQzUwWlhoMElIWmhiSFZsWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1bWFXeHNJRDBnS0dSaGRHRXBJQzArWEhKY2JseDBjMlYwVUhKdlozSmxjM01nSjJobFlXeDBhQ2NzSUdSaGRHRXVhR1ZoYkhSb0xDQXdMQ0JrWVhSaExtMWhlRWhsWVd4MGFDd2daR0YwWVM1b1pXRnNkR2hWY0dSaGRHVXNJR1JoZEdFdWJtVjRkRWhsWVd4MGFGVndaR0YwWlZ4eVhHNWNkSE5sZEZaaGJIVmxjeUFuYUdWaGJIUm9KeXdnWkdGMFlTNW9aV0ZzZEdnc0lEQXNJR1JoZEdFdWJXRjRTR1ZoYkhSb1hISmNibHh5WEc1Y2RITmxkRkJ5YjJkeVpYTnpJQ2RsYm1WeVoza25MQ0JrWVhSaExtVnVaWEpuZVN3Z01Dd2daR0YwWVM1dFlYaEZibVZ5WjNrc0lHUmhkR0V1Wlc1bGNtZDVWWEJrWVhSbExDQmtZWFJoTG01bGVIUkZibVZ5WjNsVmNHUmhkR1ZjY2x4dVhIUnpaWFJXWVd4MVpYTWdKMlZ1WlhKbmVTY3NJR1JoZEdFdVpXNWxjbWQ1TENBd0xDQmtZWFJoTG0xaGVFVnVaWEpuZVZ4eVhHNWNjbHh1WEhSelpYUlFjbTluY21WemN5QW5kMkZ1ZEdWa0p5d2daR0YwWVM1M1lXNTBaV1FzSURBc0lEWXNJR1JoZEdFdWQyRnVkR1ZrVlhCa1lYUmxMQ0JrWVhSaExtNWxlSFJYWVc1MFpXUlZjR1JoZEdWY2NseHVYSFJ6WlhSV1lXeDFaWE1nSjNkaGJuUmxaQ2NzSUdSaGRHRXVkMkZ1ZEdWa0xDQXdMQ0EyWEhKY2JseHlYRzVjZEhObGRGQnliMmR5WlhOeklDZGxlSEJsY21sbGJtTmxKeXdnWkdGMFlTNWxlSEJsY21sbGJtTmxMQ0F3TENCa1lYUmhMbTFoZUVWNGNHVnlhV1Z1WTJVc0lHNTFiR3dzSUc1MWJHeGNjbHh1WEhSelpYUldZV3gxWlhNZ0oyVjRjR1Z5YVdWdVkyVW5MQ0JrWVhSaExtVjRjR1Z5YVdWdVkyVXNJREFzSUdSaGRHRXViV0Y0Ulhod1pYSnBaVzVqWlZ4eVhHNWNjbHh1WEhKY2JseDBjMlYwVUhKdlozSmxjM01nSjNCc1lXNTBZWFJ2Y2ljc0lHUmhkR0V1Y0d4aGJuUmhkRzl5Ulhod1pYSnBaVzVqWlN3Z01Dd2daR0YwWVM1d2JHRnVkR0YwYjNKTllYaEZlSEJsY21sbGJtTmxMQ0J1ZFd4c0xDQnVkV3hzWEhKY2JseDBjMlYwVm1Gc2RXVnpJQ2R3YkdGdWRHRjBiM0luTENCa1lYUmhMbkJzWVc1MFlYUnZja1Y0Y0dWeWFXVnVZMlVzSURBc0lHUmhkR0V1Y0d4aGJuUmhkRzl5VFdGNFJYaHdaWEpwWlc1alpWeHlYRzVjY2x4dVhIUnpaWFJRY205bmNtVnpjeUFuYzIxMVoyZHNaWEluTENCa1lYUmhMbk50ZFdkbmJHVnlSWGh3WlhKcFpXNWpaU3dnTUN3Z1pHRjBZUzV6YlhWbloyeGxjazFoZUVWNGNHVnlhV1Z1WTJVc0lHNTFiR3dzSUc1MWJHeGNjbHh1WEhSelpYUldZV3gxWlhNZ0ozTnRkV2RuYkdWeUp5d2daR0YwWVM1emJYVm5aMnhsY2tWNGNHVnlhV1Z1WTJVc0lEQXNJR1JoZEdFdWMyMTFaMmRzWlhKTllYaEZlSEJsY21sbGJtTmxYSEpjYmx4eVhHNWNkSE5sZEZCeWIyZHlaWE56SUNka1pXRnNaWEluTENCa1lYUmhMbVJsWVd4bGNrVjRjR1Z5YVdWdVkyVXNJREFzSUdSaGRHRXVaR1ZoYkdWeVRXRjRSWGh3WlhKcFpXNWpaU3dnYm5Wc2JDd2diblZzYkZ4eVhHNWNkSE5sZEZaaGJIVmxjeUFuWkdWaGJHVnlKeXdnWkdGMFlTNWtaV0ZzWlhKRmVIQmxjbWxsYm1ObExDQXdMQ0JrWVhSaExtUmxZV3hsY2sxaGVFVjRjR1Z5YVdWdVkyVmNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2RDTnpaWFJXWVd4MVpTQW5iR1YyWld3bkxDQmtZWFJoTG14bGRtVnNYSEpjYmx4MEkzTmxkRlpoYkhWbElDZHdiR0Z1ZEdGMGIzSXRiR1YyWld3bkxDQmtZWFJoTG5Cc1lXNTBZWFJ2Y2t4bGRtVnNYSEpjYmx4MEkzTmxkRlpoYkhWbElDZHpiWFZuWjJ4bGNpMXNaWFpsYkNjc0lHUmhkR0V1YzIxMVoyZHNaWEpNWlhabGJGeHlYRzVjZENOelpYUldZV3gxWlNBblpHVmhiR1Z5TFd4bGRtVnNKeXdnWkdGMFlTNWtaV0ZzWlhKTVpYWmxiRnh5WEc1Y2RDTnpaWFJXWVd4MVpTQW5jM1J5Wlc1bmRHZ25MQ0JrWVhSaExuTjBjbVZ1WjNSb0xGeHlYRzVjZENOelpYUldZV3gxWlNBbmNHVnlZMlZ3ZEdsdmJpY3NJR1JoZEdFdWNHVnlZMlZ3ZEdsdmJseHlYRzVjZENOelpYUldZV3gxWlNBblpXNWtkWEpoYm1ObEp5d2daR0YwWVM1bGJtUjFjbUZ1WTJWY2NseHVYSFFqYzJWMFZtRnNkV1VnSjJOb1lYSnBjMjFoSnl3Z1pHRjBZUzVqYUdGeWFYTnRZVnh5WEc1Y2RDTnpaWFJXWVd4MVpTQW5hVzUwWld4c2FXZGxibU5sSnl3Z1pHRjBZUzVwYm5SbGJHeHBaMlZ1WTJWY2NseHVYSFFqYzJWMFZtRnNkV1VnSjJGbmFXeHBkSGtuTENCa1lYUmhMbUZuYVd4cGRIbGNjbHh1WEhRamMyVjBWbUZzZFdVZ0oyeDFZMnNuTENCa1lYUmhMbXgxWTJzZ0t5QW5KU2RjY2x4dVhIUWpjMlYwVm1Gc2RXVWdKM04wWVhScGMzUnBZMUJ2YVc1MGN5Y3NJR1JoZEdFdWMzUmhkR2x6ZEdsalVHOXBiblJ6WEhKY2JseDBJM05sZEZaaGJIVmxJQ2QwWVd4bGJuUlFiMmx1ZEhNbkxDQmtZWFJoTG5SaGJHVnVkRkJ2YVc1MGMxeHlYRzVjZENOelpYUldZV3gxWlNBbmJXOXVaWGtuTENBbkpDY2dLeUJrWVhSaExtMXZibVY1WEhKY2JseDBJM05sZEZaaGJIVmxJQ2R5WlhCdmNuUnpKeXdnWkdGMFlTNXlaWEJ2Y25SelEyOTFiblJjY2x4dVhIUWpjMlYwVm1Gc2RXVWdKMjFsYzNOaFoyVnpKeXdnWkdGMFlTNXRaWE56WVdkbGMwTnZkVzUwWEhKY2JseHlYRzVjZEhOamIzQmxJRDBnWVc1bmRXeGhjaTVsYkdWdFpXNTBLR1J2WTNWdFpXNTBMbUp2WkhrcExuTmpiM0JsS0NsY2NseHVYSEpjYmx4MGFXWWdjMk52Y0dVL0lHRnVaQ0J6WTI5d1pTNXdiR0Y1WlhJL1hISmNibHgwWEhRamMyTnZjR1V1Y0d4aGVXVnlMbXhsZG1Wc0lEMGdaR0YwWVM1c1pYWmxiRnh5WEc1Y2RGeDBJM05qYjNCbExuQnNZWGxsY2k1d2JHRnVkR0YwYjNKTVpYWmxiQ0E5SUdSaGRHRXVjR3hoYm5SaGRHOXlUR1YyWld4Y2NseHVYSFJjZENOelkyOXdaUzV3YkdGNVpYSXVjMjExWjJkc1pYSk1aWFpsYkNBOUlHUmhkR0V1YzIxMVoyZHNaWEpNWlhabGJGeHlYRzVjZEZ4MEkzTmpiM0JsTG5Cc1lYbGxjaTVrWldGc1pYSk1aWFpsYkNBOUlHUmhkR0V1WkdWaGJHVnlUR1YyWld4Y2NseHVYSFJjZENOelkyOXdaUzV3YkdGNVpYSXVjM1J5Wlc1bmRHZ2dQU0JrWVhSaExuTjBjbVZ1WjNSb1hISmNibHgwWEhRamMyTnZjR1V1Y0d4aGVXVnlMbkJsY21ObGNIUnBiMjRnUFNCa1lYUmhMbkJsY21ObGNIUnBiMjVjY2x4dVhIUmNkQ056WTI5d1pTNXdiR0Y1WlhJdVpXNWtkWEpoYm1ObElEMGdaR0YwWVM1bGJtUjFjbUZ1WTJWY2NseHVYSFJjZENOelkyOXdaUzV3YkdGNVpYSXVZMmhoY21semJXRWdQU0JrWVhSaExtTm9ZWEpwYzIxaFhISmNibHgwWEhRamMyTnZjR1V1Y0d4aGVXVnlMbWx1ZEdWc2JHbG5aVzVqWlNBOUlHUmhkR0V1YVc1MFpXeHNhV2RsYm1ObFhISmNibHgwWEhRamMyTnZjR1V1Y0d4aGVXVnlMbUZuYVd4cGRIa2dQU0JrWVhSaExtRm5hV3hwZEhsY2NseHVYSFJjZENOelkyOXdaUzV3YkdGNVpYSXViSFZqYXlBOUlHUmhkR0V1YkhWamExeHlYRzVjZEZ4MEkzTmpiM0JsTG5Cc1lYbGxjaTV5WlhOd1pXTjBJRDBnWkdGMFlTNXlaWE53WldOMFhISmNibHgwWEhRamMyTnZjR1V1Y0d4aGVXVnlMbmRsYVdkb2RDQTlJR1JoZEdFdWQyVnBaMmgwWEhKY2JseDBYSFFqYzJOdmNHVXVjR3hoZVdWeUxtTmhjR0ZqYVhSNUlEMGdaR0YwWVM1allYQmhZMmwwZVZ4eVhHNWNkRngwSTNOamIzQmxMbkJzWVhsbGNpNXRhVzVFWVcxaFoyVWdQU0JrWVhSaExtMXBia1JoYldGblpWeHlYRzVjZEZ4MEkzTmpiM0JsTG5Cc1lYbGxjaTV0WVhoRVlXMWhaMlVnUFNCa1lYUmhMbTFoZUVSaGJXRm5aVnh5WEc1Y2RGeDBJM05qYjNCbExuQnNZWGxsY2k1a1pXWmxibk5sSUQwZ1pHRjBZUzVrWldabGJuTmxYSEpjYmx4MFhIUWpjMk52Y0dVdWNHeGhlV1Z5TG1OeWFYUkRhR0Z1WTJVZ1BTQmtZWFJoTG1OeWFYUkRhR0Z1WTJWY2NseHVYSFJjZENOelkyOXdaUzV3YkdGNVpYSXVjM0JsWldRZ1BTQmtZWFJoTG5Od1pXVmtYSEpjYmx4MFhIUWpjMk52Y0dVdWNHeGhlV1Z5TG1WNGNHVnlhV1Z1WTJWTmIyUnBabWxsY2lBOUlHUmhkR0V1Wlhod1pYSnBaVzVqWlUxdlpHbG1hV1Z5WEhKY2JseDBYSFFqYzJOdmNHVXVjR3hoZVdWeUxtMXZibVY1VFc5a2FXWnBaWElnUFNCa1lYUmhMbTF2Ym1WNVRXOWthV1pwWlhKY2NseHVYSEpjYmx4MFhIUm1iM0lnYXl3Z2RpQnZaaUJrWVhSaFhISmNibHgwWEhSY2RITmpiM0JsTG5Cc1lYbGxjbHRyWFNBOUlIWmNjbHh1WEhKY2JseDBYSFJ6WTI5d1pTNGtZWEJ3Ykhrb0tWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHViRzloWkdWa0lEMGdLR1JoZEdFcElDMCtYSEpjYmx4eVhHNWNkR1pwYkd3Z1pHRjBZVnh5WEc1Y2NseHVYSFJwWmlCa1lYUmhMbkpsYkc5aFpGeHlYRzVjY2x4dVhIUmNkSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXlaV1p5WlhOb0tDbGNjbHh1WEhSbGJITmxYSEpjYmx4MFhIUnBaaUIzYVc1a2IzY3VZV04wYVhabFhISmNibHgwWEhSY2RDUXVZV3BoZUNCN1hISmNibHh5WEc1Y2RGeDBYSFJjZEhWeWJEb2dkWEpzSUNzZ0p5OXViM1JwWm1sallYUnBiMjV6Snl4Y2NseHVYSFJjZEZ4MFhIUmtZWFJoVkhsd1pUb2dKMnB6YjI0bkxGeHlYRzVjZEZ4MFhIUmNkRzFsZEdodlpEb2dKMGRGVkNjc1hISmNibHgwWEhSY2RGeDBjM1ZqWTJWemN6b2dibTkwYVdaNVhISmNibHgwWEhSY2RIMWNjbHh1WEhKY2JseDBYSFJjZENRdVlXcGhlQ0I3WEhKY2JseHlYRzVjZEZ4MFhIUmNkSFZ5YkRvZ2RYSnNJQ3NnSnk5dFpYTnpZV2RsY3ljc1hISmNibHgwWEhSY2RGeDBaR0YwWVZSNWNHVTZJQ2RxYzI5dUp5eGNjbHh1WEhSY2RGeDBYSFJ0WlhSb2IyUTZJQ2RIUlZRbkxGeHlYRzVjZEZ4MFhIUmNkSE4xWTJObGMzTTZJRzFsYzNOaFoyVXNYSEpjYmx4MFhIUmNkSDFjY2x4dVhISmNibHgwYzJWMFZHbHRaVzkxZENCc2IyRmtMQ0JrWVhSaExtNWxlSFJWY0dSaGRHVWdLaUF4TURBd1hISmNibHh5WEc1Y2NseHVibTkwYVdaNUlEMGdLR1JoZEdFcElDMCtYSEpjYmx4MFptOXlJRzRnYVc0Z1pHRjBZVnh5WEc1Y2RGeDBkMmx1Wkc5M0xtNXZkR2xtZVNCN1hISmNibHh5WEc1Y2RGeDBYSFIwYVhSc1pUb2dKenh6ZEhKdmJtYytKeUFySUc0dWRHbDBiR1VnS3lBblBDOXpkSEp2Ym1jK0p5eGNjbHh1WEhSY2RGeDBiV1Z6YzJGblpUb2dKeWNzWEhKY2JseDBYSFJjZEhWeWJEb2dKeTl5WlhCdmNuUnpMeWNnS3lCdUxtbGtMRnh5WEc1Y2NseHVYSFJjZEgxY2NseHVYSEpjYmx4MGFXWWdkMmx1Wkc5M0xtRmpkR2wyWlZ4eVhHNWNkRngwZDJsdVpHOTNMbTV2ZEdsbWVWTm9iM2NvS1Z4eVhHNWNjbHh1YldWemMyRm5aU0E5SUNoa1lYUmhLU0F0UGx4eVhHNWNkR1p2Y2lCdUlHbHVJR1JoZEdGY2NseHVYSFJjZEhkcGJtUnZkeTV1YjNScFpua2dlMXh5WEc1Y2NseHVYSFJjZEZ4MGRHbDBiR1U2SUNjOGMzUnliMjVuUGljZ0t5QnVMbUYxZEdodmNpQXJJQ2M4TDNOMGNtOXVaejQ2SUNjZ0t5QnVMblJwZEd4bElDc2dKenhpY2k4K0p5eGNjbHh1WEhSY2RGeDBiV1Z6YzJGblpUb2diaTVqYjI1MFpXNTBMRnh5WEc1Y2RGeDBYSFIxY213NklDY3ZiV1Z6YzJGblpYTXZhVzVpYjNndkp5QXJJRzR1YVdRc1hISmNibHh5WEc1Y2RGeDBmVnh5WEc1Y2NseHVYSFJwWmlCM2FXNWtiM2N1WVdOMGFYWmxYSEpjYmx4MFhIUjNhVzVrYjNjdWJtOTBhV1o1VTJodmR5Z3BYSEpjYmx4eVhHNWNjbHh1WEhKY2JteHZZV1FnUFNBdFBseHlYRzVjY2x4dVhIUWtMbUZxWVhnZ2UxeHlYRzVjY2x4dVhIUmNkSFZ5YkRvZ2RYSnNMRnh5WEc1Y2RGeDBaR0YwWVZSNWNHVTZJQ2RxYzI5dUp5eGNjbHh1WEhSY2RHMWxkR2h2WkRvZ0owZEZWQ2NzWEhKY2JseDBYSFJ6ZFdOalpYTnpPaUJzYjJGa1pXUmNjbHh1WEhSOVhISmNibHh5WEc1Y2NseHVYSEpjYmx4MFhISmNiaVFvZDJsdVpHOTNLUzVtYjJOMWN5QXRQbHh5WEc1Y2RHeHZZV1FvS1Z4eVhHNWNjbHh1WEhKY2JpUWdMVDVjY2x4dVhIUnNiMkZrS0NraUxDSmNjbHh1YzNGMVlYSmxJRDBnTFQ1Y2NseHVYSEpjYmx4MEpDZ25Mbk54ZFdGeVpTY3BMbVZoWTJnZ0xUNWNjbHh1WEhKY2JseDBYSFJwWmlBa0tIUm9hWE1wTG1SaGRHRW9KM054ZFdGeVpTY3BJRDA5SUNkM2FXUjBhQ2RjY2x4dVhISmNibHgwWEhSY2RDUW9kR2hwY3lrdWQybGtkR2dnSkNoMGFHbHpLUzVvWldsbmFIUW9LVnh5WEc1Y2RGeDBaV3h6WlZ4eVhHNWNjbHh1WEhSY2RGeDBKQ2gwYUdsektTNW9aV2xuYUhRZ0pDaDBhR2x6S1M1M2FXUjBhQ2dwWEhKY2JseHlYRzRrSUMwK1hISmNibHgwSkNoM2FXNWtiM2NwTG5KbGMybDZaU0F0UGlCY2NseHVYSFJjZEhOeGRXRnlaU2dwWEhKY2JseDBYSFJjY2x4dVhIUnpjWFZoY21Vb0tTSXNJbHh5WEc1amFHRnVaMlZrSUQwZ0xUNGdYSEpjYmx4MFkzVnljbVZ1ZENBOUlIQmhjbk5sU1c1MElDZ2tLQ2NqWTNWeWNtVnVkRk4wWVhScGMzUnBZM05RYjJsdWRITW5LUzUwWlhoMEtDa2dQeUF3S1Z4eVhHNWNkR3hsWm5RZ1BTQndZWEp6WlVsdWRDQWtLQ2NqYzNSaGRHbHpkR2xqYzFCdmFXNTBjeWNwTG5SbGVIUW9LVnh5WEc1Y2RHOXNaQ0E5SUhCaGNuTmxTVzUwSUNna0tIUm9hWE1wTG1SaGRHRW9KMjlzWkNjcElEOGdNQ2xjY2x4dVhIUjJZV3dnUFNCd1lYSnpaVWx1ZENBb0pDaDBhR2x6S1M1MllXd29LU0EvSURBcFhISmNibHgwWkdsbVppQTlJSFpoYkNBdElHOXNaRnh5WEc1Y2NseHVYSFJrYVdabUlEMGdiR1ZtZENCcFppQmthV1ptSUQ0Z2JHVm1kRnh5WEc1Y2RIWmhiQ0E5SUc5c1pDQXJJR1JwWm1aY2NseHVYSFJzWldaMElDMDlJR1JwWm1aY2NseHVYSEpjYmx4MGFXWWdibTkwSUdselRtRk9JR1JwWm1aY2NseHVYSEpjYmx4MFhIUWtLSFJvYVhNcFhISmNibHgwWEhSY2RDNTJZV3dnZG1Gc1hISmNibHgwWEhSY2RDNWtZWFJoSUNkdmJHUW5MQ0IyWVd4Y2NseHVYSEpjYmx4MFhIUWtLQ2NqYzNSaGRHbHpkR2xqYzFCdmFXNTBjeWNwWEhKY2JseDBYSFJjZEM1MFpYaDBJR3hsWm5SY2NseHVYSEpjYmx4MFhIUWtLQ2N1YzNSaGRHbHpkR2xqSnlrdVpXRmphQ0F0UGx4eVhHNWNkRngwWEhSMllXd2dQU0J3WVhKelpVbHVkQ0FrS0hSb2FYTXBMblpoYkNncElEOGdNRnh5WEc1Y2RGeDBYSFFrS0hSb2FYTXBMbUYwZEhJZ0oyMWhlQ2NzSUd4bFpuUWdLeUIyWVd4Y2NseHVYSEpjYmx4eVhHNXlZVzVrYjIwZ1BTQW9iV2x1TENCdFlYZ3BJQzArSUUxaGRHZ3VjbTkxYm1Rb1RXRjBhQzV5WVc1a2IyMG9LU0FxSUNodFlYZ2dMU0J0YVc0cElDc2diV2x1S1Z4eVhHNWNjbHh1Y21GdVpHOXRTVzRnUFNBb1lYSnlZWGtwSUMwK1hISmNibHgwYVc1a1pYZ2dQU0J5WVc1a2IyMG9NQ3dnWVhKeVlYa3ViR1Z1WjNSb0lDMGdNU2xjY2x4dVhIUmhjbkpoZVZ0cGJtUmxlRjFjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNXliMnhzSUQwZ0xUNWNjbHh1WEhKY2JseDBjbTlzYkdGaWJHVWdQU0FrS0NjdWMzUmhkR2x6ZEdsakxuSnZiR3hoWW14bEp5bGNjbHh1WEhRa0tISnZiR3hoWW14bEtTNTJZV3dvTUNrdWRISnBaMmRsY2lnblkyaGhibWRsSnlsY2NseHVYSFJ3YjJsdWRITWdQU0J3WVhKelpVbHVkQ0FrS0NjamMzUmhkR2x6ZEdsamMxQnZhVzUwY3ljcExuUmxlSFFvS1Z4eVhHNWNjbHh1WEhKY2JseDBabTl5SUdrZ2FXNGdXekV1TG5CdmFXNTBjMTFjY2x4dVhISmNibHgwWEhSemRHRjBhWE4wYVdNZ1BTQnlZVzVrYjIxSmJpaHliMnhzWVdKc1pTbGNjbHh1WEhSY2RIWmhiQ0E5SUhCaGNuTmxTVzUwSUNRb2MzUmhkR2x6ZEdsaktTNTJZV3dvS1Z4eVhHNWNkRngwSkNoemRHRjBhWE4wYVdNcExuWmhiQ2gyWVd3Z0t5QXhLVnh5WEc1Y2NseHVYSEpjYmx4MEpDaHliMnhzWVdKc1pTa3VkSEpwWjJkbGNpQW5ZMmhoYm1kbEoxeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNGtJQzArSUZ4eVhHNWNkQ1FvSnk1emRHRjBhWE4wYVdNbktWeHlYRzVjZEZ4MExtSnBibVFnSjJ0bGVYVndJR2x1Y0hWMElHTm9ZVzVuWlNjc0lHTm9ZVzVuWldSY2NseHVYSFJjZEM1MGNtbG5aMlZ5SUNkamFHRnVaMlVuWEhKY2JseHlYRzVjZENRb0p5NXpkR0YwVW05c2JHVnlKeWxjY2x4dVhIUmNkQzVqYkdsamF5aHliMnhzS1Z4eVhHNWNjbHh1WEhSeWIyeHNLQ2xjY2x4dUlpd2lYSEpjYm5KbFpuSmxjMmhwYm1jZ1BTQm1ZV3h6WlZ4eVhHNWNjbHh1Y21WbWNtVnphQ0E5SUMwK1hISmNibHgwZDJsdVpHOTNMbXh2WTJGMGFXOXVMbkpsWm5KbGMyZ29LU0JwWmlCdWIzUWdjbVZtY21WemFHbHVaMXh5WEc1Y2RISmxabkpsYzJocGJtY2dQU0IwY25WbFhISmNibHh5WEc1MWNHUmhkR1VnUFNBb2RHbHRaWElwSUMwK1hISmNibHgwWW1GeUlEMGdKQ2gwYVcxbGNpa3VZMmhwYkdSeVpXNG9KeTV3Y205bmNtVnpjeTFpWVhJbktTNXNZWE4wS0NsY2NseHVYSFJzWVdKbGJDQTlJQ1FvZEdsdFpYSXBMbU5vYVd4a2NtVnVJQ2N1Y0hKdlozSmxjM010YkdGaVpXd25YSEpjYmx4MGRHbHRaU0E5SUUxaGRHZ3VjbTkxYm1RZ0tHNWxkeUJFWVhSbEtTNW5aWFJVYVcxbEtDa2dMeUF4TURBd0xqQmNjbHh1WEhKY2JseHlYRzVjZEcxcGJpQTlJQ1FvWW1GeUtTNWtZWFJoSUNkdGFXNG5YSEpjYmx4MGJXRjRJRDBnSkNoaVlYSXBMbVJoZEdFZ0oyMWhlQ2RjY2x4dVhIUnpkRzl3SUQwZ0pDaGlZWElwTG1SaGRHRWdKM04wYjNBblhISmNibHgwWTJFZ1BTQWtLR0poY2lrdVpHRjBZU2duWTJFbktWeHlYRzVjZEdOaUlEMGdKQ2hpWVhJcExtUmhkR0VvSjJOaUp5bGNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUnlaWFpsY25ObFpDQTlJRUp2YjJ4bFlXNG9KQ2hpWVhJcExtUmhkR0VvSjNKbGRtVnljMlZrSnlrZ1B5Qm1ZV3h6WlNsY2NseHVYSFJ5Wld4dllXUWdQU0JDYjI5c1pXRnVLQ1FvWW1GeUtTNWtZWFJoS0NkeVpXeHZZV1FuS1NBL0lIUnlkV1VwWEhKY2JseHlYRzVjZEdsbUlITjBiM0EvWEhKY2JseDBYSFIwYVcxbElEMGdUV0YwYUM1dGFXNGdkR2x0WlN3Z2MzUnZjRnh5WEc1Y2NseHVYSFJ1YjNjZ1BTQk5ZWFJvTG1Oc1lXMXdLSFJwYldVc0lHMXBiaXdnYldGNEtWeHlYRzVjY2x4dVhISmNibHgwY0dWeVkyVnVkQ0E5SUNodWIzY2dMU0J0YVc0cElDOGdLRzFoZUNBdElHMXBiaWxjY2x4dVhIUndaWEpqWlc1MElEMGdNU0F0SUhCbGNtTmxiblFnYVdZZ2NtVjJaWEp6WldSY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBKQ2hpWVhJcExtTnpjeUFuZDJsa2RHZ25MQ0FvY0dWeVkyVnVkQ0FxSURFd01Da2dLeUFuSlNkY2NseHVYSFFrS0dKaGNpa3VZM056S0NkaVlXTnJaM0p2ZFc1a0xXTnZiRzl5Snl3Z1RXRjBhQzVzWlhKd1EyOXNiM0p6S0hCbGNtTmxiblFzSUdOaExDQmpZaWtwSUdsbUlHTmhQeUJoYm1RZ1kySS9YSEpjYmx4MEpDaHNZV0psYkNrdWRHVjRkQ0IzYVc1a2IzY3VkR2x0WlVadmNtMWhkRDhnYldGNElDMGdibTkzWEhKY2JseHlYRzVjZEhKbFpuSmxjMmdvS1NCcFppQjBhVzFsSUQ0Z2JXRjRJR0Z1WkNCeVpXeHZZV1JjY2x4dVhISmNibHgwYzJWMFZHbHRaVzkxZENBdFBpQjFjR1JoZEdVZ2RHbHRaWElzSURFd01EQWdJMmxtSUhScGJXVWdQRDBnYldGNFhISmNibHh5WEc1Y2NseHVKQ0F0UGx4eVhHNWNkQ1FvSnk1d2NtOW5jbVZ6Y3kxMGFXMWxKeWt1WldGamFDQXRQbHh5WEc1Y2RGeDBkWEJrWVhSbElIUm9hWE5jY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmlJc0lpUWdMVDVjY2x4dVhIUWtLQ2RiWkdGMFlTMTBiMmRuYkdVOVhDSjBiMjlzZEdsd1hDSmRKeWt1WldGamFDZ3RQbHh5WEc1Y2NseHVYSFJjZEc5d2RHbHZibk1nUFNCN1hISmNibHh5WEc1Y2RGeDBYSFJvZEcxc09pQjBjblZsTEZ4eVhHNWNkRngwWEhSd2JHRmpaVzFsYm5RNklDZGhkWFJ2SUd4bFpuUW5YSEpjYmx4MFhIUjlYSEpjYmx4eVhHNWNkRngwZEhKcFoyZGxjaUE5SUNRb2RHaHBjeWt1WkdGMFlTZ25kSEpwWjJkbGNpY3BYSEpjYmx4eVhHNWNkRngwYVdZZ2RISnBaMmRsY2o5Y2NseHVYSFJjZEZ4MGIzQjBhVzl1Y3k1MGNtbG5aMlZ5SUQwZ2RISnBaMmRsY2x4eVhHNWNjbHh1WEhKY2JseDBYSFFrS0hSb2FYTXBMblJ2YjJ4MGFYQW9iM0IwYVc5dWN5bGNjbHh1WEhRcElpd2lYSEpjYmlRZ0xUNWNjbHh1WEhKY2JseDBkSFYwYjNKcFlXeHpJRDBnZTMxY2NseHVYSFFrS0NjdWRIVjBiM0pwWVd3dGMzUmxjQ2NwTG5CdmNHOTJaWElvZTNSeWFXZG5aWEk2SUNkdFlXNTFZV3duTENCd2JHRmpaVzFsYm5RNklDZGliM1IwYjIwbmZTbGNjbHh1WEhKY2JseDBjMmh2ZHlBOUlDaHpkR1Z3S1NBdFBseHlYRzVjY2x4dVhIUmNkR2xtSUhOMFpYQS9YSEpjYmx4eVhHNWNkRngwWEhRa0tITjBaWEF1Wld4bGJXVnVkSE1wWEhKY2JseDBYSFJjZEZ4MExtSnBibVFvSjJOc2FXTnJKeXdnWTJ4cFkydGxaQ2xjY2x4dVhIUmNkRngwWEhRdVlXUmtRMnhoYzNNb0ozUjFkRzl5YVdGc0xXRmpkR2wyWlNjcFhISmNibHgwWEhSY2RGeDBMbVpwY25OMEtDbGNjbHh1WEhSY2RGeDBYSFF1Y0c5d2IzWmxjaWduYzJodmR5Y3BYSEpjYmx4eVhHNWNjbHh1WEhSamJHbGphMlZrSUQwZ0tDa2dMVDVjY2x4dVhISmNibHgwWEhSdVpYaDBJRDBnZEhWMGIzSnBZV3h6VzNSb2FYTXVjM1JsY0M1dVlXMWxYUzV6YUdsbWRDZ3BYSEpjYmx4eVhHNWNkRngwYVdZZ2JtVjRkRDljY2x4dVhISmNibHgwWEhSY2RDUXVZV3BoZUNoN1hISmNibHh5WEc1Y2RGeDBYSFJjZEhWeWJEb2dKeTloY0drdlkyaGhjbUZqZEdWeUwzUjFkRzl5YVdGc0p5eGNjbHh1WEhSY2RGeDBYSFJrWVhSaFZIbHdaVG9nSjJwemIyNG5MRnh5WEc1Y2RGeDBYSFJjZEdSaGRHRTZJSHR1WVcxbE9pQjBhR2x6TG5OMFpYQXVibUZ0WlN3Z2MzUmhaMlU2SUc1bGVIUXVhVzVrWlhoOUxGeHlYRzVjZEZ4MFhIUmNkRzFsZEdodlpEb2dKMUJQVTFRbkxGeDBYSEpjYmx4MFhIUmNkSDBwWEhKY2JseHlYRzVjZEZ4MFhIUnpaWFJVYVcxbGIzVjBLQzArWEhKY2JseHlYRzVjZEZ4MFhIUmNkSE5vYjNjb2JtVjRkQ2xjY2x4dVhIUmNkRngwTENBMU1EQXBYSEpjYmx4MFhIUmxiSE5sWEhKY2JseDBYSFJjZENRdVlXcGhlQ2g3WEhKY2JseHlYRzVjZEZ4MFhIUmNkSFZ5YkRvZ0p5OWhjR2t2WTJoaGNtRmpkR1Z5TDNSMWRHOXlhV0ZzSnl4Y2NseHVYSFJjZEZ4MFhIUmtZWFJoVkhsd1pUb2dKMnB6YjI0bkxGeHlYRzVjZEZ4MFhIUmNkR1JoZEdFNklIdHVZVzFsT2lCMGFHbHpMbk4wWlhBdWJtRnRaU3dnYzNSaFoyVTZJSFJvYVhNdWMzUmxjQzVwYm1SbGVDQXJJREY5TEZ4eVhHNWNkRngwWEhSY2RHMWxkR2h2WkRvZ0oxQlBVMVFuTEZ4MFhISmNibHgwWEhSY2RIMHBYSEpjYmx4MFhIUmNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUmNkQ1FvZEdocGN5NXpkR1Z3TG1Wc1pXMWxiblJ6S1M1MWJtSnBibVFvSjJOc2FXTnJKeXdnWTJ4cFkydGxaQ2xjY2x4dVhIUmNkRngwTG5KbGJXOTJaVU5zWVhOektDZDBkWFJ2Y21saGJDMWhZM1JwZG1VbktWeHlYRzVjZEZ4MFhIUXVjRzl3YjNabGNpZ25hR2xrWlNjcFhISmNibHh5WEc1Y2NseHVYSFJ5WldObGFYWmxJRDBnS0c5aWFtVmpkQ3dnYm1GdFpTd2daR0YwWVNrZ0xUNWNjbHh1WEhKY2JseDBYSFJwWmlCa1lYUmhMbk4wWVdkbElEd2dNRnh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkRzF2WkdGc0lEMGdKQ2duUEdScGRqNDhMMlJwZGo0bktTNWhaR1JEYkdGemN5Z25iVzlrWVd3Z1ptRmtaU2NwWEhKY2JseDBYSFJjZEdScFlXeHZaeUE5SUNRb0p6eGthWFkrUEM5a2FYWStKeWt1WVdSa1EyeGhjM01vSjIxdlpHRnNMV1JwWVd4dlp5Y3BYSEpjYmx4MFhIUmNkR052Ym5SbGJuUWdQU0FrS0NjOFpHbDJQand2WkdsMlBpY3BMbUZrWkVOc1lYTnpLQ2R0YjJSaGJDMWpiMjUwWlc1MEp5bGNjbHh1WEhSY2RGeDBhR1ZoWkdWeUlEMGdKQ2duUEdScGRqNDhMMlJwZGo0bktTNWhaR1JEYkdGemN5Z25iVzlrWVd3dGFHVmhaR1Z5SnlsY2NseHVYSFJjZEZ4MFltOWtlU0E5SUNRb0p6eGthWFkrUEM5a2FYWStKeWt1WVdSa1EyeGhjM01vSjIxdlpHRnNMV0p2WkhrbktWeHlYRzVjZEZ4MFhIUm1iMjkwWlhJZ1BTQWtLQ2M4WkdsMlBqd3ZaR2wyUGljcExtRmtaRU5zWVhOektDZHRiMlJoYkMxbWIyOTBaWEluS1Z4eVhHNWNkRngwWEhSMGFYUnNaU0E5SUNRb0p6eG9ORDQ4TDJnMFBpY3BMbUZrWkVOc1lYTnpLQ2R0YjJSaGJDMTBhWFJzWlNjcFhISmNibHh5WEc1Y2RGeDBYSFJuY205MWNDQTlJQ1FvSnp4a2FYWStQQzlrYVhZK0p5a3VZV1JrUTJ4aGMzTW9KMkowYmkxbmNtOTFjQ2NwWEhKY2JseDBYSFJjZEdKMGJqRWdQU0FrS0NjOFpHbDJQand2WkdsMlBpY3BMbUZrWkVOc1lYTnpLQ2RpZEc0Z1luUnVMWE4xWTJObGMzTW5LUzVoZEhSeUtDZDJZV3gxWlNjc0lDZDVaWE1uS1M1MFpYaDBLR2t4T0c0dWVXVnpLVnh5WEc1Y2RGeDBYSFJpZEc0eUlEMGdKQ2duUEdScGRqNDhMMlJwZGo0bktTNWhaR1JEYkdGemN5Z25ZblJ1SUdKMGJpMWtZVzVuWlhJbktTNWhkSFJ5S0NkMllXeDFaU2NzSUNkdWJ5Y3BMblJsZUhRb2FURTRiaTV1YnlsY2NseHVYSEpjYmx4MFhIUmNkQ1FvWW5SdU1Ta3VZMnhwWTJzb0xUNWNjbHh1WEhKY2JseDBYSFJjZEZ4MEpDNWhhbUY0S0h0Y2NseHVYSEpjYmx4MFhIUmNkRngwWEhSMWNtdzZJQ2N2WVhCcEwyTm9ZWEpoWTNSbGNpOTBkWFJ2Y21saGJDY3NYSEpjYmx4MFhIUmNkRngwWEhSa1lYUmhWSGx3WlRvZ0oycHpiMjRuTEZ4eVhHNWNkRngwWEhSY2RGeDBaR0YwWVRvZ2UyNWhiV1U2SUc1aGJXVXNJR0ZqZEdsMlpUb2dNWDBzWEhKY2JseDBYSFJjZEZ4MFhIUnRaWFJvYjJRNklDZFFUMU5VSnl4Y2RGeHlYRzVjZEZ4MFhIUmNkSDBwWEhKY2JseHlYRzVjZEZ4MFhIUmNkQ1FvYlc5a1lXd3BMbTF2WkdGc0tDZG9hV1JsSnlsY2NseHVYSEpjYmx4MFhIUmNkRngwYkc5aFpDaHZZbXBsWTNRc0lHNWhiV1VzSUdSaGRHRXBYSEpjYmx4MFhIUmNkQ2xjY2x4dVhISmNibHgwWEhSY2RDUW9ZblJ1TWlrdVkyeHBZMnNvTFQ1Y2NseHVYSEpjYmx4MFhIUmNkRngwSkM1aGFtRjRLSHRjY2x4dVhISmNibHgwWEhSY2RGeDBYSFIxY213NklDY3ZZWEJwTDJOb1lYSmhZM1JsY2k5MGRYUnZjbWxoYkNjc1hISmNibHgwWEhSY2RGeDBYSFJrWVhSaFZIbHdaVG9nSjJwemIyNG5MRnh5WEc1Y2RGeDBYSFJjZEZ4MFpHRjBZVG9nZTI1aGJXVTZJRzVoYldVc0lHRmpkR2wyWlRvZ01IMHNYSEpjYmx4MFhIUmNkRngwWEhSdFpYUm9iMlE2SUNkUVQxTlVKeXhjZEZ4eVhHNWNkRngwWEhSY2RIMHBYSEpjYmx4eVhHNWNkRngwWEhSY2RDUW9iVzlrWVd3cExtMXZaR0ZzS0Nkb2FXUmxKeWxjY2x4dVhISmNibHgwWEhSY2RDbGNjbHh1WEhKY2JseDBYSFJjZENRb2RHbDBiR1VwWEhKY2JseDBYSFJjZEZ4MExuUmxlSFFvWkdGMFlTNTBhWFJzWlNsY2NseHVYSEpjYmx4MFhIUmNkQ1FvWW05a2VTbGNjbHh1WEhSY2RGeDBYSFF1ZEdWNGRDaGtZWFJoTG1SbGMyTnlhWEIwYVc5dUtWeHlYRzVjY2x4dVhIUmNkRngwSkNob1pXRmtaWElwWEhKY2JseDBYSFJjZEZ4MExtRndjR1Z1WkNoMGFYUnNaU2xjY2x4dVhISmNibHh5WEc1Y2RGeDBYSFFrS0dkeWIzVndLVnh5WEc1Y2RGeDBYSFJjZEM1aGNIQmxibVFvWW5SdU1pbGNjbHh1WEhSY2RGeDBYSFF1WVhCd1pXNWtLR0owYmpFcFhISmNibHh5WEc1Y2RGeDBYSFFrS0dadmIzUmxjaWxjY2x4dVhIUmNkRngwWEhRdVlYQndaVzVrS0dkeWIzVndLVnh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkQ1FvWTI5dWRHVnVkQ2xjY2x4dVhIUmNkRngwWEhRdVlYQndaVzVrS0dobFlXUmxjaWxjY2x4dVhIUmNkRngwWEhRdVlYQndaVzVrS0dKdlpIa3BYSEpjYmx4MFhIUmNkRngwTG1Gd2NHVnVaQ2htYjI5MFpYSXBYSEpjYmx4eVhHNWNkRngwWEhRa0tHUnBZV3h2WnlsY2NseHVYSFJjZEZ4MFhIUXVZWEJ3Wlc1a0tHTnZiblJsYm5RcFhISmNibHh5WEc1Y2RGeDBYSFFrS0cxdlpHRnNLVnh5WEc1Y2RGeDBYSFJjZEM1aGNIQmxibVFvWkdsaGJHOW5LVnh5WEc1Y2NseHVYSFJjZEZ4MEpDZ25ZbTlrZVNjcFhISmNibHgwWEhSY2RGeDBMbUZ3Y0dWdVpDaHRiMlJoYkNsY2NseHVYSEpjYmx4MFhIUmNkQ1FvYlc5a1lXd3BMbTF2WkdGc0tIdGlZV05yWkhKdmNEb2dKM04wWVhScFl5Y3NJSE5vYjNjNklIUnlkV1VzSUd0bGVXSnZZWEprT2lCbVlXeHpaWDBwWEhKY2JseHlYRzVjY2x4dVhIUmNkR1ZzYzJWY2NseHVYSFJjZEZ4MGJHOWhaQ2h2WW1wbFkzUXNJRzVoYldVc0lHUmhkR0VwWEhKY2JseHlYRzVjY2x4dVhISmNibHgwYkc5aFpDQTlJQ2h2WW1wbFkzUXNJRzVoYldVc0lHUmhkR0VwSUMwK1hISmNibHh5WEc1Y2RGeDBkSFYwYjNKcFlXd2dQU0JiWFZ4eVhHNWNjbHh1WEhSY2RDUW9iMkpxWldOMEtTNW1hVzVrS0NjdWRIVjBiM0pwWVd3dGMzUmxjQ2NwTG1WaFkyZ29MVDVjY2x4dVhISmNibHgwWEhSY2RITjBaWEFnUFNCdWRXeHNYSEpjYmx4MFhIUmNkR2x1WkdWNElEMGdKQ2gwYUdsektTNWtZWFJoS0NkMGRYUnZjbWxoYkMxcGJtUmxlQ2NwWEhKY2JseHlYRzVjZEZ4MFhIUnlaWFIxY200Z2FXWWdhVzVrWlhnZ1BDQmtZWFJoTG5OMFlXZGxYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBYSFJjZEdsbUlIUjFkRzl5YVdGc1cybHVaR1Y0WFQ5Y2NseHVYSFJjZEZ4MFhIUnpkR1Z3SUQwZ2RIVjBiM0pwWVd4YmFXNWtaWGhkWEhKY2JseDBYSFJjZEdWc2MyVmNjbHh1WEhSY2RGeDBYSFJ6ZEdWd0lEMGdlMXh5WEc1Y2NseHVYSFJjZEZ4MFhIUmNkR1ZzWlcxbGJuUnpPaUJiWFN4Y2NseHVYSFJjZEZ4MFhIUmNkRzVoYldVNklHNWhiV1VzWEhKY2JseDBYSFJjZEZ4MFhIUnBibVJsZURvZ2FXNWtaWGdzWEhKY2JseDBYSFJjZEZ4MGZWeHlYRzVjZEZ4MFhIUmNkSFIxZEc5eWFXRnNXMmx1WkdWNFhTQTlJSE4wWlhCY2NseHVYSEpjYmx4eVhHNWNkRngwWEhSemRHVndMbVZzWlcxbGJuUnpMbkIxYzJnb2RHaHBjeWxjY2x4dVhIUmNkRngwZEdocGN5NXpkR1Z3SUQwZ2MzUmxjRnh5WEc1Y2RGeDBLVnh5WEc1Y2NseHVYSFJjZEhSMWRHOXlhV0ZzSUQwZ2RIVjBiM0pwWVd3dVptbHNkR1Z5S0NobGJHVnRaVzUwS1NBdFBseHlYRzVjY2x4dVhIUmNkRngwYVdZZ1pXeGxiV1Z1ZEQ5Y2NseHVYSFJjZEZ4MFhIUnlaWFIxY200Z2RISjFaVnh5WEc1Y2RGeDBYSFJsYkhObFhISmNibHgwWEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sWEhKY2JseDBYSFFwWEhKY2JseHlYRzVjY2x4dVhISmNibHgwWEhSMGRYUnZjbWxoYkhOYmJtRnRaVjBnUFNCMGRYUnZjbWxoYkZ4eVhHNWNkRngwYzJodmR5aDBkWFJ2Y21saGJDNXphR2xtZENncEtWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4MEpDZ25XMlJoZEdFdGRIVjBiM0pwWVd3OWRISjFaU2NwTG1WaFkyZ29MVDVjY2x4dVhISmNibHgwWEhSdVlXMWxJRDBnSkNoMGFHbHpLUzVrWVhSaEtDZDBkWFJ2Y21saGJDMXVZVzFsSnlsY2NseHVYSEpjYmx4MFhIUWtMbUZxWVhnb2UxeHlYRzVjY2x4dVhIUmNkRngwZFhKc09pQW5MMkZ3YVM5amFHRnlZV04wWlhJdmRIVjBiM0pwWVd3bkxGeHlYRzVjZEZ4MFhIUmtZWFJoVkhsd1pUb2dKMnB6YjI0bkxGeHlYRzVjZEZ4MFhIUmtZWFJoT2lCN2JtRnRaVG9nYm1GdFpYMHNYSEpjYmx4MFhIUmNkRzFsZEdodlpEb2dKMGRGVkNjc1hISmNibHgwWEhSY2RITjFZMk5sYzNNNklDaGtZWFJoS1NBOVBseHlYRzVjZEZ4MFhIUmNkSEpsWTJWcGRtVW9kR2hwY3l3Z2JtRnRaU3dnWkdGMFlTa2dhV1lnWkdGMFlTNWhZM1JwZG1WY2NseHVYSFJjZEgwcFhISmNibHgwS1NJc0luZHBibVJ2ZHk1bWIzSnRZWFFnYjNJOUlGeHlYRzVjZEhScGJXVTZYSEpjYmx4MFhIUmtZWGs2SUNka0oxeHlYRzVjZEZ4MGFHOTFjam9nSjJnblhISmNibHgwWEhSdGFXNTFkR1U2SUNkdEoxeHlYRzVjZEZ4MGMyVmpiMjVrT2lBbmN5ZGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibmRwYm1SdmR5NWhZM1JwZG1VZ1B6MGdabUZzYzJWY2NseHVYSEpjYmx4eVhHNWNjbHh1SkNoM2FXNWtiM2NwTG1adlkzVnpJQzArWEhKY2JseDBkMmx1Wkc5M0xtRmpkR2wyWlNBOUlIUnlkV1ZjY2x4dVhISmNiaVFvZDJsdVpHOTNLUzVpYkhWeUlDMCtYSEpjYmx4MGQybHVaRzkzTG1GamRHbDJaU0E5SUdaaGJITmxYSEpjYmx4eVhHNGtLSGRwYm1SdmR5a3VjbVZ6YVhwbElDMCtYSEpjYmx4MFkyeGxZWEpVYVcxbGIzVjBLSFJvYVhNdWNtVnphWHBsVkc4cElHbG1JSFJvYVhNdWNtVnphWHBsVkc5Y2NseHVYSFIwYUdsekxuSmxjMmw2WlZSdklEMGdjMlYwVkdsdFpXOTFkQ2d0UGx4eVhHNWNkRngwSkNoMGFHbHpLUzUwY21sbloyVnlLQ2R5WlhOcGVtVmtKeWxjY2x4dVhIUXNJRFV3TUNsY2NseHVYSFJjY2x4dVhISmNibHh5WEc1Y2NseHVkMmx1Wkc5M0xteHdZV1FnYjNJOUlDaDJZV3gxWlN3Z2NHRmtaR2x1WnlrZ0xUNWNjbHh1SUNCNlpYSnZaWE1nUFNCY0lqQmNJbHh5WEc0Z0lIcGxjbTlsY3lBclBTQmNJakJjSWlCbWIzSWdhU0JwYmlCYk1TNHVjR0ZrWkdsdVoxMWNjbHh1WEhKY2JpQWdLSHBsY205bGN5QXJJSFpoYkhWbEtTNXpiR2xqWlNod1lXUmthVzVuSUNvZ0xURXBYSEpjYmx4eVhHNWNjbHh1ZEdsdFpWTmxjR0Z5WVhSbElEMGdLSFpoYkhWbEtTQXRQbHh5WEc1Y2RHbG1JSFpoYkhWbExteGxibWQwYUNBK0lEQmNjbHh1WEhSY2RIWmhiSFZsSUNzZ0p5QW5YSEpjYmx4MFpXeHpaVnh5WEc1Y2RGeDBkbUZzZFdWY2NseHVYSEpjYm5ScGJXVkdiM0p0WVhRZ1BTQW9kR1Y0ZEN3Z2RtRnNkV1VzSUdadmNtMWhkQ2tnTFQ1Y2NseHVYSFIwWlhoMElEMGdkR2x0WlZObGNHRnlZWFJsS0hSbGVIUXBYSEpjYmx4eVhHNWNkR2xtSUhSbGVIUXViR1Z1WjNSb0lENGdNRnh5WEc1Y2RGeDBkR1Y0ZENBclBTQjNhVzVrYjNjdWJIQmhaQ0IyWVd4MVpTd2dNbHh5WEc1Y2RHVnNjMlVnWEhKY2JseDBYSFIwWlhoMElDczlJSFpoYkhWbFhISmNibHh5WEc1Y2RIUmxlSFFnS3lCbWIzSnRZWFJjY2x4dVhISmNibHh5WEc1M2FXNWtiM2N1ZEdsdFpVWnZjbTFoZENCdmNqMGdLSFpoYkhWbEtTQXRQbHh5WEc1Y2RGeHlYRzVjZEhSbGVIUWdQU0FuSjF4eVhHNWNkR1JoZEdVZ1BTQnVaWGNnUkdGMFpTaDJZV3gxWlNBcUlERXdNREFwWEhKY2JseDBaQ0E5SUdSaGRHVXVaMlYwVlZSRFJHRjBaU2dwSUMwZ01WeHlYRzVjZEdnZ1BTQmtZWFJsTG1kbGRGVlVRMGh2ZFhKektDbGNjbHh1WEhSdElEMGdaR0YwWlM1blpYUlZWRU5OYVc1MWRHVnpLQ2xjY2x4dVhIUnpJRDBnWkdGMFpTNW5aWFJWVkVOVFpXTnZibVJ6S0NsY2NseHVYSEpjYmx4eVhHNWNkSFJsZUhRZ0t6MGdaQ0FySUdadmNtMWhkQzUwYVcxbExtUmhlU0JwWmlCa0lENGdNRnh5WEc1Y2RIUmxlSFFnUFNCMGFXMWxSbTl5YldGMEtIUmxlSFFzSUdnc0lHWnZjbTFoZEM1MGFXMWxMbWh2ZFhJcElHbG1JR2dnUGlBd1hISmNibHgwZEdWNGRDQTlJSFJwYldWR2IzSnRZWFFvZEdWNGRDd2diU3dnWm05eWJXRjBMblJwYldVdWJXbHVkWFJsS1NCcFppQm9JRDRnTUNCdmNpQnRJRDRnTUZ4eVhHNWNkSFJsZUhRZ1BTQjBhVzFsUm05eWJXRjBLSFJsZUhRc0lITXNJR1p2Y20xaGRDNTBhVzFsTG5ObFkyOXVaQ2tnYVdZZ2FDQStJREFnYjNJZ2JTQStJREFnYjNJZ2N5QStJREJjY2x4dVhISmNibHgwZEdWNGRGeHlYRzVjY2x4dWQybHVaRzkzTG5ScGJXVkdiM0p0WVhSVGFHOXlkQ0J2Y2owZ0tIWmhiSFZsS1NBdFBseHlYRzVjY2x4dVhIUjBaWGgwSUQwZ0p5ZGNjbHh1WEhSa1lYUmxJRDBnYm1WM0lFUmhkR1VvZG1Gc2RXVWdLaUF4TURBd0tWeHlYRzVjZEdRZ1BTQmtZWFJsTG1kbGRGVlVRMFJoZEdVb0tTQXRJREZjY2x4dVhIUm9JRDBnWkdGMFpTNW5aWFJWVkVOSWIzVnljeWdwWEhKY2JseDBiU0E5SUdSaGRHVXVaMlYwVlZSRFRXbHVkWFJsY3lncFhISmNibHgwY3lBOUlHUmhkR1V1WjJWMFZWUkRVMlZqYjI1a2N5Z3BYSEpjYmx4eVhHNWNjbHh1WEhSeVpYUjFjbTRnWkNBcklHWnZjbTFoZEM1MGFXMWxMbVJoZVNCcFppQmtJRDRnTUZ4eVhHNWNkSEpsZEhWeWJpQjBhVzFsUm05eWJXRjBLSFJsZUhRc0lHZ3NJR1p2Y20xaGRDNTBhVzFsTG1odmRYSXBJR2xtSUdnZ1BpQXdYSEpjYmx4MGNtVjBkWEp1SUhScGJXVkdiM0p0WVhRb2RHVjRkQ3dnYlN3Z1ptOXliV0YwTG5ScGJXVXViV2x1ZFhSbEtTQnBaaUJ0SUQ0Z01GeHlYRzVjZEhKbGRIVnliaUIwYVcxbFJtOXliV0YwS0hSbGVIUXNJSE1zSUdadmNtMWhkQzUwYVcxbExuTmxZMjl1WkNrZ2FXWWdjeUErSURCY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JuSmxabkpsYzJocGJtY2dQU0JtWVd4elpWeHlYRzVjY2x4dVhISmNibmRwYm1SdmR5NXNiMk5oZEdsdmJpNXlaV1p5WlhOb0lHOXlQU0F0UGx4eVhHNWNkR2xtSUc1dmRDQnlaV1p5WlhOb2FXNW5YSEpjYmx4MFhIUnlaV1p5WlhOb2FXNW5JRDBnZEhKMVpWeHlYRzVjZEZ4MGQybHVaRzkzTG14dlkyRjBhVzl1TG5KbGJHOWhaQ2gwY25WbEtWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVibTkwYVdacFkyRjBhVzl1Y3lBOUlGdGRYSEpjYm5kcGJtUnZkeTV1YjNScFpua2diM0k5SUNod2NtOXdjeWt0UGx4eVhHNWNkRzV2ZEdsbWFXTmhkR2x2Ym5NdWNIVnphQ0J3Y205d2MxeHlYRzVjY2x4dVhISmNibU5zYjI1bElEMGdLRzlpYWlrZ0xUNWNjbHh1WEhSeVpYUjFjbTRnYjJKcUlDQnBaaUJ2WW1vZ2FYTWdiblZzYkNCdmNpQjBlWEJsYjJZZ0tHOWlhaWtnYVhOdWRDQmNJbTlpYW1WamRGd2lYSEpjYmx4MGRHVnRjQ0E5SUc1bGR5QnZZbW91WTI5dWMzUnlkV04wYjNJb0tWeHlYRzVjZEdadmNpQnJaWGtnYjJZZ2IySnFYSEpjYmx4MFhIUjBaVzF3VzJ0bGVWMGdQU0JqYkc5dVpTaHZZbXBiYTJWNVhTbGNjbHh1WEhSMFpXMXdYSEpjYmx4eVhHNXphRzkzVG05MGFXWjVJRDBnS0c0c0lHa3BJQzArWEhKY2JseDBZMjl1YzI5c1pTNXNiMmNvSjFBbkxDQnVMQ0JwS1R0Y2NseHVYSFJ6WlhSVWFXMWxiM1YwSUNndFBpQmNjbHh1WEhSY2RHTnZibk52YkdVdWJHOW5LQ2RUSnl3Z2Jpd2dhU2s3WEhKY2JseDBYSFFrTG01dmRHbG1lU2h1TENCN1hISmNibHh5WEc1Y2RGeDBYSFJ3YkdGalpXMWxiblE2SUh0Y2NseHVYSEpjYmx4MFhIUmNkRngwWm5KdmJUb2dKMkp2ZEhSdmJTY3NYSEpjYmx4MFhIUmNkSDBzWEhKY2JseDBYSFJjZEcxdmRYTmxYMjkyWlhJNklDZHdZWFZ6WlNjc1hISmNibHh5WEc1Y2RGeDBYSFI5S1Nrc0lHa2dLaUF4TURBd1hISmNibHgwWEhKY2JseHlYRzVjY2x4dVhISmNibmRwYm1SdmR5NXViM1JwWm5sVGFHOTNJRzl5UFNBdFBseHlYRzVjZEdsbUlIZHBibVJ2ZHk1aFkzUnBkbVZjY2x4dVhISmNibHgwWEhSbWIzSWdibTkwYVdacFkyRjBhVzl1TENCcGJtUmxlQ0JwYmlCdWIzUnBabWxqWVhScGIyNXpYSEpjYmx4MFhIUmNkSE5vYjNkT2IzUnBabmtnSkM1bGVIUmxibVFvZTMwc0lHNXZkR2xtYVdOaGRHbHZiaWtzSUdsdVpHVjRYSEpjYmx4MFhIUnViM1JwWm1sallYUnBiMjV6SUQwZ1cxMWNjbHh1WEhKY2JseHlYRzVjY2x4dUpDaDNhVzVrYjNjcExtWnZZM1Z6SUMwK0lIZHBibVJ2ZHk1dWIzUnBabmxUYUc5M0tDbGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVOWVhSb0xtTnNZVzF3SUc5eVBTQW9kbUZzZFdVc0lHMXBiaXdnYldGNEtTQXRQbHh5WEc1Y2RFMWhkR2d1YldGNEtFMWhkR2d1YldsdUtIWmhiSFZsTENCdFlYZ3BMQ0J0YVc0cFhISmNibHh5WEc1Y2NseHVUV0YwYUM1c1pYSndJRzl5UFNBb2FTd2dZU3dnWWlrZ0xUNWNjbHh1WEhRb1lTQXFJR2twSUNzZ0tHSWdLaUFvTVNBdElHa3BLVnh5WEc1Y2NseHVYSEpjYmx4eVhHNU5ZWFJvTG1obGVGUnZVbWRpSUc5eVBTQW9hR1Y0S1NBdFBpQmNjbHh1SUNBZ0lISmxjM1ZzZENBOUlDOWVJejhvVzJFdFpseGNaRjE3TW4wcEtGdGhMV1pjWEdSZGV6SjlLU2hiWVMxbVhGeGtYWHN5ZlNra0wya3VaWGhsWXlob1pYZ3BPMXh5WEc0Z0lDQWdjbVYwZFhKdUlIdGNjbHh1SUNBZ0lDQWdJQ0J5T2lCd1lYSnpaVWx1ZENoeVpYTjFiSFJiTVYwc0lERTJLU3hjY2x4dUlDQWdJQ0FnSUNCbk9pQndZWEp6WlVsdWRDaHlaWE4xYkhSYk1sMHNJREUyS1N4Y2NseHVJQ0FnSUNBZ0lDQmlPaUJ3WVhKelpVbHVkQ2h5WlhOMWJIUmJNMTBzSURFMktWeHlYRzVjY2x4dUlDQWdJSDBnYVdZZ2NtVnpkV3gwTzF4eVhHNGdJQ0FnYm5Wc2JEdGNjbHh1WEhKY2JrMWhkR2d1Y21kaVZHOUlaWGdnYjNJOUlDaHlMQ0JuTENCaUtTQXRQbHh5WEc0Z0lDQWdjbVYwZFhKdUlGd2lJMXdpSUNzZ0tDZ3hJRHc4SURJMEtTQXJJQ2h5SUR3OElERTJLU0FySUNobklEdzhJRGdwSUNzZ1lpa3VkRzlUZEhKcGJtY29NVFlwTG5Oc2FXTmxLREVwTzF4eVhHNWNjbHh1WEhKY2JrMWhkR2d1YkdWeWNFTnZiRzl5Y3lCdmNqMGdLR2tzSUdFc0lHSXBJQzArWEhKY2JseHlYRzVjZEdOaElEMGdUV0YwYUM1b1pYaFViMUpuWWlCaFhISmNibHgwWTJJZ1BTQk5ZWFJvTG1obGVGUnZVbWRpSUdKY2NseHVYSEpjYmx4MFkyTWdQU0I3WEhKY2JseDBYSFJ5T2lCTllYUm9Mbkp2ZFc1a0tFMWhkR2d1YkdWeWNDaHBMQ0JqWVM1eUxDQmpZaTV5S1Nrc1hISmNibHgwWEhSbk9pQk5ZWFJvTG5KdmRXNWtLRTFoZEdndWJHVnljQ2hwTENCallTNW5MQ0JqWWk1bktTa3NYSEpjYmx4MFhIUmlPaUJOWVhSb0xuSnZkVzVrS0UxaGRHZ3ViR1Z5Y0NocExDQmpZUzVpTENCallpNWlLU2tzWEhKY2JseDBmVnh5WEc1Y2NseHVYSFJ5WlhSMWNtNGdUV0YwYUM1eVoySlViMGhsZUNoall5NXlMQ0JqWXk1bkxDQmpZeTVpS1Z4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNiblZ3WkdGMFpWQnliMmR5WlhOeklEMGdMVDVjY2x4dVhIUmlZWElnUFNBa0tIUm9hWE1wTG1Ob2FXeGtjbVZ1S0NjdWNISnZaM0psYzNNdFltRnlKeWxjY2x4dVhIUnNZV0psYkNBOUlDUW9kR2hwY3lrdVkyaHBiR1J5Wlc0b0p5NXdjbTluY21WemN5MXNZV0psYkNjcFhISmNibHh5WEc1Y2RHMXBiaUE5SUNRb1ltRnlLUzVrWVhSaEtDZHRhVzRuS1Z4eVhHNWNkRzFoZUNBOUlDUW9ZbUZ5S1M1a1lYUmhLQ2R0WVhnbktWeHlYRzVjZEdOaElEMGdKQ2hpWVhJcExtUmhkR0VvSjJOaEp5bGNjbHh1WEhSallpQTlJQ1FvWW1GeUtTNWtZWFJoS0NkallpY3BYSEpjYmx4MGJtOTNJRDBnVFdGMGFDNWpiR0Z0Y0Nna0tHSmhjaWt1WkdGMFlTZ25ibTkzSnlrc0lHMXBiaXdnYldGNEtWeHlYRzVjZEhKbGRtVnljMlZrSUQwZ1FtOXZiR1ZoYmlna0tHSmhjaWt1WkdGMFlTZ25jbVYyWlhKelpXUW5LU0EvSUdaaGJITmxLVnh5WEc1Y2NseHVYSFJ3WlhKalpXNTBJRDBnS0c1dmR5QXRJRzFwYmlrZ0x5QW9iV0Y0SUMwZ2JXbHVLU0FxSURFd01GeHlYRzVjZEhCbGNtTmxiblFnUFNBeE1EQWdMU0J3WlhKalpXNTBJR2xtSUhKbGRtVnljMlZrWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFFrS0dKaGNpa3VZM056S0NkM2FXUjBhQ2NzSUhCbGNtTmxiblFnS3lBbkpTY3BYSEpjYmx4MEpDaGlZWElwTG1OemN5Z25ZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpY3NJRTFoZEdndWJHVnljRU52Ykc5eWN5aHdaWEpqWlc1MElDOGdNVEF3TENCallTd2dZMklwS1NCcFppQmpZVDhnWVc1a0lHTmlQMXh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkQ1FvYkdGaVpXd3BMblJsZUhRb2JtOTNJQ3NnSnlBdklDY2dLeUJ0WVhncFhISmNibHh5WEc0a0lDMCtJRnh5WEc1Y2RDUW9KeTV3Y205bmNtVnpjeWNwTG1WaFkyZ2dMVDVjY2x4dVhIUmNkSFJvYVhNdWRYQmtZWFJsSUc5eVBTQjFjR1JoZEdWUWNtOW5jbVZ6YzF4eVhHNWNjbHh1WEhKY2JseHlYRzV5Wld4TmIzVnpaVU52YjNKa2N5QTlJR0JtZFc1amRHbHZiaUFvWlhabGJuUXBlMXh5WEc0Z0lDQWdkbUZ5SUhSdmRHRnNUMlptYzJWMFdDQTlJREE3WEhKY2JpQWdJQ0IyWVhJZ2RHOTBZV3hQWm1aelpYUlpJRDBnTUR0Y2NseHVJQ0FnSUhaaGNpQmpZVzUyWVhOWUlEMGdNRHRjY2x4dUlDQWdJSFpoY2lCallXNTJZWE5aSUQwZ01EdGNjbHh1SUNBZ0lIWmhjaUJqZFhKeVpXNTBSV3hsYldWdWRDQTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdaRzk3WEhKY2JpQWdJQ0FnSUNBZ2RHOTBZV3hQWm1aelpYUllJQ3M5SUdOMWNuSmxiblJGYkdWdFpXNTBMbTltWm5ObGRFeGxablFnTFNCamRYSnlaVzUwUld4bGJXVnVkQzV6WTNKdmJHeE1aV1owTzF4eVhHNGdJQ0FnSUNBZ0lIUnZkR0ZzVDJabWMyVjBXU0FyUFNCamRYSnlaVzUwUld4bGJXVnVkQzV2Wm1aelpYUlViM0FnTFNCamRYSnlaVzUwUld4bGJXVnVkQzV6WTNKdmJHeFViM0E3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0IzYUdsc1pTaGpkWEp5Wlc1MFJXeGxiV1Z1ZENBOUlHTjFjbkpsYm5SRmJHVnRaVzUwTG05bVpuTmxkRkJoY21WdWRDbGNjbHh1WEhKY2JpQWdJQ0JqWVc1MllYTllJRDBnWlhabGJuUXVjR0ZuWlZnZ0xTQjBiM1JoYkU5bVpuTmxkRmc3WEhKY2JpQWdJQ0JqWVc1MllYTlpJRDBnWlhabGJuUXVjR0ZuWlZrZ0xTQjBiM1JoYkU5bVpuTmxkRms3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUh0NE9tTmhiblpoYzFnc0lIazZZMkZ1ZG1GeldYMWNjbHh1ZldCY2NseHVYSEpjYmtoVVRVeERZVzUyWVhORmJHVnRaVzUwTG5CeWIzUnZkSGx3WlM1eVpXeE5iM1Z6WlVOdmIzSmtjeUE5SUhKbGJFMXZkWE5sUTI5dmNtUnpPMXh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmlndFBseHlYRzVjY2x4dVhIUnZiR1JUYUc5M0lEMGdKQzVtYmk1emFHOTNYSEpjYmx4eVhHNWNkQ01qSTF4eVhHNWNjbHh1WEhKY2JseDBKQzVtYmk1emFHOTNJRDBnS0hOd1pXVmtMQ0J2YkdSRFlXeHNZbUZqYXlrZ0xUNWNjbHh1WEhKY2JseDBYSFJqYjI1emIyeGxMbXh2WnlnbmMyaHZkeWNzSUhSb2FYTXBYSEpjYmx4eVhHNWNkRngwYm1WM1EyRnNiR0poWTJzZ1BTQXRQbHh5WEc1Y2NseHVYSFJjZEZ4MGIyeGtRMkZzYkdKaFkyc3VZWEJ3Ykhrb2RHaHBjeWtnYVdZZ0pDNXBjMFoxYm1OMGFXOXVLRzlzWkVOaGJHeGlZV05yS1Z4eVhHNWNkRngwWEhRa0tIUm9hWE1wTG5SeWFXZG5aWElvSjJGbWRHVnlVMmh2ZHljcFhISmNibHh5WEc1Y2RGeDBKQ2gwYUdsektTNTBjbWxuWjJWeUtDZGlaV1p2Y21WVGFHOTNKeWxjY2x4dVhISmNibHgwWEhSa1pXVndJRDBnSkNoMGFHbHpLUzVtYVc1a0tDZGJaR0YwWVMxa1pXVndjMmh2ZDEwbktWeHlYRzVjY2x4dVhIUmNkR2xtSUdSbFpYQXViR1Z1WjNSb1hISmNibHgwWEhSY2RHUmxaWEF1YzJodmR5Z3BYSEpjYmx4eVhHNWNkRngwYjJ4a1UyaHZkeTVoY0hCc2VTaDBhR2x6TENCYmMzQmxaV1FzSUc1bGQwTmhiR3hpWVdOclhTbGNjbHh1WEhRakl5TmNjbHh1S1NncFhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVUzUnlhVzVuTG5CeWIzUnZkSGx3WlM1bGMyTmhjR1VnYjNJOUlDMCtYSEpjYmx4MGRHaHBjeTV5WlhCc1lXTmxLQzhvV3k0cUt6OWVQU0U2Skh0OUtDbDhYRnhiWEZ4ZFhGd3ZYRnhjWEYwcEwyY3NJRndpWEZ4Y1hDUXhYQ0lwWEhKY2JseHlYRzVjY2x4dVhISmNibE4wY21sdVp5NXdjbTkwYjNSNWNHVXVjbVZ3YkdGalpVRnNiQ0J2Y2owZ0tITmxZWEpqYUN3Z2NtVndiR0ZqWlNrZ0xUNWNjbHh1WEhSMGFHbHpMbkpsY0d4aFkyVW9ibVYzSUZKbFowVjRjQ2h6WldGeVkyZ3VaWE5qWVhCbEtDa3NJQ2RuYVNjcExDQnlaWEJzWVdObEtTSmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUwzTnZkWEpqWlM4aWZRPT0iLCJcclxuXHJcbmNsaWNrZWQgPSAtPlxyXG5cdCQoJy5hdmF0YXInKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcclxuXHQkKCcjYXZhdGFyJykudmFsKCQodGhpcykuZGF0YSgnYXZhdGFyJykpXHJcblx0JCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJylcclxuXHJcblxyXG4kIC0+XHJcblx0JCgnLmF2YXRhcicpLmNsaWNrKGNsaWNrZWQpLmZpcnN0KCkudHJpZ2dlcignY2xpY2snKSIsImNvbmZpZyA9XHJcblx0Zm9udFNpemU6IDMwXHJcblx0YmFyRm9udFNpemU6IDIwXHJcblx0bmFtZUZvbnRTaXplOiAzMFxyXG5cdG1hcmdpbjogNVxyXG5cdGludGVydmFsOiAxMDAwIC8gNjBcclxuXHJcblxyXG5cclxuY2xhc3MgQ2hhcmFjdGVyXHJcblxyXG5cclxuXHRjb25zdHJ1Y3RvcjogKHRlYW0sIGRhdGEpIC0+XHJcblxyXG5cdFx0aW1hZ2UgPSBuZXcgSW1hZ2UoKVxyXG5cdFx0aW1hZ2Uuc3JjID0gZGF0YS5hdmF0YXJcclxuXHRcdGltYWdlLm9ubG9hZCA9ID0+XHJcblx0XHRcdEBhdmF0YXIgPSBpbWFnZVxyXG5cclxuXHJcblxyXG5cdFx0QHRlYW0gPSB0ZWFtXHJcblx0XHRAbmFtZSA9IGRhdGEubmFtZVxyXG5cdFx0QGlkID0gZGF0YS5pZFxyXG5cdFx0QGxldmVsID0gZGF0YS5sZXZlbFxyXG5cdFx0QGhlYWx0aCA9IGRhdGEuaGVhbHRoXHJcblx0XHRAbWF4SGVhbHRoID0gZGF0YS5tYXhIZWFsdGhcclxuXHJcblxyXG5cdGRyYXc6IChjb250ZXh0LCBzaXplKSAtPlxyXG5cdFx0aWYgQHRlYW0gPT0gJ3JlZCdcclxuXHRcdFx0Y29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDIxNywgODMsIDc5LCAxKSdcclxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgyMTcsIDgzLCA3OSwgMC40KSdcclxuXHRcdGVsc2VcclxuXHRcdFx0Y29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDUxLCAxMjIsIDE4MywgMSknXHJcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoNTEsIDEyMiwgMTgzLCAwLjQpJ1xyXG5cclxuXHRcdGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgc2l6ZSwgc2l6ZSlcclxuXHRcdGNvbnRleHQuc3Ryb2tlUmVjdCgwLCAwLCBzaXplLCBzaXplKVxyXG5cclxuXHRcdGlmIEBhdmF0YXI/XHJcblx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKEBhdmF0YXIsIGNvbmZpZy5tYXJnaW4sIGNvbmZpZy5tYXJnaW4sIHNpemUgLSBjb25maWcubWFyZ2luICogMiwgc2l6ZSAtIGNvbmZpZy5tYXJnaW4gKiAyKVxyXG5cclxuXHRcdHRleHQgPSBAbmFtZSArICcgKCcgKyBAbGV2ZWwgKyAnKSdcclxuXHJcblx0XHRjb250ZXh0LmZvbnQgPSBjb25maWcubmFtZUZvbnRTaXplICsgJ3B4IFJvYm90bydcclxuXHRcdGNvbnRleHQubGluZVdpZHRoID0gMVxyXG5cdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnI0ZGRkZGRidcclxuXHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnIzAwMDAwMCdcclxuXHRcdG1lYXN1cmUgPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpXHJcblx0XHRjb250ZXh0LmZpbGxUZXh0KHRleHQsIChzaXplIC0gbWVhc3VyZS53aWR0aCkgLyAyLCBjb25maWcubmFtZUZvbnRTaXplKVxyXG5cdFx0Y29udGV4dC5zdHJva2VUZXh0KHRleHQsIChzaXplIC0gbWVhc3VyZS53aWR0aCkgLyAyLCBjb25maWcubmFtZUZvbnRTaXplKVxyXG5cclxuXHJcblx0XHRjb250ZXh0LmZvbnQgPSBjb25maWcuYmFyRm9udFNpemUgKyAncHggUm9ib3RvJ1xyXG5cdFx0Y29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNyknXHJcblx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNCknXHJcblx0XHRjb250ZXh0LmZpbGxSZWN0KGNvbmZpZy5tYXJnaW4sIHNpemUgLSBjb25maWcuYmFyRm9udFNpemUgLSBjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLm1hcmdpbiAqIDIsIGNvbmZpZy5iYXJGb250U2l6ZSlcclxuXHRcdGNvbnRleHQuc3Ryb2tlUmVjdChjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC0gY29uZmlnLm1hcmdpbiwgc2l6ZSAtIGNvbmZpZy5tYXJnaW4gKiAyLCBjb25maWcuYmFyRm9udFNpemUpXHJcblxyXG5cdFx0Y29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgyMTcsIDgzLCA3OSwgMSknXHJcblx0XHRjb250ZXh0LmZpbGxSZWN0KGNvbmZpZy5tYXJnaW4sIHNpemUgLSBjb25maWcuYmFyRm9udFNpemUgLSBjb25maWcubWFyZ2luLCAoc2l6ZSAtIGNvbmZpZy5tYXJnaW4gKiAyKSAqIChAaGVhbHRoIC8gQG1heEhlYWx0aCksIGNvbmZpZy5iYXJGb250U2l6ZSlcclxuXHJcblx0XHR0ZXh0ID0gTWF0aC5yb3VuZChAaGVhbHRoKSArICcgLyAnICsgQG1heEhlYWx0aFxyXG5cdFx0bWVhc3VyZSA9IGNvbnRleHQubWVhc3VyZVRleHQodGV4dClcclxuXHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyMwMDAwMDAnXHJcblx0XHRjb250ZXh0LmZpbGxUZXh0KHRleHQsIChzaXplIC0gbWVhc3VyZS53aWR0aCkgLyAyLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC8gMilcclxuXHJcblxyXG5cclxuXHJcblxyXG5jbGFzcyBCYXR0bGVcclxuXHJcblx0c3BlZWQ6IFxyXG5cdFx0dmlldzogMy4wXHJcblx0XHRpbmZvOiAzLjBcclxuXHRcdG5leHQ6IDMuMFxyXG5cclxuXHJcblxyXG5cclxuXHRjb25zdHJ1Y3RvcjogKGVsZW1lbnQpIC0+XHJcblxyXG5cdFx0QGNhbnZhcyA9ICQoZWxlbWVudCkuY2hpbGRyZW4oJ2NhbnZhcycpWzBdXHJcblx0XHRAY29udGV4dCA9IEBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxyXG5cclxuXHRcdEBiYXR0bGVMb2cgPSAkLnBhcnNlSlNPTigkKGVsZW1lbnQpLmNoaWxkcmVuKCcuYmF0dGxlLWxvZycpLmZpcnN0KCkudGV4dCgpKVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cdGxvYWQ6IC0+XHJcblxyXG5cdFx0QGluZGV4ID0gMFxyXG5cdFx0QGNoYXJhY3RlcnMgPSBbXVxyXG5cdFx0QHN0YXRlID0gJ3ZpZXcnXHJcblx0XHRAb2Zmc2V0ID0gMFxyXG5cdFx0QHBhdXNlID0gZmFsc2VcclxuXHJcblx0XHQkKEBjYW52YXMpLmNsaWNrKChldmVudCkgPT4gQGNsaWNrKGV2ZW50KSlcclxuXHRcdCQoZG9jdW1lbnQpLmtleWRvd24oKGV2ZW50KSA9PiBAa2V5KGV2ZW50KSlcclxuXHJcblx0XHRmb3IgZGF0YSBpbiBAYmF0dGxlTG9nWyd0ZWFtcyddWydyZWQnXVxyXG5cdFx0XHRjaGFyYWN0ZXIgPSBuZXcgQ2hhcmFjdGVyKCdyZWQnLCBkYXRhKVxyXG5cdFx0XHRAY2hhcmFjdGVyc1tjaGFyYWN0ZXIuaWRdID0gY2hhcmFjdGVyXHJcblxyXG5cclxuXHRcdGZvciBkYXRhIGluIEBiYXR0bGVMb2dbJ3RlYW1zJ11bJ2JsdWUnXVxyXG5cdFx0XHRjaGFyYWN0ZXIgPSBuZXcgQ2hhcmFjdGVyKCdibHVlJywgZGF0YSlcclxuXHRcdFx0QGNoYXJhY3RlcnNbY2hhcmFjdGVyLmlkXSA9IGNoYXJhY3RlclxyXG5cclxuXHRcdEBjb250ZXh0LmZvbnQgPSBjb25maWcuZm9udFNpemUgKyAncHggUm9ib3RvJ1xyXG5cclxuXHJcblx0XHRAYWN0aW9uID0gQGJhdHRsZUxvZ1snbG9nJ11bQGluZGV4XVxyXG5cdFx0QGF0dGFja2VyID0gQGNoYXJhY3RlcnNbQGFjdGlvbi5hdHRhY2tlcl1cclxuXHRcdEBkZWZlbmRlciA9IEBjaGFyYWN0ZXJzW0BhY3Rpb24uZGVmZW5kZXJdXHJcblxyXG5cdFx0dHJ1ZVxyXG5cclxuXHJcblxyXG5cclxuXHRkcmF3Q2hhcmFjdGVyczogKGF0dGFja2VyLCBkZWZlbmRlcikgLT5cclxuXHJcblx0XHRzaXplID0gQGNhbnZhcy5oZWlnaHQgKiAwLjZcclxuXHRcdGhhbGZXaWR0aCA9IEBjYW52YXMud2lkdGggLyAyXHJcblxyXG5cdFx0QGNvbnRleHQuc2F2ZSgpXHJcblx0XHRAY29udGV4dC50cmFuc2xhdGUoKGhhbGZXaWR0aCAtIHNpemUpIC8gMiwgKEBjYW52YXMuaGVpZ2h0IC0gc2l6ZSkgLyAyKVxyXG5cdFx0YXR0YWNrZXIuZHJhdyhAY29udGV4dCwgc2l6ZSlcclxuXHRcdEBjb250ZXh0LnJlc3RvcmUoKVxyXG5cclxuXHRcdEBjb250ZXh0LnNhdmUoKVxyXG5cdFx0QGNvbnRleHQudHJhbnNsYXRlKChoYWxmV2lkdGggLSBzaXplKSAvIDIgKyBoYWxmV2lkdGgsIChAY2FudmFzLmhlaWdodCAtIHNpemUpIC8gMilcclxuXHRcdGRlZmVuZGVyLmRyYXcoQGNvbnRleHQsIHNpemUpXHJcblx0XHRAY29udGV4dC5yZXN0b3JlKClcclxuXHJcblxyXG5cdGRyYXdJbmZvOiAodGV4dCkgLT5cclxuXHRcdGhhbGZXaWR0aCA9IEBjYW52YXMud2lkdGggLyAyXHJcblx0XHRoYWxmSGVpZ2h0ID0gQGNhbnZhcy5oZWlnaHQgLyAyXHJcblx0XHRibG9ja1NpemUgPSBAY2FudmFzLmhlaWdodCAqIDAuNlxyXG5cclxuXHRcdHN0YXJSYWRpdXMgPSA1MFxyXG5cdFx0c3RhcldpZHRoID0gc3RhclJhZGl1cyAqIDJcclxuXHRcdHN0YXJYID0gaGFsZldpZHRoICsgKGJsb2NrU2l6ZSArIHN0YXJSYWRpdXMpIC8gMlxyXG5cdFx0c3RhclkgPSBoYWxmSGVpZ2h0XHJcblx0XHRzdGFyVyA9IChibG9ja1NpemUgKiAwLjcpIC8gc3RhcldpZHRoXHJcblx0XHRzdGFySCA9IDEuMlxyXG5cdFx0c3RhclBpa2VzID0gMTNcclxuXHJcblx0XHRAY29udGV4dC5mb250ID0gY29uZmlnLmZvbnRTaXplICsgJ3B4IFJvYm90bydcclxuXHRcdG1lYXN1cmUgPSBAY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KVxyXG5cdFx0dGV4dFggPSBzdGFyWCAtIG1lYXN1cmUud2lkdGggLyAyXHJcblx0XHR0ZXh0WSA9IGhhbGZIZWlnaHRcclxuXHJcblxyXG5cclxuXHRcdEBjb250ZXh0LnNhdmUoKVxyXG5cdFx0QGNvbnRleHQubGluZVdpZHRoID0gMlxyXG5cdFx0QGNvbnRleHQudHJhbnNsYXRlKHN0YXJYLCBzdGFyWSlcclxuXHRcdEBjb250ZXh0LnNjYWxlKHN0YXJXLCBzdGFySClcclxuXHRcdEBjb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJ1xyXG5cdFx0QGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnIzAwMDAwMCdcclxuXHRcdEBkcmF3U3RhcihzdGFyUGlrZXMsIHN0YXJSYWRpdXMgKiAwLjYsIHN0YXJSYWRpdXMpXHJcblx0XHRAY29udGV4dC5yZXN0b3JlKClcclxuXHJcblx0XHRAY29udGV4dC5zYXZlKClcclxuXHRcdEBjb250ZXh0LnRyYW5zbGF0ZSh0ZXh0WCwgdGV4dFkpXHJcblx0XHRAY29udGV4dC5maWxsU3R5bGUgPSAnIzAwMDAwMCdcclxuXHRcdEBjb250ZXh0LmZpbGxUZXh0KHRleHQsIDAsIDApXHJcblx0XHRAY29udGV4dC5yZXN0b3JlKClcclxuXHJcblxyXG5cdGRyYXdTdGFyOiAocGlrZXMsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cykgLT5cclxuXHRcdHJvdCA9IE1hdGguUEkgLyAyICogM1xyXG5cdFx0c3RlcCA9IE1hdGguUEkgLyBwaWtlc1xyXG5cclxuXHRcdEBjb250ZXh0LmJlZ2luUGF0aCgpXHJcblx0XHR4ID0gTWF0aC5jb3Mocm90KSAqIG91dGVyUmFkaXVzXHJcblx0XHR5ID0gTWF0aC5zaW4ocm90KSAqIG91dGVyUmFkaXVzXHJcblx0XHRAY29udGV4dC5tb3ZlVG8oeCwgeSlcclxuXHRcdHJvdCArPSBzdGVwXHJcblxyXG5cdFx0Zm9yIGkgaW4gWzEuLnBpa2VzXVxyXG5cdFx0XHR4ID0gTWF0aC5jb3Mocm90KSAqIGlubmVyUmFkaXVzXHJcblx0XHRcdHkgPSBNYXRoLnNpbihyb3QpICogaW5uZXJSYWRpdXNcclxuXHRcdFx0QGNvbnRleHQubGluZVRvKHgsIHkpXHJcblx0XHRcdHJvdCArPSBzdGVwXHJcblxyXG5cdFx0XHR4ID0gTWF0aC5jb3Mocm90KSAqIG91dGVyUmFkaXVzXHJcblx0XHRcdHkgPSBNYXRoLnNpbihyb3QpICogb3V0ZXJSYWRpdXNcclxuXHRcdFx0QGNvbnRleHQubGluZVRvKHgsIHkpXHJcblx0XHRcdHJvdCArPSBzdGVwXHJcblxyXG5cdFx0QGNvbnRleHQubGluZVRvKDAsIC1vdXRlclJhZGl1cylcclxuXHRcdEBjb250ZXh0LmZpbGwoKVxyXG5cdFx0QGNvbnRleHQuc3Ryb2tlKClcclxuXHRcdEBjb250ZXh0LmNsb3NlUGF0aCgpXHJcblx0XHRcclxuXHJcblx0Z2V0RW5kVGV4dDogLT5cclxuXHJcblx0XHRpZiBAYmF0dGxlTG9nWyd3aW4nXVxyXG5cclxuXHRcdFx0aTE4bi5iYXR0bGUud2luXHJcblxyXG5cdFx0ZWxzZVxyXG5cclxuXHRcdFx0aTE4bi5iYXR0bGUubG9zZVxyXG5cclxuXHJcblx0ZHJhdzogKGRlbHRhKS0+XHJcblxyXG5cdFx0QGNvbnRleHQuZmlsbFN0eWxlID0gJyNGRkZGRkYnXHJcblx0XHRAY29udGV4dC5jbGVhclJlY3QoMCwgMCwgQGNhbnZhcy53aWR0aCwgQGNhbnZhcy5oZWlnaHQpXHJcblx0XHRAb2Zmc2V0ICs9IEBzcGVlZFtAc3RhdGVdICogZGVsdGFcclxuXHRcdGFuaW1hdGUgPSB0cnVlXHJcblxyXG5cdFx0aWYgQHN0YXRlID09ICd2aWV3JyBhbmQgYW5pbWF0ZVxyXG5cdFx0XHRhY3Rpb24gPSBAYmF0dGxlTG9nWydsb2cnXVtAaW5kZXhdXHJcblx0XHRcdGF0dGFja2VyID0gQGNoYXJhY3RlcnNbYWN0aW9uLmF0dGFja2VyXVxyXG5cdFx0XHRkZWZlbmRlciA9IEBjaGFyYWN0ZXJzW2FjdGlvbi5kZWZlbmRlcl1cclxuXHJcblx0XHRcdGlmKGFjdGlvbi50eXBlID09ICdoaXQnKVxyXG5cdFx0XHRcdGRlZmVuZGVyLmhlYWx0aCA9IGFjdGlvbi5oZWFsdGhcclxuXHJcblx0XHRcdEBkcmF3Q2hhcmFjdGVycyhhdHRhY2tlciwgZGVmZW5kZXIpXHJcblxyXG5cdFx0XHRpZihAb2Zmc2V0ID4gMS4wIGFuZCBub3QgQHBhdXNlKVxyXG5cdFx0XHRcdEBvZmZzZXQgPSAwLjBcclxuXHRcdFx0XHRkZWZlbmRlci5zdGFydEhlYWx0aCA9IGRlZmVuZGVyLmhlYWx0aFxyXG5cclxuXHRcdFx0XHRpZiBhY3Rpb24udHlwZSA9PSAnaGl0J1xyXG5cdFx0XHRcdFx0ZGVmZW5kZXIuZW5kSGVhbHRoID0gTWF0aC5tYXgoZGVmZW5kZXIuaGVhbHRoIC0gYWN0aW9uLmRhbWFnZSwgMClcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRkZWZlbmRlci5lbmRIZWFsdGggPSBkZWZlbmRlci5oZWFsdGhcclxuXHJcblx0XHRcdFx0QHN0YXRlID0gJ2luZm8nXHJcblxyXG5cdFx0XHRhbmltYXRlID0gZmFsc2VcclxuXHJcblx0XHRpZiBAc3RhdGUgPT0gJ2luZm8nIGFuZCBhbmltYXRlXHJcblx0XHRcdGFjdGlvbiA9IEBiYXR0bGVMb2dbJ2xvZyddW0BpbmRleF1cclxuXHRcdFx0YXR0YWNrZXIgPSBAY2hhcmFjdGVyc1thY3Rpb24uYXR0YWNrZXJdXHJcblx0XHRcdGRlZmVuZGVyID0gQGNoYXJhY3RlcnNbYWN0aW9uLmRlZmVuZGVyXVxyXG5cclxuXHRcdFx0QGRyYXdDaGFyYWN0ZXJzKGF0dGFja2VyLCBkZWZlbmRlcilcclxuXHJcblx0XHRcdGlmIEBvZmZzZXQgPD0gMS4wXHJcblx0XHRcdFx0QGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBAb2Zmc2V0XHJcblx0XHRcdFx0ZGVmZW5kZXIuaGVhbHRoID0gZGVmZW5kZXIuc3RhcnRIZWFsdGhcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGlmIEBvZmZzZXQgPD0gMi4wXHJcblx0XHRcdFx0XHRAY29udGV4dC5nbG9iYWxBbHBoYSA9IDEuMFxyXG5cclxuXHRcdFx0XHRcdGkgPSBNYXRoLmNsYW1wKEBvZmZzZXQgLSAxLjAsIDAsIDEpXHJcblx0XHRcdFx0XHRkZWZlbmRlci5oZWFsdGggPSBNYXRoLmxlcnAoaSwgZGVmZW5kZXIuZW5kSGVhbHRoLCBkZWZlbmRlci5zdGFydEhlYWx0aClcclxuXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0ZGVmZW5kZXIuaGVhbHRoID0gZGVmZW5kZXIuZW5kSGVhbHRoXHJcblx0XHRcdFx0XHRAY29udGV4dC5nbG9iYWxBbHBoYSA9IE1hdGgubWF4KDMuMCAtIEBvZmZzZXQsIDApXHJcblxyXG5cdFx0XHRpZihAb2Zmc2V0ID4gNC4wKVxyXG5cdFx0XHRcdEBvZmZzZXQgPSAwLjBcclxuXHRcdFx0XHRAc3RhdGUgPSAnbmV4dCdcclxuXHJcblx0XHRcdGlmIGFjdGlvbi50eXBlID09ICdoaXQnXHJcblx0XHRcdFx0dGV4dCA9IGFjdGlvbi5kYW1hZ2VcclxuXHJcblx0XHRcdFx0aWYgYWN0aW9uLmNyaXRcclxuXHRcdFx0XHRcdHRleHQgKz0gJyEnXHJcblxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dGV4dCA9IGkxOG4uYmF0dGxlLmRvZGdlXHJcblxyXG5cclxuXHJcblx0XHRcdEBkcmF3SW5mbyh0ZXh0KVxyXG5cclxuXHJcblx0XHRcdEBjb250ZXh0Lmdsb2JhbEFscGhhID0gMS4wXHJcblx0XHRcdGFuaW1hdGUgPSBmYWxzZVxyXG5cclxuXHRcdGlmIEBzdGF0ZSA9PSAnbmV4dCcgYW5kIGFuaW1hdGVcclxuXHJcblx0XHRcdHByZXZBY3Rpb24gPSBAYmF0dGxlTG9nWydsb2cnXVtAaW5kZXhdXHJcblx0XHRcdG5leHRBY3Rpb24gPSBAYmF0dGxlTG9nWydsb2cnXVtAaW5kZXggKyAxXVxyXG5cclxuXHJcblx0XHRcdHByZXZBdHRhY2tlciA9IEBjaGFyYWN0ZXJzW3ByZXZBY3Rpb24uYXR0YWNrZXJdXHJcblx0XHRcdHByZXZEZWZlbmRlciA9IEBjaGFyYWN0ZXJzW3ByZXZBY3Rpb24uZGVmZW5kZXJdXHJcblxyXG5cclxuXHRcdFx0cG9zaXRpb24gPSAoQGNhbnZhcy5oZWlnaHQgLyAyKSAqIEBvZmZzZXRcclxuXHJcblx0XHRcdEBjb250ZXh0LnNhdmUoKVxyXG5cdFx0XHRAY29udGV4dC50cmFuc2xhdGUoMCwgLXBvc2l0aW9uKVxyXG5cdFx0XHRAZHJhd0NoYXJhY3RlcnMocHJldkF0dGFja2VyLCBwcmV2RGVmZW5kZXIpXHJcblx0XHRcdEBjb250ZXh0LnJlc3RvcmUoKVxyXG5cclxuXHJcblx0XHRcdEBjb250ZXh0LnNhdmUoKVxyXG5cdFx0XHRAY29udGV4dC50cmFuc2xhdGUoMCwgQGNhbnZhcy5oZWlnaHQgLSBwb3NpdGlvbilcclxuXHJcblx0XHRcdGlmIG5leHRBY3Rpb24/XHJcblx0XHRcdFx0bmV4dEF0dGFja2VyID0gQGNoYXJhY3RlcnNbbmV4dEFjdGlvbi5hdHRhY2tlcl1cclxuXHRcdFx0XHRuZXh0RGVmZW5kZXIgPSBAY2hhcmFjdGVyc1tuZXh0QWN0aW9uLmRlZmVuZGVyXVxyXG5cclxuXHRcdFx0XHRpZihuZXh0QWN0aW9uLnR5cGUgPT0gJ2hpdCcpXHJcblx0XHRcdFx0XHRuZXh0RGVmZW5kZXIuaGVhbHRoID0gbmV4dEFjdGlvbi5oZWFsdGhcclxuXHJcblx0XHRcdFx0QGRyYXdDaGFyYWN0ZXJzKG5leHRBdHRhY2tlciwgbmV4dERlZmVuZGVyKVxyXG5cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRleHQgPSBAZ2V0RW5kVGV4dCgpXHJcblx0XHRcdFx0QGNvbnRleHQuZmlsbFN0eWxlID0gJyMwMDAwMDAnXHJcblx0XHRcdFx0bWVhc3VyZSA9IEBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpXHJcblx0XHRcdFx0QGNvbnRleHQuZmlsbFRleHQodGV4dCwgKEBjYW52YXMud2lkdGggLSBtZWFzdXJlLndpZHRoKSAvIDIsIChAY2FudmFzLmhlaWdodCAtIDE1KSAvIDIpXHJcblxyXG5cdFx0XHRAY29udGV4dC5yZXN0b3JlKClcclxuXHJcblx0XHRcdGlmIEBvZmZzZXQgPiAyLjBcclxuXHRcdFx0XHRAaW5kZXgrK1xyXG5cdFx0XHRcdEBvZmZzZXQgPSAwLjBcclxuXHRcdFx0XHRpZiBuZXh0QWN0aW9uP1xyXG5cdFx0XHRcdFx0QHN0YXRlID0gJ3ZpZXcnXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0QHN0YXRlID0gJ2VuZCdcclxuXHJcblx0XHRcdGFuaW1hdGUgPSBmYWxzZVxyXG5cclxuXHJcblx0XHRpZiBAc3RhdGUgPT0gJ2VuZCcgYW5kIGFuaW1hdGVcclxuXHRcdFx0dGV4dCA9IEBnZXRFbmRUZXh0KClcclxuXHRcdFx0QG9mZnNldCA9IDAuMFxyXG5cdFx0XHRAY29udGV4dC5maWxsU3R5bGUgPSAnIzAwMDAwMCdcclxuXHRcdFx0bWVhc3VyZSA9IEBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpXHJcblx0XHRcdEBjb250ZXh0LmZpbGxUZXh0KHRleHQsIChAY2FudmFzLndpZHRoIC0gbWVhc3VyZS53aWR0aCkgLyAyLCAoQGNhbnZhcy5oZWlnaHQgLSAxNSkgLyAyKVxyXG5cdFx0XHRhbmltYXRlID0gZmFsc2VcclxuXHJcblxyXG5cclxuXHJcblx0XHR3aWR0aCA9IEBjYW52YXMud2lkdGggLSA0XHJcblx0XHRoZWlnaHQgPSBAY2FudmFzLmhlaWdodCAtIDJcclxuXHJcblx0XHRAY29udGV4dC5zYXZlKClcclxuXHRcdEBjb250ZXh0LnN0cm9rZVN0eWxlID0gJ3JnYmEoMCwgMCwgMCwgMC43KSdcclxuXHRcdEBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNCknXHJcblx0XHRAY29udGV4dC5maWxsUmVjdCgyLCBoZWlnaHQgLSAyMCwgd2lkdGgsIDIwKVxyXG5cdFx0QGNvbnRleHQuc3Ryb2tlUmVjdCgyLCBoZWlnaHQgLSAyMCwgd2lkdGgsIDIwKVxyXG5cclxuXHRcdEBjb250ZXh0LmZpbGxTdHlsZSA9ICcjNUJDMERFJ1xyXG5cdFx0QGNvbnRleHQuZmlsbFJlY3QoMiwgaGVpZ2h0IC0gMjAsIHdpZHRoICogKE1hdGgubWluKEBpbmRleCAvIChAYmF0dGxlTG9nWydsb2cnXS5sZW5ndGggLSAxKSwgMSkpLCAyMClcclxuXHRcdEBjb250ZXh0LmxpbmVXaWR0aCA9IDVcclxuXHJcblx0XHRmb3IgbWFyayBpbiBAYmF0dGxlTG9nWydtYXJrcyddXHJcblxyXG5cdFx0XHRpZiBtYXJrLnR5cGUgPT0gJ2ZhaW50ZWQnXHJcblx0XHRcdFx0QGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnI0Q5NTM0RidcclxuXHJcblx0XHRcdGF0ID0gKG1hcmsuYXQgLyAoQGJhdHRsZUxvZ1snbG9nJ10ubGVuZ3RoIC0gMSkpICogd2lkdGhcclxuXHJcblx0XHRcdEBjb250ZXh0LmJlZ2luUGF0aCgpXHJcblx0XHRcdEBjb250ZXh0Lm1vdmVUbyhhdCAtIEBjb250ZXh0LmxpbmVXaWR0aCAvIDIgKyAyLCBoZWlnaHQgLSAyMClcclxuXHRcdFx0QGNvbnRleHQubGluZVRvKGF0IC0gQGNvbnRleHQubGluZVdpZHRoIC8gMiArIDIsIGhlaWdodClcclxuXHRcdFx0QGNvbnRleHQuc3Ryb2tlKClcclxuXHJcblx0XHRAY29udGV4dC5yZXN0b3JlKClcclxuXHJcblxyXG5cclxuXHJcblx0Y2xpY2s6IChldmVudCkgLT5cclxuXHRcdGNvb3JkcyA9IEBjYW52YXMucmVsTW91c2VDb29yZHMoZXZlbnQpXHJcblx0XHR4ID0gY29vcmRzLnhcclxuXHRcdHkgPSBjb29yZHMueVxyXG5cclxuXHRcdGwgPSAyXHJcblx0XHRyID0gbCArIEBjYW52YXMud2lkdGggLSA0XHJcblx0XHRiID0gQGNhbnZhcy5oZWlnaHQgLSAyXHJcblx0XHR0ID0gYiAtIDIwXHJcblxyXG5cclxuXHRcdGlmIHggPj0gbCBhbmQgeCA8PSByIGFuZCB5ID49IHQgYW5kIHkgPD0gYlxyXG5cdFx0XHRAaW5kZXggPSBNYXRoLnJvdW5kKCh4IC0gbCkgLyAociAtIGwpICogKEBiYXR0bGVMb2dbJ2xvZyddLmxlbmd0aCAtIDEpKVxyXG5cdFx0XHRAc3RhdGUgPSAndmlldydcclxuXHRcdFx0QG9mZnNldCA9IDAuMFxyXG5cclxuXHRrZXk6IChldmVudCkgLT5cclxuXHJcblx0XHRpZiBldmVudC53aGljaCA9PSAzMlxyXG5cdFx0XHRAcGF1c2UgPSAhQHBhdXNlXHJcblxyXG5cclxuXHRcdGlmIGV2ZW50LndoaWNoID09IDM3XHJcblx0XHRcdEBpbmRleCA9IE1hdGgubWF4KEBpbmRleCAtIDEsIDApXHJcblx0XHRcdEBvZmZzZXQgPSAxLjBcclxuXHRcdFx0QHN0YXRlID0gJ3ZpZXcnXHJcblxyXG5cdFx0aWYgZXZlbnQud2hpY2ggPT0gMzlcclxuXHRcdFx0QGluZGV4ID0gTWF0aC5taW4oQGluZGV4ICsgMSwgQGJhdHRsZUxvZ1snbG9nJ10ubGVuZ3RoIC0gMSlcclxuXHRcdFx0QG9mZnNldCA9IDEuMFxyXG5cdFx0XHRAc3RhdGUgPSAndmlldydcclxuXHJcblxyXG5cdHJlcXVlc3RGcmFtZTogKHRpbWUpIC0+XHJcblxyXG5cdFx0ZGVsdGEgPSBNYXRoLm1heCh0aW1lIC0gQGxhc3RUaW1lLCAwKVxyXG5cdFx0QGxhc3RUaW1lID0gdGltZVxyXG5cdFx0QGFjY3VtdWxhdG9yICs9IGRlbHRhXHJcblxyXG5cdFx0d2hpbGUgQGFjY3VtdWxhdG9yID49IGNvbmZpZy5pbnRlcnZhbFxyXG5cclxuXHRcdFx0QGFjY3VtdWxhdG9yIC09IGNvbmZpZy5pbnRlcnZhbFxyXG5cdFx0XHRAZHJhdyhjb25maWcuaW50ZXJ2YWwgLyAxMDAwKVxyXG5cclxuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKHRpbWUpID0+IEByZXF1ZXN0RnJhbWUodGltZSkpXHJcblxyXG5cclxuXHRzdGFydDogLT5cclxuXHJcblx0XHRpZiBAbG9hZCgpXHJcblxyXG5cdFx0XHRAbGFzdFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxyXG5cdFx0XHRAYWNjdW11bGF0b3IgPSAwLjBcclxuXHRcdFx0QHJlcXVlc3RGcmFtZShAbGFzdFRpbWUpXHJcblxyXG5cclxuXHJcblxyXG4kKC0+XHJcblxyXG5cdCQoJy5iYXR0bGUnKS5iaW5kKCdzaG93JywgLT5cclxuXHJcblx0XHRiYXR0bGUgPSBuZXcgQmF0dGxlKHRoaXMpXHJcblx0XHRiYXR0bGUuc3RhcnQoKVxyXG5cdFxyXG5cdCkuZmlsdGVyKCc6dmlzaWJsZScpLnRyaWdnZXIoJ3Nob3cnKVxyXG5cclxuKSIsIlxyXG5cclxuY2xhc3MgQENoYXRcclxuXHJcblx0ZGVmYXVsdHMgPSB7XHJcblxyXG5cdFx0bWVzc2FnZVVybDogbnVsbCxcclxuXHRcdHBsYXllclVybDogbnVsbCxcclxuXHRcdGVtb3RpY29uVXJsOiBudWxsLFxyXG5cdFx0aW50ZXJ2YWw6IDIsXHJcblx0XHRoaXN0b3J5OiAwLFxyXG5cdFx0bWluTGVuZ3RoOiAxLFxyXG5cdFx0bWF4TGVuZ3RoOiA1MTIsXHJcblx0XHRjb29sZG93bjogNjAsXHJcblx0XHRqb2luOiAxMjAsXHJcblxyXG5cdFx0YWxsb3dTZW5kOiB0cnVlLFxyXG5cdFx0YWxsb3dSZWNlaXZlOiB0cnVlLFxyXG5cdFx0c2VuZEV4dHJhOiB7fSxcclxuXHRcdHJlY2VpdmVFeHRyYToge30sXHJcblx0XHRzZW5kTWV0aG9kOiAnUE9TVCcsXHJcblx0XHRyZWNlaXZlTWV0aG9kOiAnR0VUJyxcclxuXHR9XHJcblxyXG5cdGNvbW1hbmRzID0ge1xyXG5cclxuXHRcdCdjbGVhcic6ICdjbGVhck91dHB1dCcsXHJcblx0fVxyXG5cclxuXHJcblxyXG5cclxuXHRjb25zdHJ1Y3RvcjogKGVsZW1lbnQsIG9wdGlvbnMpIC0+XHJcblxyXG5cdFx0I2FsZXJ0KCd3ZWxjb21lJylcclxuXHJcblx0XHRvcHQgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIG9wdGlvbnMpXHJcblxyXG5cdFx0QG1lc3NhZ2VVcmwgPSBvcHQubWVzc2FnZVVybFxyXG5cdFx0QHBsYXllclVybCA9IG9wdC5wbGF5ZXJVcmxcclxuXHRcdEBlbW90aWNvbnMgPSBuZXcgRW1vdGljb25zKClcclxuXHJcblxyXG5cdFx0QGFsbG93U2VuZCA9IG9wdC5hbGxvd1NlbmRcclxuXHRcdEBhbGxvd1JlY2VpdmUgPSBvcHQuYWxsb3dSZWNlaXZlXHJcblx0XHRAcmVjZWl2ZUV4dHJhID0gb3B0LnJlY2VpdmVFeHRyYVxyXG5cdFx0QHNlbmRFeHRyYSA9IG9wdC5zZW5kRXh0cmFcclxuXHRcdEByZWNlaXZlTWV0aG9kID0gb3B0LnJlY2VpdmVNZXRob2RcclxuXHRcdEBzZW5kTWV0aG9kID0gb3B0LnNlbmRNZXRob2RcclxuXHJcblxyXG5cclxuXHRcdEBpbnB1dCA9ICQoZWxlbWVudCkuZmluZCgnLmlucHV0JylcclxuXHRcdEBvdXRwdXQgPSAkKGVsZW1lbnQpLmZpbmQoJy5vdXRwdXQnKVxyXG5cdFx0QHNlbmRCdG4gPSAkKGVsZW1lbnQpLmZpbmQoJy5zZW5kJylcclxuXHRcdEBjbGVhckJ0biA9ICQoZWxlbWVudCkuZmluZCgnLmNsZWFyJylcclxuXHRcdEBlbW90aWNvbnNCdG4gPSAkKGVsZW1lbnQpLmZpbmQoJy5lbW90aWNvbnMnKVxyXG5cclxuXHJcblx0XHRAZW1vdGljb25zLnBvcG92ZXIoQGVtb3RpY29uc0J0biwgQGlucHV0KVxyXG5cclxuXHRcdEBvdXRwdXRbMF0uc2Nyb2xsVG9wID0gQG91dHB1dFswXS5zY3JvbGxIZWlnaHRcclxuXHJcblx0XHQkKEBpbnB1dCkua2V5ZG93bigoZXZlbnQpID0+IEBvbktleShldmVudCkpXHJcblxyXG5cclxuXHRcdCQoQHNlbmRCdG4pLmNsaWNrKCA9PlxyXG5cclxuXHRcdFx0QHNlbmQoKVxyXG5cdFx0XHRAY2xlYXJJbnB1dCgpXHJcblx0XHQpXHJcblxyXG5cdFx0JChAY2xlYXJCdG4pLmNsaWNrKCA9PlxyXG5cclxuXHRcdFx0QGNsZWFyT3V0cHV0KClcclxuXHRcdClcclxuXHJcblxyXG5cclxuXHRcdEBpbnRlcnZhbCA9IG9wdC5pbnRlcnZhbFxyXG5cclxuXHJcblx0XHRAam9pbiA9IG9wdC5qb2luXHJcblxyXG5cdFx0QGNvb2xkb3duID0gb3B0LmNvb2xkb3duXHJcblx0XHRAc2VudCA9IE1hdGgucm91bmQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApIC0gQGNvb2xkb3duXHJcblxyXG5cdFx0QHRvdWNoKClcclxuXHRcdEB0aW1lID0gTWF0aC5tYXgoQHRpbWUgLSBvcHQuaGlzdG9yeSwgMClcclxuXHJcblxyXG5cdFx0QHJlY2VpdmUoKVxyXG5cdFx0XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblx0Z2V0RXJyb3JUZXh0OiAobmFtZSwgYXJncykgLT5cclxuXHJcblx0XHR0ZXh0ID0gaTE4bi5jaGF0LmVycm9yc1tuYW1lXSA/IGkxOG4uY2hhdC5lcnJvcnMudW5rbm93blxyXG5cclxuXHRcdGlmIGFyZ3M/IGFuZCB0eXBlb2YoYXJncykgPT0gJ29iamVjdCdcclxuXHJcblx0XHRcdGZvciBrLCB2IG9mIGFyZ3NcclxuXHRcdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCc6JyArIGssIHYpXHJcblxyXG5cdFx0dGV4dFxyXG5cclxuXHJcblxyXG5cdGVycm9yOiAobmFtZSwgYXJncykgLT5cclxuXHJcblx0XHRhbGVydCA9ICQoJzxkaXY+PC9kaXY+JylcclxuXHRcdFx0LmFkZENsYXNzKCdhbGVydCcpXHJcblx0XHRcdC5hZGRDbGFzcygnYWxlcnQtZGFuZ2VyJylcclxuXHRcdFx0LnRleHQoQGdldEVycm9yVGV4dChuYW1lLCBhcmdzKSlcclxuXHJcblx0XHQkKEBvdXRwdXQpXHJcblx0XHRcdC5hcHBlbmQoYWxlcnQpXHJcblxyXG5cdGFsZXJ0OiAobmFtZSwgYXJncykgLT5cclxuXHJcblx0XHRhbGVydChAZ2V0RXJyb3JUZXh0KG5hbWUsIGFyZ3MpKVxyXG5cclxuXHJcblxyXG5cclxuXHR0b3VjaDogLT5cclxuXHRcdEB0aW1lID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMClcclxuXHJcblxyXG5cdHNlbmQ6IC0+XHJcblxyXG5cdFx0bm93ID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMClcclxuXHRcdG1lc3NhZ2UgPSAkKEBpbnB1dCkudmFsKClcclxuXHJcblx0XHRtYXRjaGVzID0gbWVzc2FnZS5tYXRjaCgvXlxcLyhcXHcrKS9pKVxyXG5cclxuXHJcblxyXG5cdFx0aWYgbWF0Y2hlcz8gYW5kIG1hdGNoZXNbMV0/XHJcblx0XHRcdGNvbW1hbmQgPSBtYXRjaGVzWzFdXHJcblxyXG5cdFx0XHRmb3IgaywgdiBvZiBjb21tYW5kc1xyXG5cclxuXHRcdFx0XHRpZiBjb21tYW5kLnRvTG93ZXJDYXNlKCkgPT0gay50b0xvd2VyQ2FzZSgpXHJcblxyXG5cdFx0XHRcdFx0ZnVuYyA9IHRoaXNbdl1cclxuXHJcblx0XHRcdFx0XHRpZiB0eXBlb2YoZnVuYykgPT0gJ2Z1bmN0aW9uJ1xyXG5cdFx0XHRcdFx0XHRmdW5jLmNhbGwodGhpcylcclxuXHRcdFx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRAZXJyb3IoJ2NtZE5vdEZvdW5kJywgeyduYW1lJzogY29tbWFuZH0pXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHJcblx0XHRpZiBAYWxsb3dTZW5kXHJcblxyXG5cdFx0XHRpZiBtZXNzYWdlLmxlbmd0aCA8IEBtaW5MZW5ndGhcclxuXHRcdFx0XHRAYWxlcnQoJ3Rvb1Nob3J0JywgeydtaW4nOiBAbWluTGVuZ3RofSlcclxuXHRcdFx0XHRyZXR1cm4gXHJcblxyXG5cdFx0XHRpZiBtZXNzYWdlLmxlbmd0aCA+IEBtYXhMZW5ndGhcclxuXHRcdFx0XHRhbGVydCgndG9vTG9uZycsIHsnbWF4JzogQG1heExlbmd0aH0pXHJcblx0XHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0XHRpZiBAc2VudCArIEBjb29sZG93biA+IG5vd1xyXG5cdFx0XHRcdEBhbGVydCgnY29vbGRvd24nKVxyXG5cdFx0XHRcdHJldHVyblxyXG5cclxuXHJcblx0XHRcdGRhdGEgPSAkLmV4dGVuZCh7fSwgQHNlbmRFeHRyYSwge21lc3NhZ2U6ICQoQGlucHV0KS52YWwoKX0pXHJcblxyXG5cdFx0XHQkLmFqYXgoe1xyXG5cclxuXHRcdFx0XHR1cmw6IEBtZXNzYWdlVXJsLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IChkYXRhKSA9PiBAb25TZW50KGRhdGEpLFxyXG5cdFx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRtZXRob2Q6IEBzZW5kTWV0aG9kLFx0XHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHRAc2VudCA9IG5vd1xyXG5cdFx0XHQkKEBzZW5kQnRuKS5kYXRhKCd0aW1lJywgQHNlbnQgKyBAY29vbGRvd24pXHJcblxyXG5cdFx0ZWxzZVxyXG5cclxuXHRcdFx0QGVycm9yKCdjYW5ub3RTZW5kJylcclxuXHJcblxyXG5cdHJlY2VpdmU6IC0+XHJcblxyXG5cdFx0aWYgQGFsbG93UmVjZWl2ZVxyXG5cclxuXHRcdFx0ZGF0YSA9ICQuZXh0ZW5kKHt9LCBAcmVjZWl2ZUV4dHJhLCB7dGltZTogQHRpbWV9KVxyXG5cclxuXHRcdFx0JC5hamF4KHtcclxuXHJcblx0XHRcdFx0dXJsOiBAbWVzc2FnZVVybCxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdGNvbXBsZXRlOiA9PiBAb25Db21wbGV0ZSgpLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IChkYXRhKSA9PiBAb25SZWNlaXZlZChkYXRhKSxcclxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdG1ldGhvZDogQHJlY2VpdmVNZXRob2QsXHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHRAdG91Y2goKVxyXG5cdFx0ZWxzZVxyXG5cclxuXHRcdFx0QGVycm9yKCdjYW5ub3RSZWNlaXZlJylcclxuXHJcblxyXG5cclxuXHRjbGVhck91dHB1dDogLT5cclxuXHJcblx0XHQkKEBvdXRwdXQpLmVtcHR5KClcclxuXHJcblxyXG5cdGNsZWFySW5wdXQ6IC0+XHJcblxyXG5cdFx0JChAaW5wdXQpLnZhbCgnJylcclxuXHJcblxyXG5cclxuXHRnZXRNZXNzYWdlOiAoZGF0YSkgLT5cclxuXHRcdCQoJzxwPjwvcD4nKVxyXG5cdFx0XHQuaHRtbChAZW1vdGljb25zLmluc2VydChkYXRhLm1lc3NhZ2UpKVxyXG5cdFx0XHQuYXBwZW5kKFxyXG5cclxuXHRcdFx0XHQkKCc8c21hbGw+PC9zbWFsbD4nKVxyXG5cdFx0XHRcdFx0LmFkZENsYXNzKCdjaGF0LXRpbWUnKVxyXG5cdFx0XHRcdFx0LmRhdGEoJ3RpbWUnLCBkYXRhLnRpbWUpXHJcblx0XHRcdClcclxuXHJcblxyXG5cclxuXHRuZXdNZXNzYWdlOiAoZGF0YSkgLT5cclxuXHJcblx0XHRyb3cgPSAkKCc8ZGl2PjwvZGl2PicpXHJcblx0XHRcdC5hZGRDbGFzcygncm93JylcclxuXHRcdFx0LmFkZENsYXNzKCdjaGF0LW1lc3NhZ2UnKVxyXG5cdFx0XHQuZGF0YSgndGltZScsIGRhdGEudGltZSlcclxuXHRcdFx0LmRhdGEoJ2F1dGhvcicsIGRhdGEuYXV0aG9yKVxyXG5cclxuXHRcdGNvbDEgPSAkKCc8ZGl2PjwvZGl2PicpXHJcblx0XHRcdC5hZGRDbGFzcygnY29sLXhzLTEnKVxyXG5cclxuXHRcdGNvbDIgPSAkKCc8ZGl2PjwvZGl2PicpXHJcblx0XHRcdC5hZGRDbGFzcygnY29sLXhzLTExJylcclxuXHJcblx0XHRpZiBAcGxheWVyVXJsP1xyXG5cclxuXHRcdFx0ZGl2MSA9ICQoJzxhPjwvYT4nKVxyXG5cdFx0XHRcdC5hdHRyKCdocmVmJywgQGdldFBsYXllclVybChkYXRhLmF1dGhvcikpXHJcblx0XHRcdFx0LmFkZENsYXNzKCdjaGF0LWF1dGhvcicpXHJcblx0XHRlbHNlXHJcblx0XHRcclxuXHRcdFx0ZGl2MSA9ICQoJzxkaXY+PC9kaXY+JylcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2NoYXQtYXV0aG9yJylcclxuXHJcblxyXG5cclxuXHRcdGRpdjIgPSAkKCc8ZGl2PjwvZGl2PicpXHJcblx0XHRcdC5hZGRDbGFzcygnY2hhdC1jb250ZW50JylcclxuXHJcblxyXG5cclxuXHJcblx0XHRhdmF0YXIgPSAkKCc8aW1nPjwvaW1nPicpXHJcblx0XHRcdC5hZGRDbGFzcygnaW1nLXJlc3BvbnNpdmUnKVxyXG5cdFx0XHQuYWRkQ2xhc3MoJ2NoYXQtYXZhdGFyJylcclxuXHRcdFx0LmF0dHIoJ3NyYycsIGRhdGEuYXZhdGFyKVxyXG5cclxuXHJcblx0XHRhdXRob3IgPSAkKCc8cD48L3A+JykuYXBwZW5kKFxyXG5cclxuXHRcdFx0JCgnPHN0cm9uZz48L3N0cm9uZz4nKVxyXG5cdFx0XHRcdC5hZGRDbGFzcygnY2hhdC1uYW1lJylcclxuXHRcdFx0XHQudGV4dChkYXRhLmF1dGhvciksXHJcblx0XHQpXHJcblxyXG5cdFx0bWVzc2FnZSA9IEBnZXRNZXNzYWdlKGRhdGEpXHJcblxyXG5cclxuXHJcblx0XHQkKGRpdjEpLmFwcGVuZChhdmF0YXIpLmFwcGVuZChhdXRob3IpXHJcblx0XHQkKGRpdjIpLmFwcGVuZChtZXNzYWdlKVxyXG5cdFx0JChjb2wxKS5hcHBlbmQoZGl2MSlcclxuXHRcdCQoY29sMikuYXBwZW5kKGRpdjIpXHJcblx0XHQkKHJvdykuYXBwZW5kKGNvbDEpLmFwcGVuZChjb2wyKVxyXG5cdFx0JChAb3V0cHV0KS5hcHBlbmQocm93KVxyXG5cclxuXHJcblx0bW9kaWZ5TWVzc2FnZTogKG1lc3NhZ2UsIGRhdGEpIC0+XHJcblxyXG5cdFx0JChtZXNzYWdlKS5maW5kKCcuY2hhdC1jb250ZW50JykuYXBwZW5kKFxyXG5cclxuXHRcdFx0QGdldE1lc3NhZ2UoZGF0YSlcclxuXHRcdClcclxuXHJcblxyXG5cclxuXHRhZGRNZXNzYWdlOiAoZGF0YSktPlxyXG5cclxuXHJcblx0XHRzY3JvbGwgPSAoQG91dHB1dFswXS5zY3JvbGxIZWlnaHQgLSBAb3V0cHV0WzBdLnNjcm9sbFRvcCAtIEBvdXRwdXRbMF0uY2xpZW50SGVpZ2h0KSA8PSAxXHJcblx0XHRtZXNzYWdlID0gJChAb3V0cHV0KS5jaGlsZHJlbigpLmxhc3QoKVxyXG5cclxuXHJcblxyXG5cdFx0aWYgbWVzc2FnZS5sZW5ndGggPT0gMCBvciAhJChtZXNzYWdlKS5pcygnLmNoYXQtbWVzc2FnZScpXHJcblx0XHRcdFxyXG5cdFx0XHRAbmV3TWVzc2FnZShkYXRhKVxyXG5cdFx0ZWxzZVxyXG5cclxuXHRcdFx0dGltZSA9ICQobWVzc2FnZSkuZGF0YSgndGltZScpXHJcblx0XHRcdGF1dGhvciA9ICQobWVzc2FnZSkuZGF0YSgnYXV0aG9yJylcclxuXHJcblx0XHRcdGlmIGF1dGhvciA9PSBkYXRhLmF1dGhvciBhbmQgKGRhdGEudGltZSAtIHRpbWUpIDw9IEBqb2luXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0QG1vZGlmeU1lc3NhZ2UobWVzc2FnZSwgZGF0YSlcclxuXHRcdFx0ZWxzZVxyXG5cclxuXHRcdFx0XHRAbmV3TWVzc2FnZShkYXRhKVxyXG5cclxuXHJcblxyXG5cdFx0aWYgc2Nyb2xsXHJcblx0XHRcdEBvdXRwdXRbMF0uc2Nyb2xsVG9wID0gQG91dHB1dFswXS5zY3JvbGxIZWlnaHQgLSAxXHJcblxyXG5cclxuXHJcblxyXG5cdG9uU2VudDogKGRhdGEpIC0+XHJcblxyXG5cdFx0QGVycm9yKGRhdGEucmVhc29uLCBkYXRhLmFyZ3MpIGlmIGRhdGEuc3RhdHVzID09ICdlcnJvcidcclxuXHJcblxyXG5cdG9uUmVjZWl2ZWQ6IChkYXRhKSAtPlxyXG5cclxuXHRcdGZvciBtZXNzYWdlIGluIGRhdGFcclxuXHRcdFx0QGFkZE1lc3NhZ2UobWVzc2FnZSlcclxuXHJcblx0b25Db21wbGV0ZTogLT5cclxuXHJcblx0XHRzZXRUaW1lb3V0KD0+XHJcblxyXG5cdFx0XHRAcmVjZWl2ZSgpXHJcblx0XHQsIEBpbnRlcnZhbCAqIDEwMDApXHJcblxyXG5cclxuXHRvbktleTogKGV2ZW50KSAtPlxyXG5cclxuXHRcdGlmIGV2ZW50LndoaWNoID09IDEzXHJcblx0XHRcdEBzZW5kKClcclxuXHRcdFx0QGNsZWFySW5wdXQoKVxyXG5cclxuXHJcblxyXG5cclxuXHRnZXRQbGF5ZXJVcmw6IChuYW1lKSAtPlxyXG5cclxuXHRcdHJldHVybiBAcGxheWVyVXJsLnJlcGxhY2UoJ3tuYW1lfScsIG5hbWUpXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuJCgtPlxyXG5cclxuXHR1cGRhdGUgPSAoKSAtPlxyXG5cclxuXHRcdG5vdyA9IE1hdGgucm91bmQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApXHJcblxyXG5cdFx0JCgnLmNoYXQgLmNoYXQtdGltZScpLmVhY2goLT5cclxuXHJcblx0XHRcdHRpbWUgPSBwYXJzZUludCgkKHRoaXMpLmRhdGEoJ3RpbWUnKSlcclxuXHRcdFx0aW50ZXJ2YWwgPSBub3cgLSB0aW1lXHJcblxyXG5cclxuXHJcblx0XHRcdGlmIGludGVydmFsIDwgNjBcclxuXHJcblx0XHRcdFx0dGV4dCA9IGkxOG4uY2hhdC5mZXdTZWNzXHJcblx0XHRcdGVsc2VcclxuXHJcblx0XHRcdFx0dGV4dCA9IHdpbmRvdy50aW1lRm9ybWF0U2hvcnQoaW50ZXJ2YWwpXHJcblxyXG5cdFx0XHQkKHRoaXMpLnRleHQodGV4dCArICcgJyArIGkxOG4uY2hhdC5hZ28pXHJcblx0XHQpXHJcblxyXG5cdFx0JCgnLmNoYXQgLnNlbmQnKS5lYWNoKC0+XHJcblxyXG5cdFx0XHRpZiAkKHRoaXMpLmRhdGEoJ2Rpc2FibGVkJykgIT0gJ3RydWUnXHJcblxyXG5cdFx0XHRcdHRpbWUgPSBwYXJzZUludCgkKHRoaXMpLmRhdGEoJ3RpbWUnKSlcclxuXHRcdFx0XHR0ZXh0ID0gJCh0aGlzKS5kYXRhKCd0ZXh0JylcclxuXHRcdFx0XHRpbnRlcnZhbCA9IHRpbWUgLSBub3dcclxuXHJcblxyXG5cdFx0XHRcdGlmIGludGVydmFsID4gMFxyXG5cclxuXHRcdFx0XHRcdCQodGhpcylcclxuXHRcdFx0XHRcdFx0LnRleHQod2luZG93LnRpbWVGb3JtYXQoaW50ZXJ2YWwpKVxyXG5cdFx0XHRcdFx0XHQuYWRkQ2xhc3MoJ2Rpc2FibGVkJylcclxuXHRcdFx0XHRlbHNlXHJcblxyXG5cdFx0XHRcdFx0JCh0aGlzKVxyXG5cdFx0XHRcdFx0XHQudGV4dCh0ZXh0KVxyXG5cdFx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJylcclxuXHJcblx0XHQpXHJcblxyXG5cclxuXHRcdHNldFRpbWVvdXQodXBkYXRlLCAxMDAwKVxyXG5cclxuXHR1cGRhdGUoKVxyXG4pIiwiXHJcblxyXG51cGRhdGUgPSAoKSAtPlxyXG5cclxuXHRkYXRlID0gbmV3IERhdGUoKVxyXG5cdG5vdyA9IE1hdGgucm91bmQoZGF0ZS5nZXRUaW1lKCkgLyAxMDAwKVxyXG5cdCQoJy5jdXJyZW50LXRpbWUnKS50ZXh0KGRhdGUudG9VVENTdHJpbmcoKSlcclxuXHJcblx0JCgnLnRpbWUtbGVmdCcpLmVhY2goLT5cclxuXHJcblx0XHR0byA9ICQodGhpcykuZGF0YSgndG8nKVxyXG5cdFx0JCh0aGlzKS50ZXh0KHdpbmRvdy50aW1lRm9ybWF0KE1hdGgubWF4KHRvIC0gbm93LCAwKSkpXHJcblx0KVxyXG5cclxuXHJcblx0c2V0VGltZW91dCh1cGRhdGUsIDEwMDApXHJcblxyXG5cclxuXHJcbiQgLT5cclxuXHR1cGRhdGUoKSIsIlxyXG5cclxuZGlhbG9ncyA9IFtdXHJcblxyXG5cclxuc2hvdyA9IChkaWFsb2cpIC0+XHJcblxyXG5cdGRpc21pc3NpYmxlID0gKCQoZGlhbG9nKS5kYXRhKCdkaXNtaXNzaWJsZScpKSA/IHRydWVcclxuXHJcblxyXG5cclxuXHQkKGRpYWxvZykuYmluZCgnc2hvd24uYnMubW9kYWwnLCAoZXZlbnQpIC0+XHJcblxyXG5cdFx0JCh0aGlzKS5maW5kKCcuYmF0dGxlJykudHJpZ2dlcignc2hvdycpXHJcblx0KVxyXG5cclxuXHJcblx0aWYgZGlzbWlzc2libGVcclxuXHJcblx0XHQkKGRpYWxvZykubW9kYWwoe2JhY2tkcm9wOiB0cnVlLCBzaG93OiB0cnVlLCBrZXlib2FyZDogdHJ1ZX0pXHJcblxyXG5cdGVsc2VcclxuXHJcblx0XHQkKGRpYWxvZykubW9kYWwoe2JhY2tkcm9wOiAnc3RhdGljJywgc2hvdzogdHJ1ZSwga2V5Ym9hcmQ6IGZhbHNlfSlcclxuXHJcblxyXG4kIC0+XHJcblx0ZGlhbG9ncyA9ICQoJy5tb2RhbC5hdXRvc2hvdycpXHJcblxyXG5cclxuXHQkKGRpYWxvZ3MpLmVhY2goKGluZGV4KSAtPlxyXG5cclxuXHRcdGlmIGluZGV4ID09IDBcclxuXHRcdFx0c2hvdyh0aGlzKVxyXG5cclxuXHRcdGlmIGluZGV4IDwgKGRpYWxvZ3MubGVuZ3RoIC0gMSlcclxuXHRcdFx0JCh0aGlzKS5vbignaGlkZGVuLmJzLm1vZGFsJywgKGV2ZW50KSAtPlxyXG5cclxuXHRcdFx0XHRzaG93KGRpYWxvZ3NbaW5kZXggKyAxXSlcclxuXHRcdFx0KVxyXG5cdCkiLCJcclxuXHJcblxyXG5jbGFzcyBARW1vdGljb25zXHJcblxyXG5cdGRlZmF1bHRzID0ge1xyXG5cclxuXHRcdGVtb3RpY29uczoge1xyXG5cclxuXHRcdFx0JzspJzogJ2JsaW5rLnBuZycsXHJcblx0XHRcdCc6RCc6ICdncmluLnBuZycsXHJcblx0XHRcdCc6KCc6ICdzYWQucG5nJyxcclxuXHRcdFx0JzopJzogJ3NtaWxlLnBuZycsXHJcblx0XHRcdCdCKSc6ICdzdW5nbGFzc2VzLnBuZycsXHJcblx0XHRcdCdPLm8nOiAnc3VycHJpc2VkLnBuZycsXHJcblx0XHRcdCc6cCc6ICd0b25ndWUucG5nJywgXHJcblx0XHR9LFxyXG5cclxuXHRcdHVybDogJy9pbWFnZXMvZW1vdGljb25zL3tuYW1lfScsXHJcblx0fVxyXG5cclxuXHJcblxyXG5cdGNvbnN0cnVjdG9yOiAodXJsLCBlbW90aWNvbnMpIC0+XHJcblxyXG5cdFx0QHVybCA9IHVybCA/IGRlZmF1bHRzLnVybFxyXG5cdFx0QHNldCA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cy5lbW90aWNvbnMsIGVtb3RpY29ucyA/IHt9KVxyXG5cclxuXHJcblx0aW5zZXJ0OiAodGV4dCkgLT5cclxuXHJcblx0XHRmb3IgaywgdiBvZiBAc2V0XHJcblxyXG5cdFx0XHR1cmwgPSBAdXJsLnJlcGxhY2UoJ3tuYW1lfScsIHYpXHJcblx0XHRcdGVtb3RpY29uID0gJzxpbWcgY2xhc3M9XCJlbW90aWNvblwiIHNyYz1cIicgKyB1cmwgKyAnXCIgYWx0PVwiJyArIGsgKyAnXCIgdGl0bGU9XCInICsgayArICdcIi8+J1xyXG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKGssIGVtb3RpY29uKVxyXG5cclxuXHJcblx0XHR0ZXh0XHJcblxyXG5cdHBvcG92ZXI6IChidXR0b24sIG91dHB1dCkgLT5cclxuXHJcblx0XHQkKGJ1dHRvbikucG9wb3Zlcih7XHJcblxyXG5cdFx0XHRodG1sOiB0cnVlLFxyXG5cdFx0XHR0cmlnZ2VyOiAnY2xpY2snLFxyXG5cdFx0XHRwbGFjZW1lbnQ6ICd0b3AnLFxyXG5cdFx0XHR0aXRsZTogaTE4bi5lbW90aWNvbnMudGl0bGUsXHJcblx0XHRcdGNvbnRlbnQ6ID0+IEBnZXRQb3BvdmVyQ29udGVudChvdXRwdXQpLFxyXG5cdFx0XHR0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50IGVtb3RpY29uLWNvbnRhaW5lclwiPjwvZGl2PjwvZGl2PicsXHJcblx0XHR9KVxyXG5cclxuXHRnZXRQb3BvdmVyQ29udGVudDogKG91dHB1dCkgLT5cclxuXHJcblx0XHRjb250YWluZXIgPSAkKCc8ZGl2PjwvZGl2PicpXHJcblxyXG5cdFx0Zm9yIGssIHYgb2YgQHNldFxyXG5cdFx0XHR1cmwgPSBAdXJsLnJlcGxhY2UoJ3tuYW1lfScsIHYpXHJcblx0XHRcdGltZyA9ICQoJzxpbWc+PC9pbWc+JylcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2Vtb3RpY29uJylcclxuXHRcdFx0XHQuYXR0cignc3JjJywgdXJsKVxyXG5cdFx0XHRcdC5hdHRyKCdhbHQnLCBrKVxyXG5cdFx0XHRcdC5hdHRyKCd0aXRsZScsIGspXHJcblx0XHRcdFx0LmNsaWNrKC0+XHJcblxyXG5cdFx0XHRcdFx0JChvdXRwdXQpLnZhbCgkKG91dHB1dCkudmFsKCkgKyAkKHRoaXMpLmF0dHIoJ2FsdCcpKVxyXG5cdFx0XHRcdClcclxuXHJcblx0XHRcdCQoY29udGFpbmVyKS5hcHBlbmQoaW1nKVxyXG5cclxuXHRcdHJldHVybiBjb250YWluZXJcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY291bnRlciA9IDBcclxuXHJcblxyXG4kKC0+XHJcblxyXG5cdGVtb3RpY29ucyA9IG5ldyBFbW90aWNvbnMoKVxyXG5cclxuXHQkKCdbZGF0YS1lbW90aWNvbnM9dHJ1ZV0nKS5lYWNoKC0+XHJcblxyXG5cdFx0dGV4dCA9ICQodGhpcykudGV4dCgpXHJcblx0XHR0ZXh0ID0gZW1vdGljb25zLmluc2VydCh0ZXh0KVxyXG5cdFx0JCh0aGlzKS5odG1sKHRleHQpXHJcblx0KVxyXG4pIiwid2lkdGhzID1cclxuXHR4czogNzY4LFxyXG5cdHNtOiA5OTIsXHJcblx0bWQ6IDEyMDAsXHJcblxyXG5cclxuXHJcbmdldFByZWZpeCA9IC0+XHJcblx0d2lkdGggPSAkKHdpbmRvdykud2lkdGgoKVxyXG5cclxuXHRpZiB3aWR0aCA8IHdpZHRocy54c1xyXG5cdFx0Wyd4cyddXHJcblx0ZWxzZSBpZiB3aWR0aCA8IHdpZHRocy5zbVxyXG5cdFx0WydzbScsICd4cyddXHJcblx0ZWxzZSBpZiB3aWR0aCA8IHdpZHRocy5tZFxyXG5cdFx0WydtZCcsICdzbScsICd4cyddXHJcblx0ZWxzZVxyXG5cdFx0WydsZycsICdtZCcsICdzbScsICd4cyddXHJcblxyXG5cclxuZ2V0Q29sdW1ucyA9IChwcmVmaXgpIC0+XHJcblx0cmVzdWx0ID0gW11cclxuXHRmb3IgcCBpbiBwcmVmaXhcclxuXHRcdGZvciBpIGluIFsxLi4xMl1cclxuXHRcdFx0cmVzdWx0LnB1c2goXCJjb2wtI3twfS0je2l9XCIpXHJcblx0cmVzdWx0XHJcblxyXG5cclxuXHJcbmdldFNpemUgPSAob2JqZWN0LCBwcmVmaXgpIC0+XHJcblx0Zm9yIHAgaW4gcHJlZml4XHJcblx0XHRyZWdleHAgPSBuZXcgUmVnRXhwKFwiY29sLSN7cH0tKFxcXFxkKylcIilcclxuXHRcdHNpemUgPSAkKG9iamVjdCkuYXR0cignY2xhc3MnKS5tYXRjaChyZWdleHApP1sxXVxyXG5cdFx0cmV0dXJuIHBhcnNlSW50KHNpemUpIGlmIHNpemU/XHJcblx0cmV0dXJuIG51bGxcclxuXHJcblxyXG5cclxuXHJcbmVxdWFsaXplID0gLT5cclxuXHRwcmVmaXggPSBnZXRQcmVmaXgoKVxyXG5cdGNvbHVtbnMgPSBnZXRDb2x1bW5zKHByZWZpeClcclxuXHRzZWxlY3RvciA9ICcuJyArIGNvbHVtbnMuam9pbignLC4nKVxyXG5cdFxyXG5cdCNjb25zb2xlLmxvZygncHJlZml4OiAnLCBwcmVmaXgpXHJcblx0I2NvbnNvbGUubG9nKCdjb2x1bW5zOiAnLCBjb2x1bW5zKVxyXG5cdCNjb25zb2xlLmxvZygnc2VsZWN0b3I6ICcsIHNlbGVjdG9yKVxyXG5cclxuXHJcblx0JCgnLnJvdy5lcXVhbGl6ZScpLmVhY2ggLT5cclxuXHRcdCNjb25zb2xlLmxvZygnbmV3IHJvdycpXHJcblx0XHRoZWlnaHRzID0gW11cclxuXHRcdHJvdyA9IDBcclxuXHRcdHN1bSA9IDBcclxuXHJcblx0XHQkKHRoaXMpLmNoaWxkcmVuKHNlbGVjdG9yKS5lYWNoIC0+XHJcblx0XHRcdHNpemUgPSBnZXRTaXplKHRoaXMsIHByZWZpeClcclxuXHRcdFx0c3VtICs9IHNpemVcclxuXHJcblx0XHRcdCNjb25zb2xlLmxvZygnc2l6ZTogJywgc2l6ZSlcclxuXHRcdFx0I2NvbnNvbGUubG9nKCdzdW06ICcsIHN1bSlcclxuXHJcblx0XHRcdGlmIHN1bSA+IDEyXHJcblx0XHRcdFx0c3VtIC09IDEyXHJcblx0XHRcdFx0cm93KytcclxuXHRcdFx0XHQjY29uc29sZS5sb2coJ25leHQgcm93ICcsIHJvdywgc2l6ZSlcclxuXHJcblx0XHRcdGhlaWdodHNbcm93XSA/PSAwXHJcblx0XHRcdGhlaWdodHNbcm93XSA9IE1hdGgubWF4KGhlaWdodHNbcm93XSwgJCh0aGlzKS5oZWlnaHQoKSlcclxuXHRcdFx0I2NvbnNvbGUubG9nKCdoZWlnaHQgJywgaGVpZ2h0c1tyb3ddKVxyXG5cclxuXHRcdHJvdyA9IDBcclxuXHRcdHN1bSA9IDBcclxuXHRcdGNvbCA9IG51bGxcclxuXHJcblx0XHQkKHRoaXMpLmNoaWxkcmVuKHNlbGVjdG9yKS5lYWNoIC0+XHJcblx0XHRcdHN1bSArPSBnZXRTaXplKHRoaXMsIHByZWZpeClcclxuXHRcdFx0Y29sID89IHRoaXNcclxuXHJcblx0XHRcdGlmIHN1bSA+IDEyXHJcblx0XHRcdFx0c3VtIC09IDEyXHJcblx0XHRcdFx0cm93KytcclxuXHRcdFx0XHRjb2wgPSB0aGlzXHJcblxyXG5cdFx0XHQkKHRoaXMpLmhlaWdodChoZWlnaHRzW3Jvd10pXHJcblxyXG5cdFx0aHMgPSBNYXRoLnJvdW5kICgxMiAtIHN1bSkgLyAyXHJcblx0XHRpZiBjb2w/IGFuZCBocyA+IDBcclxuXHRcdFx0cCA9IHByZWZpeFswXVxyXG5cclxuXHRcdFx0Zm9yIGkgaW4gWzEuLjEyXVxyXG5cdFx0XHRcdCQoY29sKS5yZW1vdmVDbGFzcyhcImNvbC0je3B9LW9mZnNldC0je2l9XCIpXHJcblx0XHRcdCQoY29sKS5hZGRDbGFzcyhcImNvbC0je3B9LW9mZnNldC0je2hzfVwiKVxyXG5cclxuYWZ0ZXJMb2FkZWQgPSAtPlxyXG5cdCQoJ2ltZycpXHJcblx0XHQub24oJ2xvYWQnLCBlcXVhbGl6ZSlcclxuXHJcblxyXG4kIC0+XHJcblx0I2FmdGVyTG9hZGVkKClcclxuXHQjJCh3aW5kb3cpLm9uKCdyZXNpemVkJywgZXF1YWxpemUpXHJcblx0I2VxdWFsaXplKCkiLCJzcGVlZCA9IDFcclxuXHJcblxyXG5rZXlEb3duID0gKGV2ZW50KSAtPlxyXG5cdHNwZWVkID0gMTAgaWYgZXZlbnQud2hpY2ggPT0gMTdcclxuXHRzcGVlZCA9IDEwMCBpZiBldmVudC53aGljaCA9PSAxNlxyXG5cclxua2V5VXAgPSAoZXZlbnQpIC0+XHJcblx0c3BlZWQgPSAxIGlmIGV2ZW50LndoaWNoID09IDE3IG9yIGV2ZW50LndoaWNoID09IDE2XHJcblxyXG5cclxubW91c2VXaGVlbCA9IChldmVudCkgLT5cclxuXHRjb25zb2xlLmxvZygnbW91c2VXaGVlbCcpXHJcblx0bWluID0gcGFyc2VJbnQgKCQodGhpcykuYXR0cignbWluJykgPyAwKVxyXG5cdG1heCA9IHBhcnNlSW50ICgkKHRoaXMpLmF0dHIoJ21heCcpID8gMTAwKVxyXG5cdHN0ZXAgPSBwYXJzZUludCAoJCh0aGlzKS5hdHRyKCdzdGVwJykgPyAxKVxyXG5cclxuXHRjaGFuZ2UgPSBldmVudC5kZWx0YVkgKiBzdGVwICogc3BlZWRcclxuXHR2YWx1ZSA9IHBhcnNlSW50ICQodGhpcykudmFsKCkgPyAwXHJcblx0dmFsdWUgPSBNYXRoLmNsYW1wIHZhbHVlICsgY2hhbmdlLCBtaW4sIG1heFxyXG5cclxuXHQkKHRoaXMpXHJcblx0XHQudmFsIHZhbHVlXHJcblx0XHQudHJpZ2dlciAnY2hhbmdlJ1xyXG5cclxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG5yYW5nZUNoYW5nZWQgPSAoZXZlbnQpIC0+XHJcblx0Y29uc29sZS5sb2coJ3JhbmdlQ2hhbmdlZCcpXHJcblx0b3V0cHV0ID0gJCh0aGlzKS5wYXJlbnQoKS5jaGlsZHJlbignLnJhbmdlLXZhbHVlJylcclxuXHRiZWZvcmUgPSAoJChvdXRwdXQpLmRhdGEgJ2JlZm9yZScpID8gJydcclxuXHRhZnRlciA9ICgkKG91dHB1dCkuZGF0YSAnYWZ0ZXInKSA/ICcnXHJcblx0dmFsdWUgPSAkKHRoaXMpLnZhbCgpID8gMFxyXG5cclxuXHQkKG91dHB1dCkudGV4dCBiZWZvcmUgKyB2YWx1ZSArIGFmdGVyXHJcblxyXG5cclxubnVtYmVyRGVjcmVhc2UgPSAoZXZlbnQpIC0+XHJcblx0Y29uc29sZS5sb2coJ251bWJlckRlY3JlYXNlJylcclxuXHRpbnB1dCA9ICQodGhpcykucGFyZW50KCkucGFyZW50KCkuY2hpbGRyZW4oJ2lucHV0JylcclxuXHRtaW4gPSBwYXJzZUludCAoJChpbnB1dCkuYXR0cignbWluJykgPyAwKVxyXG5cdG1heCA9IHBhcnNlSW50ICgkKGlucHV0KS5hdHRyKCdtYXgnKSA/IDEwMClcclxuXHRzdGVwID0gcGFyc2VJbnQgKCQoaW5wdXQpLmF0dHIoJ3N0ZXAnKSA/IDEpXHJcblxyXG5cdHZhbHVlID0gcGFyc2VJbnQgKCQoaW5wdXQpLnZhbCgpID8gMClcclxuXHR2YWx1ZSA9IE1hdGguY2xhbXAodmFsdWUgLSBzcGVlZCAqIHN0ZXAsIG1pbiwgbWF4KVxyXG5cdCQoaW5wdXQpLnZhbCh2YWx1ZSkudHJpZ2dlcignY2hhbmdlJylcclxuXHJcblxyXG5udW1iZXJJbmNyZWFzZSA9IChldmVudCkgLT5cclxuXHRjb25zb2xlLmxvZygnbnVtYmVySW5jcmVhc2UnKVxyXG5cdGlucHV0ID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5jaGlsZHJlbignaW5wdXQnKVxyXG5cdG1pbiA9IHBhcnNlSW50ICgkKGlucHV0KS5hdHRyKCdtaW4nKSA/IDApXHJcblx0bWF4ID0gcGFyc2VJbnQgKCQoaW5wdXQpLmF0dHIoJ21heCcpID8gMTAwKVxyXG5cdHN0ZXAgPSBwYXJzZUludCAoJChpbnB1dCkuYXR0cignc3RlcCcpID8gMSlcclxuXHJcblx0dmFsdWUgPSBwYXJzZUludCAoJChpbnB1dCkudmFsKCkgPyAwKVxyXG5cdHZhbHVlID0gTWF0aC5jbGFtcCh2YWx1ZSArIHNwZWVkICogc3RlcCwgbWluLCBtYXgpXHJcblx0JChpbnB1dCkudmFsKHZhbHVlKS50cmlnZ2VyKCdjaGFuZ2UnKVxyXG5cclxuXHJcblxyXG5cclxuJCAtPiBcclxuXHQkKHdpbmRvdylcclxuXHRcdC5rZXl1cCBrZXlVcFxyXG5cdFx0LmtleWRvd24ga2V5RG93blxyXG5cclxuXHQkKCdpbnB1dFt0eXBlPW51bWJlcl0sIGlucHV0W3R5cGU9cmFuZ2VdJylcclxuXHRcdC5iaW5kICdtb3VzZXdoZWVsJywgbW91c2VXaGVlbFxyXG5cclxuXHQkKCdpbnB1dFt0eXBlPXJhbmdlXScpXHJcblx0XHQuY2hhbmdlIHJhbmdlQ2hhbmdlZFxyXG5cdFx0Lm1vdXNlbW92ZSByYW5nZUNoYW5nZWRcclxuXHJcblx0JCgnLm51bWJlci1taW51cycpLmNoaWxkcmVuKCdidXR0b24nKVxyXG5cdFx0LmNsaWNrIG51bWJlckRlY3JlYXNlXHJcblxyXG5cclxuXHQkKCcubnVtYmVyLXBsdXMnKS5jaGlsZHJlbignYnV0dG9uJylcclxuXHRcdC5jbGljayBudW1iZXJJbmNyZWFzZVxyXG5cclxuIiwibGFzdFRpbWUgPSAwXHJcbnZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onXVxyXG5cclxuaWYgbm90IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuICAgIGZvciB2ZW5kb3IgaW4gdmVuZG9yc1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddXHJcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvciArICdDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8IHdpbmRvd1t2ZW5kb3IgKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ11cclxuXHJcbndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgb3I9IChjYWxsYmFjaywgZWxlbWVudCkgLT5cclxuICAgIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuICAgIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSlcclxuXHJcbiAgICBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KC0+XHJcbiAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKVxyXG4gICAgLCB0aW1lVG9DYWxsKVxyXG5cclxuICAgIGlkXHJcblxyXG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgb3I9IChpZCkgLT5cclxuICAgIGNsZWFyVGltZW91dChpZCkiLCJcclxuXHJcblxyXG5cclxuJCAtPiBcclxuXHQkKCcuaW1hZ2UtcHJldmlldycpLmVhY2ggLT5cclxuXHRcdHByZXZpZXcgPSB0aGlzXHJcblx0XHRpZCA9ICQodGhpcykuZGF0YSgnZm9yJylcclxuXHRcdCQoJyMnICsgaWQpLmNoYW5nZSgoZXZlbnQpIC0+IFxyXG5cclxuXHRcdFx0cGF0aCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZXZlbnQudGFyZ2V0LmZpbGVzWzBdKVxyXG5cdFx0XHQkKHByZXZpZXcpLmF0dHIgJ3NyYycsIHBhdGggaWYgcGF0aD9cclxuXHJcblx0XHRcdFxyXG5cdFx0KS50cmlnZ2VyICdjaGFuZ2UnXHJcbiIsIlxyXG5cclxuc2V0ID0gKGxhbmcpIC0+XHJcblx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2xhbmcvJyArIGxhbmdcclxuXHJcblxyXG5cclxuXHJcblxyXG5idXR0b24gPSAoKSAtPlxyXG5cdHNldCgkKHRoaXMpLmRhdGEoJ2xhbmcnKSlcclxuXHJcblxyXG5zZWxlY3QgPSAoKSAtPlxyXG5cdHNldCgkKHRoaXMpLnZhbCgpKVxyXG5cclxuXHJcblxyXG4kIC0+XHJcblx0JCgnLmxhbmd1YWdlLXNlbGVjdCcpLmNoYW5nZShzZWxlY3QpXHJcblx0JCgnLmxhbmd1YWdlLWJ1dHRvbicpLmNsaWNrKGJ1dHRvbilcclxuIiwibmF2Zml4ID0gLT5cclxuXHRoZWlnaHQgPSAkKCcjbWFpbk5hdicpLmhlaWdodCgpICsgMTBcclxuXHQkKCdib2R5JykuY3NzKCdwYWRkaW5nLXRvcCcsIGhlaWdodCArICdweCcpXHJcblxyXG5cclxuJCAtPlxyXG5cdCQod2luZG93KS5yZXNpemUgLT4gbmF2Zml4KClcclxuXHRuYXZmaXgoKSIsIlxyXG5cclxuaW1hZ2VGb3JGcmFtZSA9IChmcmFtZSkgLT5cclxuXHQnL2ltYWdlcy9wbGFudHMvcGxhbnQtJyArIGZyYW1lICsgJy5wbmcnXHJcblxyXG5yZWZyZXNoUGxhbnQgPSAocGxhbnQpIC0+IFxyXG5cdG5vdyA9IE1hdGgucm91bmQoKG5ldyBEYXRlKS5nZXRUaW1lKCkgLyAxMDAwKVxyXG5cdHN0YXJ0ID0gcGFyc2VJbnQgJChwbGFudCkuZGF0YSAnc3RhcnQnXHJcblx0ZW5kID0gcGFyc2VJbnQgJChwbGFudCkuZGF0YSAnZW5kJ1xyXG5cdHdhdGVyaW5nID0gcGFyc2VJbnQgJChwbGFudCkuZGF0YSAnd2F0ZXJpbmcnXHJcblx0bm93ID0gTWF0aC5taW4gbm93LCB3YXRlcmluZ1xyXG5cdGZyYW1lID0gTWF0aC5mbG9vcigxNyAqIE1hdGguY2xhbXAoKG5vdyAtIHN0YXJ0KSAvIChlbmQgLSBzdGFydCksIDAsIDEpKSBcclxuXHQkKHBsYW50KS5hdHRyICdzcmMnLCBpbWFnZUZvckZyYW1lIGZyYW1lXHJcblxyXG5cdHNldFRpbWVvdXQgKC0+IHJlZnJlc2hQbGFudCBwbGFudCksIDEwMDAgaWYgZnJhbWUgPCAxN1xyXG5cclxuJCAtPlxyXG5cdCQoJy5wbGFudGF0aW9uLXBsYW50JykuZWFjaCAtPiByZWZyZXNoUGxhbnQgdGhpc1xyXG5cclxuXHQkKCcjc2VlZHNNb2RhbCcpLm9uICdzaG93LmJzLm1vZGFsJywgKGV2ZW50KSAtPlxyXG5cdFx0c2xvdCA9ICQoZXZlbnQucmVsYXRlZFRhcmdldCkuZGF0YSAnc2xvdCdcclxuXHRcdCQodGhpcykuZmluZCgnaW5wdXRbbmFtZT1zbG90XScpLnZhbCBzbG90IiwidXJsID0gJy9hcGkvY2hhcmFjdGVyJztcclxuXHJcblxyXG5zZXRQcm9ncmVzcyA9IChvYmplY3QsIHZhbHVlLCBtaW5WYWx1ZSwgbWF4VmFsdWUsIGxhc3RVcGRhdGUsIG5leHRVcGRhdGUpIC0+XHJcblxyXG5cdGJhciA9ICQoJy4nICsgb2JqZWN0ICsgJy1iYXInKVxyXG5cdHRpbWVyID0gJCgnLicgKyBvYmplY3QgKyAnLXRpbWVyJylcclxuXHJcblxyXG5cdGlmIGJhci5sZW5ndGggPiAwXHJcblx0XHRjaGlsZCA9ICQoYmFyKS5jaGlsZHJlbiAnLnByb2dyZXNzLWJhcidcclxuXHJcblx0XHQkKGNoaWxkKVxyXG5cdFx0XHQuZGF0YSAnbWF4JywgbWF4VmFsdWVcclxuXHRcdFx0LmRhdGEgJ21pbicsIG1pblZhbHVlXHJcblx0XHRcdC5kYXRhICdub3cnLCB2YWx1ZVxyXG5cdFx0YmFyWzBdLnVwZGF0ZT8oKVxyXG5cclxuXHJcblx0aWYgdGltZXIubGVuZ3RoID4gMFxyXG5cdFx0Y2hpbGQgPSAkKHRpbWVyKS5jaGlsZHJlbiAnLnByb2dyZXNzLWJhcidcclxuXHJcblx0XHRpZiBuZXh0VXBkYXRlP1xyXG5cdFx0XHQkKGNoaWxkKVxyXG5cdFx0XHRcdC5kYXRhICdtYXgnLCBuZXh0VXBkYXRlXHJcblx0XHRcdFx0LmRhdGEgJ21pbicsIGxhc3RVcGRhdGVcclxuXHRcdGVsc2VcclxuXHRcdFx0JChjaGlsZClcclxuXHRcdFx0XHQuZGF0YSAnbWF4JywgMVxyXG5cdFx0XHRcdC5kYXRhICdtaW4nLCAwXHJcblxyXG5cclxuc2V0VmFsdWVzID0gKG9iamVjdCwgdmFsdWUsIG1pblZhbHVlLCBtYXhWYWx1ZSkgLT5cclxuXHQkKCcuJyArIG9iamVjdCArICctbm93JylcclxuXHRcdC50ZXh0IHZhbHVlXHJcblxyXG5cdCQoJy4nICsgb2JqZWN0ICsgJy1taW4nKVxyXG5cdFx0LnRleHQgbWluVmFsdWVcclxuXHJcblx0JCgnLicgKyBvYmplY3QgKyAnLW1heCcpXHJcblx0XHQudGV4dCBtYXhWYWx1ZVxyXG5cclxuc2V0VmFsdWUgPSAob2JqZWN0LCB2YWx1ZSkgLT5cclxuXHQkKCcuJyArIG9iamVjdClcclxuXHRcdC50ZXh0IHZhbHVlXHJcblxyXG5cclxuXHJcblxyXG5maWxsID0gKGRhdGEpIC0+XHJcblx0c2V0UHJvZ3Jlc3MgJ2hlYWx0aCcsIGRhdGEuaGVhbHRoLCAwLCBkYXRhLm1heEhlYWx0aCwgZGF0YS5oZWFsdGhVcGRhdGUsIGRhdGEubmV4dEhlYWx0aFVwZGF0ZVxyXG5cdHNldFZhbHVlcyAnaGVhbHRoJywgZGF0YS5oZWFsdGgsIDAsIGRhdGEubWF4SGVhbHRoXHJcblxyXG5cdHNldFByb2dyZXNzICdlbmVyZ3knLCBkYXRhLmVuZXJneSwgMCwgZGF0YS5tYXhFbmVyZ3ksIGRhdGEuZW5lcmd5VXBkYXRlLCBkYXRhLm5leHRFbmVyZ3lVcGRhdGVcclxuXHRzZXRWYWx1ZXMgJ2VuZXJneScsIGRhdGEuZW5lcmd5LCAwLCBkYXRhLm1heEVuZXJneVxyXG5cclxuXHRzZXRQcm9ncmVzcyAnd2FudGVkJywgZGF0YS53YW50ZWQsIDAsIDYsIGRhdGEud2FudGVkVXBkYXRlLCBkYXRhLm5leHRXYW50ZWRVcGRhdGVcclxuXHRzZXRWYWx1ZXMgJ3dhbnRlZCcsIGRhdGEud2FudGVkLCAwLCA2XHJcblxyXG5cdHNldFByb2dyZXNzICdleHBlcmllbmNlJywgZGF0YS5leHBlcmllbmNlLCAwLCBkYXRhLm1heEV4cGVyaWVuY2UsIG51bGwsIG51bGxcclxuXHRzZXRWYWx1ZXMgJ2V4cGVyaWVuY2UnLCBkYXRhLmV4cGVyaWVuY2UsIDAsIGRhdGEubWF4RXhwZXJpZW5jZVxyXG5cclxuXHJcblx0c2V0UHJvZ3Jlc3MgJ3BsYW50YXRvcicsIGRhdGEucGxhbnRhdG9yRXhwZXJpZW5jZSwgMCwgZGF0YS5wbGFudGF0b3JNYXhFeHBlcmllbmNlLCBudWxsLCBudWxsXHJcblx0c2V0VmFsdWVzICdwbGFudGF0b3InLCBkYXRhLnBsYW50YXRvckV4cGVyaWVuY2UsIDAsIGRhdGEucGxhbnRhdG9yTWF4RXhwZXJpZW5jZVxyXG5cclxuXHRzZXRQcm9ncmVzcyAnc211Z2dsZXInLCBkYXRhLnNtdWdnbGVyRXhwZXJpZW5jZSwgMCwgZGF0YS5zbXVnZ2xlck1heEV4cGVyaWVuY2UsIG51bGwsIG51bGxcclxuXHRzZXRWYWx1ZXMgJ3NtdWdnbGVyJywgZGF0YS5zbXVnZ2xlckV4cGVyaWVuY2UsIDAsIGRhdGEuc211Z2dsZXJNYXhFeHBlcmllbmNlXHJcblxyXG5cdHNldFByb2dyZXNzICdkZWFsZXInLCBkYXRhLmRlYWxlckV4cGVyaWVuY2UsIDAsIGRhdGEuZGVhbGVyTWF4RXhwZXJpZW5jZSwgbnVsbCwgbnVsbFxyXG5cdHNldFZhbHVlcyAnZGVhbGVyJywgZGF0YS5kZWFsZXJFeHBlcmllbmNlLCAwLCBkYXRhLmRlYWxlck1heEV4cGVyaWVuY2VcclxuXHJcblxyXG5cclxuXHJcblxyXG5cdCNzZXRWYWx1ZSAnbGV2ZWwnLCBkYXRhLmxldmVsXHJcblx0I3NldFZhbHVlICdwbGFudGF0b3ItbGV2ZWwnLCBkYXRhLnBsYW50YXRvckxldmVsXHJcblx0I3NldFZhbHVlICdzbXVnZ2xlci1sZXZlbCcsIGRhdGEuc211Z2dsZXJMZXZlbFxyXG5cdCNzZXRWYWx1ZSAnZGVhbGVyLWxldmVsJywgZGF0YS5kZWFsZXJMZXZlbFxyXG5cdCNzZXRWYWx1ZSAnc3RyZW5ndGgnLCBkYXRhLnN0cmVuZ3RoLFxyXG5cdCNzZXRWYWx1ZSAncGVyY2VwdGlvbicsIGRhdGEucGVyY2VwdGlvblxyXG5cdCNzZXRWYWx1ZSAnZW5kdXJhbmNlJywgZGF0YS5lbmR1cmFuY2VcclxuXHQjc2V0VmFsdWUgJ2NoYXJpc21hJywgZGF0YS5jaGFyaXNtYVxyXG5cdCNzZXRWYWx1ZSAnaW50ZWxsaWdlbmNlJywgZGF0YS5pbnRlbGxpZ2VuY2VcclxuXHQjc2V0VmFsdWUgJ2FnaWxpdHknLCBkYXRhLmFnaWxpdHlcclxuXHQjc2V0VmFsdWUgJ2x1Y2snLCBkYXRhLmx1Y2sgKyAnJSdcclxuXHQjc2V0VmFsdWUgJ3N0YXRpc3RpY1BvaW50cycsIGRhdGEuc3RhdGlzdGljUG9pbnRzXHJcblx0I3NldFZhbHVlICd0YWxlbnRQb2ludHMnLCBkYXRhLnRhbGVudFBvaW50c1xyXG5cdCNzZXRWYWx1ZSAnbW9uZXknLCAnJCcgKyBkYXRhLm1vbmV5XHJcblx0I3NldFZhbHVlICdyZXBvcnRzJywgZGF0YS5yZXBvcnRzQ291bnRcclxuXHQjc2V0VmFsdWUgJ21lc3NhZ2VzJywgZGF0YS5tZXNzYWdlc0NvdW50XHJcblxyXG5cdHNjb3BlID0gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLnNjb3BlKClcclxuXHJcblx0aWYgc2NvcGU/IGFuZCBzY29wZS5wbGF5ZXI/XHJcblx0XHQjc2NvcGUucGxheWVyLmxldmVsID0gZGF0YS5sZXZlbFxyXG5cdFx0I3Njb3BlLnBsYXllci5wbGFudGF0b3JMZXZlbCA9IGRhdGEucGxhbnRhdG9yTGV2ZWxcclxuXHRcdCNzY29wZS5wbGF5ZXIuc211Z2dsZXJMZXZlbCA9IGRhdGEuc211Z2dsZXJMZXZlbFxyXG5cdFx0I3Njb3BlLnBsYXllci5kZWFsZXJMZXZlbCA9IGRhdGEuZGVhbGVyTGV2ZWxcclxuXHRcdCNzY29wZS5wbGF5ZXIuc3RyZW5ndGggPSBkYXRhLnN0cmVuZ3RoXHJcblx0XHQjc2NvcGUucGxheWVyLnBlcmNlcHRpb24gPSBkYXRhLnBlcmNlcHRpb25cclxuXHRcdCNzY29wZS5wbGF5ZXIuZW5kdXJhbmNlID0gZGF0YS5lbmR1cmFuY2VcclxuXHRcdCNzY29wZS5wbGF5ZXIuY2hhcmlzbWEgPSBkYXRhLmNoYXJpc21hXHJcblx0XHQjc2NvcGUucGxheWVyLmludGVsbGlnZW5jZSA9IGRhdGEuaW50ZWxsaWdlbmNlXHJcblx0XHQjc2NvcGUucGxheWVyLmFnaWxpdHkgPSBkYXRhLmFnaWxpdHlcclxuXHRcdCNzY29wZS5wbGF5ZXIubHVjayA9IGRhdGEubHVja1xyXG5cdFx0I3Njb3BlLnBsYXllci5yZXNwZWN0ID0gZGF0YS5yZXNwZWN0XHJcblx0XHQjc2NvcGUucGxheWVyLndlaWdodCA9IGRhdGEud2VpZ2h0XHJcblx0XHQjc2NvcGUucGxheWVyLmNhcGFjaXR5ID0gZGF0YS5jYXBhY2l0eVxyXG5cdFx0I3Njb3BlLnBsYXllci5taW5EYW1hZ2UgPSBkYXRhLm1pbkRhbWFnZVxyXG5cdFx0I3Njb3BlLnBsYXllci5tYXhEYW1hZ2UgPSBkYXRhLm1heERhbWFnZVxyXG5cdFx0I3Njb3BlLnBsYXllci5kZWZlbnNlID0gZGF0YS5kZWZlbnNlXHJcblx0XHQjc2NvcGUucGxheWVyLmNyaXRDaGFuY2UgPSBkYXRhLmNyaXRDaGFuY2VcclxuXHRcdCNzY29wZS5wbGF5ZXIuc3BlZWQgPSBkYXRhLnNwZWVkXHJcblx0XHQjc2NvcGUucGxheWVyLmV4cGVyaWVuY2VNb2RpZmllciA9IGRhdGEuZXhwZXJpZW5jZU1vZGlmaWVyXHJcblx0XHQjc2NvcGUucGxheWVyLm1vbmV5TW9kaWZpZXIgPSBkYXRhLm1vbmV5TW9kaWZpZXJcclxuXHJcblx0XHRmb3IgaywgdiBvZiBkYXRhXHJcblx0XHRcdHNjb3BlLnBsYXllcltrXSA9IHZcclxuXHJcblx0XHRzY29wZS4kYXBwbHkoKVxyXG5cclxuXHJcblxyXG5cclxubG9hZGVkID0gKGRhdGEpIC0+XHJcblxyXG5cdGZpbGwgZGF0YVxyXG5cclxuXHRpZiBkYXRhLnJlbG9hZFxyXG5cclxuXHRcdHdpbmRvdy5sb2NhdGlvbi5yZWZyZXNoKClcclxuXHRlbHNlXHJcblx0XHRpZiB3aW5kb3cuYWN0aXZlXHJcblx0XHRcdCQuYWpheCB7XHJcblxyXG5cdFx0XHRcdHVybDogdXJsICsgJy9ub3RpZmljYXRpb25zJyxcclxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRcdFx0c3VjY2Vzczogbm90aWZ5XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdCQuYWpheCB7XHJcblxyXG5cdFx0XHRcdHVybDogdXJsICsgJy9tZXNzYWdlcycsXHJcblx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IG1lc3NhZ2UsXHJcblx0XHRcdH1cclxuXHJcblx0c2V0VGltZW91dCBsb2FkLCBkYXRhLm5leHRVcGRhdGUgKiAxMDAwXHJcblxyXG5cclxubm90aWZ5ID0gKGRhdGEpIC0+XHJcblx0Zm9yIG4gaW4gZGF0YVxyXG5cdFx0d2luZG93Lm5vdGlmeSB7XHJcblxyXG5cdFx0XHR0aXRsZTogJzxzdHJvbmc+JyArIG4udGl0bGUgKyAnPC9zdHJvbmc+JyxcclxuXHRcdFx0bWVzc2FnZTogJycsXHJcblx0XHRcdHVybDogJy9yZXBvcnRzLycgKyBuLmlkLFxyXG5cclxuXHRcdH1cclxuXHJcblx0aWYgd2luZG93LmFjdGl2ZVxyXG5cdFx0d2luZG93Lm5vdGlmeVNob3coKVxyXG5cclxubWVzc2FnZSA9IChkYXRhKSAtPlxyXG5cdGZvciBuIGluIGRhdGFcclxuXHRcdHdpbmRvdy5ub3RpZnkge1xyXG5cclxuXHRcdFx0dGl0bGU6ICc8c3Ryb25nPicgKyBuLmF1dGhvciArICc8L3N0cm9uZz46ICcgKyBuLnRpdGxlICsgJzxici8+JyxcclxuXHRcdFx0bWVzc2FnZTogbi5jb250ZW50LFxyXG5cdFx0XHR1cmw6ICcvbWVzc2FnZXMvaW5ib3gvJyArIG4uaWQsXHJcblxyXG5cdFx0fVxyXG5cclxuXHRpZiB3aW5kb3cuYWN0aXZlXHJcblx0XHR3aW5kb3cubm90aWZ5U2hvdygpXHJcblxyXG5cclxuXHJcbmxvYWQgPSAtPlxyXG5cclxuXHQkLmFqYXgge1xyXG5cclxuXHRcdHVybDogdXJsLFxyXG5cdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRzdWNjZXNzOiBsb2FkZWRcclxuXHR9XHJcblxyXG5cclxuXHJcblx0XHJcbiQod2luZG93KS5mb2N1cyAtPlxyXG5cdGxvYWQoKVxyXG5cclxuXHJcbiQgLT5cclxuXHRsb2FkKCkiLCJcclxuc3F1YXJlID0gLT5cclxuXHJcblx0JCgnLnNxdWFyZScpLmVhY2ggLT5cclxuXHJcblx0XHRpZiAkKHRoaXMpLmRhdGEoJ3NxdWFyZScpID09ICd3aWR0aCdcclxuXHJcblx0XHRcdCQodGhpcykud2lkdGggJCh0aGlzKS5oZWlnaHQoKVxyXG5cdFx0ZWxzZVxyXG5cclxuXHRcdFx0JCh0aGlzKS5oZWlnaHQgJCh0aGlzKS53aWR0aCgpXHJcblxyXG4kIC0+XHJcblx0JCh3aW5kb3cpLnJlc2l6ZSAtPiBcclxuXHRcdHNxdWFyZSgpXHJcblx0XHRcclxuXHRzcXVhcmUoKSIsIlxyXG5jaGFuZ2VkID0gLT4gXHJcblx0Y3VycmVudCA9IHBhcnNlSW50ICgkKCcjY3VycmVudFN0YXRpc3RpY3NQb2ludHMnKS50ZXh0KCkgPyAwKVxyXG5cdGxlZnQgPSBwYXJzZUludCAkKCcjc3RhdGlzdGljc1BvaW50cycpLnRleHQoKVxyXG5cdG9sZCA9IHBhcnNlSW50ICgkKHRoaXMpLmRhdGEoJ29sZCcpID8gMClcclxuXHR2YWwgPSBwYXJzZUludCAoJCh0aGlzKS52YWwoKSA/IDApXHJcblx0ZGlmZiA9IHZhbCAtIG9sZFxyXG5cclxuXHRkaWZmID0gbGVmdCBpZiBkaWZmID4gbGVmdFxyXG5cdHZhbCA9IG9sZCArIGRpZmZcclxuXHRsZWZ0IC09IGRpZmZcclxuXHJcblx0aWYgbm90IGlzTmFOIGRpZmZcclxuXHJcblx0XHQkKHRoaXMpXHJcblx0XHRcdC52YWwgdmFsXHJcblx0XHRcdC5kYXRhICdvbGQnLCB2YWxcclxuXHJcblx0XHQkKCcjc3RhdGlzdGljc1BvaW50cycpXHJcblx0XHRcdC50ZXh0IGxlZnRcclxuXHJcblx0XHQkKCcuc3RhdGlzdGljJykuZWFjaCAtPlxyXG5cdFx0XHR2YWwgPSBwYXJzZUludCAkKHRoaXMpLnZhbCgpID8gMFxyXG5cdFx0XHQkKHRoaXMpLmF0dHIgJ21heCcsIGxlZnQgKyB2YWxcclxuXHJcblxyXG5yYW5kb20gPSAobWluLCBtYXgpIC0+IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKVxyXG5cclxucmFuZG9tSW4gPSAoYXJyYXkpIC0+XHJcblx0aW5kZXggPSByYW5kb20oMCwgYXJyYXkubGVuZ3RoIC0gMSlcclxuXHRhcnJheVtpbmRleF1cclxuXHJcblxyXG5cclxuXHJcblxyXG5yb2xsID0gLT5cclxuXHJcblx0cm9sbGFibGUgPSAkKCcuc3RhdGlzdGljLnJvbGxhYmxlJylcclxuXHQkKHJvbGxhYmxlKS52YWwoMCkudHJpZ2dlcignY2hhbmdlJylcclxuXHRwb2ludHMgPSBwYXJzZUludCAkKCcjc3RhdGlzdGljc1BvaW50cycpLnRleHQoKVxyXG5cclxuXHJcblx0Zm9yIGkgaW4gWzEuLnBvaW50c11cclxuXHJcblx0XHRzdGF0aXN0aWMgPSByYW5kb21Jbihyb2xsYWJsZSlcclxuXHRcdHZhbCA9IHBhcnNlSW50ICQoc3RhdGlzdGljKS52YWwoKVxyXG5cdFx0JChzdGF0aXN0aWMpLnZhbCh2YWwgKyAxKVxyXG5cclxuXHJcblx0JChyb2xsYWJsZSkudHJpZ2dlciAnY2hhbmdlJ1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4kIC0+IFxyXG5cdCQoJy5zdGF0aXN0aWMnKVxyXG5cdFx0LmJpbmQgJ2tleXVwIGlucHV0IGNoYW5nZScsIGNoYW5nZWRcclxuXHRcdC50cmlnZ2VyICdjaGFuZ2UnXHJcblxyXG5cdCQoJy5zdGF0Um9sbGVyJylcclxuXHRcdC5jbGljayhyb2xsKVxyXG5cclxuXHRyb2xsKClcclxuIiwiXHJcbnJlZnJlc2hpbmcgPSBmYWxzZVxyXG5cclxucmVmcmVzaCA9IC0+XHJcblx0d2luZG93LmxvY2F0aW9uLnJlZnJlc2goKSBpZiBub3QgcmVmcmVzaGluZ1xyXG5cdHJlZnJlc2hpbmcgPSB0cnVlXHJcblxyXG51cGRhdGUgPSAodGltZXIpIC0+XHJcblx0YmFyID0gJCh0aW1lcikuY2hpbGRyZW4oJy5wcm9ncmVzcy1iYXInKS5sYXN0KClcclxuXHRsYWJlbCA9ICQodGltZXIpLmNoaWxkcmVuICcucHJvZ3Jlc3MtbGFiZWwnXHJcblx0dGltZSA9IE1hdGgucm91bmQgKG5ldyBEYXRlKS5nZXRUaW1lKCkgLyAxMDAwLjBcclxuXHJcblxyXG5cdG1pbiA9ICQoYmFyKS5kYXRhICdtaW4nXHJcblx0bWF4ID0gJChiYXIpLmRhdGEgJ21heCdcclxuXHRzdG9wID0gJChiYXIpLmRhdGEgJ3N0b3AnXHJcblx0Y2EgPSAkKGJhcikuZGF0YSgnY2EnKVxyXG5cdGNiID0gJChiYXIpLmRhdGEoJ2NiJylcclxuXHJcblxyXG5cclxuXHRyZXZlcnNlZCA9IEJvb2xlYW4oJChiYXIpLmRhdGEoJ3JldmVyc2VkJykgPyBmYWxzZSlcclxuXHRyZWxvYWQgPSBCb29sZWFuKCQoYmFyKS5kYXRhKCdyZWxvYWQnKSA/IHRydWUpXHJcblxyXG5cdGlmIHN0b3A/XHJcblx0XHR0aW1lID0gTWF0aC5taW4gdGltZSwgc3RvcFxyXG5cclxuXHRub3cgPSBNYXRoLmNsYW1wKHRpbWUsIG1pbiwgbWF4KVxyXG5cclxuXHJcblx0cGVyY2VudCA9IChub3cgLSBtaW4pIC8gKG1heCAtIG1pbilcclxuXHRwZXJjZW50ID0gMSAtIHBlcmNlbnQgaWYgcmV2ZXJzZWRcclxuXHJcblxyXG5cclxuXHJcblx0JChiYXIpLmNzcyAnd2lkdGgnLCAocGVyY2VudCAqIDEwMCkgKyAnJSdcclxuXHQkKGJhcikuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgTWF0aC5sZXJwQ29sb3JzKHBlcmNlbnQsIGNhLCBjYikpIGlmIGNhPyBhbmQgY2I/XHJcblx0JChsYWJlbCkudGV4dCB3aW5kb3cudGltZUZvcm1hdD8gbWF4IC0gbm93XHJcblxyXG5cdHJlZnJlc2goKSBpZiB0aW1lID4gbWF4IGFuZCByZWxvYWRcclxuXHJcblx0c2V0VGltZW91dCAtPiB1cGRhdGUgdGltZXIsIDEwMDAgI2lmIHRpbWUgPD0gbWF4XHJcblxyXG5cclxuJCAtPlxyXG5cdCQoJy5wcm9ncmVzcy10aW1lJykuZWFjaCAtPlxyXG5cdFx0dXBkYXRlIHRoaXNcclxuXHJcblxyXG5cclxuXHJcbiIsIiQgLT5cclxuXHQkKCdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJykuZWFjaCgtPlxyXG5cclxuXHRcdG9wdGlvbnMgPSB7XHJcblxyXG5cdFx0XHRodG1sOiB0cnVlLFxyXG5cdFx0XHRwbGFjZW1lbnQ6ICdhdXRvIGxlZnQnXHJcblx0XHR9XHJcblxyXG5cdFx0dHJpZ2dlciA9ICQodGhpcykuZGF0YSgndHJpZ2dlcicpXHJcblxyXG5cdFx0aWYgdHJpZ2dlcj9cclxuXHRcdFx0b3B0aW9ucy50cmlnZ2VyID0gdHJpZ2dlclxyXG5cclxuXHJcblx0XHQkKHRoaXMpLnRvb2x0aXAob3B0aW9ucylcclxuXHQpIiwiXHJcbiQgLT5cclxuXHJcblx0dHV0b3JpYWxzID0ge31cclxuXHQkKCcudHV0b3JpYWwtc3RlcCcpLnBvcG92ZXIoe3RyaWdnZXI6ICdtYW51YWwnLCBwbGFjZW1lbnQ6ICdib3R0b20nfSlcclxuXHJcblx0c2hvdyA9IChzdGVwKSAtPlxyXG5cclxuXHRcdGlmIHN0ZXA/XHJcblxyXG5cdFx0XHQkKHN0ZXAuZWxlbWVudHMpXHJcblx0XHRcdFx0LmJpbmQoJ2NsaWNrJywgY2xpY2tlZClcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ3R1dG9yaWFsLWFjdGl2ZScpXHJcblx0XHRcdFx0LmZpcnN0KClcclxuXHRcdFx0XHQucG9wb3Zlcignc2hvdycpXHJcblxyXG5cclxuXHRjbGlja2VkID0gKCkgLT5cclxuXHJcblx0XHRuZXh0ID0gdHV0b3JpYWxzW3RoaXMuc3RlcC5uYW1lXS5zaGlmdCgpXHJcblxyXG5cdFx0aWYgbmV4dD9cclxuXHJcblx0XHRcdCQuYWpheCh7XHJcblxyXG5cdFx0XHRcdHVybDogJy9hcGkvY2hhcmFjdGVyL3R1dG9yaWFsJyxcclxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdGRhdGE6IHtuYW1lOiB0aGlzLnN0ZXAubmFtZSwgc3RhZ2U6IG5leHQuaW5kZXh9LFxyXG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFx0XHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHRzZXRUaW1lb3V0KC0+XHJcblxyXG5cdFx0XHRcdHNob3cobmV4dClcclxuXHRcdFx0LCA1MDApXHJcblx0XHRlbHNlXHJcblx0XHRcdCQuYWpheCh7XHJcblxyXG5cdFx0XHRcdHVybDogJy9hcGkvY2hhcmFjdGVyL3R1dG9yaWFsJyxcclxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdGRhdGE6IHtuYW1lOiB0aGlzLnN0ZXAubmFtZSwgc3RhZ2U6IHRoaXMuc3RlcC5pbmRleCArIDF9LFxyXG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFx0XHJcblx0XHRcdH0pXHJcblx0XHRcclxuXHJcblxyXG5cclxuXHRcdCQodGhpcy5zdGVwLmVsZW1lbnRzKS51bmJpbmQoJ2NsaWNrJywgY2xpY2tlZClcclxuXHRcdFx0LnJlbW92ZUNsYXNzKCd0dXRvcmlhbC1hY3RpdmUnKVxyXG5cdFx0XHQucG9wb3ZlcignaGlkZScpXHJcblxyXG5cclxuXHRyZWNlaXZlID0gKG9iamVjdCwgbmFtZSwgZGF0YSkgLT5cclxuXHJcblx0XHRpZiBkYXRhLnN0YWdlIDwgMFxyXG5cclxuXHJcblx0XHRcdG1vZGFsID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnbW9kYWwgZmFkZScpXHJcblx0XHRcdGRpYWxvZyA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWRpYWxvZycpXHJcblx0XHRcdGNvbnRlbnQgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdtb2RhbC1jb250ZW50JylcclxuXHRcdFx0aGVhZGVyID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnbW9kYWwtaGVhZGVyJylcclxuXHRcdFx0Ym9keSA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWJvZHknKVxyXG5cdFx0XHRmb290ZXIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdtb2RhbC1mb290ZXInKVxyXG5cdFx0XHR0aXRsZSA9ICQoJzxoND48L2g0PicpLmFkZENsYXNzKCdtb2RhbC10aXRsZScpXHJcblxyXG5cdFx0XHRncm91cCA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ2J0bi1ncm91cCcpXHJcblx0XHRcdGJ0bjEgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdidG4gYnRuLXN1Y2Nlc3MnKS5hdHRyKCd2YWx1ZScsICd5ZXMnKS50ZXh0KGkxOG4ueWVzKVxyXG5cdFx0XHRidG4yID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnYnRuIGJ0bi1kYW5nZXInKS5hdHRyKCd2YWx1ZScsICdubycpLnRleHQoaTE4bi5ubylcclxuXHJcblx0XHRcdCQoYnRuMSkuY2xpY2soLT5cclxuXHJcblx0XHRcdFx0JC5hamF4KHtcclxuXHJcblx0XHRcdFx0XHR1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXHJcblx0XHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdFx0ZGF0YToge25hbWU6IG5hbWUsIGFjdGl2ZTogMX0sXHJcblx0XHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcdFxyXG5cdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdCQobW9kYWwpLm1vZGFsKCdoaWRlJylcclxuXHJcblx0XHRcdFx0bG9hZChvYmplY3QsIG5hbWUsIGRhdGEpXHJcblx0XHRcdClcclxuXHJcblx0XHRcdCQoYnRuMikuY2xpY2soLT5cclxuXHJcblx0XHRcdFx0JC5hamF4KHtcclxuXHJcblx0XHRcdFx0XHR1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXHJcblx0XHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdFx0ZGF0YToge25hbWU6IG5hbWUsIGFjdGl2ZTogMH0sXHJcblx0XHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcdFxyXG5cdFx0XHRcdH0pXHJcblxyXG5cdFx0XHRcdCQobW9kYWwpLm1vZGFsKCdoaWRlJylcclxuXHJcblx0XHRcdClcclxuXHJcblx0XHRcdCQodGl0bGUpXHJcblx0XHRcdFx0LnRleHQoZGF0YS50aXRsZSlcclxuXHJcblx0XHRcdCQoYm9keSlcclxuXHRcdFx0XHQudGV4dChkYXRhLmRlc2NyaXB0aW9uKVxyXG5cclxuXHRcdFx0JChoZWFkZXIpXHJcblx0XHRcdFx0LmFwcGVuZCh0aXRsZSlcclxuXHJcblxyXG5cdFx0XHQkKGdyb3VwKVxyXG5cdFx0XHRcdC5hcHBlbmQoYnRuMilcclxuXHRcdFx0XHQuYXBwZW5kKGJ0bjEpXHJcblxyXG5cdFx0XHQkKGZvb3RlcilcclxuXHRcdFx0XHQuYXBwZW5kKGdyb3VwKVxyXG5cclxuXHJcblx0XHRcdCQoY29udGVudClcclxuXHRcdFx0XHQuYXBwZW5kKGhlYWRlcilcclxuXHRcdFx0XHQuYXBwZW5kKGJvZHkpXHJcblx0XHRcdFx0LmFwcGVuZChmb290ZXIpXHJcblxyXG5cdFx0XHQkKGRpYWxvZylcclxuXHRcdFx0XHQuYXBwZW5kKGNvbnRlbnQpXHJcblxyXG5cdFx0XHQkKG1vZGFsKVxyXG5cdFx0XHRcdC5hcHBlbmQoZGlhbG9nKVxyXG5cclxuXHRcdFx0JCgnYm9keScpXHJcblx0XHRcdFx0LmFwcGVuZChtb2RhbClcclxuXHJcblx0XHRcdCQobW9kYWwpLm1vZGFsKHtiYWNrZHJvcDogJ3N0YXRpYycsIHNob3c6IHRydWUsIGtleWJvYXJkOiBmYWxzZX0pXHJcblxyXG5cclxuXHRcdGVsc2VcclxuXHRcdFx0bG9hZChvYmplY3QsIG5hbWUsIGRhdGEpXHJcblxyXG5cclxuXHJcblx0bG9hZCA9IChvYmplY3QsIG5hbWUsIGRhdGEpIC0+XHJcblxyXG5cdFx0dHV0b3JpYWwgPSBbXVxyXG5cclxuXHRcdCQob2JqZWN0KS5maW5kKCcudHV0b3JpYWwtc3RlcCcpLmVhY2goLT5cclxuXHJcblx0XHRcdHN0ZXAgPSBudWxsXHJcblx0XHRcdGluZGV4ID0gJCh0aGlzKS5kYXRhKCd0dXRvcmlhbC1pbmRleCcpXHJcblxyXG5cdFx0XHRyZXR1cm4gaWYgaW5kZXggPCBkYXRhLnN0YWdlXHJcblxyXG5cclxuXHJcblx0XHRcdGlmIHR1dG9yaWFsW2luZGV4XT9cclxuXHRcdFx0XHRzdGVwID0gdHV0b3JpYWxbaW5kZXhdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRzdGVwID0ge1xyXG5cclxuXHRcdFx0XHRcdGVsZW1lbnRzOiBbXSxcclxuXHRcdFx0XHRcdG5hbWU6IG5hbWUsXHJcblx0XHRcdFx0XHRpbmRleDogaW5kZXgsXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHR1dG9yaWFsW2luZGV4XSA9IHN0ZXBcclxuXHJcblxyXG5cdFx0XHRzdGVwLmVsZW1lbnRzLnB1c2godGhpcylcclxuXHRcdFx0dGhpcy5zdGVwID0gc3RlcFxyXG5cdFx0KVxyXG5cclxuXHRcdHR1dG9yaWFsID0gdHV0b3JpYWwuZmlsdGVyKChlbGVtZW50KSAtPlxyXG5cclxuXHRcdFx0aWYgZWxlbWVudD9cclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHQpXHJcblxyXG5cclxuXHJcblx0XHR0dXRvcmlhbHNbbmFtZV0gPSB0dXRvcmlhbFxyXG5cdFx0c2hvdyh0dXRvcmlhbC5zaGlmdCgpKVxyXG5cclxuXHJcblxyXG5cclxuXHJcblx0JCgnW2RhdGEtdHV0b3JpYWw9dHJ1ZScpLmVhY2goLT5cclxuXHJcblx0XHRuYW1lID0gJCh0aGlzKS5kYXRhKCd0dXRvcmlhbC1uYW1lJylcclxuXHJcblx0XHQkLmFqYXgoe1xyXG5cclxuXHRcdFx0dXJsOiAnL2FwaS9jaGFyYWN0ZXIvdHV0b3JpYWwnLFxyXG5cdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRkYXRhOiB7bmFtZTogbmFtZX0sXHJcblx0XHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRcdHN1Y2Nlc3M6IChkYXRhKSA9PlxyXG5cdFx0XHRcdHJlY2VpdmUodGhpcywgbmFtZSwgZGF0YSkgaWYgZGF0YS5hY3RpdmVcclxuXHRcdH0pXHJcblx0KSIsIndpbmRvdy5mb3JtYXQgb3I9IFxyXG5cdHRpbWU6XHJcblx0XHRkYXk6ICdkJ1xyXG5cdFx0aG91cjogJ2gnXHJcblx0XHRtaW51dGU6ICdtJ1xyXG5cdFx0c2Vjb25kOiAncydcclxuXHJcblxyXG5cclxuXHJcbndpbmRvdy5hY3RpdmUgPz0gZmFsc2VcclxuXHJcblxyXG5cclxuJCh3aW5kb3cpLmZvY3VzIC0+XHJcblx0d2luZG93LmFjdGl2ZSA9IHRydWVcclxuXHJcbiQod2luZG93KS5ibHVyIC0+XHJcblx0d2luZG93LmFjdGl2ZSA9IGZhbHNlXHJcblxyXG4kKHdpbmRvdykucmVzaXplIC0+XHJcblx0Y2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVG8pIGlmIHRoaXMucmVzaXplVG9cclxuXHR0aGlzLnJlc2l6ZVRvID0gc2V0VGltZW91dCgtPlxyXG5cdFx0JCh0aGlzKS50cmlnZ2VyKCdyZXNpemVkJylcclxuXHQsIDUwMClcclxuXHRcclxuXHJcblxyXG5cclxud2luZG93LmxwYWQgb3I9ICh2YWx1ZSwgcGFkZGluZykgLT5cclxuICB6ZXJvZXMgPSBcIjBcIlxyXG4gIHplcm9lcyArPSBcIjBcIiBmb3IgaSBpbiBbMS4ucGFkZGluZ11cclxuXHJcbiAgKHplcm9lcyArIHZhbHVlKS5zbGljZShwYWRkaW5nICogLTEpXHJcblxyXG5cclxudGltZVNlcGFyYXRlID0gKHZhbHVlKSAtPlxyXG5cdGlmIHZhbHVlLmxlbmd0aCA+IDBcclxuXHRcdHZhbHVlICsgJyAnXHJcblx0ZWxzZVxyXG5cdFx0dmFsdWVcclxuXHJcbnRpbWVGb3JtYXQgPSAodGV4dCwgdmFsdWUsIGZvcm1hdCkgLT5cclxuXHR0ZXh0ID0gdGltZVNlcGFyYXRlKHRleHQpXHJcblxyXG5cdGlmIHRleHQubGVuZ3RoID4gMFxyXG5cdFx0dGV4dCArPSB3aW5kb3cubHBhZCB2YWx1ZSwgMlxyXG5cdGVsc2UgXHJcblx0XHR0ZXh0ICs9IHZhbHVlXHJcblxyXG5cdHRleHQgKyBmb3JtYXRcclxuXHJcblxyXG53aW5kb3cudGltZUZvcm1hdCBvcj0gKHZhbHVlKSAtPlxyXG5cdFxyXG5cdHRleHQgPSAnJ1xyXG5cdGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSAqIDEwMDApXHJcblx0ZCA9IGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMVxyXG5cdGggPSBkYXRlLmdldFVUQ0hvdXJzKClcclxuXHRtID0gZGF0ZS5nZXRVVENNaW51dGVzKClcclxuXHRzID0gZGF0ZS5nZXRVVENTZWNvbmRzKClcclxuXHJcblxyXG5cdHRleHQgKz0gZCArIGZvcm1hdC50aW1lLmRheSBpZiBkID4gMFxyXG5cdHRleHQgPSB0aW1lRm9ybWF0KHRleHQsIGgsIGZvcm1hdC50aW1lLmhvdXIpIGlmIGggPiAwXHJcblx0dGV4dCA9IHRpbWVGb3JtYXQodGV4dCwgbSwgZm9ybWF0LnRpbWUubWludXRlKSBpZiBoID4gMCBvciBtID4gMFxyXG5cdHRleHQgPSB0aW1lRm9ybWF0KHRleHQsIHMsIGZvcm1hdC50aW1lLnNlY29uZCkgaWYgaCA+IDAgb3IgbSA+IDAgb3IgcyA+IDBcclxuXHJcblx0dGV4dFxyXG5cclxud2luZG93LnRpbWVGb3JtYXRTaG9ydCBvcj0gKHZhbHVlKSAtPlxyXG5cclxuXHR0ZXh0ID0gJydcclxuXHRkYXRlID0gbmV3IERhdGUodmFsdWUgKiAxMDAwKVxyXG5cdGQgPSBkYXRlLmdldFVUQ0RhdGUoKSAtIDFcclxuXHRoID0gZGF0ZS5nZXRVVENIb3VycygpXHJcblx0bSA9IGRhdGUuZ2V0VVRDTWludXRlcygpXHJcblx0cyA9IGRhdGUuZ2V0VVRDU2Vjb25kcygpXHJcblxyXG5cclxuXHRyZXR1cm4gZCArIGZvcm1hdC50aW1lLmRheSBpZiBkID4gMFxyXG5cdHJldHVybiB0aW1lRm9ybWF0KHRleHQsIGgsIGZvcm1hdC50aW1lLmhvdXIpIGlmIGggPiAwXHJcblx0cmV0dXJuIHRpbWVGb3JtYXQodGV4dCwgbSwgZm9ybWF0LnRpbWUubWludXRlKSBpZiBtID4gMFxyXG5cdHJldHVybiB0aW1lRm9ybWF0KHRleHQsIHMsIGZvcm1hdC50aW1lLnNlY29uZCkgaWYgcyA+IDBcclxuXHJcblxyXG5cclxuXHJcbnJlZnJlc2hpbmcgPSBmYWxzZVxyXG5cclxuXHJcbndpbmRvdy5sb2NhdGlvbi5yZWZyZXNoIG9yPSAtPlxyXG5cdGlmIG5vdCByZWZyZXNoaW5nXHJcblx0XHRyZWZyZXNoaW5nID0gdHJ1ZVxyXG5cdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKVxyXG5cclxuXHJcblxyXG5cclxubm90aWZpY2F0aW9ucyA9IFtdXHJcbndpbmRvdy5ub3RpZnkgb3I9IChwcm9wcyktPlxyXG5cdG5vdGlmaWNhdGlvbnMucHVzaCBwcm9wc1xyXG5cclxuXHJcbmNsb25lID0gKG9iaikgLT5cclxuXHRyZXR1cm4gb2JqICBpZiBvYmogaXMgbnVsbCBvciB0eXBlb2YgKG9iaikgaXNudCBcIm9iamVjdFwiXHJcblx0dGVtcCA9IG5ldyBvYmouY29uc3RydWN0b3IoKVxyXG5cdGZvciBrZXkgb2Ygb2JqXHJcblx0XHR0ZW1wW2tleV0gPSBjbG9uZShvYmpba2V5XSlcclxuXHR0ZW1wXHJcblxyXG5zaG93Tm90aWZ5ID0gKG4sIGkpIC0+XHJcblx0Y29uc29sZS5sb2coJ1AnLCBuLCBpKTtcclxuXHRzZXRUaW1lb3V0ICgtPiBcclxuXHRcdGNvbnNvbGUubG9nKCdTJywgbiwgaSk7XHJcblx0XHQkLm5vdGlmeShuLCB7XHJcblxyXG5cdFx0XHRwbGFjZW1lbnQ6IHtcclxuXHJcblx0XHRcdFx0ZnJvbTogJ2JvdHRvbScsXHJcblx0XHRcdH0sXHJcblx0XHRcdG1vdXNlX292ZXI6ICdwYXVzZScsXHJcblxyXG5cdFx0XHR9KSksIGkgKiAxMDAwXHJcblx0XHJcblxyXG5cclxuXHJcbndpbmRvdy5ub3RpZnlTaG93IG9yPSAtPlxyXG5cdGlmIHdpbmRvdy5hY3RpdmVcclxuXHJcblx0XHRmb3Igbm90aWZpY2F0aW9uLCBpbmRleCBpbiBub3RpZmljYXRpb25zXHJcblx0XHRcdHNob3dOb3RpZnkgJC5leHRlbmQoe30sIG5vdGlmaWNhdGlvbiksIGluZGV4XHJcblx0XHRub3RpZmljYXRpb25zID0gW11cclxuXHJcblxyXG5cclxuJCh3aW5kb3cpLmZvY3VzIC0+IHdpbmRvdy5ub3RpZnlTaG93KClcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5NYXRoLmNsYW1wIG9yPSAodmFsdWUsIG1pbiwgbWF4KSAtPlxyXG5cdE1hdGgubWF4KE1hdGgubWluKHZhbHVlLCBtYXgpLCBtaW4pXHJcblxyXG5cclxuTWF0aC5sZXJwIG9yPSAoaSwgYSwgYikgLT5cclxuXHQoYSAqIGkpICsgKGIgKiAoMSAtIGkpKVxyXG5cclxuXHJcblxyXG5NYXRoLmhleFRvUmdiIG9yPSAoaGV4KSAtPiBcclxuICAgIHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcclxuICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcclxuICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KVxyXG5cclxuICAgIH0gaWYgcmVzdWx0O1xyXG4gICAgbnVsbDtcclxuXHJcbk1hdGgucmdiVG9IZXggb3I9IChyLCBnLCBiKSAtPlxyXG4gICAgcmV0dXJuIFwiI1wiICsgKCgxIDw8IDI0KSArIChyIDw8IDE2KSArIChnIDw8IDgpICsgYikudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG5cclxuXHJcbk1hdGgubGVycENvbG9ycyBvcj0gKGksIGEsIGIpIC0+XHJcblxyXG5cdGNhID0gTWF0aC5oZXhUb1JnYiBhXHJcblx0Y2IgPSBNYXRoLmhleFRvUmdiIGJcclxuXHJcblx0Y2MgPSB7XHJcblx0XHRyOiBNYXRoLnJvdW5kKE1hdGgubGVycChpLCBjYS5yLCBjYi5yKSksXHJcblx0XHRnOiBNYXRoLnJvdW5kKE1hdGgubGVycChpLCBjYS5nLCBjYi5nKSksXHJcblx0XHRiOiBNYXRoLnJvdW5kKE1hdGgubGVycChpLCBjYS5iLCBjYi5iKSksXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gTWF0aC5yZ2JUb0hleChjYy5yLCBjYy5nLCBjYy5iKVxyXG5cclxuXHJcblxyXG5cclxuXHJcbnVwZGF0ZVByb2dyZXNzID0gLT5cclxuXHRiYXIgPSAkKHRoaXMpLmNoaWxkcmVuKCcucHJvZ3Jlc3MtYmFyJylcclxuXHRsYWJlbCA9ICQodGhpcykuY2hpbGRyZW4oJy5wcm9ncmVzcy1sYWJlbCcpXHJcblxyXG5cdG1pbiA9ICQoYmFyKS5kYXRhKCdtaW4nKVxyXG5cdG1heCA9ICQoYmFyKS5kYXRhKCdtYXgnKVxyXG5cdGNhID0gJChiYXIpLmRhdGEoJ2NhJylcclxuXHRjYiA9ICQoYmFyKS5kYXRhKCdjYicpXHJcblx0bm93ID0gTWF0aC5jbGFtcCgkKGJhcikuZGF0YSgnbm93JyksIG1pbiwgbWF4KVxyXG5cdHJldmVyc2VkID0gQm9vbGVhbigkKGJhcikuZGF0YSgncmV2ZXJzZWQnKSA/IGZhbHNlKVxyXG5cclxuXHRwZXJjZW50ID0gKG5vdyAtIG1pbikgLyAobWF4IC0gbWluKSAqIDEwMFxyXG5cdHBlcmNlbnQgPSAxMDAgLSBwZXJjZW50IGlmIHJldmVyc2VkXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHQkKGJhcikuY3NzKCd3aWR0aCcsIHBlcmNlbnQgKyAnJScpXHJcblx0JChiYXIpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIE1hdGgubGVycENvbG9ycyhwZXJjZW50IC8gMTAwLCBjYSwgY2IpKSBpZiBjYT8gYW5kIGNiP1xyXG5cclxuXHJcblxyXG5cdCQobGFiZWwpLnRleHQobm93ICsgJyAvICcgKyBtYXgpXHJcblxyXG4kIC0+IFxyXG5cdCQoJy5wcm9ncmVzcycpLmVhY2ggLT5cclxuXHRcdHRoaXMudXBkYXRlIG9yPSB1cGRhdGVQcm9ncmVzc1xyXG5cclxuXHJcblxyXG5yZWxNb3VzZUNvb3JkcyA9IGBmdW5jdGlvbiAoZXZlbnQpe1xyXG4gICAgdmFyIHRvdGFsT2Zmc2V0WCA9IDA7XHJcbiAgICB2YXIgdG90YWxPZmZzZXRZID0gMDtcclxuICAgIHZhciBjYW52YXNYID0gMDtcclxuICAgIHZhciBjYW52YXNZID0gMDtcclxuICAgIHZhciBjdXJyZW50RWxlbWVudCA9IHRoaXM7XHJcblxyXG4gICAgZG97XHJcbiAgICAgICAgdG90YWxPZmZzZXRYICs9IGN1cnJlbnRFbGVtZW50Lm9mZnNldExlZnQgLSBjdXJyZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgIHRvdGFsT2Zmc2V0WSArPSBjdXJyZW50RWxlbWVudC5vZmZzZXRUb3AgLSBjdXJyZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICB9XHJcbiAgICB3aGlsZShjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50Lm9mZnNldFBhcmVudClcclxuXHJcbiAgICBjYW52YXNYID0gZXZlbnQucGFnZVggLSB0b3RhbE9mZnNldFg7XHJcbiAgICBjYW52YXNZID0gZXZlbnQucGFnZVkgLSB0b3RhbE9mZnNldFk7XHJcblxyXG4gICAgcmV0dXJuIHt4OmNhbnZhc1gsIHk6Y2FudmFzWX1cclxufWBcclxuXHJcbkhUTUxDYW52YXNFbGVtZW50LnByb3RvdHlwZS5yZWxNb3VzZUNvb3JkcyA9IHJlbE1vdXNlQ29vcmRzO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbigtPlxyXG5cclxuXHRvbGRTaG93ID0gJC5mbi5zaG93XHJcblxyXG5cdCMjI1xyXG5cclxuXHJcblx0JC5mbi5zaG93ID0gKHNwZWVkLCBvbGRDYWxsYmFjaykgLT5cclxuXHJcblx0XHRjb25zb2xlLmxvZygnc2hvdycsIHRoaXMpXHJcblxyXG5cdFx0bmV3Q2FsbGJhY2sgPSAtPlxyXG5cclxuXHRcdFx0b2xkQ2FsbGJhY2suYXBwbHkodGhpcykgaWYgJC5pc0Z1bmN0aW9uKG9sZENhbGxiYWNrKVxyXG5cdFx0XHQkKHRoaXMpLnRyaWdnZXIoJ2FmdGVyU2hvdycpXHJcblxyXG5cdFx0JCh0aGlzKS50cmlnZ2VyKCdiZWZvcmVTaG93JylcclxuXHJcblx0XHRkZWVwID0gJCh0aGlzKS5maW5kKCdbZGF0YS1kZWVwc2hvd10nKVxyXG5cclxuXHRcdGlmIGRlZXAubGVuZ3RoXHJcblx0XHRcdGRlZXAuc2hvdygpXHJcblxyXG5cdFx0b2xkU2hvdy5hcHBseSh0aGlzLCBbc3BlZWQsIG5ld0NhbGxiYWNrXSlcclxuXHQjIyNcclxuKSgpXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5lc2NhcGUgb3I9IC0+XHJcblx0dGhpcy5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8XFxbXFxdXFwvXFxcXF0pL2csIFwiXFxcXCQxXCIpXHJcblxyXG5cclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCBvcj0gKHNlYXJjaCwgcmVwbGFjZSkgLT5cclxuXHR0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChzZWFyY2guZXNjYXBlKCksICdnaScpLCByZXBsYWNlKSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==