(function(){this.app=angular.module("game",[]),this.app.controller("GameController",["$scope",function(t){return t.round=function(t,e){var n,i;return i=null!=e?e:0,n=Math.pow(10,i),Math.round(t*n)/n}}]),this.app.controller("PlayerController",["$scope",function(t){var e,n;return e=document.title,(n=function(t){return function(){var i,a;return t.isBusy&&(a=Math.round((new Date).getTime()/1e3),i=Math.max(t.jobEnd-a,0),document.title=window.timeFormat(i)+" - "+e),setTimeout(n,1e3)}}(this))()}])}).call(this),function(){var t;t=function(){return $(".avatar").removeClass("active"),$("#avatar").val($(this).data("avatar")),$(this).addClass("active")},$(function(){return $(".avatar").click(t).first().trigger("click")})}.call(this),function(){var t,e,n;n={fontSize:30,barFontSize:20,nameFontSize:30,margin:5,interval:1e3/60},e=function(){function t(t,e){var n;n=new Image,n.src=e.avatar,n.onload=function(t){return function(){return t.avatar=n}}(this),this.team=t,this.name=e.name,this.id=e.id,this.level=e.level,this.health=e.health,this.maxHealth=e.maxHealth}return t.prototype.draw=function(t,e){var i,a;return"red"===this.team?(t.strokeStyle="rgba(217, 83, 79, 1)",t.fillStyle="rgba(217, 83, 79, 0.4)"):(t.strokeStyle="rgba(51, 122, 183, 1)",t.fillStyle="rgba(51, 122, 183, 0.4)"),t.fillRect(0,0,e,e),t.strokeRect(0,0,e,e),null!=this.avatar&&t.drawImage(this.avatar,n.margin,n.margin,e-2*n.margin,e-2*n.margin),a=this.name+" ("+this.level+")",t.font=n.nameFontSize+"px Roboto",t.lineWidth=1,t.fillStyle="#FFFFFF",t.strokeStyle="#000000",i=t.measureText(a),t.fillText(a,(e-i.width)/2,n.nameFontSize),t.strokeText(a,(e-i.width)/2,n.nameFontSize),t.font=n.barFontSize+"px Roboto",t.strokeStyle="rgba(0, 0, 0, 0.7)",t.fillStyle="rgba(0, 0, 0, 0.4)",t.fillRect(n.margin,e-n.barFontSize-n.margin,e-2*n.margin,n.barFontSize),t.strokeRect(n.margin,e-n.barFontSize-n.margin,e-2*n.margin,n.barFontSize),t.fillStyle="rgba(217, 83, 79, 1)",t.fillRect(n.margin,e-n.barFontSize-n.margin,(e-2*n.margin)*(this.health/this.maxHealth),n.barFontSize),a=Math.round(this.health)+" / "+this.maxHealth,i=t.measureText(a),t.fillStyle="#000000",t.fillText(a,(e-i.width)/2,e-n.barFontSize/2)},t}(),t=function(){function t(t){this.canvas=$(t).children("canvas")[0],this.context=this.canvas.getContext("2d"),this.battleLog=$.parseJSON($(t).children(".battle-log").first().text())}return t.prototype.speed={view:3,info:3,next:3},t.prototype.load=function(){var t,i,a,r,o,s,l,h;for(this.index=0,this.characters=[],this.state="view",this.offset=0,this.pause=!1,$(this.canvas).click(function(t){return function(e){return t.click(e)}}(this)),$(document).keydown(function(t){return function(e){return t.key(e)}}(this)),l=this.battleLog.teams.red,a=0,o=l.length;o>a;a++)i=l[a],t=new e("red",i),this.characters[t.id]=t;for(h=this.battleLog.teams.blue,r=0,s=h.length;s>r;r++)i=h[r],t=new e("blue",i),this.characters[t.id]=t;return this.context.font=n.fontSize+"px Roboto",this.action=this.battleLog.log[this.index],this.attacker=this.characters[this.action.attacker],this.defender=this.characters[this.action.defender],!0},t.prototype.drawCharacters=function(t,e){var n,i;return i=.6*this.canvas.height,n=this.canvas.width/2,this.context.save(),this.context.translate((n-i)/2,(this.canvas.height-i)/2),t.draw(this.context,i),this.context.restore(),this.context.save(),this.context.translate((n-i)/2+n,(this.canvas.height-i)/2),e.draw(this.context,i),this.context.restore()},t.prototype.drawInfo=function(t){var e,i,a,r,o,s,l,h,c,u,d,p,f;return a=this.canvas.width/2,i=this.canvas.height/2,e=.6*this.canvas.height,l=50,c=2*l,u=a+(e+l)/2,d=i,h=.7*e/c,o=1.2,s=13,this.context.font=n.fontSize+"px Roboto",r=this.context.measureText(t),p=u-r.width/2,f=i,this.context.save(),this.context.lineWidth=2,this.context.translate(u,d),this.context.scale(h,o),this.context.fillStyle="#FFFFFF",this.context.strokeStyle="#000000",this.drawStar(s,.6*l,l),this.context.restore(),this.context.save(),this.context.translate(p,f),this.context.fillStyle="#000000",this.context.fillText(t,0,0),this.context.restore()},t.prototype.drawStar=function(t,e,n){var i,a,r,o,s,l,h;for(o=Math.PI/2*3,s=Math.PI/t,this.context.beginPath(),l=Math.cos(o)*n,h=Math.sin(o)*n,this.context.moveTo(l,h),o+=s,i=a=1,r=t;r>=1?r>=a:a>=r;i=r>=1?++a:--a)l=Math.cos(o)*e,h=Math.sin(o)*e,this.context.lineTo(l,h),o+=s,l=Math.cos(o)*n,h=Math.sin(o)*n,this.context.lineTo(l,h),o+=s;return this.context.lineTo(0,-n),this.context.fill(),this.context.stroke(),this.context.closePath()},t.prototype.getEndText=function(){return this.battleLog.win?i18n.battle.win:i18n.battle.lose},t.prototype.draw=function(t){var e,n,i,a,r,o,s,l,h,c,u,d,p,f,m,g,v,$,w,x,y;for(this.context.fillStyle="#FFFFFF",this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.offset+=this.speed[this.state]*t,n=!0,"view"===this.state&&n&&(e=this.battleLog.log[this.index],a=this.characters[e.attacker],r=this.characters[e.defender],"hit"===e.type&&(r.health=e.health),this.drawCharacters(a,r),this.offset>1&&!this.pause&&(this.offset=0,r.startHealth=r.health,r.endHealth="hit"===e.type?Math.max(r.health-e.damage,0):r.health,this.state="info"),n=!1),"info"===this.state&&n&&(e=this.battleLog.log[this.index],a=this.characters[e.attacker],r=this.characters[e.defender],this.drawCharacters(a,r),this.offset<=1?(this.context.globalAlpha=this.offset,r.health=r.startHealth):this.offset<=2?(this.context.globalAlpha=1,s=Math.clamp(this.offset-1,0,1),r.health=Math.lerp(s,r.endHealth,r.startHealth)):(r.health=r.endHealth,this.context.globalAlpha=Math.max(3-this.offset,0)),this.offset>4&&(this.offset=0,this.state="next"),"hit"===e.type?(x=e.damage,e.crit&&(x+="!")):x=i18n.battle.dodge,this.drawInfo(x),this.context.globalAlpha=1,n=!1),"next"===this.state&&n&&(g=this.battleLog.log[this.index],d=this.battleLog.log[this.index+1],v=this.characters[g.attacker],$=this.characters[g.defender],m=this.canvas.height/2*this.offset,this.context.save(),this.context.translate(0,-m),this.drawCharacters(v,$),this.context.restore(),this.context.save(),this.context.translate(0,this.canvas.height-m),null!=d?(p=this.characters[d.attacker],f=this.characters[d.defender],"hit"===d.type&&(f.health=d.health),this.drawCharacters(p,f)):(x=this.getEndText(),this.context.fillStyle="#000000",u=this.context.measureText(x),this.context.fillText(x,(this.canvas.width-u.width)/2,(this.canvas.height-15)/2)),this.context.restore(),this.offset>2&&(this.index++,this.offset=0,this.state=null!=d?"view":"end"),n=!1),"end"===this.state&&n&&(x=this.getEndText(),this.offset=0,this.context.fillStyle="#000000",u=this.context.measureText(x),this.context.fillText(x,(this.canvas.width-u.width)/2,(this.canvas.height-15)/2),n=!1),y=this.canvas.width-4,o=this.canvas.height-2,this.context.save(),this.context.strokeStyle="rgba(0, 0, 0, 0.7)",this.context.fillStyle="rgba(0, 0, 0, 0.4)",this.context.fillRect(2,o-20,y,20),this.context.strokeRect(2,o-20,y,20),this.context.fillStyle="#5BC0DE",this.context.fillRect(2,o-20,y*Math.min(this.index/(this.battleLog.log.length-1),1),20),this.context.lineWidth=5,w=this.battleLog.marks,l=0,h=w.length;h>l;l++)c=w[l],"fainted"===c.type&&(this.context.strokeStyle="#D9534F"),i=c.at/(this.battleLog.log.length-1)*y,this.context.beginPath(),this.context.moveTo(i-this.context.lineWidth/2+2,o-20),this.context.lineTo(i-this.context.lineWidth/2+2,o),this.context.stroke();return this.context.restore()},t.prototype.click=function(t){var e,n,i,a,r,o,s;return n=this.canvas.relMouseCoords(t),o=n.x,s=n.y,i=2,a=i+this.canvas.width-4,e=this.canvas.height-2,r=e-20,o>=i&&a>=o&&s>=r&&e>=s?(this.index=Math.round((o-i)/(a-i)*(this.battleLog.log.length-1)),this.state="view",this.offset=0):void 0},t.prototype.key=function(t){return 32===t.which&&(this.pause=!this.pause),37===t.which&&(this.index=Math.max(this.index-1,0),this.offset=1,this.state="view"),39===t.which?(this.index=Math.min(this.index+1,this.battleLog.log.length-1),this.offset=1,this.state="view"):void 0},t.prototype.requestFrame=function(t){var e;for(e=Math.max(t-this.lastTime,0),this.lastTime=t,this.accumulator+=e;this.accumulator>=n.interval;)this.accumulator-=n.interval,this.draw(n.interval/1e3);return window.requestAnimationFrame(function(t){return function(e){return t.requestFrame(e)}}(this))},t.prototype.start=function(){return this.load()?(this.lastTime=(new Date).getTime(),this.accumulator=0,this.requestFrame(this.lastTime)):void 0},t}(),$(function(){return $(".battle").bind("show",function(){var e;return e=new t(this),e.start()}).filter(":visible").trigger("show")})}.call(this),function(){this.Chat=function(){function t(t,e){var i;i=$.extend({},n,e),this.messageUrl=i.messageUrl,this.playerUrl=i.playerUrl,this.emoticons=new Emoticons,this.allowSend=i.allowSend,this.allowReceive=i.allowReceive,this.receiveExtra=i.receiveExtra,this.sendExtra=i.sendExtra,this.receiveMethod=i.receiveMethod,this.sendMethod=i.sendMethod,this.input=$(t).find(".input"),this.output=$(t).find(".output"),this.sendBtn=$(t).find(".send"),this.clearBtn=$(t).find(".clear"),this.emoticonsBtn=$(t).find(".emoticons"),this.emoticons.popover(this.emoticonsBtn,this.input),this.output[0].scrollTop=this.output[0].scrollHeight,$(this.input).keydown(function(t){return function(e){return t.onKey(e)}}(this)),$(this.sendBtn).click(function(t){return function(){return t.send(),t.clearInput()}}(this)),$(this.clearBtn).click(function(t){return function(){return t.clearOutput()}}(this)),this.interval=i.interval,this.join=i.join,this.cooldown=i.cooldown,this.sent=Math.round((new Date).getTime()/1e3)-this.cooldown,this.touch(),this.time=Math.max(this.time-i.history,0),this.receive()}var e,n;return n={messageUrl:null,playerUrl:null,emoticonUrl:null,interval:2,history:0,minLength:1,maxLength:512,cooldown:60,join:120,allowSend:!0,allowReceive:!0,sendExtra:{},receiveExtra:{},sendMethod:"POST",receiveMethod:"GET"},e={clear:"clearOutput"},t.prototype.getErrorText=function(t,e){var n,i,a,r;if(a=null!=(i=i18n.chat.errors[t])?i:i18n.chat.errors.unknown,null!=e&&"object"==typeof e)for(n in e)r=e[n],a=a.replace(":"+n,r);return a},t.prototype.error=function(t,e){var n;return n=$("<div></div>").addClass("alert").addClass("alert-danger").text(this.getErrorText(t,e)),$(this.output).append(n)},t.prototype.alert=function(t,e){return alert(this.getErrorText(t,e))},t.prototype.touch=function(){return this.time=Math.round((new Date).getTime()/1e3)},t.prototype.send=function(){var t,n,i,a,r,o,s,l;if(s=Math.round((new Date).getTime()/1e3),o=$(this.input).val(),r=o.match(/^\/(\w+)/i),null!=r&&null!=r[1]){t=r[1];for(a in e)if(l=e[a],t.toLowerCase()===a.toLowerCase()&&(i=this[l],"function"==typeof i))return void i.call(this);return void this.error("cmdNotFound",{name:t})}return this.allowSend?o.length<this.minLength?void this.alert("tooShort",{min:this.minLength}):o.length>this.maxLength?void alert("tooLong",{max:this.maxLength}):this.sent+this.cooldown>s?void this.alert("cooldown"):(n=$.extend({},this.sendExtra,{message:$(this.input).val()}),$.ajax({url:this.messageUrl,success:function(t){return function(e){return t.onSent(e)}}(this),data:n,dataType:"json",method:this.sendMethod}),this.sent=s,$(this.sendBtn).data("time",this.sent+this.cooldown)):this.error("cannotSend")},t.prototype.receive=function(){var t;return this.allowReceive?(t=$.extend({},this.receiveExtra,{time:this.time}),$.ajax({url:this.messageUrl,data:t,complete:function(t){return function(){return t.onComplete()}}(this),success:function(t){return function(e){return t.onReceived(e)}}(this),dataType:"json",method:this.receiveMethod}),this.touch()):this.error("cannotReceive")},t.prototype.clearOutput=function(){return $(this.output).empty()},t.prototype.clearInput=function(){return $(this.input).val("")},t.prototype.getMessage=function(t){return $("<p></p>").html(this.emoticons.insert(t.message)).append($("<small></small>").addClass("chat-time").data("time",t.time))},t.prototype.newMessage=function(t){var e,n,i,a,r,o,s,l;return l=$("<div></div>").addClass("row").addClass("chat-message").data("time",t.time).data("author",t.author),i=$("<div></div>").addClass("col-xs-1"),a=$("<div></div>").addClass("col-xs-11"),r=null!=this.playerUrl?$("<a></a>").attr("href",this.getPlayerUrl(t.author)).addClass("chat-author"):$("<div></div>").addClass("chat-author"),o=$("<div></div>").addClass("chat-content"),n=$("<img></img>").addClass("img-responsive").addClass("chat-avatar").attr("src",t.avatar),e=$("<p></p>").append($("<strong></strong>").addClass("chat-name").text(t.author)),s=this.getMessage(t),$(r).append(n).append(e),$(o).append(s),$(i).append(r),$(a).append(o),$(l).append(i).append(a),$(this.output).append(l)},t.prototype.modifyMessage=function(t,e){return $(t).find(".chat-content").append(this.getMessage(e))},t.prototype.addMessage=function(t){var e,n,i,a;return i=this.output[0].scrollHeight-this.output[0].scrollTop-this.output[0].clientHeight<=1,n=$(this.output).children().last(),0!==n.length&&$(n).is(".chat-message")?(a=$(n).data("time"),e=$(n).data("author"),e===t.author&&t.time-a<=this.join?this.modifyMessage(n,t):this.newMessage(t)):this.newMessage(t),i?this.output[0].scrollTop=this.output[0].scrollHeight-1:void 0},t.prototype.onSent=function(t){return"error"===t.status?this.error(t.reason,t.args):void 0},t.prototype.onReceived=function(t){var e,n,i,a;for(a=[],e=0,n=t.length;n>e;e++)i=t[e],a.push(this.addMessage(i));return a},t.prototype.onComplete=function(){return setTimeout(function(t){return function(){return t.receive()}}(this),1e3*this.interval)},t.prototype.onKey=function(t){return 13===t.which?(this.send(),this.clearInput()):void 0},t.prototype.getPlayerUrl=function(t){return this.playerUrl.replace("{name}",t)},t}(),$(function(){var t;return(t=function(){var e;return e=Math.round((new Date).getTime()/1e3),$(".chat .chat-time").each(function(){var t,n,i;return i=parseInt($(this).data("time")),t=e-i,n=60>t?i18n.chat.fewSecs:window.timeFormatShort(t),$(this).text(n+" "+i18n.chat.ago)}),$(".chat .send").each(function(){var t,n,i;return"true"!==$(this).data("disabled")?(i=parseInt($(this).data("time")),n=$(this).data("text"),t=i-e,t>0?$(this).text(window.timeFormat(t)).addClass("disabled"):$(this).text(n).removeClass("disabled")):void 0}),setTimeout(t,1e3)})()})}.call(this),function(){var t;t=function(){var e,n;return e=new Date,n=Math.round(e.getTime()/1e3),$(".current-time").text(e.toUTCString()),$(".time-left").each(function(){var t;return t=$(this).data("to"),$(this).text(window.timeFormat(Math.max(t-n,0)))}),setTimeout(t,1e3)},$(function(){return t()})}.call(this),function(){var t,e;t=[],e=function(t){var e,n;return e=null!=(n=$(t).data("dismissible"))?n:!0,$(t).bind("shown.bs.modal",function(t){return $(this).find(".battle").trigger("show")}),$(t).modal(e?{backdrop:!0,show:!0,keyboard:!0}:{backdrop:"static",show:!0,keyboard:!1})},$(function(){return t=$(".modal.autoshow"),$(t).each(function(n){return 0===n&&e(this),n<t.length-1?$(this).on("hidden.bs.modal",function(i){return e(t[n+1])}):void 0})})}.call(this),function(){var t;this.Emoticons=function(){function t(t,n){this.url=null!=t?t:e.url,this.set=$.extend({},e.emoticons,null!=n?n:{})}var e;return e={emoticons:{";)":"blink.png",":D":"grin.png",":(":"sad.png",":)":"smile.png","B)":"sunglasses.png","O.o":"surprised.png",":p":"tongue.png"},url:"/images/emoticons/{name}"},t.prototype.insert=function(t){var e,n,i,a,r;i=this.set;for(n in i)r=i[n],a=this.url.replace("{name}",r),e='<img class="emoticon" src="'+a+'" alt="'+n+'" title="'+n+'"/>',t=t.replaceAll(n,e);return t},t.prototype.popover=function(t,e){return $(t).popover({html:!0,trigger:"click",placement:"top",title:i18n.emoticons.title,content:function(t){return function(){return t.getPopoverContent(e)}}(this),template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content emoticon-container"></div></div>'})},t.prototype.getPopoverContent=function(t){var e,n,i,a,r,o;e=$("<div></div>"),a=this.set;for(i in a)o=a[i],r=this.url.replace("{name}",o),n=$("<img></img>").addClass("emoticon").attr("src",r).attr("alt",i).attr("title",i).click(function(){return $(t).val($(t).val()+$(this).attr("alt"))}),$(e).append(n);return e},t}(),t=0,$(function(){var t;return t=new Emoticons,$("[data-emoticons=true]").each(function(){var e;return e=$(this).text(),e=t.insert(e),$(this).html(e)})})}.call(this),function(){var t,e,n,i,a,r;r={xs:768,sm:992,md:1200},i=function(){var t;return t=$(window).width(),t<r.xs?["xs"]:t<r.sm?["sm","xs"]:t<r.md?["md","sm","xs"]:["lg","md","sm","xs"]},n=function(t){var e,n,i,a,r,o;for(o=[],n=0,a=t.length;a>n;n++)for(r=t[n],e=i=1;12>=i;e=++i)o.push("col-"+r+"-"+e);return o},a=function(t,e){var n,i,a,r,o,s;for(n=0,i=e.length;i>n;n++)if(a=e[n],o=new RegExp("col-"+a+"-(\\d+)"),s=null!=(r=$(t).attr("class").match(o))?r[1]:void 0,null!=s)return parseInt(s);return null},e=function(){var t,e,r;return e=i(),t=n(e),r="."+t.join(",."),$(".row.equalize").each(function(){var t,n,i,o,s,l,h,c;if(n=[],h=0,c=0,$(this).children(r).each(function(){var t;return t=a(this,e),c+=t,c>12&&(c-=12,h++),null==n[h]&&(n[h]=0),n[h]=Math.max(n[h],$(this).height())}),h=0,c=0,t=null,$(this).children(r).each(function(){return c+=a(this,e),null==t&&(t=this),c>12&&(c-=12,h++,t=this),$(this).height(n[h])}),i=Math.round((12-c)/2),null!=t&&i>0){for(l=e[0],o=s=1;12>=s;o=++s)$(t).removeClass("col-"+l+"-offset-"+o);return $(t).addClass("col-"+l+"-offset-"+i)}})},t=function(){return $("img").on("load",e)},$(function(){})}.call(this),function(){var t,e,n,i,a,r,o;o=1,t=function(t){return 17===t.which&&(o=10),16===t.which?o=100:void 0},e=function(t){return 17===t.which||16===t.which?o=1:void 0},n=function(t){var e,n,i,a,r,s,l,h,c;return console.log("mouseWheel"),i=parseInt(null!=(a=$(this).attr("min"))?a:0),n=parseInt(null!=(r=$(this).attr("max"))?r:100),h=parseInt(null!=(s=$(this).attr("step"))?s:1),e=t.deltaY*h*o,c=parseInt(null!=(l=$(this).val())?l:0),c=Math.clamp(c+e,i,n),$(this).val(c).trigger("change"),t.preventDefault()},r=function(t){var e,n,i,a,r,o,s;return console.log("rangeChanged"),i=$(this).parent().children(".range-value"),n=null!=(a=$(i).data("before"))?a:"",e=null!=(r=$(i).data("after"))?r:"",s=null!=(o=$(this).val())?o:0,$(i).text(n+s+e)},i=function(t){var e,n,i,a,r,s,l,h,c;return console.log("numberDecrease"),e=$(this).parent().parent().children("input"),i=parseInt(null!=(a=$(e).attr("min"))?a:0),n=parseInt(null!=(r=$(e).attr("max"))?r:100),h=parseInt(null!=(s=$(e).attr("step"))?s:1),c=parseInt(null!=(l=$(e).val())?l:0),c=Math.clamp(c-o*h,i,n),$(e).val(c).trigger("change")},a=function(t){var e,n,i,a,r,s,l,h,c;return console.log("numberIncrease"),e=$(this).parent().parent().children("input"),i=parseInt(null!=(a=$(e).attr("min"))?a:0),n=parseInt(null!=(r=$(e).attr("max"))?r:100),h=parseInt(null!=(s=$(e).attr("step"))?s:1),c=parseInt(null!=(l=$(e).val())?l:0),c=Math.clamp(c+o*h,i,n),$(e).val(c).trigger("change")},$(function(){return $(window).keyup(e).keydown(t),$("input[type=number], input[type=range]").bind("mousewheel",n),$("input[type=range]").change(r).mousemove(r),$(".number-minus").children("button").click(i),$(".number-plus").children("button").click(a)})}.call(this),function(){$(function(){var t,e,n,i,a;return console.log($(document).size()),t=!1,a=function(t){return{width:$(t).width(),height:$(t).height()}},n=function(t){return $(t).offset()},i=function(){var i,r;return t?void 0:(t=!0,i=$("<div></div>").attr("id","mainOverlay").addClass("overlay").css(a(document)).click(e).hide(),r=$("<div></div>").attr("id","navOverlay").addClass("overlay").css("position","fixed").css("z-index",1e5).css(a("#mainNav")).click(e).hide(),console.log($("#mainContent [data-help]")),console.log($("#mainNav [data-help]")),$("#mainContent [data-help]").each(function(){var t,e,r;return t=$(this).clone(),e=n(this),r=a(this),$(t).addClass("helper").css("position","absolute").tooltip({placement:"auto top",title:$(this).data("help")}).css(e).css(r),$(t).find("[title]").removeAttr("title"),$(i).append(t)}),$("#mainNav [data-help]").each(function(){var t,e,i;return t=$(this).clone(),e=n(this),i=a(this),$(t).addClass("helper").css("position","absolute").tooltip({placement:"auto top",title:$(this).data("help")}).css(e).css(i),$(t).find("[title]").removeAttr("title"),$(r).append(t)}),$("body").append(i).append(r),$(i).fadeIn(),$(r).fadeIn())},e=function(){return t?(t=!1,$(".overlay").fadeOut({complete:function(){return $(".overlay").remove()}})):void 0},$("#helpBtn").click(function(){return i()}),$(document).keydown(function(t){return 27===t.which?e():void 0})})}.call(this),function(){var t,e,n,i,a;if(e=0,a=["webkit","moz"],!window.requestAnimationFrame)for(t=0,n=a.length;n>t;t++)i=a[t],window.requestAnimationFrame=window[i+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i+"CancelAnimationFrame"]||window[i+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t,n){var i,a,r;return i=(new Date).getTime(),r=Math.max(0,16-(i-e)),a=window.setTimeout(function(){return t(i+r)},r)}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){return clearTimeout(t)})}.call(this),function(){$(function(){return $(".image-preview").each(function(){var t,e;return e=this,t=$(this).data("for"),$("#"+t).change(function(t){var n;return n=URL.createObjectURL(t.target.files[0]),null!=n?$(e).attr("src",n):void 0}).trigger("change")})})}.call(this),function(){var t,e,n;n=function(t){return window.location.href="/lang/"+t},t=function(){return n($(this).data("lang"))},e=function(){return n($(this).val())},$(function(){return $(".language-select").change(e),$(".language-button").click(t)})}.call(this),function(){var t;t=function(){var t;return t=$("#mainNav").height()+10,$("body").css("padding-top",t+"px")},$(function(){return $(window).resize(function(){return t()}),t()})}.call(this),function(){var t,e;t=function(t){return"/images/plants/plant-"+t+".png"},e=function(n){var i,a,r,o,s;return r=Math.round((new Date).getTime()/1e3),o=parseInt($(n).data("start")),i=parseInt($(n).data("end")),s=parseInt($(n).data("watering")),r=Math.min(r,s),a=Math.floor(17*Math.clamp((r-o)/(i-o),0,1)),$(n).attr("src",t(a)),17>a?setTimeout(function(){return e(n)},1e3):void 0},$(function(){return $(".plantation-plant").each(function(){return e(this)}),$("#seedsModal").on("show.bs.modal",function(t){var e;return e=$(t.relatedTarget).data("slot"),$(this).find("input[name=slot]").val(e)})})}.call(this),function(){var t,e,n,i,a,r,o,s,l;l="/api/character",r=function(t,e,n,i,a,r){var o,s,l,h;return o=$("."+t+"-bar"),h=$("."+t+"-timer"),o.length>0&&(l=$(o).children(".progress-bar"),$(l).data("max",i).data("min",n).data("now",e),"function"==typeof(s=o[0]).update&&s.update()),h.length>0?(l=$(h).children(".progress-bar"),null!=r?$(l).data("max",r).data("min",a):$(l).data("max",1).data("min",0)):void 0},s=function(t,e,n,i){return $("."+t+"-now").text(e),$("."+t+"-min").text(n),$("."+t+"-max").text(i)},o=function(t,e){return $("."+t).text(e)},t=function(t){var e,n,i;if(r("health",t.health,0,t.maxHealth,t.healthUpdate,t.nextHealthUpdate),s("health",t.health,0,t.maxHealth),r("energy",t.energy,0,t.maxEnergy,t.energyUpdate,t.nextEnergyUpdate),s("energy",t.energy,0,t.maxEnergy),r("wanted",t.wanted,0,6,t.wantedUpdate,t.nextWantedUpdate),s("wanted",t.wanted,0,6),r("experience",t.experience,0,t.maxExperience,null,null),s("experience",t.experience,0,t.maxExperience),r("plantator",t.plantatorExperience,0,t.plantatorMaxExperience,null,null),s("plantator",t.plantatorExperience,0,t.plantatorMaxExperience),r("smuggler",t.smugglerExperience,0,t.smugglerMaxExperience,null,null),s("smuggler",t.smugglerExperience,0,t.smugglerMaxExperience),r("dealer",t.dealerExperience,0,t.dealerMaxExperience,null,null),s("dealer",t.dealerExperience,0,t.dealerMaxExperience),n=angular.element(document.body).scope(),null!=n&&null!=n.player){for(e in t)i=t[e],n.player[e]=i;return n.$apply()}},n=function(n){return t(n),n.reload?window.location.refresh():($.ajax({url:l+"/notifications",dataType:"json",method:"GET",success:a}),$.ajax({url:l+"/messages",dataType:"json",method:"GET",success:i})),setTimeout(e,1e3*n.nextUpdate)},a=function(t){var e,n,i;for(e=0,n=t.length;n>e;e++)i=t[e],window.notify({title:"<strong>"+i.title+"</strong>",message:"",url:"/reports/"+i.id});return window.active?window.notifyShow():void 0},i=function(t){var e,n,i;for(e=0,n=t.length;n>e;e++)i=t[e],window.notify({title:"<strong>"+i.author+"</strong>: "+i.title+"<br/>",message:i.content,url:"/messages/inbox/"+i.id});return window.active?window.notifyShow():void 0},e=function(){return $.ajax({url:l,dataType:"json",method:"GET",success:n})},$(window).focus(function(){return e()}),$(function(){return e()})}.call(this),function(){var t;t=function(){return $(".square").each(function(){return"width"===$(this).data("square")?$(this).width($(this).height()):$(this).height($(this).width())})},$(function(){return $(window).resize(function(){return t()}),t()})}.call(this),function(){var t,e,n,i;t=function(){var t,e,n,i,a,r,o,s;return t=parseInt(null!=(a=$("#currentStatisticsPoints").text())?a:0),n=parseInt($("#statisticsPoints").text()),i=parseInt(null!=(r=$(this).data("old"))?r:0),s=parseInt(null!=(o=$(this).val())?o:0),e=s-i,e>n&&(e=n),s=i+e,n-=e,isNaN(e)?void 0:($(this).val(s).data("old",s),$("#statisticsPoints").text(n),$(".statistic").each(function(){var t;return s=parseInt(null!=(t=$(this).val())?t:0),$(this).attr("max",n+s)}))},e=function(t,e){return Math.round(Math.random()*(e-t)+t)},n=function(t){var n;return n=e(0,t.length-1),t[n]},i=function(){var t,e,i,a,r,o,s;for(r=$(".statistic.rollable"),$(r).val(0).trigger("change"),i=parseInt($("#statisticsPoints").text()),t=e=1,a=i;a>=1?a>=e:e>=a;t=a>=1?++e:--e)o=n(r),s=parseInt($(o).val()),$(o).val(s+1);return $(r).trigger("change")},$(function(){return $(".statistic").bind("keyup input change",t).trigger("change"),$(".statRoller").click(i),i()})}.call(this),function(){var t,e,n,i;e=!1,t=function(){return e||window.location.refresh(),e=!0},n=function(e){var i,a,r,o,s,l,h,c,u,d,p,f,m,g;return i=$(e).children(".progress-bar").last(),o=$(e).children(".progress-label"),g=Math.round((new Date).getTime()/1e3),l=$(i).data("min"),s=$(i).data("max"),m=$(i).data("stop"),a=$(i).data("ca"),r=$(i).data("cb"),f=Boolean(null!=(u=$(i).data("reversed"))?u:!1),p=Boolean(null!=(d=$(i).data("reload"))?d:!0),null!=m&&(g=Math.min(g,m)),h=Math.clamp(g,l,s),c=(h-l)/(s-l),f&&(c=1-c),$(i).css("width",100*c+"%"),null!=a&&null!=r&&$(i).css("background-color",Math.lerpColors(c,a,r)),$(o).text("function"==typeof window.timeFormat?window.timeFormat(s-h):void 0),g>s&&p&&t(),setTimeout(function(){return n(e)},1e3)},i=function(t){var e,n,a,r,o;return o=Math.round((new Date).getTime()/1e3),n=$(t).data("min"),e=$(t).data("max"),a=Math.clamp(o,n,e),r=1-(a-n)/(e-n),$(t).css("width",100*r+"%"),setTimeout(function(){return i(t)},1e3)},$(function(){return $(".progress-time").each(function(){return n(this)}),$(".nav-timer > .nav-timer-bar").each(function(){return i(this)})})}.call(this),function(){$(function(){return $('[data-toggle="tooltip"]').each(function(){var t,e;return t={html:!0,placement:"auto left"},e=$(this).data("trigger"),null!=e&&(t.trigger=e),$(this).tooltip(t)})})}.call(this),function(){$(function(){var t,e,n,i,a;return a={},$(".tutorial-step").popover({trigger:"manual",placement:"bottom"}),i=function(e){return null!=e?$(e.elements).bind("click",t).addClass("tutorial-active").first().popover("show"):void 0},t=function(e){var n;return n=a[this.step.name].shift(),null!=n?($.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:this.step.name,stage:n.index},method:"POST"}),setTimeout(function(){return i(n)},500)):$.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:this.step.name,stage:this.step.index+1},method:"POST"}),$(this.step.elements).unbind("click",t).removeClass("tutorial-active").popover("hide")},n=function(t,n,i){var a,r,o,s,l,h,c,u,d,p;return i.stage<0?(d=$("<div></div>").addClass("modal fade"),l=$("<div></div>").addClass("modal-dialog"),s=$("<div></div>").addClass("modal-content"),u=$("<div></div>").addClass("modal-header"),a=$("<div></div>").addClass("modal-body"),h=$("<div></div>").addClass("modal-footer"),p=$("<h4></h4>").addClass("modal-title"),c=$("<div></div>").addClass("btn-group"),r=$("<div></div>").addClass("btn btn-success").attr("value","yes").text(i18n.yes),o=$("<div></div>").addClass("btn btn-danger").attr("value","no").text(i18n.no),$(r).click(function(){return $.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:n,active:1},method:"POST"}),$(d).modal("hide"),e(t,n,i)}),$(o).click(function(){return $.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:n,active:0},method:"POST"}),$(d).modal("hide")}),$(p).text(i.title),$(a).text(i.description),$(u).append(p),$(c).append(o).append(r),$(h).append(c),$(s).append(u).append(a).append(h),$(l).append(s),$(d).append(l),$("body").append(d),$(d).modal({backdrop:"static",show:!0,keyboard:!1})):e(t,n,i)},e=function(t,e,n){var r,o;return o=[],r=$(t).parents("[data-tutorial=true]").length+1,$(t).find(".tutorial-step").each(function(){var t,i;return i=null,t=$(this).data("tutorial-index"),t<n.stage||$(this).parents("[data-tutorial=true]").length!==r?void 0:(null!=o[t]?i=o[t]:(i={elements:[],name:e,index:t},o[t]=i),i.elements.push(this),this.step=i)}),o=o.filter(function(t){return null!=t?!0:!1}),a[e]=o,i(o.shift())},$("[data-tutorial=true").each(function(){var t;return t=$(this).data("tutorial-name"),$.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:t},method:"GET",success:function(e){return function(i){return i.active?n(e,t,i):void 0}}(this)})})})}.call(this),function(){var t,e,n,i,a,r,o,s,l,h,c;window.format||(window.format={time:{day:"d",hour:"h",minute:"m",second:"s"}}),null==window.active&&(window.active=!1),$(window).focus(function(){return window.active=!0}),$(window).blur(function(){return window.active=!1}),$(window).resize(function(){return this.resizeTo&&clearTimeout(this.resizeTo),this.resizeTo=setTimeout(function(){return $(this).trigger("resized")},500)}),window.lpad||(window.lpad=function(t,e){var n,i,a,r;for(r="0",n=i=1,a=e;a>=1?a>=i:i>=a;n=a>=1?++i:--i)r+="0";return(r+t).slice(-1*e)}),h=function(t){return t.length>0?t+" ":t},l=function(t,e,n){return t=h(t),t+=t.length>0?window.lpad(e,2):e,t+n},window.timeFormat||(window.timeFormat=function(t){var e,n,i,a,r,o;return o="",n=new Date(1e3*t),e=n.getUTCDate()-1,i=n.getUTCHours(),a=n.getUTCMinutes(),r=n.getUTCSeconds(),e>0&&(o+=e+format.time.day),i>0&&(o=l(o,i,format.time.hour)),(i>0||a>0)&&(o=l(o,a,format.time.minute)),(i>0||a>0||r>0)&&(o=l(o,r,format.time.second)),o}),window.timeFormatShort||(window.timeFormatShort=function(t){var e,n,i,a,r,o;return o="",n=new Date(1e3*t),e=n.getUTCDate()-1,i=n.getUTCHours(),a=n.getUTCMinutes(),r=n.getUTCSeconds(),e>0?e+format.time.day:i>0?l(o,i,format.time.hour):a>0?l(o,a,format.time.minute):r>0?l(o,r,format.time.second):void 0}),r=!1,(t=window.location).refresh||(t.refresh=function(){return r?void 0:(r=!0,window.location.reload(!0))}),a=[],window.notify||(window.notify=function(t){return a.push(t)}),i=function(t){var e,n;if(null===t||"object"!=typeof t)return t;n=new t.constructor;for(e in t)n[e]=i(t[e]);return n},s=function(t,e){return console.log("P",t,e),setTimeout(function(){return console.log("S",t,e),$.notify(t,{placement:{from:"bottom"},mouse_over:"pause"})},1e3*e)},window.notifyShow||(window.notifyShow=function(){var t,e,n,i;if(window.active){for(t=e=0,n=a.length;n>e;t=++e)i=a[t],s($.extend({},i),t);return a=[]}}),$(window).focus(function(){return window.notifyShow()}),Math.clamp||(Math.clamp=function(t,e,n){return Math.max(Math.min(t,n),e)}),Math.lerp||(Math.lerp=function(t,e,n){return e*t+n*(1-t)}),Math.hexToRgb||(Math.hexToRgb=function(t){var e;return e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t),e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}),
Math.rgbToHex||(Math.rgbToHex=function(t,e,n){return"#"+((1<<24)+(t<<16)+(e<<8)+n).toString(16).slice(1)}),Math.lerpColors||(Math.lerpColors=function(t,e,n){var i,a,r;return i=Math.hexToRgb(e),a=Math.hexToRgb(n),r={r:Math.round(Math.lerp(t,i.r,a.r)),g:Math.round(Math.lerp(t,i.g,a.g)),b:Math.round(Math.lerp(t,i.b,a.b))},Math.rgbToHex(r.r,r.g,r.b)}),c=function(){var t,e,n,i,a,r,o,s,l,h;return t=$(this).children(".progress-bar"),i=$(this).children(".progress-label"),r=$(t).data("min"),a=$(t).data("max"),e=$(t).data("ca"),n=$(t).data("cb"),o=Math.clamp($(t).data("now"),r,a),h=Boolean(null!=(l=$(t).data("reversed"))?l:!1),s=(o-r)/(a-r)*100,h&&(s=100-s),$(t).css("width",s+"%"),null!=e&&null!=n&&$(t).css("background-color",Math.lerpColors(s/100,e,n)),$(i).text(o+" / "+a)},$(function(){return $(".progress").each(function(){return this.update||(this.update=c)})}),o=function(t){var e=0,n=0,i=0,a=0,r=this;do e+=r.offsetLeft-r.scrollLeft,n+=r.offsetTop-r.scrollTop;while(r=r.offsetParent);return i=t.pageX-e,a=t.pageY-n,{x:i,y:a}},HTMLCanvasElement.prototype.relMouseCoords=o,function(){var t;return t=$.fn.show}(),(e=String.prototype).escape||(e.escape=function(){return this.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")}),(n=String.prototype).replaceAll||(n.replaceAll=function(t,e){return this.replace(new RegExp(t.escape(),"gi"),e)})}.call(this);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvYXBwLmNvZmZlZSIsImFwcC5qcyIsIi9zb3VyY2UvYXZhdGFyLmNvZmZlZSIsIi9zb3VyY2UvYmF0dGxlLmNvZmZlZSIsIi9zb3VyY2UvY2hhdC5jb2ZmZWUiLCIvc291cmNlL2Nsb2NrLmNvZmZlZSIsIi9zb3VyY2UvZGlhbG9nLmNvZmZlZSIsIi9zb3VyY2UvZW1vdGljb24uY29mZmVlIiwiL3NvdXJjZS9lcXVhbGl6ZXIuY29mZmVlIiwiL3NvdXJjZS9mb3JtLmNvZmZlZSIsIi9zb3VyY2UvaGVscGVyLmNvZmZlZSIsIi9zb3VyY2UvaWVmaXguY29mZmVlIiwiL3NvdXJjZS9pbWFnZVByZXZpZXcuY29mZmVlIiwiL3NvdXJjZS9sYW5ndWFnZS5jb2ZmZWUiLCIvc291cmNlL25hdmZpeC5jb2ZmZWUiLCIvc291cmNlL3BsYW50YXRpb24uY29mZmVlIiwiL3NvdXJjZS9wbGF5ZXIuY29mZmVlIiwiL3NvdXJjZS9zcXVhcmUuY29mZmVlIiwiL3NvdXJjZS9zdGF0aXN0aWNzLmNvZmZlZSIsIi9zb3VyY2UvdGltZXIuY29mZmVlIiwiL3NvdXJjZS90b29sdGlwLmNvZmZlZSIsIi9zb3VyY2UvdHV0b3JpYWwuY29mZmVlIiwiL3NvdXJjZS91dGlscy5jb2ZmZWUiXSwibmFtZXMiOlsidGhpcyIsImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwicm91bmQiLCJ2YWx1ZSIsInByZWNpc2lvbiIsIm4iLCJwIiwiTWF0aCIsInBvdyIsIm9sZCIsInVwZGF0ZSIsImRvY3VtZW50IiwidGl0bGUiLCJfdGhpcyIsImxlZnQiLCJub3ciLCJpc0J1c3kiLCJEYXRlIiwiZ2V0VGltZSIsIm1heCIsImpvYkVuZCIsIndpbmRvdyIsInRpbWVGb3JtYXQiLCJzZXRUaW1lb3V0IiwiY2FsbCIsImNsaWNrZWQiLCIkIiwicmVtb3ZlQ2xhc3MiLCJ2YWwiLCJkYXRhIiwiYWRkQ2xhc3MiLCJjbGljayIsImZpcnN0IiwidHJpZ2dlciIsIkJhdHRsZSIsIkNoYXJhY3RlciIsImNvbmZpZyIsImZvbnRTaXplIiwiYmFyRm9udFNpemUiLCJuYW1lRm9udFNpemUiLCJtYXJnaW4iLCJpbnRlcnZhbCIsInRlYW0iLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiYXZhdGFyIiwib25sb2FkIiwibmFtZSIsImlkIiwibGV2ZWwiLCJoZWFsdGgiLCJtYXhIZWFsdGgiLCJwcm90b3R5cGUiLCJkcmF3IiwiY29udGV4dCIsInNpemUiLCJtZWFzdXJlIiwidGV4dCIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwiZHJhd0ltYWdlIiwiZm9udCIsImxpbmVXaWR0aCIsIm1lYXN1cmVUZXh0IiwiZmlsbFRleHQiLCJ3aWR0aCIsInN0cm9rZVRleHQiLCJlbGVtZW50IiwiY2FudmFzIiwiY2hpbGRyZW4iLCJnZXRDb250ZXh0IiwiYmF0dGxlTG9nIiwicGFyc2VKU09OIiwic3BlZWQiLCJ2aWV3IiwiaW5mbyIsIm5leHQiLCJsb2FkIiwiY2hhcmFjdGVyIiwiaiIsImsiLCJsZW4iLCJsZW4xIiwicmVmIiwicmVmMSIsImluZGV4IiwiY2hhcmFjdGVycyIsInN0YXRlIiwib2Zmc2V0IiwicGF1c2UiLCJldmVudCIsImtleWRvd24iLCJrZXkiLCJsZW5ndGgiLCJhY3Rpb24iLCJhdHRhY2tlciIsImRlZmVuZGVyIiwiZHJhd0NoYXJhY3RlcnMiLCJoYWxmV2lkdGgiLCJoZWlnaHQiLCJzYXZlIiwidHJhbnNsYXRlIiwicmVzdG9yZSIsImRyYXdJbmZvIiwiYmxvY2tTaXplIiwiaGFsZkhlaWdodCIsInN0YXJIIiwic3RhclBpa2VzIiwic3RhclJhZGl1cyIsInN0YXJXIiwic3RhcldpZHRoIiwic3RhclgiLCJzdGFyWSIsInRleHRYIiwidGV4dFkiLCJzY2FsZSIsImRyYXdTdGFyIiwicGlrZXMiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiaSIsInJvdCIsInN0ZXAiLCJ4IiwieSIsIlBJIiwiYmVnaW5QYXRoIiwiY29zIiwic2luIiwibW92ZVRvIiwibGluZVRvIiwiZmlsbCIsInN0cm9rZSIsImNsb3NlUGF0aCIsImdldEVuZFRleHQiLCJpMThuIiwiYmF0dGxlIiwid2luIiwibG9zZSIsImRlbHRhIiwiYW5pbWF0ZSIsImF0IiwibWFyayIsIm5leHRBY3Rpb24iLCJuZXh0QXR0YWNrZXIiLCJuZXh0RGVmZW5kZXIiLCJwb3NpdGlvbiIsInByZXZBY3Rpb24iLCJwcmV2QXR0YWNrZXIiLCJwcmV2RGVmZW5kZXIiLCJjbGVhclJlY3QiLCJ0eXBlIiwic3RhcnRIZWFsdGgiLCJlbmRIZWFsdGgiLCJkYW1hZ2UiLCJnbG9iYWxBbHBoYSIsImNsYW1wIiwibGVycCIsImNyaXQiLCJkb2RnZSIsIm1pbiIsImIiLCJjb29yZHMiLCJsIiwiciIsInQiLCJyZWxNb3VzZUNvb3JkcyIsIndoaWNoIiwicmVxdWVzdEZyYW1lIiwidGltZSIsImxhc3RUaW1lIiwiYWNjdW11bGF0b3IiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdGFydCIsImJpbmQiLCJmaWx0ZXIiLCJDaGF0Iiwib3B0aW9ucyIsIm9wdCIsImV4dGVuZCIsImRlZmF1bHRzIiwibWVzc2FnZVVybCIsInBsYXllclVybCIsImVtb3RpY29ucyIsIkVtb3RpY29ucyIsImFsbG93U2VuZCIsImFsbG93UmVjZWl2ZSIsInJlY2VpdmVFeHRyYSIsInNlbmRFeHRyYSIsInJlY2VpdmVNZXRob2QiLCJzZW5kTWV0aG9kIiwiaW5wdXQiLCJmaW5kIiwib3V0cHV0Iiwic2VuZEJ0biIsImNsZWFyQnRuIiwiZW1vdGljb25zQnRuIiwicG9wb3ZlciIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsIm9uS2V5Iiwic2VuZCIsImNsZWFySW5wdXQiLCJjbGVhck91dHB1dCIsImpvaW4iLCJjb29sZG93biIsInNlbnQiLCJ0b3VjaCIsImhpc3RvcnkiLCJyZWNlaXZlIiwiY29tbWFuZHMiLCJlbW90aWNvblVybCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImNsZWFyIiwiZ2V0RXJyb3JUZXh0IiwiYXJncyIsInYiLCJjaGF0IiwiZXJyb3JzIiwidW5rbm93biIsInJlcGxhY2UiLCJlcnJvciIsImFsZXJ0IiwiYXBwZW5kIiwiY29tbWFuZCIsImZ1bmMiLCJtYXRjaGVzIiwibWVzc2FnZSIsIm1hdGNoIiwidG9Mb3dlckNhc2UiLCJhamF4IiwidXJsIiwic3VjY2VzcyIsIm9uU2VudCIsImRhdGFUeXBlIiwibWV0aG9kIiwiY29tcGxldGUiLCJvbkNvbXBsZXRlIiwib25SZWNlaXZlZCIsImVtcHR5IiwiZ2V0TWVzc2FnZSIsImh0bWwiLCJpbnNlcnQiLCJuZXdNZXNzYWdlIiwiYXV0aG9yIiwiY29sMSIsImNvbDIiLCJkaXYxIiwiZGl2MiIsInJvdyIsImF0dHIiLCJnZXRQbGF5ZXJVcmwiLCJtb2RpZnlNZXNzYWdlIiwiYWRkTWVzc2FnZSIsInNjcm9sbCIsImNsaWVudEhlaWdodCIsImxhc3QiLCJpcyIsInN0YXR1cyIsInJlYXNvbiIsInJlc3VsdHMiLCJwdXNoIiwiZWFjaCIsInBhcnNlSW50IiwiZmV3U2VjcyIsInRpbWVGb3JtYXRTaG9ydCIsImFnbyIsImRhdGUiLCJ0b1VUQ1N0cmluZyIsInRvIiwiZGlhbG9ncyIsInNob3ciLCJkaWFsb2ciLCJkaXNtaXNzaWJsZSIsIm1vZGFsIiwiYmFja2Ryb3AiLCJrZXlib2FyZCIsIm9uIiwiY291bnRlciIsInNldCIsIjspIiwiOkQiLCI6KCIsIjopIiwiQikiLCJPLm8iLCI6cCIsImVtb3RpY29uIiwicmVwbGFjZUFsbCIsImJ1dHRvbiIsInBsYWNlbWVudCIsImNvbnRlbnQiLCJnZXRQb3BvdmVyQ29udGVudCIsInRlbXBsYXRlIiwiY29udGFpbmVyIiwiaW1nIiwiYWZ0ZXJMb2FkZWQiLCJlcXVhbGl6ZSIsImdldENvbHVtbnMiLCJnZXRQcmVmaXgiLCJnZXRTaXplIiwid2lkdGhzIiwieHMiLCJzbSIsIm1kIiwicHJlZml4IiwicmVzdWx0Iiwib2JqZWN0IiwicmVnZXhwIiwiUmVnRXhwIiwiY29sdW1ucyIsInNlbGVjdG9yIiwiY29sIiwiaGVpZ2h0cyIsImhzIiwic3VtIiwia2V5RG93biIsImtleVVwIiwibW91c2VXaGVlbCIsIm51bWJlckRlY3JlYXNlIiwibnVtYmVySW5jcmVhc2UiLCJyYW5nZUNoYW5nZWQiLCJjaGFuZ2UiLCJyZWYyIiwicmVmMyIsImNvbnNvbGUiLCJsb2ciLCJkZWx0YVkiLCJwcmV2ZW50RGVmYXVsdCIsImFmdGVyIiwiYmVmb3JlIiwicGFyZW50Iiwia2V5dXAiLCJtb3VzZW1vdmUiLCJoZWxwIiwiaGlkZSIsIm1haW5PdmVybGF5IiwibmF2T3ZlcmxheSIsImNzcyIsImNvcHkiLCJzIiwiY2xvbmUiLCJ0b29sdGlwIiwicmVtb3ZlQXR0ciIsImZhZGVJbiIsImZhZGVPdXQiLCJyZW1vdmUiLCJ2ZW5kb3IiLCJ2ZW5kb3JzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsImN1cnJUaW1lIiwidGltZVRvQ2FsbCIsImNsZWFyVGltZW91dCIsInByZXZpZXciLCJwYXRoIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwidGFyZ2V0IiwiZmlsZXMiLCJzZWxlY3QiLCJsYW5nIiwibG9jYXRpb24iLCJocmVmIiwibmF2Zml4IiwicmVzaXplIiwiaW1hZ2VGb3JGcmFtZSIsInJlZnJlc2hQbGFudCIsImZyYW1lIiwicGxhbnQiLCJlbmQiLCJ3YXRlcmluZyIsImZsb29yIiwic2xvdCIsInJlbGF0ZWRUYXJnZXQiLCJsb2FkZWQiLCJub3RpZnkiLCJzZXRQcm9ncmVzcyIsInNldFZhbHVlIiwic2V0VmFsdWVzIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImxhc3RVcGRhdGUiLCJuZXh0VXBkYXRlIiwiYmFyIiwiYmFzZSIsImNoaWxkIiwidGltZXIiLCJzY29wZSIsImhlYWx0aFVwZGF0ZSIsIm5leHRIZWFsdGhVcGRhdGUiLCJlbmVyZ3kiLCJtYXhFbmVyZ3kiLCJlbmVyZ3lVcGRhdGUiLCJuZXh0RW5lcmd5VXBkYXRlIiwid2FudGVkIiwid2FudGVkVXBkYXRlIiwibmV4dFdhbnRlZFVwZGF0ZSIsImV4cGVyaWVuY2UiLCJtYXhFeHBlcmllbmNlIiwicGxhbnRhdG9yRXhwZXJpZW5jZSIsInBsYW50YXRvck1heEV4cGVyaWVuY2UiLCJzbXVnZ2xlckV4cGVyaWVuY2UiLCJzbXVnZ2xlck1heEV4cGVyaWVuY2UiLCJkZWFsZXJFeHBlcmllbmNlIiwiZGVhbGVyTWF4RXhwZXJpZW5jZSIsImJvZHkiLCJwbGF5ZXIiLCIkYXBwbHkiLCJyZWxvYWQiLCJyZWZyZXNoIiwiYWN0aXZlIiwibm90aWZ5U2hvdyIsImZvY3VzIiwic3F1YXJlIiwiY2hhbmdlZCIsInJhbmRvbSIsInJhbmRvbUluIiwicm9sbCIsImN1cnJlbnQiLCJkaWZmIiwiaXNOYU4iLCJhcnJheSIsInBvaW50cyIsInJvbGxhYmxlIiwic3RhdGlzdGljIiwicmVmcmVzaGluZyIsInVwZGF0ZU5hdiIsImNhIiwiY2IiLCJsYWJlbCIsInBlcmNlbnQiLCJyZXZlcnNlZCIsInN0b3AiLCJCb29sZWFuIiwibGVycENvbG9ycyIsInR1dG9yaWFscyIsImVsZW1lbnRzIiwic2hpZnQiLCJzdGFnZSIsInVuYmluZCIsImJ0bjEiLCJidG4yIiwiZm9vdGVyIiwiZ3JvdXAiLCJoZWFkZXIiLCJ5ZXMiLCJubyIsImRlc2NyaXB0aW9uIiwiZGVwdGgiLCJ0dXRvcmlhbCIsInBhcmVudHMiLCJiYXNlMSIsImJhc2UyIiwibm90aWZpY2F0aW9ucyIsInNob3dOb3RpZnkiLCJ0aW1lU2VwYXJhdGUiLCJ1cGRhdGVQcm9ncmVzcyIsImZvcm1hdCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJibHVyIiwicmVzaXplVG8iLCJscGFkIiwicGFkZGluZyIsInplcm9lcyIsInNsaWNlIiwiZCIsImgiLCJtIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJwcm9wcyIsIm9iaiIsInRlbXAiLCJjb25zdHJ1Y3RvciIsImZyb20iLCJtb3VzZV9vdmVyIiwibm90aWZpY2F0aW9uIiwiYSIsImhleFRvUmdiIiwiaGV4IiwiZXhlYyIsImciLCJyZ2JUb0hleCIsInRvU3RyaW5nIiwiY2MiLCJ0b3RhbE9mZnNldFgiLCJ0b3RhbE9mZnNldFkiLCJjYW52YXNYIiwiY2FudmFzWSIsImN1cnJlbnRFbGVtZW50Iiwib2Zmc2V0TGVmdCIsInNjcm9sbExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRQYXJlbnQiLCJwYWdlWCIsInBhZ2VZIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJvbGRTaG93IiwiZm4iLCJTdHJpbmciLCJlc2NhcGUiLCJzZWFyY2giXSwibWFwcGluZ3MiOiJDQU1BLFdBQUFBLEtBQUNDLElBQU1DLFFBQVFDLE9BQU8sV0FJdEJILEtBQUNDLElBQUlHLFdBQVcsa0JBQW1CLFNBQVUsU0FBQ0MsR0NMeEMsTURRTEEsR0FBT0MsTUFBUSxTQUFDQyxFQUFPQyxHQUV0QixHQUFBQyxHQUFBQyxDQ05NLE9ETU5BLEdBQUEsTUFBQUYsRUFBSUEsRUFBWSxFQUNoQkMsRUFBSUUsS0FBS0MsSUFBSSxHQUFJRixHQUVqQkMsS0FBS0wsTUFBTUMsRUFBUUUsR0FBS0EsTUFNMUJULEtBQUNDLElBQUlHLFdBQVcsb0JBQXFCLFNBQVUsU0FBQ0MsR0FNL0MsR0FBQVEsR0FBQUMsQ0NESyxPRENMRCxHQUFNRSxTQUFTQyxPQUNmRixFQUFTLFNBQUFHLEdDWkYsTURZRSxZQUVSLEdBQUFDLEdBQUFDLENDUFEsT0RPTEYsR0FBQ0csU0FFSEQsRUFBTVIsS0FBS0wsT0FBTSxHQUFLZSxPQUFRQyxVQUFZLEtBQzFDSixFQUFPUCxLQUFLWSxJQUFJTixFQUFDTyxPQUFTTCxFQUFLLEdBRS9CSixTQUFTQyxNQUFRUyxPQUFPQyxXQUFXUixHQUFRLE1BQVFMLEdBRXBEYyxXQUFXYixFQUFRLE9BVFhkLGNDRVA0QixLQUFLNUIsTUMvQlIsV0FBQSxHQUFBNkIsRUFBQUEsR0FBVSxXRHVDTixNQ3RDSEMsR0FBRSxXQUFXQyxZQUFZLFVBQ3pCRCxFQUFFLFdBQVdFLElBQUlGLEVBQUU5QixN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RUFZN0MsV0FFQyxHQUFBa1YsRXJCMHNERyxPcUIxc0RIQSxHQUFVamUsRUFBRWtlLEdBQUd6TyxTckJtdURicUwsRXFCbnNESHFELE9BQU94YyxXQUFVeWMsU0FBQXRELEVBQUFzRCxPQUFXLFdyQm9zRHhCLE1xQm5zREhsZ0IsTUFBS29PLFFBQVEsOEJBQStCLFdyQnNzRDFDeU8sRXFCbHNESG9ELE9BQU94YyxXQUFVK08sYUFBQXFLLEVBQUFySyxXQUFlLFNBQUMyTixFQUFRL1IsR3JCbXNEckMsTXFCbHNESHBPLE1BQUtvTyxRQUFZLEdBQUF5RixRQUFPc00sRUFBT0QsU0FBVSxNQUFPOVIsTXJCcXNEOUN4TSxLQUFLNUIiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuXHJcblxyXG5cclxuXHJcbkBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnZ2FtZScsIFtdKVxyXG5cclxuXHJcblxyXG5AYXBwLmNvbnRyb2xsZXIoJ0dhbWVDb250cm9sbGVyJywgWyckc2NvcGUnLCAoJHNjb3BlKSAtPlxyXG5cclxuXHJcblx0JHNjb3BlLnJvdW5kID0gKHZhbHVlLCBwcmVjaXNpb24pIC0+XHJcblxyXG5cdFx0cCA9IHByZWNpc2lvbiA/IDBcclxuXHRcdG4gPSBNYXRoLnBvdygxMCwgcClcclxuXHJcblx0XHRNYXRoLnJvdW5kKHZhbHVlICogbikgLyBuXHJcblxyXG5dKVxyXG5cclxuXHJcblxyXG5AYXBwLmNvbnRyb2xsZXIoJ1BsYXllckNvbnRyb2xsZXInLCBbJyRzY29wZScsICgkc2NvcGUpIC0+XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHRvbGQgPSBkb2N1bWVudC50aXRsZVxyXG5cdHVwZGF0ZSA9ICgpID0+XHJcblxyXG5cdFx0aWYgQGlzQnVzeVxyXG5cclxuXHRcdFx0bm93ID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMClcclxuXHRcdFx0bGVmdCA9IE1hdGgubWF4KEBqb2JFbmQgLSBub3csIDApXHJcblxyXG5cdFx0XHRkb2N1bWVudC50aXRsZSA9IHdpbmRvdy50aW1lRm9ybWF0KGxlZnQpICsgJyAtICcgKyBvbGRcclxuXHJcblx0XHRzZXRUaW1lb3V0KHVwZGF0ZSwgMTAwMClcclxuXHJcblxyXG5cclxuXHR1cGRhdGUoKVxyXG5cclxuXSlcclxuXHJcbiIsIihmdW5jdGlvbigpIHtcbiAgdGhpcy5hcHAgPSBhbmd1bGFyLm1vZHVsZSgnZ2FtZScsIFtdKTtcblxuICB0aGlzLmFwcC5jb250cm9sbGVyKCdHYW1lQ29udHJvbGxlcicsIFtcbiAgICAnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICByZXR1cm4gJHNjb3BlLnJvdW5kID0gZnVuY3Rpb24odmFsdWUsIHByZWNpc2lvbikge1xuICAgICAgICB2YXIgbiwgcDtcbiAgICAgICAgcCA9IHByZWNpc2lvbiAhPSBudWxsID8gcHJlY2lzaW9uIDogMDtcbiAgICAgICAgbiA9IE1hdGgucG93KDEwLCBwKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBuKSAvIG47XG4gICAgICB9O1xuICAgIH1cbiAgXSk7XG5cbiAgdGhpcy5hcHAuY29udHJvbGxlcignUGxheWVyQ29udHJvbGxlcicsIFtcbiAgICAnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICB2YXIgb2xkLCB1cGRhdGU7XG4gICAgICBvbGQgPSBkb2N1bWVudC50aXRsZTtcbiAgICAgIHVwZGF0ZSA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGxlZnQsIG5vdztcbiAgICAgICAgICBpZiAoX3RoaXMuaXNCdXN5KSB7XG4gICAgICAgICAgICBub3cgPSBNYXRoLnJvdW5kKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICAgICAgICAgIGxlZnQgPSBNYXRoLm1heChfdGhpcy5qb2JFbmQgLSBub3csIDApO1xuICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSB3aW5kb3cudGltZUZvcm1hdChsZWZ0KSArICcgLSAnICsgb2xkO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dCh1cGRhdGUsIDEwMDApO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyk7XG4gICAgICByZXR1cm4gdXBkYXRlKCk7XG4gICAgfVxuICBdKTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgY2xpY2tlZDtcblxuICBjbGlja2VkID0gZnVuY3Rpb24oKSB7XG4gICAgJCgnLmF2YXRhcicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAkKCcjYXZhdGFyJykudmFsKCQodGhpcykuZGF0YSgnYXZhdGFyJykpO1xuICAgIHJldHVybiAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgfTtcblxuICAkKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkKCcuYXZhdGFyJykuY2xpY2soY2xpY2tlZCkuZmlyc3QoKS50cmlnZ2VyKCdjbGljaycpO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgQmF0dGxlLCBDaGFyYWN0ZXIsIGNvbmZpZztcblxuICBjb25maWcgPSB7XG4gICAgZm9udFNpemU6IDMwLFxuICAgIGJhckZvbnRTaXplOiAyMCxcbiAgICBuYW1lRm9udFNpemU6IDMwLFxuICAgIG1hcmdpbjogNSxcbiAgICBpbnRlcnZhbDogMTAwMCAvIDYwXG4gIH07XG5cbiAgQ2hhcmFjdGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIENoYXJhY3Rlcih0ZWFtLCBkYXRhKSB7XG4gICAgICB2YXIgaW1hZ2U7XG4gICAgICBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgaW1hZ2Uuc3JjID0gZGF0YS5hdmF0YXI7XG4gICAgICBpbWFnZS5vbmxvYWQgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5hdmF0YXIgPSBpbWFnZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgdGhpcy50ZWFtID0gdGVhbTtcbiAgICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgICAgIHRoaXMuaWQgPSBkYXRhLmlkO1xuICAgICAgdGhpcy5sZXZlbCA9IGRhdGEubGV2ZWw7XG4gICAgICB0aGlzLmhlYWx0aCA9IGRhdGEuaGVhbHRoO1xuICAgICAgdGhpcy5tYXhIZWFsdGggPSBkYXRhLm1heEhlYWx0aDtcbiAgICB9XG5cbiAgICBDaGFyYWN0ZXIucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICB2YXIgbWVhc3VyZSwgdGV4dDtcbiAgICAgIGlmICh0aGlzLnRlYW0gPT09ICdyZWQnKSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyMTcsIDgzLCA3OSwgMSknO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDIxNywgODMsIDc5LCAwLjQpJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSg1MSwgMTIyLCAxODMsIDEpJztcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSg1MSwgMTIyLCAxODMsIDAuNCknO1xuICAgICAgfVxuICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBzaXplLCBzaXplKTtcbiAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdCgwLCAwLCBzaXplLCBzaXplKTtcbiAgICAgIGlmICh0aGlzLmF2YXRhciAhPSBudWxsKSB7XG4gICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMuYXZhdGFyLCBjb25maWcubWFyZ2luLCBjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLm1hcmdpbiAqIDIsIHNpemUgLSBjb25maWcubWFyZ2luICogMik7XG4gICAgICB9XG4gICAgICB0ZXh0ID0gdGhpcy5uYW1lICsgJyAoJyArIHRoaXMubGV2ZWwgKyAnKSc7XG4gICAgICBjb250ZXh0LmZvbnQgPSBjb25maWcubmFtZUZvbnRTaXplICsgJ3B4IFJvYm90byc7XG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJztcbiAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnIzAwMDAwMCc7XG4gICAgICBtZWFzdXJlID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KTtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgKHNpemUgLSBtZWFzdXJlLndpZHRoKSAvIDIsIGNvbmZpZy5uYW1lRm9udFNpemUpO1xuICAgICAgY29udGV4dC5zdHJva2VUZXh0KHRleHQsIChzaXplIC0gbWVhc3VyZS53aWR0aCkgLyAyLCBjb25maWcubmFtZUZvbnRTaXplKTtcbiAgICAgIGNvbnRleHQuZm9udCA9IGNvbmZpZy5iYXJGb250U2l6ZSArICdweCBSb2JvdG8nO1xuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNyknO1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjQpJztcbiAgICAgIGNvbnRleHQuZmlsbFJlY3QoY29uZmlnLm1hcmdpbiwgc2l6ZSAtIGNvbmZpZy5iYXJGb250U2l6ZSAtIGNvbmZpZy5tYXJnaW4sIHNpemUgLSBjb25maWcubWFyZ2luICogMiwgY29uZmlnLmJhckZvbnRTaXplKTtcbiAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdChjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC0gY29uZmlnLm1hcmdpbiwgc2l6ZSAtIGNvbmZpZy5tYXJnaW4gKiAyLCBjb25maWcuYmFyRm9udFNpemUpO1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgyMTcsIDgzLCA3OSwgMSknO1xuICAgICAgY29udGV4dC5maWxsUmVjdChjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC0gY29uZmlnLm1hcmdpbiwgKHNpemUgLSBjb25maWcubWFyZ2luICogMikgKiAodGhpcy5oZWFsdGggLyB0aGlzLm1heEhlYWx0aCksIGNvbmZpZy5iYXJGb250U2l6ZSk7XG4gICAgICB0ZXh0ID0gTWF0aC5yb3VuZCh0aGlzLmhlYWx0aCkgKyAnIC8gJyArIHRoaXMubWF4SGVhbHRoO1xuICAgICAgbWVhc3VyZSA9IGNvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjMDAwMDAwJztcbiAgICAgIHJldHVybiBjb250ZXh0LmZpbGxUZXh0KHRleHQsIChzaXplIC0gbWVhc3VyZS53aWR0aCkgLyAyLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC8gMik7XG4gICAgfTtcblxuICAgIHJldHVybiBDaGFyYWN0ZXI7XG5cbiAgfSkoKTtcblxuICBCYXR0bGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgQmF0dGxlLnByb3RvdHlwZS5zcGVlZCA9IHtcbiAgICAgIHZpZXc6IDMuMCxcbiAgICAgIGluZm86IDMuMCxcbiAgICAgIG5leHQ6IDMuMFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBCYXR0bGUoZWxlbWVudCkge1xuICAgICAgdGhpcy5jYW52YXMgPSAkKGVsZW1lbnQpLmNoaWxkcmVuKCdjYW52YXMnKVswXTtcbiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICB0aGlzLmJhdHRsZUxvZyA9ICQucGFyc2VKU09OKCQoZWxlbWVudCkuY2hpbGRyZW4oJy5iYXR0bGUtbG9nJykuZmlyc3QoKS50ZXh0KCkpO1xuICAgIH1cblxuICAgIEJhdHRsZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNoYXJhY3RlciwgZGF0YSwgaiwgaywgbGVuLCBsZW4xLCByZWYsIHJlZjE7XG4gICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgIHRoaXMuY2hhcmFjdGVycyA9IFtdO1xuICAgICAgdGhpcy5zdGF0ZSA9ICd2aWV3JztcbiAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgIHRoaXMucGF1c2UgPSBmYWxzZTtcbiAgICAgICQodGhpcy5jYW52YXMpLmNsaWNrKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuY2xpY2soZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgJChkb2N1bWVudCkua2V5ZG93bigoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmtleShldmVudCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICByZWYgPSB0aGlzLmJhdHRsZUxvZ1sndGVhbXMnXVsncmVkJ107XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgZGF0YSA9IHJlZltqXTtcbiAgICAgICAgY2hhcmFjdGVyID0gbmV3IENoYXJhY3RlcigncmVkJywgZGF0YSk7XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyc1tjaGFyYWN0ZXIuaWRdID0gY2hhcmFjdGVyO1xuICAgICAgfVxuICAgICAgcmVmMSA9IHRoaXMuYmF0dGxlTG9nWyd0ZWFtcyddWydibHVlJ107XG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgZGF0YSA9IHJlZjFba107XG4gICAgICAgIGNoYXJhY3RlciA9IG5ldyBDaGFyYWN0ZXIoJ2JsdWUnLCBkYXRhKTtcbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJzW2NoYXJhY3Rlci5pZF0gPSBjaGFyYWN0ZXI7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGNvbmZpZy5mb250U2l6ZSArICdweCBSb2JvdG8nO1xuICAgICAgdGhpcy5hY3Rpb24gPSB0aGlzLmJhdHRsZUxvZ1snbG9nJ11bdGhpcy5pbmRleF07XG4gICAgICB0aGlzLmF0dGFja2VyID0gdGhpcy5jaGFyYWN0ZXJzW3RoaXMuYWN0aW9uLmF0dGFja2VyXTtcbiAgICAgIHRoaXMuZGVmZW5kZXIgPSB0aGlzLmNoYXJhY3RlcnNbdGhpcy5hY3Rpb24uZGVmZW5kZXJdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIEJhdHRsZS5wcm90b3R5cGUuZHJhd0NoYXJhY3RlcnMgPSBmdW5jdGlvbihhdHRhY2tlciwgZGVmZW5kZXIpIHtcbiAgICAgIHZhciBoYWxmV2lkdGgsIHNpemU7XG4gICAgICBzaXplID0gdGhpcy5jYW52YXMuaGVpZ2h0ICogMC42O1xuICAgICAgaGFsZldpZHRoID0gdGhpcy5jYW52YXMud2lkdGggLyAyO1xuICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgIHRoaXMuY29udGV4dC50cmFuc2xhdGUoKGhhbGZXaWR0aCAtIHNpemUpIC8gMiwgKHRoaXMuY2FudmFzLmhlaWdodCAtIHNpemUpIC8gMik7XG4gICAgICBhdHRhY2tlci5kcmF3KHRoaXMuY29udGV4dCwgc2l6ZSk7XG4gICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgIHRoaXMuY29udGV4dC50cmFuc2xhdGUoKGhhbGZXaWR0aCAtIHNpemUpIC8gMiArIGhhbGZXaWR0aCwgKHRoaXMuY2FudmFzLmhlaWdodCAtIHNpemUpIC8gMik7XG4gICAgICBkZWZlbmRlci5kcmF3KHRoaXMuY29udGV4dCwgc2l6ZSk7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5kcmF3SW5mbyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHZhciBibG9ja1NpemUsIGhhbGZIZWlnaHQsIGhhbGZXaWR0aCwgbWVhc3VyZSwgc3RhckgsIHN0YXJQaWtlcywgc3RhclJhZGl1cywgc3RhclcsIHN0YXJXaWR0aCwgc3RhclgsIHN0YXJZLCB0ZXh0WCwgdGV4dFk7XG4gICAgICBoYWxmV2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aCAvIDI7XG4gICAgICBoYWxmSGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMjtcbiAgICAgIGJsb2NrU2l6ZSA9IHRoaXMuY2FudmFzLmhlaWdodCAqIDAuNjtcbiAgICAgIHN0YXJSYWRpdXMgPSA1MDtcbiAgICAgIHN0YXJXaWR0aCA9IHN0YXJSYWRpdXMgKiAyO1xuICAgICAgc3RhclggPSBoYWxmV2lkdGggKyAoYmxvY2tTaXplICsgc3RhclJhZGl1cykgLyAyO1xuICAgICAgc3RhclkgPSBoYWxmSGVpZ2h0O1xuICAgICAgc3RhclcgPSAoYmxvY2tTaXplICogMC43KSAvIHN0YXJXaWR0aDtcbiAgICAgIHN0YXJIID0gMS4yO1xuICAgICAgc3RhclBpa2VzID0gMTM7XG4gICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGNvbmZpZy5mb250U2l6ZSArICdweCBSb2JvdG8nO1xuICAgICAgbWVhc3VyZSA9IHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KTtcbiAgICAgIHRleHRYID0gc3RhclggLSBtZWFzdXJlLndpZHRoIC8gMjtcbiAgICAgIHRleHRZID0gaGFsZkhlaWdodDtcbiAgICAgIHRoaXMuY29udGV4dC5zYXZlKCk7XG4gICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gMjtcbiAgICAgIHRoaXMuY29udGV4dC50cmFuc2xhdGUoc3RhclgsIHN0YXJZKTtcbiAgICAgIHRoaXMuY29udGV4dC5zY2FsZShzdGFyVywgc3RhckgpO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJztcbiAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9ICcjMDAwMDAwJztcbiAgICAgIHRoaXMuZHJhd1N0YXIoc3RhclBpa2VzLCBzdGFyUmFkaXVzICogMC42LCBzdGFyUmFkaXVzKTtcbiAgICAgIHRoaXMuY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICB0aGlzLmNvbnRleHQuc2F2ZSgpO1xuICAgICAgdGhpcy5jb250ZXh0LnRyYW5zbGF0ZSh0ZXh0WCwgdGV4dFkpO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICcjMDAwMDAwJztcbiAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0ZXh0LCAwLCAwKTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuICAgIH07XG5cbiAgICBCYXR0bGUucHJvdG90eXBlLmRyYXdTdGFyID0gZnVuY3Rpb24ocGlrZXMsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cykge1xuICAgICAgdmFyIGksIGosIHJlZiwgcm90LCBzdGVwLCB4LCB5O1xuICAgICAgcm90ID0gTWF0aC5QSSAvIDIgKiAzO1xuICAgICAgc3RlcCA9IE1hdGguUEkgLyBwaWtlcztcbiAgICAgIHRoaXMuY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgIHggPSBNYXRoLmNvcyhyb3QpICogb3V0ZXJSYWRpdXM7XG4gICAgICB5ID0gTWF0aC5zaW4ocm90KSAqIG91dGVyUmFkaXVzO1xuICAgICAgdGhpcy5jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgIHJvdCArPSBzdGVwO1xuICAgICAgZm9yIChpID0gaiA9IDEsIHJlZiA9IHBpa2VzOyAxIDw9IHJlZiA/IGogPD0gcmVmIDogaiA+PSByZWY7IGkgPSAxIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgICB4ID0gTWF0aC5jb3Mocm90KSAqIGlubmVyUmFkaXVzO1xuICAgICAgICB5ID0gTWF0aC5zaW4ocm90KSAqIGlubmVyUmFkaXVzO1xuICAgICAgICB0aGlzLmNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICByb3QgKz0gc3RlcDtcbiAgICAgICAgeCA9IE1hdGguY29zKHJvdCkgKiBvdXRlclJhZGl1cztcbiAgICAgICAgeSA9IE1hdGguc2luKHJvdCkgKiBvdXRlclJhZGl1cztcbiAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgcm90ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRleHQubGluZVRvKDAsIC1vdXRlclJhZGl1cyk7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xuICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5nZXRFbmRUZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5iYXR0bGVMb2dbJ3dpbiddKSB7XG4gICAgICAgIHJldHVybiBpMThuLmJhdHRsZS53aW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaTE4bi5iYXR0bGUubG9zZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZGVsdGEpIHtcbiAgICAgIHZhciBhY3Rpb24sIGFuaW1hdGUsIGF0LCBhdHRhY2tlciwgZGVmZW5kZXIsIGhlaWdodCwgaSwgaiwgbGVuLCBtYXJrLCBtZWFzdXJlLCBuZXh0QWN0aW9uLCBuZXh0QXR0YWNrZXIsIG5leHREZWZlbmRlciwgcG9zaXRpb24sIHByZXZBY3Rpb24sIHByZXZBdHRhY2tlciwgcHJldkRlZmVuZGVyLCByZWYsIHRleHQsIHdpZHRoO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJztcbiAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgICB0aGlzLm9mZnNldCArPSB0aGlzLnNwZWVkW3RoaXMuc3RhdGVdICogZGVsdGE7XG4gICAgICBhbmltYXRlID0gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAndmlldycgJiYgYW5pbWF0ZSkge1xuICAgICAgICBhY3Rpb24gPSB0aGlzLmJhdHRsZUxvZ1snbG9nJ11bdGhpcy5pbmRleF07XG4gICAgICAgIGF0dGFja2VyID0gdGhpcy5jaGFyYWN0ZXJzW2FjdGlvbi5hdHRhY2tlcl07XG4gICAgICAgIGRlZmVuZGVyID0gdGhpcy5jaGFyYWN0ZXJzW2FjdGlvbi5kZWZlbmRlcl07XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICBkZWZlbmRlci5oZWFsdGggPSBhY3Rpb24uaGVhbHRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0NoYXJhY3RlcnMoYXR0YWNrZXIsIGRlZmVuZGVyKTtcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0ID4gMS4wICYmICF0aGlzLnBhdXNlKSB7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgPSAwLjA7XG4gICAgICAgICAgZGVmZW5kZXIuc3RhcnRIZWFsdGggPSBkZWZlbmRlci5oZWFsdGg7XG4gICAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnaGl0Jykge1xuICAgICAgICAgICAgZGVmZW5kZXIuZW5kSGVhbHRoID0gTWF0aC5tYXgoZGVmZW5kZXIuaGVhbHRoIC0gYWN0aW9uLmRhbWFnZSwgMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmVuZGVyLmVuZEhlYWx0aCA9IGRlZmVuZGVyLmhlYWx0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9ICdpbmZvJztcbiAgICAgICAgfVxuICAgICAgICBhbmltYXRlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ2luZm8nICYmIGFuaW1hdGUpIHtcbiAgICAgICAgYWN0aW9uID0gdGhpcy5iYXR0bGVMb2dbJ2xvZyddW3RoaXMuaW5kZXhdO1xuICAgICAgICBhdHRhY2tlciA9IHRoaXMuY2hhcmFjdGVyc1thY3Rpb24uYXR0YWNrZXJdO1xuICAgICAgICBkZWZlbmRlciA9IHRoaXMuY2hhcmFjdGVyc1thY3Rpb24uZGVmZW5kZXJdO1xuICAgICAgICB0aGlzLmRyYXdDaGFyYWN0ZXJzKGF0dGFja2VyLCBkZWZlbmRlcik7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCA8PSAxLjApIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgICBkZWZlbmRlci5oZWFsdGggPSBkZWZlbmRlci5zdGFydEhlYWx0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5vZmZzZXQgPD0gMi4wKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSAxLjA7XG4gICAgICAgICAgICBpID0gTWF0aC5jbGFtcCh0aGlzLm9mZnNldCAtIDEuMCwgMCwgMSk7XG4gICAgICAgICAgICBkZWZlbmRlci5oZWFsdGggPSBNYXRoLmxlcnAoaSwgZGVmZW5kZXIuZW5kSGVhbHRoLCBkZWZlbmRlci5zdGFydEhlYWx0aCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmVuZGVyLmhlYWx0aCA9IGRlZmVuZGVyLmVuZEhlYWx0aDtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IE1hdGgubWF4KDMuMCAtIHRoaXMub2Zmc2V0LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0ID4gNC4wKSB7XG4gICAgICAgICAgdGhpcy5vZmZzZXQgPSAwLjA7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9ICduZXh0JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdoaXQnKSB7XG4gICAgICAgICAgdGV4dCA9IGFjdGlvbi5kYW1hZ2U7XG4gICAgICAgICAgaWYgKGFjdGlvbi5jcml0KSB7XG4gICAgICAgICAgICB0ZXh0ICs9ICchJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dCA9IGkxOG4uYmF0dGxlLmRvZGdlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0luZm8odGV4dCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgICAgICAgYW5pbWF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09ICduZXh0JyAmJiBhbmltYXRlKSB7XG4gICAgICAgIHByZXZBY3Rpb24gPSB0aGlzLmJhdHRsZUxvZ1snbG9nJ11bdGhpcy5pbmRleF07XG4gICAgICAgIG5leHRBY3Rpb24gPSB0aGlzLmJhdHRsZUxvZ1snbG9nJ11bdGhpcy5pbmRleCArIDFdO1xuICAgICAgICBwcmV2QXR0YWNrZXIgPSB0aGlzLmNoYXJhY3RlcnNbcHJldkFjdGlvbi5hdHRhY2tlcl07XG4gICAgICAgIHByZXZEZWZlbmRlciA9IHRoaXMuY2hhcmFjdGVyc1twcmV2QWN0aW9uLmRlZmVuZGVyXTtcbiAgICAgICAgcG9zaXRpb24gPSAodGhpcy5jYW52YXMuaGVpZ2h0IC8gMikgKiB0aGlzLm9mZnNldDtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnRyYW5zbGF0ZSgwLCAtcG9zaXRpb24pO1xuICAgICAgICB0aGlzLmRyYXdDaGFyYWN0ZXJzKHByZXZBdHRhY2tlciwgcHJldkRlZmVuZGVyKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnRyYW5zbGF0ZSgwLCB0aGlzLmNhbnZhcy5oZWlnaHQgLSBwb3NpdGlvbik7XG4gICAgICAgIGlmIChuZXh0QWN0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICBuZXh0QXR0YWNrZXIgPSB0aGlzLmNoYXJhY3RlcnNbbmV4dEFjdGlvbi5hdHRhY2tlcl07XG4gICAgICAgICAgbmV4dERlZmVuZGVyID0gdGhpcy5jaGFyYWN0ZXJzW25leHRBY3Rpb24uZGVmZW5kZXJdO1xuICAgICAgICAgIGlmIChuZXh0QWN0aW9uLnR5cGUgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICBuZXh0RGVmZW5kZXIuaGVhbHRoID0gbmV4dEFjdGlvbi5oZWFsdGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZHJhd0NoYXJhY3RlcnMobmV4dEF0dGFja2VyLCBuZXh0RGVmZW5kZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSB0aGlzLmdldEVuZFRleHQoKTtcbiAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gJyMwMDAwMDAnO1xuICAgICAgICAgIG1lYXN1cmUgPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRleHQsICh0aGlzLmNhbnZhcy53aWR0aCAtIG1lYXN1cmUud2lkdGgpIC8gMiwgKHRoaXMuY2FudmFzLmhlaWdodCAtIDE1KSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGV4dC5yZXN0b3JlKCk7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCA+IDIuMCkge1xuICAgICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgICB0aGlzLm9mZnNldCA9IDAuMDtcbiAgICAgICAgICBpZiAobmV4dEFjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3ZpZXcnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ2VuZCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFuaW1hdGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnZW5kJyAmJiBhbmltYXRlKSB7XG4gICAgICAgIHRleHQgPSB0aGlzLmdldEVuZFRleHQoKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwLjA7XG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSAnIzAwMDAwMCc7XG4gICAgICAgIG1lYXN1cmUgPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGV4dCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0ZXh0LCAodGhpcy5jYW52YXMud2lkdGggLSBtZWFzdXJlLndpZHRoKSAvIDIsICh0aGlzLmNhbnZhcy5oZWlnaHQgLSAxNSkgLyAyKTtcbiAgICAgICAgYW5pbWF0ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgd2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aCAtIDQ7XG4gICAgICBoZWlnaHQgPSB0aGlzLmNhbnZhcy5oZWlnaHQgLSAyO1xuICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNyknO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNCknO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDIsIGhlaWdodCAtIDIwLCB3aWR0aCwgMjApO1xuICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZVJlY3QoMiwgaGVpZ2h0IC0gMjAsIHdpZHRoLCAyMCk7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gJyM1QkMwREUnO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDIsIGhlaWdodCAtIDIwLCB3aWR0aCAqIChNYXRoLm1pbih0aGlzLmluZGV4IC8gKHRoaXMuYmF0dGxlTG9nWydsb2cnXS5sZW5ndGggLSAxKSwgMSkpLCAyMCk7XG4gICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gNTtcbiAgICAgIHJlZiA9IHRoaXMuYmF0dGxlTG9nWydtYXJrcyddO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIG1hcmsgPSByZWZbal07XG4gICAgICAgIGlmIChtYXJrLnR5cGUgPT09ICdmYWludGVkJykge1xuICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9ICcjRDk1MzRGJztcbiAgICAgICAgfVxuICAgICAgICBhdCA9IChtYXJrLmF0IC8gKHRoaXMuYmF0dGxlTG9nWydsb2cnXS5sZW5ndGggLSAxKSkgKiB3aWR0aDtcbiAgICAgICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLmNvbnRleHQubW92ZVRvKGF0IC0gdGhpcy5jb250ZXh0LmxpbmVXaWR0aCAvIDIgKyAyLCBoZWlnaHQgLSAyMCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5saW5lVG8oYXQgLSB0aGlzLmNvbnRleHQubGluZVdpZHRoIC8gMiArIDIsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuY29udGV4dC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuICAgIH07XG5cbiAgICBCYXR0bGUucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBiLCBjb29yZHMsIGwsIHIsIHQsIHgsIHk7XG4gICAgICBjb29yZHMgPSB0aGlzLmNhbnZhcy5yZWxNb3VzZUNvb3JkcyhldmVudCk7XG4gICAgICB4ID0gY29vcmRzLng7XG4gICAgICB5ID0gY29vcmRzLnk7XG4gICAgICBsID0gMjtcbiAgICAgIHIgPSBsICsgdGhpcy5jYW52YXMud2lkdGggLSA0O1xuICAgICAgYiA9IHRoaXMuY2FudmFzLmhlaWdodCAtIDI7XG4gICAgICB0ID0gYiAtIDIwO1xuICAgICAgaWYgKHggPj0gbCAmJiB4IDw9IHIgJiYgeSA+PSB0ICYmIHkgPD0gYikge1xuICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5yb3VuZCgoeCAtIGwpIC8gKHIgLSBsKSAqICh0aGlzLmJhdHRsZUxvZ1snbG9nJ10ubGVuZ3RoIC0gMSkpO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ3ZpZXcnO1xuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgPSAwLjA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJhdHRsZS5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgdGhpcy5wYXVzZSA9ICF0aGlzLnBhdXNlO1xuICAgICAgfVxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAzNykge1xuICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5tYXgodGhpcy5pbmRleCAtIDEsIDApO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDEuMDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICd2aWV3JztcbiAgICAgIH1cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gMzkpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IE1hdGgubWluKHRoaXMuaW5kZXggKyAxLCB0aGlzLmJhdHRsZUxvZ1snbG9nJ10ubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMS4wO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9ICd2aWV3JztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5yZXF1ZXN0RnJhbWUgPSBmdW5jdGlvbih0aW1lKSB7XG4gICAgICB2YXIgZGVsdGE7XG4gICAgICBkZWx0YSA9IE1hdGgubWF4KHRpbWUgLSB0aGlzLmxhc3RUaW1lLCAwKTtcbiAgICAgIHRoaXMubGFzdFRpbWUgPSB0aW1lO1xuICAgICAgdGhpcy5hY2N1bXVsYXRvciArPSBkZWx0YTtcbiAgICAgIHdoaWxlICh0aGlzLmFjY3VtdWxhdG9yID49IGNvbmZpZy5pbnRlcnZhbCkge1xuICAgICAgICB0aGlzLmFjY3VtdWxhdG9yIC09IGNvbmZpZy5pbnRlcnZhbDtcbiAgICAgICAgdGhpcy5kcmF3KGNvbmZpZy5pbnRlcnZhbCAvIDEwMDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlcXVlc3RGcmFtZSh0aW1lKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgQmF0dGxlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMubG9hZCgpKSB7XG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5hY2N1bXVsYXRvciA9IDAuMDtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdEZyYW1lKHRoaXMubGFzdFRpbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gQmF0dGxlO1xuXG4gIH0pKCk7XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJCgnLmJhdHRsZScpLmJpbmQoJ3Nob3cnLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiYXR0bGU7XG4gICAgICBiYXR0bGUgPSBuZXcgQmF0dGxlKHRoaXMpO1xuICAgICAgcmV0dXJuIGJhdHRsZS5zdGFydCgpO1xuICAgIH0pLmZpbHRlcignOnZpc2libGUnKS50cmlnZ2VyKCdzaG93Jyk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHRoaXMuQ2hhdCA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgY29tbWFuZHMsIGRlZmF1bHRzO1xuXG4gICAgZGVmYXVsdHMgPSB7XG4gICAgICBtZXNzYWdlVXJsOiBudWxsLFxuICAgICAgcGxheWVyVXJsOiBudWxsLFxuICAgICAgZW1vdGljb25Vcmw6IG51bGwsXG4gICAgICBpbnRlcnZhbDogMixcbiAgICAgIGhpc3Rvcnk6IDAsXG4gICAgICBtaW5MZW5ndGg6IDEsXG4gICAgICBtYXhMZW5ndGg6IDUxMixcbiAgICAgIGNvb2xkb3duOiA2MCxcbiAgICAgIGpvaW46IDEyMCxcbiAgICAgIGFsbG93U2VuZDogdHJ1ZSxcbiAgICAgIGFsbG93UmVjZWl2ZTogdHJ1ZSxcbiAgICAgIHNlbmRFeHRyYToge30sXG4gICAgICByZWNlaXZlRXh0cmE6IHt9LFxuICAgICAgc2VuZE1ldGhvZDogJ1BPU1QnLFxuICAgICAgcmVjZWl2ZU1ldGhvZDogJ0dFVCdcbiAgICB9O1xuXG4gICAgY29tbWFuZHMgPSB7XG4gICAgICAnY2xlYXInOiAnY2xlYXJPdXRwdXQnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENoYXQoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIG9wdDtcbiAgICAgIG9wdCA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICB0aGlzLm1lc3NhZ2VVcmwgPSBvcHQubWVzc2FnZVVybDtcbiAgICAgIHRoaXMucGxheWVyVXJsID0gb3B0LnBsYXllclVybDtcbiAgICAgIHRoaXMuZW1vdGljb25zID0gbmV3IEVtb3RpY29ucygpO1xuICAgICAgdGhpcy5hbGxvd1NlbmQgPSBvcHQuYWxsb3dTZW5kO1xuICAgICAgdGhpcy5hbGxvd1JlY2VpdmUgPSBvcHQuYWxsb3dSZWNlaXZlO1xuICAgICAgdGhpcy5yZWNlaXZlRXh0cmEgPSBvcHQucmVjZWl2ZUV4dHJhO1xuICAgICAgdGhpcy5zZW5kRXh0cmEgPSBvcHQuc2VuZEV4dHJhO1xuICAgICAgdGhpcy5yZWNlaXZlTWV0aG9kID0gb3B0LnJlY2VpdmVNZXRob2Q7XG4gICAgICB0aGlzLnNlbmRNZXRob2QgPSBvcHQuc2VuZE1ldGhvZDtcbiAgICAgIHRoaXMuaW5wdXQgPSAkKGVsZW1lbnQpLmZpbmQoJy5pbnB1dCcpO1xuICAgICAgdGhpcy5vdXRwdXQgPSAkKGVsZW1lbnQpLmZpbmQoJy5vdXRwdXQnKTtcbiAgICAgIHRoaXMuc2VuZEJ0biA9ICQoZWxlbWVudCkuZmluZCgnLnNlbmQnKTtcbiAgICAgIHRoaXMuY2xlYXJCdG4gPSAkKGVsZW1lbnQpLmZpbmQoJy5jbGVhcicpO1xuICAgICAgdGhpcy5lbW90aWNvbnNCdG4gPSAkKGVsZW1lbnQpLmZpbmQoJy5lbW90aWNvbnMnKTtcbiAgICAgIHRoaXMuZW1vdGljb25zLnBvcG92ZXIodGhpcy5lbW90aWNvbnNCdG4sIHRoaXMuaW5wdXQpO1xuICAgICAgdGhpcy5vdXRwdXRbMF0uc2Nyb2xsVG9wID0gdGhpcy5vdXRwdXRbMF0uc2Nyb2xsSGVpZ2h0O1xuICAgICAgJCh0aGlzLmlucHV0KS5rZXlkb3duKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMub25LZXkoZXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgJCh0aGlzLnNlbmRCdG4pLmNsaWNrKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuc2VuZCgpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5jbGVhcklucHV0KCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICAkKHRoaXMuY2xlYXJCdG4pLmNsaWNrKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmNsZWFyT3V0cHV0KCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICB0aGlzLmludGVydmFsID0gb3B0LmludGVydmFsO1xuICAgICAgdGhpcy5qb2luID0gb3B0LmpvaW47XG4gICAgICB0aGlzLmNvb2xkb3duID0gb3B0LmNvb2xkb3duO1xuICAgICAgdGhpcy5zZW50ID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCkgLSB0aGlzLmNvb2xkb3duO1xuICAgICAgdGhpcy50b3VjaCgpO1xuICAgICAgdGhpcy50aW1lID0gTWF0aC5tYXgodGhpcy50aW1lIC0gb3B0Lmhpc3RvcnksIDApO1xuICAgICAgdGhpcy5yZWNlaXZlKCk7XG4gICAgfVxuXG4gICAgQ2hhdC5wcm90b3R5cGUuZ2V0RXJyb3JUZXh0ID0gZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgdmFyIGssIHJlZiwgdGV4dCwgdjtcbiAgICAgIHRleHQgPSAocmVmID0gaTE4bi5jaGF0LmVycm9yc1tuYW1lXSkgIT0gbnVsbCA/IHJlZiA6IGkxOG4uY2hhdC5lcnJvcnMudW5rbm93bjtcbiAgICAgIGlmICgoYXJncyAhPSBudWxsKSAmJiB0eXBlb2YgYXJncyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChrIGluIGFyZ3MpIHtcbiAgICAgICAgICB2ID0gYXJnc1trXTtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCc6JyArIGssIHYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICB2YXIgYWxlcnQ7XG4gICAgICBhbGVydCA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ2FsZXJ0JykuYWRkQ2xhc3MoJ2FsZXJ0LWRhbmdlcicpLnRleHQodGhpcy5nZXRFcnJvclRleHQobmFtZSwgYXJncykpO1xuICAgICAgcmV0dXJuICQodGhpcy5vdXRwdXQpLmFwcGVuZChhbGVydCk7XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLmFsZXJ0ID0gZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgcmV0dXJuIGFsZXJ0KHRoaXMuZ2V0RXJyb3JUZXh0KG5hbWUsIGFyZ3MpKTtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUudG91Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRpbWUgPSBNYXRoLnJvdW5kKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbW1hbmQsIGRhdGEsIGZ1bmMsIGssIG1hdGNoZXMsIG1lc3NhZ2UsIG5vdywgdjtcbiAgICAgIG5vdyA9IE1hdGgucm91bmQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApO1xuICAgICAgbWVzc2FnZSA9ICQodGhpcy5pbnB1dCkudmFsKCk7XG4gICAgICBtYXRjaGVzID0gbWVzc2FnZS5tYXRjaCgvXlxcLyhcXHcrKS9pKTtcbiAgICAgIGlmICgobWF0Y2hlcyAhPSBudWxsKSAmJiAobWF0Y2hlc1sxXSAhPSBudWxsKSkge1xuICAgICAgICBjb21tYW5kID0gbWF0Y2hlc1sxXTtcbiAgICAgICAgZm9yIChrIGluIGNvbW1hbmRzKSB7XG4gICAgICAgICAgdiA9IGNvbW1hbmRzW2tdO1xuICAgICAgICAgIGlmIChjb21tYW5kLnRvTG93ZXJDYXNlKCkgPT09IGsudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXNbdl07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgZnVuYy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXJyb3IoJ2NtZE5vdEZvdW5kJywge1xuICAgICAgICAgICduYW1lJzogY29tbWFuZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWxsb3dTZW5kKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmxlbmd0aCA8IHRoaXMubWluTGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5hbGVydCgndG9vU2hvcnQnLCB7XG4gICAgICAgICAgICAnbWluJzogdGhpcy5taW5MZW5ndGhcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoID4gdGhpcy5tYXhMZW5ndGgpIHtcbiAgICAgICAgICBhbGVydCgndG9vTG9uZycsIHtcbiAgICAgICAgICAgICdtYXgnOiB0aGlzLm1heExlbmd0aFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZW50ICsgdGhpcy5jb29sZG93biA+IG5vdykge1xuICAgICAgICAgIHRoaXMuYWxlcnQoJ2Nvb2xkb3duJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSAkLmV4dGVuZCh7fSwgdGhpcy5zZW5kRXh0cmEsIHtcbiAgICAgICAgICBtZXNzYWdlOiAkKHRoaXMuaW5wdXQpLnZhbCgpXG4gICAgICAgIH0pO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogdGhpcy5tZXNzYWdlVXJsLFxuICAgICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uU2VudChkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcyksXG4gICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgIG1ldGhvZDogdGhpcy5zZW5kTWV0aG9kXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlbnQgPSBub3c7XG4gICAgICAgIHJldHVybiAkKHRoaXMuc2VuZEJ0bikuZGF0YSgndGltZScsIHRoaXMuc2VudCArIHRoaXMuY29vbGRvd24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoJ2Nhbm5vdFNlbmQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUucmVjZWl2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRhdGE7XG4gICAgICBpZiAodGhpcy5hbGxvd1JlY2VpdmUpIHtcbiAgICAgICAgZGF0YSA9ICQuZXh0ZW5kKHt9LCB0aGlzLnJlY2VpdmVFeHRyYSwge1xuICAgICAgICAgIHRpbWU6IHRoaXMudGltZVxuICAgICAgICB9KTtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICB1cmw6IHRoaXMubWVzc2FnZVVybCxcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIGNvbXBsZXRlOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcyksXG4gICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMub25SZWNlaXZlZChkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcyksXG4gICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICBtZXRob2Q6IHRoaXMucmVjZWl2ZU1ldGhvZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG91Y2goKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yKCdjYW5ub3RSZWNlaXZlJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLmNsZWFyT3V0cHV0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJCh0aGlzLm91dHB1dCkuZW1wdHkoKTtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUuY2xlYXJJbnB1dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICQodGhpcy5pbnB1dCkudmFsKCcnKTtcbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUuZ2V0TWVzc2FnZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiAkKCc8cD48L3A+JykuaHRtbCh0aGlzLmVtb3RpY29ucy5pbnNlcnQoZGF0YS5tZXNzYWdlKSkuYXBwZW5kKCQoJzxzbWFsbD48L3NtYWxsPicpLmFkZENsYXNzKCdjaGF0LXRpbWUnKS5kYXRhKCd0aW1lJywgZGF0YS50aW1lKSk7XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLm5ld01lc3NhZ2UgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICB2YXIgYXV0aG9yLCBhdmF0YXIsIGNvbDEsIGNvbDIsIGRpdjEsIGRpdjIsIG1lc3NhZ2UsIHJvdztcbiAgICAgIHJvdyA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ3JvdycpLmFkZENsYXNzKCdjaGF0LW1lc3NhZ2UnKS5kYXRhKCd0aW1lJywgZGF0YS50aW1lKS5kYXRhKCdhdXRob3InLCBkYXRhLmF1dGhvcik7XG4gICAgICBjb2wxID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnY29sLXhzLTEnKTtcbiAgICAgIGNvbDIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdjb2wteHMtMTEnKTtcbiAgICAgIGlmICh0aGlzLnBsYXllclVybCAhPSBudWxsKSB7XG4gICAgICAgIGRpdjEgPSAkKCc8YT48L2E+JykuYXR0cignaHJlZicsIHRoaXMuZ2V0UGxheWVyVXJsKGRhdGEuYXV0aG9yKSkuYWRkQ2xhc3MoJ2NoYXQtYXV0aG9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXYxID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnY2hhdC1hdXRob3InKTtcbiAgICAgIH1cbiAgICAgIGRpdjIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdjaGF0LWNvbnRlbnQnKTtcbiAgICAgIGF2YXRhciA9ICQoJzxpbWc+PC9pbWc+JykuYWRkQ2xhc3MoJ2ltZy1yZXNwb25zaXZlJykuYWRkQ2xhc3MoJ2NoYXQtYXZhdGFyJykuYXR0cignc3JjJywgZGF0YS5hdmF0YXIpO1xuICAgICAgYXV0aG9yID0gJCgnPHA+PC9wPicpLmFwcGVuZCgkKCc8c3Ryb25nPjwvc3Ryb25nPicpLmFkZENsYXNzKCdjaGF0LW5hbWUnKS50ZXh0KGRhdGEuYXV0aG9yKSk7XG4gICAgICBtZXNzYWdlID0gdGhpcy5nZXRNZXNzYWdlKGRhdGEpO1xuICAgICAgJChkaXYxKS5hcHBlbmQoYXZhdGFyKS5hcHBlbmQoYXV0aG9yKTtcbiAgICAgICQoZGl2MikuYXBwZW5kKG1lc3NhZ2UpO1xuICAgICAgJChjb2wxKS5hcHBlbmQoZGl2MSk7XG4gICAgICAkKGNvbDIpLmFwcGVuZChkaXYyKTtcbiAgICAgICQocm93KS5hcHBlbmQoY29sMSkuYXBwZW5kKGNvbDIpO1xuICAgICAgcmV0dXJuICQodGhpcy5vdXRwdXQpLmFwcGVuZChyb3cpO1xuICAgIH07XG5cbiAgICBDaGF0LnByb3RvdHlwZS5tb2RpZnlNZXNzYWdlID0gZnVuY3Rpb24obWVzc2FnZSwgZGF0YSkge1xuICAgICAgcmV0dXJuICQobWVzc2FnZSkuZmluZCgnLmNoYXQtY29udGVudCcpLmFwcGVuZCh0aGlzLmdldE1lc3NhZ2UoZGF0YSkpO1xuICAgIH07XG5cbiAgICBDaGF0LnByb3RvdHlwZS5hZGRNZXNzYWdlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgdmFyIGF1dGhvciwgbWVzc2FnZSwgc2Nyb2xsLCB0aW1lO1xuICAgICAgc2Nyb2xsID0gKHRoaXMub3V0cHV0WzBdLnNjcm9sbEhlaWdodCAtIHRoaXMub3V0cHV0WzBdLnNjcm9sbFRvcCAtIHRoaXMub3V0cHV0WzBdLmNsaWVudEhlaWdodCkgPD0gMTtcbiAgICAgIG1lc3NhZ2UgPSAkKHRoaXMub3V0cHV0KS5jaGlsZHJlbigpLmxhc3QoKTtcbiAgICAgIGlmIChtZXNzYWdlLmxlbmd0aCA9PT0gMCB8fCAhJChtZXNzYWdlKS5pcygnLmNoYXQtbWVzc2FnZScpKSB7XG4gICAgICAgIHRoaXMubmV3TWVzc2FnZShkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWUgPSAkKG1lc3NhZ2UpLmRhdGEoJ3RpbWUnKTtcbiAgICAgICAgYXV0aG9yID0gJChtZXNzYWdlKS5kYXRhKCdhdXRob3InKTtcbiAgICAgICAgaWYgKGF1dGhvciA9PT0gZGF0YS5hdXRob3IgJiYgKGRhdGEudGltZSAtIHRpbWUpIDw9IHRoaXMuam9pbikge1xuICAgICAgICAgIHRoaXMubW9kaWZ5TWVzc2FnZShtZXNzYWdlLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm5ld01lc3NhZ2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzY3JvbGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0WzBdLnNjcm9sbFRvcCA9IHRoaXMub3V0cHV0WzBdLnNjcm9sbEhlaWdodCAtIDE7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLm9uU2VudCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihkYXRhLnJlYXNvbiwgZGF0YS5hcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ2hhdC5wcm90b3R5cGUub25SZWNlaXZlZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHZhciBpLCBsZW4sIG1lc3NhZ2UsIHJlc3VsdHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBkYXRhW2ldO1xuICAgICAgICByZXN1bHRzLnB1c2godGhpcy5hZGRNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH07XG5cbiAgICBDaGF0LnByb3RvdHlwZS5vbkNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZWNlaXZlKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSwgdGhpcy5pbnRlcnZhbCAqIDEwMDApO1xuICAgIH07XG5cbiAgICBDaGF0LnByb3RvdHlwZS5vbktleSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XG4gICAgICAgIHRoaXMuc2VuZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhcklucHV0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENoYXQucHJvdG90eXBlLmdldFBsYXllclVybCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllclVybC5yZXBsYWNlKCd7bmFtZX0nLCBuYW1lKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENoYXQ7XG5cbiAgfSkoKTtcblxuICAkKGZ1bmN0aW9uKCkge1xuICAgIHZhciB1cGRhdGU7XG4gICAgdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93O1xuICAgICAgbm93ID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgICAkKCcuY2hhdCAuY2hhdC10aW1lJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGludGVydmFsLCB0ZXh0LCB0aW1lO1xuICAgICAgICB0aW1lID0gcGFyc2VJbnQoJCh0aGlzKS5kYXRhKCd0aW1lJykpO1xuICAgICAgICBpbnRlcnZhbCA9IG5vdyAtIHRpbWU7XG4gICAgICAgIGlmIChpbnRlcnZhbCA8IDYwKSB7XG4gICAgICAgICAgdGV4dCA9IGkxOG4uY2hhdC5mZXdTZWNzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSB3aW5kb3cudGltZUZvcm1hdFNob3J0KGludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJCh0aGlzKS50ZXh0KHRleHQgKyAnICcgKyBpMThuLmNoYXQuYWdvKTtcbiAgICAgIH0pO1xuICAgICAgJCgnLmNoYXQgLnNlbmQnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW50ZXJ2YWwsIHRleHQsIHRpbWU7XG4gICAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ2Rpc2FibGVkJykgIT09ICd0cnVlJykge1xuICAgICAgICAgIHRpbWUgPSBwYXJzZUludCgkKHRoaXMpLmRhdGEoJ3RpbWUnKSk7XG4gICAgICAgICAgdGV4dCA9ICQodGhpcykuZGF0YSgndGV4dCcpO1xuICAgICAgICAgIGludGVydmFsID0gdGltZSAtIG5vdztcbiAgICAgICAgICBpZiAoaW50ZXJ2YWwgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJCh0aGlzKS50ZXh0KHdpbmRvdy50aW1lRm9ybWF0KGludGVydmFsKSkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLnRleHQodGV4dCkucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KHVwZGF0ZSwgMTAwMCk7XG4gICAgfTtcbiAgICByZXR1cm4gdXBkYXRlKCk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciB1cGRhdGU7XG5cbiAgdXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdGUsIG5vdztcbiAgICBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBub3cgPSBNYXRoLnJvdW5kKGRhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgJCgnLmN1cnJlbnQtdGltZScpLnRleHQoZGF0ZS50b1VUQ1N0cmluZygpKTtcbiAgICAkKCcudGltZS1sZWZ0JykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0bztcbiAgICAgIHRvID0gJCh0aGlzKS5kYXRhKCd0bycpO1xuICAgICAgcmV0dXJuICQodGhpcykudGV4dCh3aW5kb3cudGltZUZvcm1hdChNYXRoLm1heCh0byAtIG5vdywgMCkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2V0VGltZW91dCh1cGRhdGUsIDEwMDApO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHVwZGF0ZSgpO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgZGlhbG9ncywgc2hvdztcblxuICBkaWFsb2dzID0gW107XG5cbiAgc2hvdyA9IGZ1bmN0aW9uKGRpYWxvZykge1xuICAgIHZhciBkaXNtaXNzaWJsZSwgcmVmO1xuICAgIGRpc21pc3NpYmxlID0gKHJlZiA9ICQoZGlhbG9nKS5kYXRhKCdkaXNtaXNzaWJsZScpKSAhPSBudWxsID8gcmVmIDogdHJ1ZTtcbiAgICAkKGRpYWxvZykuYmluZCgnc2hvd24uYnMubW9kYWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgcmV0dXJuICQodGhpcykuZmluZCgnLmJhdHRsZScpLnRyaWdnZXIoJ3Nob3cnKTtcbiAgICB9KTtcbiAgICBpZiAoZGlzbWlzc2libGUpIHtcbiAgICAgIHJldHVybiAkKGRpYWxvZykubW9kYWwoe1xuICAgICAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAga2V5Ym9hcmQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJChkaWFsb2cpLm1vZGFsKHtcbiAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBrZXlib2FyZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAkKGZ1bmN0aW9uKCkge1xuICAgIGRpYWxvZ3MgPSAkKCcubW9kYWwuYXV0b3Nob3cnKTtcbiAgICByZXR1cm4gJChkaWFsb2dzKS5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgc2hvdyh0aGlzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmRleCA8IChkaWFsb2dzLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgIHJldHVybiBzaG93KGRpYWxvZ3NbaW5kZXggKyAxXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgY291bnRlcjtcblxuICB0aGlzLkVtb3RpY29ucyA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVmYXVsdHM7XG5cbiAgICBkZWZhdWx0cyA9IHtcbiAgICAgIGVtb3RpY29uczoge1xuICAgICAgICAnOyknOiAnYmxpbmsucG5nJyxcbiAgICAgICAgJzpEJzogJ2dyaW4ucG5nJyxcbiAgICAgICAgJzooJzogJ3NhZC5wbmcnLFxuICAgICAgICAnOiknOiAnc21pbGUucG5nJyxcbiAgICAgICAgJ0IpJzogJ3N1bmdsYXNzZXMucG5nJyxcbiAgICAgICAgJ08ubyc6ICdzdXJwcmlzZWQucG5nJyxcbiAgICAgICAgJzpwJzogJ3Rvbmd1ZS5wbmcnXG4gICAgICB9LFxuICAgICAgdXJsOiAnL2ltYWdlcy9lbW90aWNvbnMve25hbWV9J1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBFbW90aWNvbnModXJsLCBlbW90aWNvbnMpIHtcbiAgICAgIHRoaXMudXJsID0gdXJsICE9IG51bGwgPyB1cmwgOiBkZWZhdWx0cy51cmw7XG4gICAgICB0aGlzLnNldCA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cy5lbW90aWNvbnMsIGVtb3RpY29ucyAhPSBudWxsID8gZW1vdGljb25zIDoge30pO1xuICAgIH1cblxuICAgIEVtb3RpY29ucy5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24odGV4dCkge1xuICAgICAgdmFyIGVtb3RpY29uLCBrLCByZWYsIHVybCwgdjtcbiAgICAgIHJlZiA9IHRoaXMuc2V0O1xuICAgICAgZm9yIChrIGluIHJlZikge1xuICAgICAgICB2ID0gcmVmW2tdO1xuICAgICAgICB1cmwgPSB0aGlzLnVybC5yZXBsYWNlKCd7bmFtZX0nLCB2KTtcbiAgICAgICAgZW1vdGljb24gPSAnPGltZyBjbGFzcz1cImVtb3RpY29uXCIgc3JjPVwiJyArIHVybCArICdcIiBhbHQ9XCInICsgayArICdcIiB0aXRsZT1cIicgKyBrICsgJ1wiLz4nO1xuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlQWxsKGssIGVtb3RpY29uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH07XG5cbiAgICBFbW90aWNvbnMucHJvdG90eXBlLnBvcG92ZXIgPSBmdW5jdGlvbihidXR0b24sIG91dHB1dCkge1xuICAgICAgcmV0dXJuICQoYnV0dG9uKS5wb3BvdmVyKHtcbiAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICAgICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICAgICAgdGl0bGU6IGkxOG4uZW1vdGljb25zLnRpdGxlLFxuICAgICAgICBjb250ZW50OiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0UG9wb3ZlckNvbnRlbnQob3V0cHV0KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci10aXRsZVwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItY29udGVudCBlbW90aWNvbi1jb250YWluZXJcIj48L2Rpdj48L2Rpdj4nXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRW1vdGljb25zLnByb3RvdHlwZS5nZXRQb3BvdmVyQ29udGVudCA9IGZ1bmN0aW9uKG91dHB1dCkge1xuICAgICAgdmFyIGNvbnRhaW5lciwgaW1nLCBrLCByZWYsIHVybCwgdjtcbiAgICAgIGNvbnRhaW5lciA9ICQoJzxkaXY+PC9kaXY+Jyk7XG4gICAgICByZWYgPSB0aGlzLnNldDtcbiAgICAgIGZvciAoayBpbiByZWYpIHtcbiAgICAgICAgdiA9IHJlZltrXTtcbiAgICAgICAgdXJsID0gdGhpcy51cmwucmVwbGFjZSgne25hbWV9Jywgdik7XG4gICAgICAgIGltZyA9ICQoJzxpbWc+PC9pbWc+JykuYWRkQ2xhc3MoJ2Vtb3RpY29uJykuYXR0cignc3JjJywgdXJsKS5hdHRyKCdhbHQnLCBrKS5hdHRyKCd0aXRsZScsIGspLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiAkKG91dHB1dCkudmFsKCQob3V0cHV0KS52YWwoKSArICQodGhpcykuYXR0cignYWx0JykpO1xuICAgICAgICB9KTtcbiAgICAgICAgJChjb250YWluZXIpLmFwcGVuZChpbWcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEVtb3RpY29ucztcblxuICB9KSgpO1xuXG4gIGNvdW50ZXIgPSAwO1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVtb3RpY29ucztcbiAgICBlbW90aWNvbnMgPSBuZXcgRW1vdGljb25zKCk7XG4gICAgcmV0dXJuICQoJ1tkYXRhLWVtb3RpY29ucz10cnVlXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGV4dDtcbiAgICAgIHRleHQgPSAkKHRoaXMpLnRleHQoKTtcbiAgICAgIHRleHQgPSBlbW90aWNvbnMuaW5zZXJ0KHRleHQpO1xuICAgICAgcmV0dXJuICQodGhpcykuaHRtbCh0ZXh0KTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGFmdGVyTG9hZGVkLCBlcXVhbGl6ZSwgZ2V0Q29sdW1ucywgZ2V0UHJlZml4LCBnZXRTaXplLCB3aWR0aHM7XG5cbiAgd2lkdGhzID0ge1xuICAgIHhzOiA3NjgsXG4gICAgc206IDk5MixcbiAgICBtZDogMTIwMFxuICB9O1xuXG4gIGdldFByZWZpeCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB3aWR0aDtcbiAgICB3aWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgIGlmICh3aWR0aCA8IHdpZHRocy54cykge1xuICAgICAgcmV0dXJuIFsneHMnXTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoIDwgd2lkdGhzLnNtKSB7XG4gICAgICByZXR1cm4gWydzbScsICd4cyddO1xuICAgIH0gZWxzZSBpZiAod2lkdGggPCB3aWR0aHMubWQpIHtcbiAgICAgIHJldHVybiBbJ21kJywgJ3NtJywgJ3hzJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbJ2xnJywgJ21kJywgJ3NtJywgJ3hzJ107XG4gICAgfVxuICB9O1xuXG4gIGdldENvbHVtbnMgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaSwgaiwgaywgbGVuLCBwLCByZXN1bHQ7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChqID0gMCwgbGVuID0gcHJlZml4Lmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBwID0gcHJlZml4W2pdO1xuICAgICAgZm9yIChpID0gayA9IDE7IGsgPD0gMTI7IGkgPSArK2spIHtcbiAgICAgICAgcmVzdWx0LnB1c2goXCJjb2wtXCIgKyBwICsgXCItXCIgKyBpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBnZXRTaXplID0gZnVuY3Rpb24ob2JqZWN0LCBwcmVmaXgpIHtcbiAgICB2YXIgaiwgbGVuLCBwLCByZWYsIHJlZ2V4cCwgc2l6ZTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSBwcmVmaXgubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHAgPSBwcmVmaXhbal07XG4gICAgICByZWdleHAgPSBuZXcgUmVnRXhwKFwiY29sLVwiICsgcCArIFwiLShcXFxcZCspXCIpO1xuICAgICAgc2l6ZSA9IChyZWYgPSAkKG9iamVjdCkuYXR0cignY2xhc3MnKS5tYXRjaChyZWdleHApKSAhPSBudWxsID8gcmVmWzFdIDogdm9pZCAwO1xuICAgICAgaWYgKHNpemUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoc2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGVxdWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbHVtbnMsIHByZWZpeCwgc2VsZWN0b3I7XG4gICAgcHJlZml4ID0gZ2V0UHJlZml4KCk7XG4gICAgY29sdW1ucyA9IGdldENvbHVtbnMocHJlZml4KTtcbiAgICBzZWxlY3RvciA9ICcuJyArIGNvbHVtbnMuam9pbignLC4nKTtcbiAgICByZXR1cm4gJCgnLnJvdy5lcXVhbGl6ZScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29sLCBoZWlnaHRzLCBocywgaSwgaiwgcCwgcm93LCBzdW07XG4gICAgICBoZWlnaHRzID0gW107XG4gICAgICByb3cgPSAwO1xuICAgICAgc3VtID0gMDtcbiAgICAgICQodGhpcykuY2hpbGRyZW4oc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzaXplO1xuICAgICAgICBzaXplID0gZ2V0U2l6ZSh0aGlzLCBwcmVmaXgpO1xuICAgICAgICBzdW0gKz0gc2l6ZTtcbiAgICAgICAgaWYgKHN1bSA+IDEyKSB7XG4gICAgICAgICAgc3VtIC09IDEyO1xuICAgICAgICAgIHJvdysrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZWlnaHRzW3Jvd10gPT0gbnVsbCkge1xuICAgICAgICAgIGhlaWdodHNbcm93XSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlaWdodHNbcm93XSA9IE1hdGgubWF4KGhlaWdodHNbcm93XSwgJCh0aGlzKS5oZWlnaHQoKSk7XG4gICAgICB9KTtcbiAgICAgIHJvdyA9IDA7XG4gICAgICBzdW0gPSAwO1xuICAgICAgY29sID0gbnVsbDtcbiAgICAgICQodGhpcykuY2hpbGRyZW4oc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHN1bSArPSBnZXRTaXplKHRoaXMsIHByZWZpeCk7XG4gICAgICAgIGlmIChjb2wgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbCA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1bSA+IDEyKSB7XG4gICAgICAgICAgc3VtIC09IDEyO1xuICAgICAgICAgIHJvdysrO1xuICAgICAgICAgIGNvbCA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQodGhpcykuaGVpZ2h0KGhlaWdodHNbcm93XSk7XG4gICAgICB9KTtcbiAgICAgIGhzID0gTWF0aC5yb3VuZCgoMTIgLSBzdW0pIC8gMik7XG4gICAgICBpZiAoKGNvbCAhPSBudWxsKSAmJiBocyA+IDApIHtcbiAgICAgICAgcCA9IHByZWZpeFswXTtcbiAgICAgICAgZm9yIChpID0gaiA9IDE7IGogPD0gMTI7IGkgPSArK2opIHtcbiAgICAgICAgICAkKGNvbCkucmVtb3ZlQ2xhc3MoXCJjb2wtXCIgKyBwICsgXCItb2Zmc2V0LVwiICsgaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQoY29sKS5hZGRDbGFzcyhcImNvbC1cIiArIHAgKyBcIi1vZmZzZXQtXCIgKyBocyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgYWZ0ZXJMb2FkZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJCgnaW1nJykub24oJ2xvYWQnLCBlcXVhbGl6ZSk7XG4gIH07XG5cbiAgJChmdW5jdGlvbigpIHt9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIga2V5RG93biwga2V5VXAsIG1vdXNlV2hlZWwsIG51bWJlckRlY3JlYXNlLCBudW1iZXJJbmNyZWFzZSwgcmFuZ2VDaGFuZ2VkLCBzcGVlZDtcblxuICBzcGVlZCA9IDE7XG5cbiAga2V5RG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxNykge1xuICAgICAgc3BlZWQgPSAxMDtcbiAgICB9XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxNikge1xuICAgICAgcmV0dXJuIHNwZWVkID0gMTAwO1xuICAgIH1cbiAgfTtcblxuICBrZXlVcCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxNyB8fCBldmVudC53aGljaCA9PT0gMTYpIHtcbiAgICAgIHJldHVybiBzcGVlZCA9IDE7XG4gICAgfVxuICB9O1xuXG4gIG1vdXNlV2hlZWwgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBjaGFuZ2UsIG1heCwgbWluLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHN0ZXAsIHZhbHVlO1xuICAgIGNvbnNvbGUubG9nKCdtb3VzZVdoZWVsJyk7XG4gICAgbWluID0gcGFyc2VJbnQoKHJlZiA9ICQodGhpcykuYXR0cignbWluJykpICE9IG51bGwgPyByZWYgOiAwKTtcbiAgICBtYXggPSBwYXJzZUludCgocmVmMSA9ICQodGhpcykuYXR0cignbWF4JykpICE9IG51bGwgPyByZWYxIDogMTAwKTtcbiAgICBzdGVwID0gcGFyc2VJbnQoKHJlZjIgPSAkKHRoaXMpLmF0dHIoJ3N0ZXAnKSkgIT0gbnVsbCA/IHJlZjIgOiAxKTtcbiAgICBjaGFuZ2UgPSBldmVudC5kZWx0YVkgKiBzdGVwICogc3BlZWQ7XG4gICAgdmFsdWUgPSBwYXJzZUludCgocmVmMyA9ICQodGhpcykudmFsKCkpICE9IG51bGwgPyByZWYzIDogMCk7XG4gICAgdmFsdWUgPSBNYXRoLmNsYW1wKHZhbHVlICsgY2hhbmdlLCBtaW4sIG1heCk7XG4gICAgJCh0aGlzKS52YWwodmFsdWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIHJldHVybiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIHJhbmdlQ2hhbmdlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGFmdGVyLCBiZWZvcmUsIG91dHB1dCwgcmVmLCByZWYxLCByZWYyLCB2YWx1ZTtcbiAgICBjb25zb2xlLmxvZygncmFuZ2VDaGFuZ2VkJyk7XG4gICAgb3V0cHV0ID0gJCh0aGlzKS5wYXJlbnQoKS5jaGlsZHJlbignLnJhbmdlLXZhbHVlJyk7XG4gICAgYmVmb3JlID0gKHJlZiA9ICQob3V0cHV0KS5kYXRhKCdiZWZvcmUnKSkgIT0gbnVsbCA/IHJlZiA6ICcnO1xuICAgIGFmdGVyID0gKHJlZjEgPSAkKG91dHB1dCkuZGF0YSgnYWZ0ZXInKSkgIT0gbnVsbCA/IHJlZjEgOiAnJztcbiAgICB2YWx1ZSA9IChyZWYyID0gJCh0aGlzKS52YWwoKSkgIT0gbnVsbCA/IHJlZjIgOiAwO1xuICAgIHJldHVybiAkKG91dHB1dCkudGV4dChiZWZvcmUgKyB2YWx1ZSArIGFmdGVyKTtcbiAgfTtcblxuICBudW1iZXJEZWNyZWFzZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGlucHV0LCBtYXgsIG1pbiwgcmVmLCByZWYxLCByZWYyLCByZWYzLCBzdGVwLCB2YWx1ZTtcbiAgICBjb25zb2xlLmxvZygnbnVtYmVyRGVjcmVhc2UnKTtcbiAgICBpbnB1dCA9ICQodGhpcykucGFyZW50KCkucGFyZW50KCkuY2hpbGRyZW4oJ2lucHV0Jyk7XG4gICAgbWluID0gcGFyc2VJbnQoKHJlZiA9ICQoaW5wdXQpLmF0dHIoJ21pbicpKSAhPSBudWxsID8gcmVmIDogMCk7XG4gICAgbWF4ID0gcGFyc2VJbnQoKHJlZjEgPSAkKGlucHV0KS5hdHRyKCdtYXgnKSkgIT0gbnVsbCA/IHJlZjEgOiAxMDApO1xuICAgIHN0ZXAgPSBwYXJzZUludCgocmVmMiA9ICQoaW5wdXQpLmF0dHIoJ3N0ZXAnKSkgIT0gbnVsbCA/IHJlZjIgOiAxKTtcbiAgICB2YWx1ZSA9IHBhcnNlSW50KChyZWYzID0gJChpbnB1dCkudmFsKCkpICE9IG51bGwgPyByZWYzIDogMCk7XG4gICAgdmFsdWUgPSBNYXRoLmNsYW1wKHZhbHVlIC0gc3BlZWQgKiBzdGVwLCBtaW4sIG1heCk7XG4gICAgcmV0dXJuICQoaW5wdXQpLnZhbCh2YWx1ZSkudHJpZ2dlcignY2hhbmdlJyk7XG4gIH07XG5cbiAgbnVtYmVySW5jcmVhc2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBpbnB1dCwgbWF4LCBtaW4sIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgc3RlcCwgdmFsdWU7XG4gICAgY29uc29sZS5sb2coJ251bWJlckluY3JlYXNlJyk7XG4gICAgaW5wdXQgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLmNoaWxkcmVuKCdpbnB1dCcpO1xuICAgIG1pbiA9IHBhcnNlSW50KChyZWYgPSAkKGlucHV0KS5hdHRyKCdtaW4nKSkgIT0gbnVsbCA/IHJlZiA6IDApO1xuICAgIG1heCA9IHBhcnNlSW50KChyZWYxID0gJChpbnB1dCkuYXR0cignbWF4JykpICE9IG51bGwgPyByZWYxIDogMTAwKTtcbiAgICBzdGVwID0gcGFyc2VJbnQoKHJlZjIgPSAkKGlucHV0KS5hdHRyKCdzdGVwJykpICE9IG51bGwgPyByZWYyIDogMSk7XG4gICAgdmFsdWUgPSBwYXJzZUludCgocmVmMyA9ICQoaW5wdXQpLnZhbCgpKSAhPSBudWxsID8gcmVmMyA6IDApO1xuICAgIHZhbHVlID0gTWF0aC5jbGFtcCh2YWx1ZSArIHNwZWVkICogc3RlcCwgbWluLCBtYXgpO1xuICAgIHJldHVybiAkKGlucHV0KS52YWwodmFsdWUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgJCh3aW5kb3cpLmtleXVwKGtleVVwKS5rZXlkb3duKGtleURvd24pO1xuICAgICQoJ2lucHV0W3R5cGU9bnVtYmVyXSwgaW5wdXRbdHlwZT1yYW5nZV0nKS5iaW5kKCdtb3VzZXdoZWVsJywgbW91c2VXaGVlbCk7XG4gICAgJCgnaW5wdXRbdHlwZT1yYW5nZV0nKS5jaGFuZ2UocmFuZ2VDaGFuZ2VkKS5tb3VzZW1vdmUocmFuZ2VDaGFuZ2VkKTtcbiAgICAkKCcubnVtYmVyLW1pbnVzJykuY2hpbGRyZW4oJ2J1dHRvbicpLmNsaWNrKG51bWJlckRlY3JlYXNlKTtcbiAgICByZXR1cm4gJCgnLm51bWJlci1wbHVzJykuY2hpbGRyZW4oJ2J1dHRvbicpLmNsaWNrKG51bWJlckluY3JlYXNlKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgJChmdW5jdGlvbigpIHtcbiAgICB2YXIgaGVscCwgaGlkZSwgcG9zaXRpb24sIHNob3csIHNpemU7XG4gICAgY29uc29sZS5sb2coJChkb2N1bWVudCkuc2l6ZSgpKTtcbiAgICBoZWxwID0gZmFsc2U7XG4gICAgc2l6ZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiAkKGVsZW1lbnQpLndpZHRoKCksXG4gICAgICAgIGhlaWdodDogJChlbGVtZW50KS5oZWlnaHQoKVxuICAgICAgfTtcbiAgICB9O1xuICAgIHBvc2l0aW9uID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuICQoZWxlbWVudCkub2Zmc2V0KCk7XG4gICAgfTtcbiAgICBzaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWFpbk92ZXJsYXksIG5hdk92ZXJsYXk7XG4gICAgICBpZiAoIWhlbHApIHtcbiAgICAgICAgaGVscCA9IHRydWU7XG4gICAgICAgIG1haW5PdmVybGF5ID0gJCgnPGRpdj48L2Rpdj4nKS5hdHRyKCdpZCcsICdtYWluT3ZlcmxheScpLmFkZENsYXNzKCdvdmVybGF5JykuY3NzKHNpemUoZG9jdW1lbnQpKS5jbGljayhoaWRlKS5oaWRlKCk7XG4gICAgICAgIG5hdk92ZXJsYXkgPSAkKCc8ZGl2PjwvZGl2PicpLmF0dHIoJ2lkJywgJ25hdk92ZXJsYXknKS5hZGRDbGFzcygnb3ZlcmxheScpLmNzcygncG9zaXRpb24nLCAnZml4ZWQnKS5jc3MoJ3otaW5kZXgnLCAxMDAwMDApLmNzcyhzaXplKCcjbWFpbk5hdicpKS5jbGljayhoaWRlKS5oaWRlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCQoJyNtYWluQ29udGVudCBbZGF0YS1oZWxwXScpKTtcbiAgICAgICAgY29uc29sZS5sb2coJCgnI21haW5OYXYgW2RhdGEtaGVscF0nKSk7XG4gICAgICAgICQoJyNtYWluQ29udGVudCBbZGF0YS1oZWxwXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNvcHksIHAsIHM7XG4gICAgICAgICAgY29weSA9ICQodGhpcykuY2xvbmUoKTtcbiAgICAgICAgICBwID0gcG9zaXRpb24odGhpcyk7XG4gICAgICAgICAgcyA9IHNpemUodGhpcyk7XG4gICAgICAgICAgJChjb3B5KS5hZGRDbGFzcygnaGVscGVyJykuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpLnRvb2x0aXAoe1xuICAgICAgICAgICAgcGxhY2VtZW50OiAnYXV0byB0b3AnLFxuICAgICAgICAgICAgdGl0bGU6ICQodGhpcykuZGF0YSgnaGVscCcpXG4gICAgICAgICAgfSkuY3NzKHApLmNzcyhzKTtcbiAgICAgICAgICAkKGNvcHkpLmZpbmQoJ1t0aXRsZV0nKS5yZW1vdmVBdHRyKCd0aXRsZScpO1xuICAgICAgICAgIHJldHVybiAkKG1haW5PdmVybGF5KS5hcHBlbmQoY29weSk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKCcjbWFpbk5hdiBbZGF0YS1oZWxwXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNvcHksIHAsIHM7XG4gICAgICAgICAgY29weSA9ICQodGhpcykuY2xvbmUoKTtcbiAgICAgICAgICBwID0gcG9zaXRpb24odGhpcyk7XG4gICAgICAgICAgcyA9IHNpemUodGhpcyk7XG4gICAgICAgICAgJChjb3B5KS5hZGRDbGFzcygnaGVscGVyJykuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpLnRvb2x0aXAoe1xuICAgICAgICAgICAgcGxhY2VtZW50OiAnYXV0byB0b3AnLFxuICAgICAgICAgICAgdGl0bGU6ICQodGhpcykuZGF0YSgnaGVscCcpXG4gICAgICAgICAgfSkuY3NzKHApLmNzcyhzKTtcbiAgICAgICAgICAkKGNvcHkpLmZpbmQoJ1t0aXRsZV0nKS5yZW1vdmVBdHRyKCd0aXRsZScpO1xuICAgICAgICAgIHJldHVybiAkKG5hdk92ZXJsYXkpLmFwcGVuZChjb3B5KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoJ2JvZHknKS5hcHBlbmQobWFpbk92ZXJsYXkpLmFwcGVuZChuYXZPdmVybGF5KTtcbiAgICAgICAgJChtYWluT3ZlcmxheSkuZmFkZUluKCk7XG4gICAgICAgIHJldHVybiAkKG5hdk92ZXJsYXkpLmZhZGVJbigpO1xuICAgICAgfVxuICAgIH07XG4gICAgaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGhlbHApIHtcbiAgICAgICAgaGVscCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gJCgnLm92ZXJsYXknKS5mYWRlT3V0KHtcbiAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJCgnLm92ZXJsYXknKS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgJCgnI2hlbHBCdG4nKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzaG93KCk7XG4gICAgfSk7XG4gICAgcmV0dXJuICQoZG9jdW1lbnQpLmtleWRvd24oZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gMjcpIHtcbiAgICAgICAgcmV0dXJuIGhpZGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGksIGxhc3RUaW1lLCBsZW4sIHZlbmRvciwgdmVuZG9ycztcblxuICBsYXN0VGltZSA9IDA7XG5cbiAgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuXG4gIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHZlbmRvcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZlbmRvciA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvciArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3IgKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdmVuZG9yICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgIH1cbiAgfVxuXG4gIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaywgZWxlbWVudCkge1xuICAgIHZhciBjdXJyVGltZSwgaWQsIHRpbWVUb0NhbGw7XG4gICAgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xuICAgIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcbiAgICB9LCB0aW1lVG9DYWxsKTtcbiAgICByZXR1cm4gaWQ7XG4gIH0pO1xuXG4gIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCAod2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgJChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJCgnLmltYWdlLXByZXZpZXcnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGlkLCBwcmV2aWV3O1xuICAgICAgcHJldmlldyA9IHRoaXM7XG4gICAgICBpZCA9ICQodGhpcykuZGF0YSgnZm9yJyk7XG4gICAgICByZXR1cm4gJCgnIycgKyBpZCkuY2hhbmdlKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBwYXRoO1xuICAgICAgICBwYXRoID0gVVJMLmNyZWF0ZU9iamVjdFVSTChldmVudC50YXJnZXQuZmlsZXNbMF0pO1xuICAgICAgICBpZiAocGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICQocHJldmlldykuYXR0cignc3JjJywgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH0pLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIH0pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgYnV0dG9uLCBzZWxlY3QsIHNldDtcblxuICBzZXQgPSBmdW5jdGlvbihsYW5nKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9sYW5nLycgKyBsYW5nO1xuICB9O1xuXG4gIGJ1dHRvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXQoJCh0aGlzKS5kYXRhKCdsYW5nJykpO1xuICB9O1xuXG4gIHNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXQoJCh0aGlzKS52YWwoKSk7XG4gIH07XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICAkKCcubGFuZ3VhZ2Utc2VsZWN0JykuY2hhbmdlKHNlbGVjdCk7XG4gICAgcmV0dXJuICQoJy5sYW5ndWFnZS1idXR0b24nKS5jbGljayhidXR0b24pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgbmF2Zml4O1xuXG4gIG5hdmZpeCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoZWlnaHQ7XG4gICAgaGVpZ2h0ID0gJCgnI21haW5OYXYnKS5oZWlnaHQoKSArIDEwO1xuICAgIHJldHVybiAkKCdib2R5JykuY3NzKCdwYWRkaW5nLXRvcCcsIGhlaWdodCArICdweCcpO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuYXZmaXgoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmF2Zml4KCk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBpbWFnZUZvckZyYW1lLCByZWZyZXNoUGxhbnQ7XG5cbiAgaW1hZ2VGb3JGcmFtZSA9IGZ1bmN0aW9uKGZyYW1lKSB7XG4gICAgcmV0dXJuICcvaW1hZ2VzL3BsYW50cy9wbGFudC0nICsgZnJhbWUgKyAnLnBuZyc7XG4gIH07XG5cbiAgcmVmcmVzaFBsYW50ID0gZnVuY3Rpb24ocGxhbnQpIHtcbiAgICB2YXIgZW5kLCBmcmFtZSwgbm93LCBzdGFydCwgd2F0ZXJpbmc7XG4gICAgbm93ID0gTWF0aC5yb3VuZCgobmV3IERhdGUpLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHN0YXJ0ID0gcGFyc2VJbnQoJChwbGFudCkuZGF0YSgnc3RhcnQnKSk7XG4gICAgZW5kID0gcGFyc2VJbnQoJChwbGFudCkuZGF0YSgnZW5kJykpO1xuICAgIHdhdGVyaW5nID0gcGFyc2VJbnQoJChwbGFudCkuZGF0YSgnd2F0ZXJpbmcnKSk7XG4gICAgbm93ID0gTWF0aC5taW4obm93LCB3YXRlcmluZyk7XG4gICAgZnJhbWUgPSBNYXRoLmZsb29yKDE3ICogTWF0aC5jbGFtcCgobm93IC0gc3RhcnQpIC8gKGVuZCAtIHN0YXJ0KSwgMCwgMSkpO1xuICAgICQocGxhbnQpLmF0dHIoJ3NyYycsIGltYWdlRm9yRnJhbWUoZnJhbWUpKTtcbiAgICBpZiAoZnJhbWUgPCAxNykge1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVmcmVzaFBsYW50KHBsYW50KTtcbiAgICAgIH0pLCAxMDAwKTtcbiAgICB9XG4gIH07XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICAkKCcucGxhbnRhdGlvbi1wbGFudCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmVmcmVzaFBsYW50KHRoaXMpO1xuICAgIH0pO1xuICAgIHJldHVybiAkKCcjc2VlZHNNb2RhbCcpLm9uKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBzbG90O1xuICAgICAgc2xvdCA9ICQoZXZlbnQucmVsYXRlZFRhcmdldCkuZGF0YSgnc2xvdCcpO1xuICAgICAgcmV0dXJuICQodGhpcykuZmluZCgnaW5wdXRbbmFtZT1zbG90XScpLnZhbChzbG90KTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGZpbGwsIGxvYWQsIGxvYWRlZCwgbWVzc2FnZSwgbm90aWZ5LCBzZXRQcm9ncmVzcywgc2V0VmFsdWUsIHNldFZhbHVlcywgdXJsO1xuXG4gIHVybCA9ICcvYXBpL2NoYXJhY3Rlcic7XG5cbiAgc2V0UHJvZ3Jlc3MgPSBmdW5jdGlvbihvYmplY3QsIHZhbHVlLCBtaW5WYWx1ZSwgbWF4VmFsdWUsIGxhc3RVcGRhdGUsIG5leHRVcGRhdGUpIHtcbiAgICB2YXIgYmFyLCBiYXNlLCBjaGlsZCwgdGltZXI7XG4gICAgYmFyID0gJCgnLicgKyBvYmplY3QgKyAnLWJhcicpO1xuICAgIHRpbWVyID0gJCgnLicgKyBvYmplY3QgKyAnLXRpbWVyJyk7XG4gICAgaWYgKGJhci5sZW5ndGggPiAwKSB7XG4gICAgICBjaGlsZCA9ICQoYmFyKS5jaGlsZHJlbignLnByb2dyZXNzLWJhcicpO1xuICAgICAgJChjaGlsZCkuZGF0YSgnbWF4JywgbWF4VmFsdWUpLmRhdGEoJ21pbicsIG1pblZhbHVlKS5kYXRhKCdub3cnLCB2YWx1ZSk7XG4gICAgICBpZiAodHlwZW9mIChiYXNlID0gYmFyWzBdKS51cGRhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBiYXNlLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXIubGVuZ3RoID4gMCkge1xuICAgICAgY2hpbGQgPSAkKHRpbWVyKS5jaGlsZHJlbignLnByb2dyZXNzLWJhcicpO1xuICAgICAgaWYgKG5leHRVcGRhdGUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJChjaGlsZCkuZGF0YSgnbWF4JywgbmV4dFVwZGF0ZSkuZGF0YSgnbWluJywgbGFzdFVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJChjaGlsZCkuZGF0YSgnbWF4JywgMSkuZGF0YSgnbWluJywgMCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHNldFZhbHVlcyA9IGZ1bmN0aW9uKG9iamVjdCwgdmFsdWUsIG1pblZhbHVlLCBtYXhWYWx1ZSkge1xuICAgICQoJy4nICsgb2JqZWN0ICsgJy1ub3cnKS50ZXh0KHZhbHVlKTtcbiAgICAkKCcuJyArIG9iamVjdCArICctbWluJykudGV4dChtaW5WYWx1ZSk7XG4gICAgcmV0dXJuICQoJy4nICsgb2JqZWN0ICsgJy1tYXgnKS50ZXh0KG1heFZhbHVlKTtcbiAgfTtcblxuICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKG9iamVjdCwgdmFsdWUpIHtcbiAgICByZXR1cm4gJCgnLicgKyBvYmplY3QpLnRleHQodmFsdWUpO1xuICB9O1xuXG4gIGZpbGwgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgdmFyIGssIHNjb3BlLCB2O1xuICAgIHNldFByb2dyZXNzKCdoZWFsdGgnLCBkYXRhLmhlYWx0aCwgMCwgZGF0YS5tYXhIZWFsdGgsIGRhdGEuaGVhbHRoVXBkYXRlLCBkYXRhLm5leHRIZWFsdGhVcGRhdGUpO1xuICAgIHNldFZhbHVlcygnaGVhbHRoJywgZGF0YS5oZWFsdGgsIDAsIGRhdGEubWF4SGVhbHRoKTtcbiAgICBzZXRQcm9ncmVzcygnZW5lcmd5JywgZGF0YS5lbmVyZ3ksIDAsIGRhdGEubWF4RW5lcmd5LCBkYXRhLmVuZXJneVVwZGF0ZSwgZGF0YS5uZXh0RW5lcmd5VXBkYXRlKTtcbiAgICBzZXRWYWx1ZXMoJ2VuZXJneScsIGRhdGEuZW5lcmd5LCAwLCBkYXRhLm1heEVuZXJneSk7XG4gICAgc2V0UHJvZ3Jlc3MoJ3dhbnRlZCcsIGRhdGEud2FudGVkLCAwLCA2LCBkYXRhLndhbnRlZFVwZGF0ZSwgZGF0YS5uZXh0V2FudGVkVXBkYXRlKTtcbiAgICBzZXRWYWx1ZXMoJ3dhbnRlZCcsIGRhdGEud2FudGVkLCAwLCA2KTtcbiAgICBzZXRQcm9ncmVzcygnZXhwZXJpZW5jZScsIGRhdGEuZXhwZXJpZW5jZSwgMCwgZGF0YS5tYXhFeHBlcmllbmNlLCBudWxsLCBudWxsKTtcbiAgICBzZXRWYWx1ZXMoJ2V4cGVyaWVuY2UnLCBkYXRhLmV4cGVyaWVuY2UsIDAsIGRhdGEubWF4RXhwZXJpZW5jZSk7XG4gICAgc2V0UHJvZ3Jlc3MoJ3BsYW50YXRvcicsIGRhdGEucGxhbnRhdG9yRXhwZXJpZW5jZSwgMCwgZGF0YS5wbGFudGF0b3JNYXhFeHBlcmllbmNlLCBudWxsLCBudWxsKTtcbiAgICBzZXRWYWx1ZXMoJ3BsYW50YXRvcicsIGRhdGEucGxhbnRhdG9yRXhwZXJpZW5jZSwgMCwgZGF0YS5wbGFudGF0b3JNYXhFeHBlcmllbmNlKTtcbiAgICBzZXRQcm9ncmVzcygnc211Z2dsZXInLCBkYXRhLnNtdWdnbGVyRXhwZXJpZW5jZSwgMCwgZGF0YS5zbXVnZ2xlck1heEV4cGVyaWVuY2UsIG51bGwsIG51bGwpO1xuICAgIHNldFZhbHVlcygnc211Z2dsZXInLCBkYXRhLnNtdWdnbGVyRXhwZXJpZW5jZSwgMCwgZGF0YS5zbXVnZ2xlck1heEV4cGVyaWVuY2UpO1xuICAgIHNldFByb2dyZXNzKCdkZWFsZXInLCBkYXRhLmRlYWxlckV4cGVyaWVuY2UsIDAsIGRhdGEuZGVhbGVyTWF4RXhwZXJpZW5jZSwgbnVsbCwgbnVsbCk7XG4gICAgc2V0VmFsdWVzKCdkZWFsZXInLCBkYXRhLmRlYWxlckV4cGVyaWVuY2UsIDAsIGRhdGEuZGVhbGVyTWF4RXhwZXJpZW5jZSk7XG4gICAgc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSkuc2NvcGUoKTtcbiAgICBpZiAoKHNjb3BlICE9IG51bGwpICYmIChzY29wZS5wbGF5ZXIgIT0gbnVsbCkpIHtcbiAgICAgIGZvciAoayBpbiBkYXRhKSB7XG4gICAgICAgIHYgPSBkYXRhW2tdO1xuICAgICAgICBzY29wZS5wbGF5ZXJba10gPSB2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNjb3BlLiRhcHBseSgpO1xuICAgIH1cbiAgfTtcblxuICBsb2FkZWQgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgZmlsbChkYXRhKTtcbiAgICBpZiAoZGF0YS5yZWxvYWQpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWZyZXNoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQuYWpheCh7XG4gICAgICAgIHVybDogdXJsICsgJy9ub3RpZmljYXRpb25zJyxcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgc3VjY2Vzczogbm90aWZ5XG4gICAgICB9KTtcbiAgICAgICQuYWpheCh7XG4gICAgICAgIHVybDogdXJsICsgJy9tZXNzYWdlcycsXG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHN1Y2Nlc3M6IG1lc3NhZ2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2V0VGltZW91dChsb2FkLCBkYXRhLm5leHRVcGRhdGUgKiAxMDAwKTtcbiAgfTtcblxuICBub3RpZnkgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgdmFyIGksIGxlbiwgbjtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBuID0gZGF0YVtpXTtcbiAgICAgIHdpbmRvdy5ub3RpZnkoe1xuICAgICAgICB0aXRsZTogJzxzdHJvbmc+JyArIG4udGl0bGUgKyAnPC9zdHJvbmc+JyxcbiAgICAgICAgbWVzc2FnZTogJycsXG4gICAgICAgIHVybDogJy9yZXBvcnRzLycgKyBuLmlkXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5hY3RpdmUpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubm90aWZ5U2hvdygpO1xuICAgIH1cbiAgfTtcblxuICBtZXNzYWdlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHZhciBpLCBsZW4sIG47XG4gICAgZm9yIChpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbiA9IGRhdGFbaV07XG4gICAgICB3aW5kb3cubm90aWZ5KHtcbiAgICAgICAgdGl0bGU6ICc8c3Ryb25nPicgKyBuLmF1dGhvciArICc8L3N0cm9uZz46ICcgKyBuLnRpdGxlICsgJzxici8+JyxcbiAgICAgICAgbWVzc2FnZTogbi5jb250ZW50LFxuICAgICAgICB1cmw6ICcvbWVzc2FnZXMvaW5ib3gvJyArIG4uaWRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAod2luZG93LmFjdGl2ZSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5ub3RpZnlTaG93KCk7XG4gICAgfVxuICB9O1xuXG4gIGxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBzdWNjZXNzOiBsb2FkZWRcbiAgICB9KTtcbiAgfTtcblxuICAkKHdpbmRvdykuZm9jdXMoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxvYWQoKTtcbiAgfSk7XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbG9hZCgpO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgc3F1YXJlO1xuXG4gIHNxdWFyZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkKCcuc3F1YXJlJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ3NxdWFyZScpID09PSAnd2lkdGgnKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMpLndpZHRoKCQodGhpcykuaGVpZ2h0KCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykuaGVpZ2h0KCQodGhpcykud2lkdGgoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgJChmdW5jdGlvbigpIHtcbiAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNxdWFyZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBzcXVhcmUoKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGNoYW5nZWQsIHJhbmRvbSwgcmFuZG9tSW4sIHJvbGw7XG5cbiAgY2hhbmdlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyZW50LCBkaWZmLCBsZWZ0LCBvbGQsIHJlZiwgcmVmMSwgcmVmMiwgdmFsO1xuICAgIGN1cnJlbnQgPSBwYXJzZUludCgocmVmID0gJCgnI2N1cnJlbnRTdGF0aXN0aWNzUG9pbnRzJykudGV4dCgpKSAhPSBudWxsID8gcmVmIDogMCk7XG4gICAgbGVmdCA9IHBhcnNlSW50KCQoJyNzdGF0aXN0aWNzUG9pbnRzJykudGV4dCgpKTtcbiAgICBvbGQgPSBwYXJzZUludCgocmVmMSA9ICQodGhpcykuZGF0YSgnb2xkJykpICE9IG51bGwgPyByZWYxIDogMCk7XG4gICAgdmFsID0gcGFyc2VJbnQoKHJlZjIgPSAkKHRoaXMpLnZhbCgpKSAhPSBudWxsID8gcmVmMiA6IDApO1xuICAgIGRpZmYgPSB2YWwgLSBvbGQ7XG4gICAgaWYgKGRpZmYgPiBsZWZ0KSB7XG4gICAgICBkaWZmID0gbGVmdDtcbiAgICB9XG4gICAgdmFsID0gb2xkICsgZGlmZjtcbiAgICBsZWZ0IC09IGRpZmY7XG4gICAgaWYgKCFpc05hTihkaWZmKSkge1xuICAgICAgJCh0aGlzKS52YWwodmFsKS5kYXRhKCdvbGQnLCB2YWwpO1xuICAgICAgJCgnI3N0YXRpc3RpY3NQb2ludHMnKS50ZXh0KGxlZnQpO1xuICAgICAgcmV0dXJuICQoJy5zdGF0aXN0aWMnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVmMztcbiAgICAgICAgdmFsID0gcGFyc2VJbnQoKHJlZjMgPSAkKHRoaXMpLnZhbCgpKSAhPSBudWxsID8gcmVmMyA6IDApO1xuICAgICAgICByZXR1cm4gJCh0aGlzKS5hdHRyKCdtYXgnLCBsZWZ0ICsgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7XG4gIH07XG5cbiAgcmFuZG9tSW4gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciBpbmRleDtcbiAgICBpbmRleCA9IHJhbmRvbSgwLCBhcnJheS5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gYXJyYXlbaW5kZXhdO1xuICB9O1xuXG4gIHJvbGwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaiwgcG9pbnRzLCByZWYsIHJvbGxhYmxlLCBzdGF0aXN0aWMsIHZhbDtcbiAgICByb2xsYWJsZSA9ICQoJy5zdGF0aXN0aWMucm9sbGFibGUnKTtcbiAgICAkKHJvbGxhYmxlKS52YWwoMCkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgcG9pbnRzID0gcGFyc2VJbnQoJCgnI3N0YXRpc3RpY3NQb2ludHMnKS50ZXh0KCkpO1xuICAgIGZvciAoaSA9IGogPSAxLCByZWYgPSBwb2ludHM7IDEgPD0gcmVmID8gaiA8PSByZWYgOiBqID49IHJlZjsgaSA9IDEgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICBzdGF0aXN0aWMgPSByYW5kb21Jbihyb2xsYWJsZSk7XG4gICAgICB2YWwgPSBwYXJzZUludCgkKHN0YXRpc3RpYykudmFsKCkpO1xuICAgICAgJChzdGF0aXN0aWMpLnZhbCh2YWwgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuICQocm9sbGFibGUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgJCgnLnN0YXRpc3RpYycpLmJpbmQoJ2tleXVwIGlucHV0IGNoYW5nZScsIGNoYW5nZWQpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICQoJy5zdGF0Um9sbGVyJykuY2xpY2socm9sbCk7XG4gICAgcmV0dXJuIHJvbGwoKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIHJlZnJlc2gsIHJlZnJlc2hpbmcsIHVwZGF0ZSwgdXBkYXRlTmF2O1xuXG4gIHJlZnJlc2hpbmcgPSBmYWxzZTtcblxuICByZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFyZWZyZXNoaW5nKSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24ucmVmcmVzaCgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVmcmVzaGluZyA9IHRydWU7XG4gIH07XG5cbiAgdXBkYXRlID0gZnVuY3Rpb24odGltZXIpIHtcbiAgICB2YXIgYmFyLCBjYSwgY2IsIGxhYmVsLCBtYXgsIG1pbiwgbm93LCBwZXJjZW50LCByZWYsIHJlZjEsIHJlbG9hZCwgcmV2ZXJzZWQsIHN0b3AsIHRpbWU7XG4gICAgYmFyID0gJCh0aW1lcikuY2hpbGRyZW4oJy5wcm9ncmVzcy1iYXInKS5sYXN0KCk7XG4gICAgbGFiZWwgPSAkKHRpbWVyKS5jaGlsZHJlbignLnByb2dyZXNzLWxhYmVsJyk7XG4gICAgdGltZSA9IE1hdGgucm91bmQoKG5ldyBEYXRlKS5nZXRUaW1lKCkgLyAxMDAwLjApO1xuICAgIG1pbiA9ICQoYmFyKS5kYXRhKCdtaW4nKTtcbiAgICBtYXggPSAkKGJhcikuZGF0YSgnbWF4Jyk7XG4gICAgc3RvcCA9ICQoYmFyKS5kYXRhKCdzdG9wJyk7XG4gICAgY2EgPSAkKGJhcikuZGF0YSgnY2EnKTtcbiAgICBjYiA9ICQoYmFyKS5kYXRhKCdjYicpO1xuICAgIHJldmVyc2VkID0gQm9vbGVhbigocmVmID0gJChiYXIpLmRhdGEoJ3JldmVyc2VkJykpICE9IG51bGwgPyByZWYgOiBmYWxzZSk7XG4gICAgcmVsb2FkID0gQm9vbGVhbigocmVmMSA9ICQoYmFyKS5kYXRhKCdyZWxvYWQnKSkgIT0gbnVsbCA/IHJlZjEgOiB0cnVlKTtcbiAgICBpZiAoc3RvcCAhPSBudWxsKSB7XG4gICAgICB0aW1lID0gTWF0aC5taW4odGltZSwgc3RvcCk7XG4gICAgfVxuICAgIG5vdyA9IE1hdGguY2xhbXAodGltZSwgbWluLCBtYXgpO1xuICAgIHBlcmNlbnQgPSAobm93IC0gbWluKSAvIChtYXggLSBtaW4pO1xuICAgIGlmIChyZXZlcnNlZCkge1xuICAgICAgcGVyY2VudCA9IDEgLSBwZXJjZW50O1xuICAgIH1cbiAgICAkKGJhcikuY3NzKCd3aWR0aCcsIChwZXJjZW50ICogMTAwKSArICclJyk7XG4gICAgaWYgKChjYSAhPSBudWxsKSAmJiAoY2IgIT0gbnVsbCkpIHtcbiAgICAgICQoYmFyKS5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBNYXRoLmxlcnBDb2xvcnMocGVyY2VudCwgY2EsIGNiKSk7XG4gICAgfVxuICAgICQobGFiZWwpLnRleHQodHlwZW9mIHdpbmRvdy50aW1lRm9ybWF0ID09PSBcImZ1bmN0aW9uXCIgPyB3aW5kb3cudGltZUZvcm1hdChtYXggLSBub3cpIDogdm9pZCAwKTtcbiAgICBpZiAodGltZSA+IG1heCAmJiByZWxvYWQpIHtcbiAgICAgIHJlZnJlc2goKTtcbiAgICB9XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdXBkYXRlKHRpbWVyKTtcbiAgICB9LCAxMDAwKTtcbiAgfTtcblxuICB1cGRhdGVOYXYgPSBmdW5jdGlvbih0aW1lcikge1xuICAgIHZhciBtYXgsIG1pbiwgbm93LCBwZXJjZW50LCB0aW1lO1xuICAgIHRpbWUgPSBNYXRoLnJvdW5kKChuZXcgRGF0ZSkuZ2V0VGltZSgpIC8gMTAwMC4wKTtcbiAgICBtaW4gPSAkKHRpbWVyKS5kYXRhKCdtaW4nKTtcbiAgICBtYXggPSAkKHRpbWVyKS5kYXRhKCdtYXgnKTtcbiAgICBub3cgPSBNYXRoLmNsYW1wKHRpbWUsIG1pbiwgbWF4KTtcbiAgICBwZXJjZW50ID0gMSAtIChub3cgLSBtaW4pIC8gKG1heCAtIG1pbik7XG4gICAgJCh0aW1lcikuY3NzKCd3aWR0aCcsIChwZXJjZW50ICogMTAwKSArICclJyk7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdXBkYXRlTmF2KHRpbWVyKTtcbiAgICB9LCAxMDAwKTtcbiAgfTtcblxuICAkKGZ1bmN0aW9uKCkge1xuICAgICQoJy5wcm9ncmVzcy10aW1lJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB1cGRhdGUodGhpcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuICQoJy5uYXYtdGltZXIgPiAubmF2LXRpbWVyLWJhcicpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdXBkYXRlTmF2KHRoaXMpO1xuICAgIH0pO1xuICB9KTtcblxufSkuY2FsbCh0aGlzKTtcblxuKGZ1bmN0aW9uKCkge1xuICAkKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkKCdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zLCB0cmlnZ2VyO1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgcGxhY2VtZW50OiAnYXV0byBsZWZ0J1xuICAgICAgfTtcbiAgICAgIHRyaWdnZXIgPSAkKHRoaXMpLmRhdGEoJ3RyaWdnZXInKTtcbiAgICAgIGlmICh0cmlnZ2VyICE9IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucy50cmlnZ2VyID0gdHJpZ2dlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkKHRoaXMpLnRvb2x0aXAob3B0aW9ucyk7XG4gICAgfSk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICQoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNsaWNrZWQsIGxvYWQsIHJlY2VpdmUsIHNob3csIHR1dG9yaWFscztcbiAgICB0dXRvcmlhbHMgPSB7fTtcbiAgICAkKCcudHV0b3JpYWwtc3RlcCcpLnBvcG92ZXIoe1xuICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nXG4gICAgfSk7XG4gICAgc2hvdyA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIGlmIChzdGVwICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICQoc3RlcC5lbGVtZW50cykuYmluZCgnY2xpY2snLCBjbGlja2VkKS5hZGRDbGFzcygndHV0b3JpYWwtYWN0aXZlJykuZmlyc3QoKS5wb3BvdmVyKCdzaG93Jyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjbGlja2VkID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBuZXh0O1xuICAgICAgbmV4dCA9IHR1dG9yaWFsc1t0aGlzLnN0ZXAubmFtZV0uc2hpZnQoKTtcbiAgICAgIGlmIChuZXh0ICE9IG51bGwpIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICB1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXG4gICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLnN0ZXAubmFtZSxcbiAgICAgICAgICAgIHN0YWdlOiBuZXh0LmluZGV4XG4gICAgICAgICAgfSxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc2hvdyhuZXh0KTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgdXJsOiAnL2FwaS9jaGFyYWN0ZXIvdHV0b3JpYWwnLFxuICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5zdGVwLm5hbWUsXG4gICAgICAgICAgICBzdGFnZTogdGhpcy5zdGVwLmluZGV4ICsgMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJCh0aGlzLnN0ZXAuZWxlbWVudHMpLnVuYmluZCgnY2xpY2snLCBjbGlja2VkKS5yZW1vdmVDbGFzcygndHV0b3JpYWwtYWN0aXZlJykucG9wb3ZlcignaGlkZScpO1xuICAgIH07XG4gICAgcmVjZWl2ZSA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZSwgZGF0YSkge1xuICAgICAgdmFyIGJvZHksIGJ0bjEsIGJ0bjIsIGNvbnRlbnQsIGRpYWxvZywgZm9vdGVyLCBncm91cCwgaGVhZGVyLCBtb2RhbCwgdGl0bGU7XG4gICAgICBpZiAoZGF0YS5zdGFnZSA8IDApIHtcbiAgICAgICAgbW9kYWwgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdtb2RhbCBmYWRlJyk7XG4gICAgICAgIGRpYWxvZyA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWRpYWxvZycpO1xuICAgICAgICBjb250ZW50ID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnbW9kYWwtY29udGVudCcpO1xuICAgICAgICBoZWFkZXIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdtb2RhbC1oZWFkZXInKTtcbiAgICAgICAgYm9keSA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWJvZHknKTtcbiAgICAgICAgZm9vdGVyID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnbW9kYWwtZm9vdGVyJyk7XG4gICAgICAgIHRpdGxlID0gJCgnPGg0PjwvaDQ+JykuYWRkQ2xhc3MoJ21vZGFsLXRpdGxlJyk7XG4gICAgICAgIGdyb3VwID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnYnRuLWdyb3VwJyk7XG4gICAgICAgIGJ0bjEgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdidG4gYnRuLXN1Y2Nlc3MnKS5hdHRyKCd2YWx1ZScsICd5ZXMnKS50ZXh0KGkxOG4ueWVzKTtcbiAgICAgICAgYnRuMiA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ2J0biBidG4tZGFuZ2VyJykuYXR0cigndmFsdWUnLCAnbm8nKS50ZXh0KGkxOG4ubm8pO1xuICAgICAgICAkKGJ0bjEpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBhY3RpdmU6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICQobW9kYWwpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgcmV0dXJuIGxvYWQob2JqZWN0LCBuYW1lLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgICQoYnRuMikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogJy9hcGkvY2hhcmFjdGVyL3R1dG9yaWFsJyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGFjdGl2ZTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuICQobW9kYWwpLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKHRpdGxlKS50ZXh0KGRhdGEudGl0bGUpO1xuICAgICAgICAkKGJvZHkpLnRleHQoZGF0YS5kZXNjcmlwdGlvbik7XG4gICAgICAgICQoaGVhZGVyKS5hcHBlbmQodGl0bGUpO1xuICAgICAgICAkKGdyb3VwKS5hcHBlbmQoYnRuMikuYXBwZW5kKGJ0bjEpO1xuICAgICAgICAkKGZvb3RlcikuYXBwZW5kKGdyb3VwKTtcbiAgICAgICAgJChjb250ZW50KS5hcHBlbmQoaGVhZGVyKS5hcHBlbmQoYm9keSkuYXBwZW5kKGZvb3Rlcik7XG4gICAgICAgICQoZGlhbG9nKS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgICQobW9kYWwpLmFwcGVuZChkaWFsb2cpO1xuICAgICAgICAkKCdib2R5JykuYXBwZW5kKG1vZGFsKTtcbiAgICAgICAgcmV0dXJuICQobW9kYWwpLm1vZGFsKHtcbiAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICBrZXlib2FyZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9hZChvYmplY3QsIG5hbWUsIGRhdGEpO1xuICAgICAgfVxuICAgIH07XG4gICAgbG9hZCA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZSwgZGF0YSkge1xuICAgICAgdmFyIGRlcHRoLCB0dXRvcmlhbDtcbiAgICAgIHR1dG9yaWFsID0gW107XG4gICAgICBkZXB0aCA9ICQob2JqZWN0KS5wYXJlbnRzKCdbZGF0YS10dXRvcmlhbD10cnVlXScpLmxlbmd0aCArIDE7XG4gICAgICAkKG9iamVjdCkuZmluZCgnLnR1dG9yaWFsLXN0ZXAnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5kZXgsIHN0ZXA7XG4gICAgICAgIHN0ZXAgPSBudWxsO1xuICAgICAgICBpbmRleCA9ICQodGhpcykuZGF0YSgndHV0b3JpYWwtaW5kZXgnKTtcbiAgICAgICAgaWYgKGluZGV4IDwgZGF0YS5zdGFnZSB8fCAkKHRoaXMpLnBhcmVudHMoJ1tkYXRhLXR1dG9yaWFsPXRydWVdJykubGVuZ3RoICE9PSBkZXB0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHV0b3JpYWxbaW5kZXhdICE9IG51bGwpIHtcbiAgICAgICAgICBzdGVwID0gdHV0b3JpYWxbaW5kZXhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ZXAgPSB7XG4gICAgICAgICAgICBlbGVtZW50czogW10sXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0dXRvcmlhbFtpbmRleF0gPSBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAuZWxlbWVudHMucHVzaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcCA9IHN0ZXA7XG4gICAgICB9KTtcbiAgICAgIHR1dG9yaWFsID0gdHV0b3JpYWwuZmlsdGVyKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0dXRvcmlhbHNbbmFtZV0gPSB0dXRvcmlhbDtcbiAgICAgIHJldHVybiBzaG93KHR1dG9yaWFsLnNoaWZ0KCkpO1xuICAgIH07XG4gICAgcmV0dXJuICQoJ1tkYXRhLXR1dG9yaWFsPXRydWUnKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5hbWU7XG4gICAgICBuYW1lID0gJCh0aGlzKS5kYXRhKCd0dXRvcmlhbC1uYW1lJyk7XG4gICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgdXJsOiAnL2FwaS9jaGFyYWN0ZXIvdHV0b3JpYWwnLFxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9LFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuYWN0aXZlKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZWNlaXZlKF90aGlzLCBuYW1lLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBiYXNlLCBiYXNlMSwgYmFzZTIsIGNsb25lLCBub3RpZmljYXRpb25zLCByZWZyZXNoaW5nLCByZWxNb3VzZUNvb3Jkcywgc2hvd05vdGlmeSwgdGltZUZvcm1hdCwgdGltZVNlcGFyYXRlLCB1cGRhdGVQcm9ncmVzcztcblxuICB3aW5kb3cuZm9ybWF0IHx8ICh3aW5kb3cuZm9ybWF0ID0ge1xuICAgIHRpbWU6IHtcbiAgICAgIGRheTogJ2QnLFxuICAgICAgaG91cjogJ2gnLFxuICAgICAgbWludXRlOiAnbScsXG4gICAgICBzZWNvbmQ6ICdzJ1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHdpbmRvdy5hY3RpdmUgPT0gbnVsbCkge1xuICAgIHdpbmRvdy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxuXG4gICQod2luZG93KS5mb2N1cyhmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gd2luZG93LmFjdGl2ZSA9IHRydWU7XG4gIH0pO1xuXG4gICQod2luZG93KS5ibHVyKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB3aW5kb3cuYWN0aXZlID0gZmFsc2U7XG4gIH0pO1xuXG4gICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMucmVzaXplVG8pIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRvKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVzaXplVG8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICQodGhpcykudHJpZ2dlcigncmVzaXplZCcpO1xuICAgIH0sIDUwMCk7XG4gIH0pO1xuXG4gIHdpbmRvdy5scGFkIHx8ICh3aW5kb3cubHBhZCA9IGZ1bmN0aW9uKHZhbHVlLCBwYWRkaW5nKSB7XG4gICAgdmFyIGksIGosIHJlZiwgemVyb2VzO1xuICAgIHplcm9lcyA9IFwiMFwiO1xuICAgIGZvciAoaSA9IGogPSAxLCByZWYgPSBwYWRkaW5nOyAxIDw9IHJlZiA/IGogPD0gcmVmIDogaiA+PSByZWY7IGkgPSAxIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgemVyb2VzICs9IFwiMFwiO1xuICAgIH1cbiAgICByZXR1cm4gKHplcm9lcyArIHZhbHVlKS5zbGljZShwYWRkaW5nICogLTEpO1xuICB9KTtcblxuICB0aW1lU2VwYXJhdGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdmFsdWUgKyAnICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgdGltZUZvcm1hdCA9IGZ1bmN0aW9uKHRleHQsIHZhbHVlLCBmb3JtYXQpIHtcbiAgICB0ZXh0ID0gdGltZVNlcGFyYXRlKHRleHQpO1xuICAgIGlmICh0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRleHQgKz0gd2luZG93LmxwYWQodmFsdWUsIDIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ICs9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dCArIGZvcm1hdDtcbiAgfTtcblxuICB3aW5kb3cudGltZUZvcm1hdCB8fCAod2luZG93LnRpbWVGb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBkLCBkYXRlLCBoLCBtLCBzLCB0ZXh0O1xuICAgIHRleHQgPSAnJztcbiAgICBkYXRlID0gbmV3IERhdGUodmFsdWUgKiAxMDAwKTtcbiAgICBkID0gZGF0ZS5nZXRVVENEYXRlKCkgLSAxO1xuICAgIGggPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgbSA9IGRhdGUuZ2V0VVRDTWludXRlcygpO1xuICAgIHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgICBpZiAoZCA+IDApIHtcbiAgICAgIHRleHQgKz0gZCArIGZvcm1hdC50aW1lLmRheTtcbiAgICB9XG4gICAgaWYgKGggPiAwKSB7XG4gICAgICB0ZXh0ID0gdGltZUZvcm1hdCh0ZXh0LCBoLCBmb3JtYXQudGltZS5ob3VyKTtcbiAgICB9XG4gICAgaWYgKGggPiAwIHx8IG0gPiAwKSB7XG4gICAgICB0ZXh0ID0gdGltZUZvcm1hdCh0ZXh0LCBtLCBmb3JtYXQudGltZS5taW51dGUpO1xuICAgIH1cbiAgICBpZiAoaCA+IDAgfHwgbSA+IDAgfHwgcyA+IDApIHtcbiAgICAgIHRleHQgPSB0aW1lRm9ybWF0KHRleHQsIHMsIGZvcm1hdC50aW1lLnNlY29uZCk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9KTtcblxuICB3aW5kb3cudGltZUZvcm1hdFNob3J0IHx8ICh3aW5kb3cudGltZUZvcm1hdFNob3J0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgZCwgZGF0ZSwgaCwgbSwgcywgdGV4dDtcbiAgICB0ZXh0ID0gJyc7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlICogMTAwMCk7XG4gICAgZCA9IGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbiAgICBoID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIG0gPSBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbiAgICBzID0gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gICAgaWYgKGQgPiAwKSB7XG4gICAgICByZXR1cm4gZCArIGZvcm1hdC50aW1lLmRheTtcbiAgICB9XG4gICAgaWYgKGggPiAwKSB7XG4gICAgICByZXR1cm4gdGltZUZvcm1hdCh0ZXh0LCBoLCBmb3JtYXQudGltZS5ob3VyKTtcbiAgICB9XG4gICAgaWYgKG0gPiAwKSB7XG4gICAgICByZXR1cm4gdGltZUZvcm1hdCh0ZXh0LCBtLCBmb3JtYXQudGltZS5taW51dGUpO1xuICAgIH1cbiAgICBpZiAocyA+IDApIHtcbiAgICAgIHJldHVybiB0aW1lRm9ybWF0KHRleHQsIHMsIGZvcm1hdC50aW1lLnNlY29uZCk7XG4gICAgfVxuICB9KTtcblxuICByZWZyZXNoaW5nID0gZmFsc2U7XG5cbiAgKGJhc2UgPSB3aW5kb3cubG9jYXRpb24pLnJlZnJlc2ggfHwgKGJhc2UucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghcmVmcmVzaGluZykge1xuICAgICAgcmVmcmVzaGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcbiAgICB9XG4gIH0pO1xuXG4gIG5vdGlmaWNhdGlvbnMgPSBbXTtcblxuICB3aW5kb3cubm90aWZ5IHx8ICh3aW5kb3cubm90aWZ5ID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgICByZXR1cm4gbm90aWZpY2F0aW9ucy5wdXNoKHByb3BzKTtcbiAgfSk7XG5cbiAgY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5LCB0ZW1wO1xuICAgIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgdGVtcCA9IG5ldyBvYmouY29uc3RydWN0b3IoKTtcbiAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgIHRlbXBba2V5XSA9IGNsb25lKG9ialtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXA7XG4gIH07XG5cbiAgc2hvd05vdGlmeSA9IGZ1bmN0aW9uKG4sIGkpIHtcbiAgICBjb25zb2xlLmxvZygnUCcsIG4sIGkpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdTJywgbiwgaSk7XG4gICAgICByZXR1cm4gJC5ub3RpZnkobiwge1xuICAgICAgICBwbGFjZW1lbnQ6IHtcbiAgICAgICAgICBmcm9tOiAnYm90dG9tJ1xuICAgICAgICB9LFxuICAgICAgICBtb3VzZV9vdmVyOiAncGF1c2UnXG4gICAgICB9KTtcbiAgICB9KSwgaSAqIDEwMDApO1xuICB9O1xuXG4gIHdpbmRvdy5ub3RpZnlTaG93IHx8ICh3aW5kb3cubm90aWZ5U2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmRleCwgaiwgbGVuLCBub3RpZmljYXRpb247XG4gICAgaWYgKHdpbmRvdy5hY3RpdmUpIHtcbiAgICAgIGZvciAoaW5kZXggPSBqID0gMCwgbGVuID0gbm90aWZpY2F0aW9ucy5sZW5ndGg7IGogPCBsZW47IGluZGV4ID0gKytqKSB7XG4gICAgICAgIG5vdGlmaWNhdGlvbiA9IG5vdGlmaWNhdGlvbnNbaW5kZXhdO1xuICAgICAgICBzaG93Tm90aWZ5KCQuZXh0ZW5kKHt9LCBub3RpZmljYXRpb24pLCBpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbm90aWZpY2F0aW9ucyA9IFtdO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh3aW5kb3cpLmZvY3VzKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB3aW5kb3cubm90aWZ5U2hvdygpO1xuICB9KTtcblxuICBNYXRoLmNsYW1wIHx8IChNYXRoLmNsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHZhbHVlLCBtYXgpLCBtaW4pO1xuICB9KTtcblxuICBNYXRoLmxlcnAgfHwgKE1hdGgubGVycCA9IGZ1bmN0aW9uKGksIGEsIGIpIHtcbiAgICByZXR1cm4gKGEgKiBpKSArIChiICogKDEgLSBpKSk7XG4gIH0pO1xuXG4gIE1hdGguaGV4VG9SZ2IgfHwgKE1hdGguaGV4VG9SZ2IgPSBmdW5jdGlvbihoZXgpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHI6IHBhcnNlSW50KHJlc3VsdFsxXSwgMTYpLFxuICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcbiAgICAgICAgYjogcGFyc2VJbnQocmVzdWx0WzNdLCAxNilcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KTtcblxuICBNYXRoLnJnYlRvSGV4IHx8IChNYXRoLnJnYlRvSGV4ID0gZnVuY3Rpb24ociwgZywgYikge1xuICAgIHJldHVybiBcIiNcIiArICgoMSA8PCAyNCkgKyAociA8PCAxNikgKyAoZyA8PCA4KSArIGIpLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcbiAgfSk7XG5cbiAgTWF0aC5sZXJwQ29sb3JzIHx8IChNYXRoLmxlcnBDb2xvcnMgPSBmdW5jdGlvbihpLCBhLCBiKSB7XG4gICAgdmFyIGNhLCBjYiwgY2M7XG4gICAgY2EgPSBNYXRoLmhleFRvUmdiKGEpO1xuICAgIGNiID0gTWF0aC5oZXhUb1JnYihiKTtcbiAgICBjYyA9IHtcbiAgICAgIHI6IE1hdGgucm91bmQoTWF0aC5sZXJwKGksIGNhLnIsIGNiLnIpKSxcbiAgICAgIGc6IE1hdGgucm91bmQoTWF0aC5sZXJwKGksIGNhLmcsIGNiLmcpKSxcbiAgICAgIGI6IE1hdGgucm91bmQoTWF0aC5sZXJwKGksIGNhLmIsIGNiLmIpKVxuICAgIH07XG4gICAgcmV0dXJuIE1hdGgucmdiVG9IZXgoY2MuciwgY2MuZywgY2MuYik7XG4gIH0pO1xuXG4gIHVwZGF0ZVByb2dyZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJhciwgY2EsIGNiLCBsYWJlbCwgbWF4LCBtaW4sIG5vdywgcGVyY2VudCwgcmVmLCByZXZlcnNlZDtcbiAgICBiYXIgPSAkKHRoaXMpLmNoaWxkcmVuKCcucHJvZ3Jlc3MtYmFyJyk7XG4gICAgbGFiZWwgPSAkKHRoaXMpLmNoaWxkcmVuKCcucHJvZ3Jlc3MtbGFiZWwnKTtcbiAgICBtaW4gPSAkKGJhcikuZGF0YSgnbWluJyk7XG4gICAgbWF4ID0gJChiYXIpLmRhdGEoJ21heCcpO1xuICAgIGNhID0gJChiYXIpLmRhdGEoJ2NhJyk7XG4gICAgY2IgPSAkKGJhcikuZGF0YSgnY2InKTtcbiAgICBub3cgPSBNYXRoLmNsYW1wKCQoYmFyKS5kYXRhKCdub3cnKSwgbWluLCBtYXgpO1xuICAgIHJldmVyc2VkID0gQm9vbGVhbigocmVmID0gJChiYXIpLmRhdGEoJ3JldmVyc2VkJykpICE9IG51bGwgPyByZWYgOiBmYWxzZSk7XG4gICAgcGVyY2VudCA9IChub3cgLSBtaW4pIC8gKG1heCAtIG1pbikgKiAxMDA7XG4gICAgaWYgKHJldmVyc2VkKSB7XG4gICAgICBwZXJjZW50ID0gMTAwIC0gcGVyY2VudDtcbiAgICB9XG4gICAgJChiYXIpLmNzcygnd2lkdGgnLCBwZXJjZW50ICsgJyUnKTtcbiAgICBpZiAoKGNhICE9IG51bGwpICYmIChjYiAhPSBudWxsKSkge1xuICAgICAgJChiYXIpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIE1hdGgubGVycENvbG9ycyhwZXJjZW50IC8gMTAwLCBjYSwgY2IpKTtcbiAgICB9XG4gICAgcmV0dXJuICQobGFiZWwpLnRleHQobm93ICsgJyAvICcgKyBtYXgpO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQoJy5wcm9ncmVzcycpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGUgfHwgKHRoaXMudXBkYXRlID0gdXBkYXRlUHJvZ3Jlc3MpO1xuICAgIH0pO1xuICB9KTtcblxuICByZWxNb3VzZUNvb3JkcyA9IGZ1bmN0aW9uIChldmVudCl7XG4gICAgdmFyIHRvdGFsT2Zmc2V0WCA9IDA7XG4gICAgdmFyIHRvdGFsT2Zmc2V0WSA9IDA7XG4gICAgdmFyIGNhbnZhc1ggPSAwO1xuICAgIHZhciBjYW52YXNZID0gMDtcbiAgICB2YXIgY3VycmVudEVsZW1lbnQgPSB0aGlzO1xuXG4gICAgZG97XG4gICAgICAgIHRvdGFsT2Zmc2V0WCArPSBjdXJyZW50RWxlbWVudC5vZmZzZXRMZWZ0IC0gY3VycmVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgdG90YWxPZmZzZXRZICs9IGN1cnJlbnRFbGVtZW50Lm9mZnNldFRvcCAtIGN1cnJlbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICB9XG4gICAgd2hpbGUoY3VycmVudEVsZW1lbnQgPSBjdXJyZW50RWxlbWVudC5vZmZzZXRQYXJlbnQpXG5cbiAgICBjYW52YXNYID0gZXZlbnQucGFnZVggLSB0b3RhbE9mZnNldFg7XG4gICAgY2FudmFzWSA9IGV2ZW50LnBhZ2VZIC0gdG90YWxPZmZzZXRZO1xuXG4gICAgcmV0dXJuIHt4OmNhbnZhc1gsIHk6Y2FudmFzWX1cbn07XG5cbiAgSFRNTENhbnZhc0VsZW1lbnQucHJvdG90eXBlLnJlbE1vdXNlQ29vcmRzID0gcmVsTW91c2VDb29yZHM7XG5cbiAgKGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbGRTaG93O1xuICAgIHJldHVybiBvbGRTaG93ID0gJC5mbi5zaG93O1xuXG4gICAgLypcbiAgICBcbiAgICBcbiAgICBcdCQuZm4uc2hvdyA9IChzcGVlZCwgb2xkQ2FsbGJhY2spIC0+XG4gICAgXG4gICAgXHRcdGNvbnNvbGUubG9nKCdzaG93JywgdGhpcylcbiAgICBcbiAgICBcdFx0bmV3Q2FsbGJhY2sgPSAtPlxuICAgIFxuICAgIFx0XHRcdG9sZENhbGxiYWNrLmFwcGx5KHRoaXMpIGlmICQuaXNGdW5jdGlvbihvbGRDYWxsYmFjaylcbiAgICBcdFx0XHQkKHRoaXMpLnRyaWdnZXIoJ2FmdGVyU2hvdycpXG4gICAgXG4gICAgXHRcdCQodGhpcykudHJpZ2dlcignYmVmb3JlU2hvdycpXG4gICAgXG4gICAgXHRcdGRlZXAgPSAkKHRoaXMpLmZpbmQoJ1tkYXRhLWRlZXBzaG93XScpXG4gICAgXG4gICAgXHRcdGlmIGRlZXAubGVuZ3RoXG4gICAgXHRcdFx0ZGVlcC5zaG93KClcbiAgICBcbiAgICBcdFx0b2xkU2hvdy5hcHBseSh0aGlzLCBbc3BlZWQsIG5ld0NhbGxiYWNrXSlcbiAgICAgKi9cbiAgfSkoKTtcblxuICAoYmFzZTEgPSBTdHJpbmcucHJvdG90eXBlKS5lc2NhcGUgfHwgKGJhc2UxLmVzY2FwZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlcGxhY2UoLyhbLiorP149IToke30oKXxcXFtcXF1cXC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gIH0pO1xuXG4gIChiYXNlMiA9IFN0cmluZy5wcm90b3R5cGUpLnJlcGxhY2VBbGwgfHwgKGJhc2UyLnJlcGxhY2VBbGwgPSBmdW5jdGlvbihzZWFyY2gsIHJlcGxhY2UpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKG5ldyBSZWdFeHAoc2VhcmNoLmVzY2FwZSgpLCAnZ2knKSwgcmVwbGFjZSk7XG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Gd2NDNWpiMlptWldVaUxDSmhkbUYwWVhJdVkyOW1abVZsSWl3aVltRjBkR3hsTG1OdlptWmxaU0lzSW1Ob1lYUXVZMjltWm1WbElpd2lZMnh2WTJzdVkyOW1abVZsSWl3aVpHbGhiRzluTG1OdlptWmxaU0lzSW1WdGIzUnBZMjl1TG1OdlptWmxaU0lzSW1WeGRXRnNhWHBsY2k1amIyWm1aV1VpTENKbWIzSnRMbU52Wm1abFpTSXNJbWhsYkhCbGNpNWpiMlptWldVaUxDSnBaV1pwZUM1amIyWm1aV1VpTENKcGJXRm5aVkJ5WlhacFpYY3VZMjltWm1WbElpd2liR0Z1WjNWaFoyVXVZMjltWm1WbElpd2libUYyWm1sNExtTnZabVpsWlNJc0luQnNZVzUwWVhScGIyNHVZMjltWm1WbElpd2ljR3hoZVdWeUxtTnZabVpsWlNJc0luTnhkV0Z5WlM1amIyWm1aV1VpTENKemRHRjBhWE4wYVdOekxtTnZabVpsWlNJc0luUnBiV1Z5TG1OdlptWmxaU0lzSW5SdmIyeDBhWEF1WTI5bVptVmxJaXdpZEhWMGIzSnBZV3d1WTI5bVptVmxJaXdpZFhScGJITXVZMjltWm1WbElsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVMUJPMFZCUVVFc1NVRkJReXhEUVVGQkxFZEJRVVFzUjBGQlR5eFBRVUZQTEVOQlFVTXNUVUZCVWl4RFFVRmxMRTFCUVdZc1JVRkJkVUlzUlVGQmRrSTdPMFZCU1ZBc1NVRkJReXhEUVVGQkxFZEJRVWNzUTBGQlF5eFZRVUZNTEVOQlFXZENMR2RDUVVGb1FpeEZRVUZyUXp0SlFVRkRMRkZCUVVRc1JVRkJWeXhUUVVGRExFMUJRVVE3WVVGSE5VTXNUVUZCVFN4RFFVRkRMRXRCUVZBc1IwRkJaU3hUUVVGRExFdEJRVVFzUlVGQlVTeFRRVUZTTzBGQlJXUXNXVUZCUVR0UlFVRkJMRU5CUVVFc2RVSkJRVWtzV1VGQldUdFJRVU5vUWl4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExFZEJRVXdzUTBGQlV5eEZRVUZVTEVWQlFXRXNRMEZCWWp0bFFVVktMRWxCUVVrc1EwRkJReXhMUVVGTUxFTkJRVmNzUzBGQlFTeEhRVUZSTEVOQlFXNUNMRU5CUVVFc1IwRkJkMEk3VFVGTVZqdEpRVWcyUWl4RFFVRllPMGRCUVd4RE96dEZRV05CTEVsQlFVTXNRMEZCUVN4SFFVRkhMRU5CUVVNc1ZVRkJUQ3hEUVVGblFpeHJRa0ZCYUVJc1JVRkJiME03U1VGQlF5eFJRVUZFTEVWQlFWY3NVMEZCUXl4TlFVRkVPMEZCVFRsRExGVkJRVUU3VFVGQlFTeEhRVUZCTEVkQlFVMHNVVUZCVVN4RFFVRkRPMDFCUTJZc1RVRkJRU3hIUVVGVExFTkJRVUVzVTBGQlFTeExRVUZCTzJWQlFVRXNVMEZCUVR0QlFVVlNMR05CUVVFN1ZVRkJRU3hKUVVGSExFdEJRVU1zUTBGQlFTeE5RVUZLTzFsQlJVTXNSMEZCUVN4SFFVRk5MRWxCUVVrc1EwRkJReXhMUVVGTUxFTkJRVmNzUTBGQlN5eEpRVUZCTEVsQlFVRXNRMEZCUVN4RFFVRk1MRU5CUVZrc1EwRkJReXhQUVVGaUxFTkJRVUVzUTBGQlFTeEhRVUY1UWl4SlFVRndRenRaUVVOT0xFbEJRVUVzUjBGQlR5eEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRXRCUVVNc1EwRkJRU3hOUVVGRUxFZEJRVlVzUjBGQmJrSXNSVUZCZDBJc1EwRkJlRUk3V1VGRlVDeFJRVUZSTEVOQlFVTXNTMEZCVkN4SFFVRnBRaXhOUVVGTkxFTkJRVU1zVlVGQlVDeERRVUZyUWl4SlFVRnNRaXhEUVVGQkxFZEJRVEJDTEV0QlFURkNMRWRCUVd0RExFbEJUSEJFT3p0cFFrRlBRU3hWUVVGQkxFTkJRVmNzVFVGQldDeEZRVUZ0UWl4SlFVRnVRanRSUVZSUk8wMUJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVR0aFFXRlVMRTFCUVVFc1EwRkJRVHRKUVhCQ09FTXNRMEZCV0R0SFFVRndRenRCUVd4Q1FUczdPMEZEU2tFN1FVRkJRU3hOUVVGQk96dEZRVUZCTEU5QlFVRXNSMEZCVlN4VFFVRkJPMGxCUTFRc1EwRkJRU3hEUVVGRkxGTkJRVVlzUTBGQldTeERRVUZETEZkQlFXSXNRMEZCZVVJc1VVRkJla0k3U1VGRFFTeERRVUZCTEVOQlFVVXNVMEZCUml4RFFVRlpMRU5CUVVNc1IwRkJZaXhEUVVGcFFpeERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1NVRkJVaXhEUVVGaExGRkJRV0lzUTBGQmFrSTdWMEZEUVN4RFFVRkJMRU5CUVVVc1NVRkJSaXhEUVVGUExFTkJRVU1zVVVGQlVpeERRVUZwUWl4UlFVRnFRanRGUVVoVE96dEZRVTFXTEVOQlFVRXNRMEZCUlN4VFFVRkJPMWRCUTBRc1EwRkJRU3hEUVVGRkxGTkJRVVlzUTBGQldTeERRVUZETEV0QlFXSXNRMEZCYlVJc1QwRkJia0lzUTBGQk1rSXNRMEZCUXl4TFFVRTFRaXhEUVVGQkxFTkJRVzFETEVOQlFVTXNUMEZCY0VNc1EwRkJORU1zVDBGQk5VTTdSVUZFUXl4RFFVRkdPMEZCVGtFN096dEJRMFpCTzBGQlFVRXNUVUZCUVRzN1JVRkJRU3hOUVVGQkxFZEJRME03U1VGQlFTeFJRVUZCTEVWQlFWVXNSVUZCVmp0SlFVTkJMRmRCUVVFc1JVRkJZU3hGUVVSaU8wbEJSVUVzV1VGQlFTeEZRVUZqTEVWQlJtUTdTVUZIUVN4TlFVRkJMRVZCUVZFc1EwRklVanRKUVVsQkxGRkJRVUVzUlVGQlZTeEpRVUZCTEVkQlFVOHNSVUZLYWtJN096dEZRVkZMTzBsQlIxRXNiVUpCUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkE3UVVGRldpeFZRVUZCTzAxQlFVRXNTMEZCUVN4SFFVRlpMRWxCUVVFc1MwRkJRU3hEUVVGQk8wMUJRMW9zUzBGQlN5eERRVUZETEVkQlFVNHNSMEZCV1N4SlFVRkpMRU5CUVVNN1RVRkRha0lzUzBGQlN5eERRVUZETEUxQlFVNHNSMEZCWlN4RFFVRkJMRk5CUVVFc1MwRkJRVHRsUVVGQkxGTkJRVUU3YVVKQlEyUXNTMEZCUXl4RFFVRkJMRTFCUVVRc1IwRkJWVHRSUVVSSk8wMUJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVR0TlFVdG1MRWxCUVVNc1EwRkJRU3hKUVVGRUxFZEJRVkU3VFVGRFVpeEpRVUZETEVOQlFVRXNTVUZCUkN4SFFVRlJMRWxCUVVrc1EwRkJRenROUVVOaUxFbEJRVU1zUTBGQlFTeEZRVUZFTEVkQlFVMHNTVUZCU1N4RFFVRkRPMDFCUTFnc1NVRkJReXhEUVVGQkxFdEJRVVFzUjBGQlV5eEpRVUZKTEVOQlFVTTdUVUZEWkN4SlFVRkRMRU5CUVVFc1RVRkJSQ3hIUVVGVkxFbEJRVWtzUTBGQlF6dE5RVU5tTEVsQlFVTXNRMEZCUVN4VFFVRkVMRWRCUVdFc1NVRkJTU3hEUVVGRE8wbEJaRTQ3TzNkQ1FXbENZaXhKUVVGQkxFZEJRVTBzVTBGQlF5eFBRVUZFTEVWQlFWVXNTVUZCVmp0QlFVTk1MRlZCUVVFN1RVRkJRU3hKUVVGSExFbEJRVU1zUTBGQlFTeEpRVUZFTEV0QlFWTXNTMEZCV2p0UlFVTkRMRTlCUVU4c1EwRkJReXhYUVVGU0xFZEJRWE5DTzFGQlEzUkNMRTlCUVU4c1EwRkJReXhUUVVGU0xFZEJRVzlDTEhsQ1FVWnlRanRQUVVGQkxFMUJRVUU3VVVGSlF5eFBRVUZQTEVOQlFVTXNWMEZCVWl4SFFVRnpRanRSUVVOMFFpeFBRVUZQTEVOQlFVTXNVMEZCVWl4SFFVRnZRaXd3UWtGTWNrSTdPMDFCVDBFc1QwRkJUeXhEUVVGRExGRkJRVklzUTBGQmFVSXNRMEZCYWtJc1JVRkJiMElzUTBGQmNFSXNSVUZCZFVJc1NVRkJka0lzUlVGQk5rSXNTVUZCTjBJN1RVRkRRU3hQUVVGUExFTkJRVU1zVlVGQlVpeERRVUZ0UWl4RFFVRnVRaXhGUVVGelFpeERRVUYwUWl4RlFVRjVRaXhKUVVGNlFpeEZRVUVyUWl4SlFVRXZRanROUVVWQkxFbEJRVWNzYlVKQlFVZzdVVUZEUXl4UFFVRlBMRU5CUVVNc1UwRkJVaXhEUVVGclFpeEpRVUZETEVOQlFVRXNUVUZCYmtJc1JVRkJNa0lzVFVGQlRTeERRVUZETEUxQlFXeERMRVZCUVRCRExFMUJRVTBzUTBGQlF5eE5RVUZxUkN4RlFVRjVSQ3hKUVVGQkxFZEJRVThzVFVGQlRTeERRVUZETEUxQlFWQXNSMEZCWjBJc1EwRkJhRVlzUlVGQmJVWXNTVUZCUVN4SFFVRlBMRTFCUVUwc1EwRkJReXhOUVVGUUxFZEJRV2RDTEVOQlFURkhMRVZCUkVRN08wMUJSMEVzU1VGQlFTeEhRVUZQTEVsQlFVTXNRMEZCUVN4SlFVRkVMRWRCUVZFc1NVRkJVaXhIUVVGbExFbEJRVU1zUTBGQlFTeExRVUZvUWl4SFFVRjNRanROUVVVdlFpeFBRVUZQTEVOQlFVTXNTVUZCVWl4SFFVRmxMRTFCUVUwc1EwRkJReXhaUVVGUUxFZEJRWE5DTzAxQlEzSkRMRTlCUVU4c1EwRkJReXhUUVVGU0xFZEJRVzlDTzAxQlEzQkNMRTlCUVU4c1EwRkJReXhUUVVGU0xFZEJRVzlDTzAxQlEzQkNMRTlCUVU4c1EwRkJReXhYUVVGU0xFZEJRWE5DTzAxQlEzUkNMRTlCUVVFc1IwRkJWU3hQUVVGUExFTkJRVU1zVjBGQlVpeERRVUZ2UWl4SlFVRndRanROUVVOV0xFOUJRVThzUTBGQlF5eFJRVUZTTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEVOQlFVTXNTVUZCUVN4SFFVRlBMRTlCUVU4c1EwRkJReXhMUVVGb1FpeERRVUZCTEVkQlFYbENMRU5CUVdoRUxFVkJRVzFFTEUxQlFVMHNRMEZCUXl4WlFVRXhSRHROUVVOQkxFOUJRVThzUTBGQlF5eFZRVUZTTEVOQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEVOQlFVTXNTVUZCUVN4SFFVRlBMRTlCUVU4c1EwRkJReXhMUVVGb1FpeERRVUZCTEVkQlFYbENMRU5CUVd4RUxFVkJRWEZFTEUxQlFVMHNRMEZCUXl4WlFVRTFSRHROUVVkQkxFOUJRVThzUTBGQlF5eEpRVUZTTEVkQlFXVXNUVUZCVFN4RFFVRkRMRmRCUVZBc1IwRkJjVUk3VFVGRGNFTXNUMEZCVHl4RFFVRkRMRmRCUVZJc1IwRkJjMEk3VFVGRGRFSXNUMEZCVHl4RFFVRkRMRk5CUVZJc1IwRkJiMEk3VFVGRGNFSXNUMEZCVHl4RFFVRkRMRkZCUVZJc1EwRkJhVUlzVFVGQlRTeERRVUZETEUxQlFYaENMRVZCUVdkRExFbEJRVUVzUjBGQlR5eE5RVUZOTEVOQlFVTXNWMEZCWkN4SFFVRTBRaXhOUVVGTkxFTkJRVU1zVFVGQmJrVXNSVUZCTWtVc1NVRkJRU3hIUVVGUExFMUJRVTBzUTBGQlF5eE5RVUZRTEVkQlFXZENMRU5CUVd4SExFVkJRWEZITEUxQlFVMHNRMEZCUXl4WFFVRTFSenROUVVOQkxFOUJRVThzUTBGQlF5eFZRVUZTTEVOQlFXMUNMRTFCUVUwc1EwRkJReXhOUVVFeFFpeEZRVUZyUXl4SlFVRkJMRWRCUVU4c1RVRkJUU3hEUVVGRExGZEJRV1FzUjBGQk5FSXNUVUZCVFN4RFFVRkRMRTFCUVhKRkxFVkJRVFpGTEVsQlFVRXNSMEZCVHl4TlFVRk5MRU5CUVVNc1RVRkJVQ3hIUVVGblFpeERRVUZ3Unl4RlFVRjFSeXhOUVVGTkxFTkJRVU1zVjBGQk9VYzdUVUZGUVN4UFFVRlBMRU5CUVVNc1UwRkJVaXhIUVVGdlFqdE5RVU53UWl4UFFVRlBMRU5CUVVNc1VVRkJVaXhEUVVGcFFpeE5RVUZOTEVOQlFVTXNUVUZCZUVJc1JVRkJaME1zU1VGQlFTeEhRVUZQTEUxQlFVMHNRMEZCUXl4WFFVRmtMRWRCUVRSQ0xFMUJRVTBzUTBGQlF5eE5RVUZ1UlN4RlFVRXlSU3hEUVVGRExFbEJRVUVzUjBGQlR5eE5RVUZOTEVOQlFVTXNUVUZCVUN4SFFVRm5RaXhEUVVGNFFpeERRVUZCTEVkQlFUWkNMRU5CUVVNc1NVRkJReXhEUVVGQkxFMUJRVVFzUjBGQlZTeEpRVUZETEVOQlFVRXNVMEZCV2l4RFFVRjRSeXhGUVVGblNTeE5RVUZOTEVOQlFVTXNWMEZCZGtrN1RVRkZRU3hKUVVGQkxFZEJRVThzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4SlFVRkRMRU5CUVVFc1RVRkJXaXhEUVVGQkxFZEJRWE5DTEV0QlFYUkNMRWRCUVRoQ0xFbEJRVU1zUTBGQlFUdE5RVU4wUXl4UFFVRkJMRWRCUVZVc1QwRkJUeXhEUVVGRExGZEJRVklzUTBGQmIwSXNTVUZCY0VJN1RVRkRWaXhQUVVGUExFTkJRVU1zVTBGQlVpeEhRVUZ2UWp0aFFVTndRaXhQUVVGUExFTkJRVU1zVVVGQlVpeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeERRVUZETEVsQlFVRXNSMEZCVHl4UFFVRlBMRU5CUVVNc1MwRkJhRUlzUTBGQlFTeEhRVUY1UWl4RFFVRm9SQ3hGUVVGdFJDeEpRVUZCTEVkQlFVOHNUVUZCVFN4RFFVRkRMRmRCUVZBc1IwRkJjVUlzUTBGQkwwVTdTVUZ5UTBzN096czdPenRGUVRKRFJEdHhRa0ZGVEN4TFFVRkJMRWRCUTBNN1RVRkJRU3hKUVVGQkxFVkJRVTBzUjBGQlRqdE5RVU5CTEVsQlFVRXNSVUZCVFN4SFFVUk9PMDFCUlVFc1NVRkJRU3hGUVVGTkxFZEJSazQ3T3p0SlFVOVpMR2RDUVVGRExFOUJRVVE3VFVGRldpeEpRVUZETEVOQlFVRXNUVUZCUkN4SFFVRlZMRU5CUVVFc1EwRkJSU3hQUVVGR0xFTkJRVlVzUTBGQlF5eFJRVUZZTEVOQlFXOUNMRkZCUVhCQ0xFTkJRVGhDTEVOQlFVRXNRMEZCUVR0TlFVTjRReXhKUVVGRExFTkJRVUVzVDBGQlJDeEhRVUZYTEVsQlFVTXNRMEZCUVN4TlFVRk5MRU5CUVVNc1ZVRkJVaXhEUVVGdFFpeEpRVUZ1UWp0TlFVVllMRWxCUVVNc1EwRkJRU3hUUVVGRUxFZEJRV0VzUTBGQlF5eERRVUZETEZOQlFVWXNRMEZCV1N4RFFVRkJMRU5CUVVVc1QwRkJSaXhEUVVGVkxFTkJRVU1zVVVGQldDeERRVUZ2UWl4aFFVRndRaXhEUVVGclF5eERRVUZETEV0QlFXNURMRU5CUVVFc1EwRkJNRU1zUTBGQlF5eEpRVUV6UXl4RFFVRkJMRU5CUVZvN1NVRk1SRHM3Y1VKQldXSXNTVUZCUVN4SFFVRk5MRk5CUVVFN1FVRkZUQ3hWUVVGQk8wMUJRVUVzU1VGQlF5eERRVUZCTEV0QlFVUXNSMEZCVXp0TlFVTlVMRWxCUVVNc1EwRkJRU3hWUVVGRUxFZEJRV003VFVGRFpDeEpRVUZETEVOQlFVRXNTMEZCUkN4SFFVRlRPMDFCUTFRc1NVRkJReXhEUVVGQkxFMUJRVVFzUjBGQlZUdE5RVU5XTEVsQlFVTXNRMEZCUVN4TFFVRkVMRWRCUVZNN1RVRkZWQ3hEUVVGQkxFTkJRVVVzU1VGQlF5eERRVUZCTEUxQlFVZ3NRMEZCVlN4RFFVRkRMRXRCUVZnc1EwRkJhVUlzUTBGQlFTeFRRVUZCTEV0QlFVRTdaVUZCUVN4VFFVRkRMRXRCUVVRN2FVSkJRVmNzUzBGQlF5eERRVUZCTEV0QlFVUXNRMEZCVHl4TFFVRlFPMUZCUVZnN1RVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFXcENPMDFCUTBFc1EwRkJRU3hEUVVGRkxGRkJRVVlzUTBGQlZ5eERRVUZETEU5QlFWb3NRMEZCYjBJc1EwRkJRU3hUUVVGQkxFdEJRVUU3WlVGQlFTeFRRVUZETEV0QlFVUTdhVUpCUVZjc1MwRkJReXhEUVVGQkxFZEJRVVFzUTBGQlN5eExRVUZNTzFGQlFWZzdUVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFTkJRWEJDTzBGQlJVRTdRVUZCUVN4WFFVRkJMSEZEUVVGQk96dFJRVU5ETEZOQlFVRXNSMEZCWjBJc1NVRkJRU3hUUVVGQkxFTkJRVlVzUzBGQlZpeEZRVUZwUWl4SlFVRnFRanRSUVVOb1FpeEpRVUZETEVOQlFVRXNWVUZCVnl4RFFVRkJMRk5CUVZNc1EwRkJReXhGUVVGV0xFTkJRVm9zUjBGQk5FSTdRVUZHTjBJN1FVRkxRVHRCUVVGQkxGZEJRVUVzZDBOQlFVRTdPMUZCUTBNc1UwRkJRU3hIUVVGblFpeEpRVUZCTEZOQlFVRXNRMEZCVlN4TlFVRldMRVZCUVd0Q0xFbEJRV3hDTzFGQlEyaENMRWxCUVVNc1EwRkJRU3hWUVVGWExFTkJRVUVzVTBGQlV5eERRVUZETEVWQlFWWXNRMEZCV2l4SFFVRTBRanRCUVVZM1FqdE5RVWxCTEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1NVRkJWQ3hIUVVGblFpeE5RVUZOTEVOQlFVTXNVVUZCVUN4SFFVRnJRanROUVVkc1F5eEpRVUZETEVOQlFVRXNUVUZCUkN4SFFVRlZMRWxCUVVNc1EwRkJRU3hUUVVGVkxFTkJRVUVzUzBGQlFTeERRVUZQTEVOQlFVRXNTVUZCUXl4RFFVRkJMRXRCUVVRN1RVRkROVUlzU1VGQlF5eERRVUZCTEZGQlFVUXNSMEZCV1N4SlFVRkRMRU5CUVVFc1ZVRkJWeXhEUVVGQkxFbEJRVU1zUTBGQlFTeE5RVUZOTEVOQlFVTXNVVUZCVWp0TlFVTjRRaXhKUVVGRExFTkJRVUVzVVVGQlJDeEhRVUZaTEVsQlFVTXNRMEZCUVN4VlFVRlhMRU5CUVVFc1NVRkJReXhEUVVGQkxFMUJRVTBzUTBGQlF5eFJRVUZTTzJGQlJYaENPMGxCTTBKTE96dHhRa0ZuUTA0c1kwRkJRU3hIUVVGblFpeFRRVUZETEZGQlFVUXNSVUZCVnl4UlFVRllPMEZCUldZc1ZVRkJRVHROUVVGQkxFbEJRVUVzUjBGQlR5eEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVZJc1IwRkJhVUk3VFVGRGVFSXNVMEZCUVN4SFFVRlpMRWxCUVVNc1EwRkJRU3hOUVVGTkxFTkJRVU1zUzBGQlVpeEhRVUZuUWp0TlFVVTFRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEVsQlFWUXNRMEZCUVR0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeERRVUZ0UWl4RFFVRkRMRk5CUVVFc1IwRkJXU3hKUVVGaUxFTkJRVUVzUjBGQmNVSXNRMEZCZUVNc1JVRkJNa01zUTBGQlF5eEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVZJc1IwRkJhVUlzU1VGQmJFSXNRMEZCUVN4SFFVRXdRaXhEUVVGeVJUdE5RVU5CTEZGQlFWRXNRMEZCUXl4SlFVRlVMRU5CUVdNc1NVRkJReXhEUVVGQkxFOUJRV1lzUlVGQmQwSXNTVUZCZUVJN1RVRkRRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEU5QlFWUXNRMEZCUVR0TlFVVkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zU1VGQlZDeERRVUZCTzAxQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFTkJRVzFDTEVOQlFVTXNVMEZCUVN4SFFVRlpMRWxCUVdJc1EwRkJRU3hIUVVGeFFpeERRVUZ5UWl4SFFVRjVRaXhUUVVFMVF5eEZRVUYxUkN4RFFVRkRMRWxCUVVNc1EwRkJRU3hOUVVGTkxFTkJRVU1zVFVGQlVpeEhRVUZwUWl4SlFVRnNRaXhEUVVGQkxFZEJRVEJDTEVOQlFXcEdPMDFCUTBFc1VVRkJVU3hEUVVGRExFbEJRVlFzUTBGQll5eEpRVUZETEVOQlFVRXNUMEZCWml4RlFVRjNRaXhKUVVGNFFqdGhRVU5CTEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1QwRkJWQ3hEUVVGQk8wbEJZbVU3TzNGQ1FXZENhRUlzVVVGQlFTeEhRVUZWTEZOQlFVTXNTVUZCUkR0QlFVTlVMRlZCUVVFN1RVRkJRU3hUUVVGQkxFZEJRVmtzU1VGQlF5eERRVUZCTEUxQlFVMHNRMEZCUXl4TFFVRlNMRWRCUVdkQ08wMUJRelZDTEZWQlFVRXNSMEZCWVN4SlFVRkRMRU5CUVVFc1RVRkJUU3hEUVVGRExFMUJRVklzUjBGQmFVSTdUVUZET1VJc1UwRkJRU3hIUVVGWkxFbEJRVU1zUTBGQlFTeE5RVUZOTEVOQlFVTXNUVUZCVWl4SFFVRnBRanROUVVVM1FpeFZRVUZCTEVkQlFXRTdUVUZEWWl4VFFVRkJMRWRCUVZrc1ZVRkJRU3hIUVVGaE8wMUJRM3BDTEV0QlFVRXNSMEZCVVN4VFFVRkJMRWRCUVZrc1EwRkJReXhUUVVGQkxFZEJRVmtzVlVGQllpeERRVUZCTEVkQlFUSkNPMDFCUXk5RExFdEJRVUVzUjBGQlVUdE5RVU5TTEV0QlFVRXNSMEZCVVN4RFFVRkRMRk5CUVVFc1IwRkJXU3hIUVVGaUxFTkJRVUVzUjBGQmIwSTdUVUZETlVJc1MwRkJRU3hIUVVGUk8wMUJRMUlzVTBGQlFTeEhRVUZaTzAxQlJWb3NTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhKUVVGVUxFZEJRV2RDTEUxQlFVMHNRMEZCUXl4UlFVRlFMRWRCUVd0Q08wMUJRMnhETEU5QlFVRXNSMEZCVlN4SlFVRkRMRU5CUVVFc1QwRkJUeXhEUVVGRExGZEJRVlFzUTBGQmNVSXNTVUZCY2tJN1RVRkRWaXhMUVVGQkxFZEJRVkVzUzBGQlFTeEhRVUZSTEU5QlFVOHNRMEZCUXl4TFFVRlNMRWRCUVdkQ08wMUJRMmhETEV0QlFVRXNSMEZCVVR0TlFVbFNMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zU1VGQlZDeERRVUZCTzAxQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFZEJRWEZDTzAxQlEzSkNMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeERRVUZ0UWl4TFFVRnVRaXhGUVVFd1FpeExRVUV4UWp0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zUzBGQlZDeERRVUZsTEV0QlFXWXNSVUZCYzBJc1MwRkJkRUk3VFVGRFFTeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRk5CUVZRc1IwRkJjVUk3VFVGRGNrSXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhYUVVGVUxFZEJRWFZDTzAxQlEzWkNMRWxCUVVNc1EwRkJRU3hSUVVGRUxFTkJRVlVzVTBGQlZpeEZRVUZ4UWl4VlFVRkJMRWRCUVdFc1IwRkJiRU1zUlVGQmRVTXNWVUZCZGtNN1RVRkRRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEU5QlFWUXNRMEZCUVR0TlFVVkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zU1VGQlZDeERRVUZCTzAxQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFTkJRVzFDTEV0QlFXNUNMRVZCUVRCQ0xFdEJRVEZDTzAxQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFZEJRWEZDTzAxQlEzSkNMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVVVGQlZDeERRVUZyUWl4SlFVRnNRaXhGUVVGM1FpeERRVUY0UWl4RlFVRXlRaXhEUVVFelFqdGhRVU5CTEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1QwRkJWQ3hEUVVGQk8wbEJha05UT3p0eFFrRnZRMVlzVVVGQlFTeEhRVUZWTEZOQlFVTXNTMEZCUkN4RlFVRlJMRmRCUVZJc1JVRkJjVUlzVjBGQmNrSTdRVUZEVkN4VlFVRkJPMDFCUVVFc1IwRkJRU3hIUVVGTkxFbEJRVWtzUTBGQlF5eEZRVUZNTEVkQlFWVXNRMEZCVml4SFFVRmpPMDFCUTNCQ0xFbEJRVUVzUjBGQlR5eEpRVUZKTEVOQlFVTXNSVUZCVEN4SFFVRlZPMDFCUldwQ0xFbEJRVU1zUTBGQlFTeFBRVUZQTEVOQlFVTXNVMEZCVkN4RFFVRkJPMDFCUTBFc1EwRkJRU3hIUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZNTEVOQlFWTXNSMEZCVkN4RFFVRkJMRWRCUVdkQ08wMUJRM0JDTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNc1IwRkJUQ3hEUVVGVExFZEJRVlFzUTBGQlFTeEhRVUZuUWp0TlFVTndRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEUxQlFWUXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSXNRMEZCYmtJN1RVRkRRU3hIUVVGQkxFbEJRVTg3UVVGRlVDeFhRVUZUTEdkR1FVRlVPMUZCUTBNc1EwRkJRU3hIUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZNTEVOQlFWTXNSMEZCVkN4RFFVRkJMRWRCUVdkQ08xRkJRM0JDTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNc1IwRkJUQ3hEUVVGVExFZEJRVlFzUTBGQlFTeEhRVUZuUWp0UlFVTndRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEUxQlFWUXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSXNRMEZCYmtJN1VVRkRRU3hIUVVGQkxFbEJRVTg3VVVGRlVDeERRVUZCTEVkQlFVa3NTVUZCU1N4RFFVRkRMRWRCUVV3c1EwRkJVeXhIUVVGVUxFTkJRVUVzUjBGQlowSTdVVUZEY0VJc1EwRkJRU3hIUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZNTEVOQlFWTXNSMEZCVkN4RFFVRkJMRWRCUVdkQ08xRkJRM0JDTEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1RVRkJWQ3hEUVVGblFpeERRVUZvUWl4RlFVRnRRaXhEUVVGdVFqdFJRVU5CTEVkQlFVRXNTVUZCVHp0QlFWUlNPMDFCVjBFc1NVRkJReXhEUVVGQkxFOUJRVThzUTBGQlF5eE5RVUZVTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEVOQlFVTXNWMEZCY0VJN1RVRkRRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEVsQlFWUXNRMEZCUVR0TlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVFVGQlZDeERRVUZCTzJGQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFTkJRVUU3U1VGNFFsTTdPM0ZDUVRKQ1ZpeFZRVUZCTEVkQlFWa3NVMEZCUVR0TlFVVllMRWxCUVVjc1NVRkJReXhEUVVGQkxGTkJRVlVzUTBGQlFTeExRVUZCTEVOQlFXUTdaVUZGUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJSbUk3VDBGQlFTeE5RVUZCTzJWQlRVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVU1aU96dEpRVVpYT3p0eFFrRlhXaXhKUVVGQkxFZEJRVTBzVTBGQlF5eExRVUZFTzBGQlJVd3NWVUZCUVR0TlFVRkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeEhRVUZ4UWp0TlFVTnlRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZOQlFWUXNRMEZCYlVJc1EwRkJia0lzUlVGQmMwSXNRMEZCZEVJc1JVRkJlVUlzU1VGQlF5eERRVUZCTEUxQlFVMHNRMEZCUXl4TFFVRnFReXhGUVVGM1F5eEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVdoRU8wMUJRMEVzU1VGQlF5eERRVUZCTEUxQlFVUXNTVUZCVnl4SlFVRkRMRU5CUVVFc1MwRkJUU3hEUVVGQkxFbEJRVU1zUTBGQlFTeExRVUZFTEVOQlFWQXNSMEZCYVVJN1RVRkROVUlzVDBGQlFTeEhRVUZWTzAxQlJWWXNTVUZCUnl4SlFVRkRMRU5CUVVFc1MwRkJSQ3hMUVVGVkxFMUJRVllzU1VGQmNVSXNUMEZCZUVJN1VVRkRReXhOUVVGQkxFZEJRVk1zU1VGQlF5eERRVUZCTEZOQlFWVXNRMEZCUVN4TFFVRkJMRU5CUVU4c1EwRkJRU3hKUVVGRExFTkJRVUVzUzBGQlJEdFJRVU16UWl4UlFVRkJMRWRCUVZjc1NVRkJReXhEUVVGQkxGVkJRVmNzUTBGQlFTeE5RVUZOTEVOQlFVTXNVVUZCVUR0UlFVTjJRaXhSUVVGQkxFZEJRVmNzU1VGQlF5eERRVUZCTEZWQlFWY3NRMEZCUVN4TlFVRk5MRU5CUVVNc1VVRkJVRHRSUVVWMlFpeEpRVUZITEUxQlFVMHNRMEZCUXl4SlFVRlFMRXRCUVdVc1MwRkJiRUk3VlVGRFF5eFJRVUZSTEVOQlFVTXNUVUZCVkN4SFFVRnJRaXhOUVVGTkxFTkJRVU1zVDBGRU1VSTdPMUZCUjBFc1NVRkJReXhEUVVGQkxHTkJRVVFzUTBGQlowSXNVVUZCYUVJc1JVRkJNRUlzVVVGQk1VSTdVVUZGUVN4SlFVRkhMRWxCUVVNc1EwRkJRU3hOUVVGRUxFZEJRVlVzUjBGQlZpeEpRVUZyUWl4RFFVRkpMRWxCUVVNc1EwRkJRU3hMUVVFeFFqdFZRVU5ETEVsQlFVTXNRMEZCUVN4TlFVRkVMRWRCUVZVN1ZVRkRWaXhSUVVGUkxFTkJRVU1zVjBGQlZDeEhRVUYxUWl4UlFVRlJMRU5CUVVNN1ZVRkZhRU1zU1VGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCVUN4TFFVRmxMRXRCUVd4Q08xbEJRME1zVVVGQlVTeERRVUZETEZOQlFWUXNSMEZCY1VJc1NVRkJTU3hEUVVGRExFZEJRVXdzUTBGQlV5eFJRVUZSTEVOQlFVTXNUVUZCVkN4SFFVRnJRaXhOUVVGTkxFTkJRVU1zVFVGQmJFTXNSVUZCTUVNc1EwRkJNVU1zUlVGRWRFSTdWMEZCUVN4TlFVRkJPMWxCUjBNc1VVRkJVU3hEUVVGRExGTkJRVlFzUjBGQmNVSXNVVUZCVVN4RFFVRkRMRTlCU0M5Q096dFZRVXRCTEVsQlFVTXNRMEZCUVN4TFFVRkVMRWRCUVZNc1QwRlVWanM3VVVGWFFTeFBRVUZCTEVkQlFWVXNUVUZ5UWxnN08wMUJkVUpCTEVsQlFVY3NTVUZCUXl4RFFVRkJMRXRCUVVRc1MwRkJWU3hOUVVGV0xFbEJRWEZDTEU5QlFYaENPMUZCUTBNc1RVRkJRU3hIUVVGVExFbEJRVU1zUTBGQlFTeFRRVUZWTEVOQlFVRXNTMEZCUVN4RFFVRlBMRU5CUVVFc1NVRkJReXhEUVVGQkxFdEJRVVE3VVVGRE0wSXNVVUZCUVN4SFFVRlhMRWxCUVVNc1EwRkJRU3hWUVVGWExFTkJRVUVzVFVGQlRTeERRVUZETEZGQlFWQTdVVUZEZGtJc1VVRkJRU3hIUVVGWExFbEJRVU1zUTBGQlFTeFZRVUZYTEVOQlFVRXNUVUZCVFN4RFFVRkRMRkZCUVZBN1VVRkZka0lzU1VGQlF5eERRVUZCTEdOQlFVUXNRMEZCWjBJc1VVRkJhRUlzUlVGQk1FSXNVVUZCTVVJN1VVRkZRU3hKUVVGSExFbEJRVU1zUTBGQlFTeE5RVUZFTEVsQlFWY3NSMEZCWkR0VlFVTkRMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVjBGQlZDeEhRVUYxUWl4SlFVRkRMRU5CUVVFN1ZVRkRlRUlzVVVGQlVTeERRVUZETEUxQlFWUXNSMEZCYTBJc1VVRkJVU3hEUVVGRExGbEJSalZDTzFOQlFVRXNUVUZCUVR0VlFVbERMRWxCUVVjc1NVRkJReXhEUVVGQkxFMUJRVVFzU1VGQlZ5eEhRVUZrTzFsQlEwTXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhYUVVGVUxFZEJRWFZDTzFsQlJYWkNMRU5CUVVFc1IwRkJTU3hKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVsQlFVTXNRMEZCUVN4TlFVRkVMRWRCUVZVc1IwRkJja0lzUlVGQk1FSXNRMEZCTVVJc1JVRkJOa0lzUTBGQk4wSTdXVUZEU2l4UlFVRlJMRU5CUVVNc1RVRkJWQ3hIUVVGclFpeEpRVUZKTEVOQlFVTXNTVUZCVEN4RFFVRlZMRU5CUVZZc1JVRkJZU3hSUVVGUkxFTkJRVU1zVTBGQmRFSXNSVUZCYVVNc1VVRkJVU3hEUVVGRExGZEJRVEZETEVWQlNtNUNPMWRCUVVFc1RVRkJRVHRaUVU5RExGRkJRVkVzUTBGQlF5eE5RVUZVTEVkQlFXdENMRkZCUVZFc1EwRkJRenRaUVVNelFpeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRmRCUVZRc1IwRkJkVUlzU1VGQlNTeERRVUZETEVkQlFVd3NRMEZCVXl4SFFVRkJMRWRCUVUwc1NVRkJReXhEUVVGQkxFMUJRV2hDTEVWQlFYZENMRU5CUVhoQ0xFVkJVbmhDTzFkQlNrUTdPMUZCWTBFc1NVRkJSeXhKUVVGRExFTkJRVUVzVFVGQlJDeEhRVUZWTEVkQlFXSTdWVUZEUXl4SlFVRkRMRU5CUVVFc1RVRkJSQ3hIUVVGVk8xVkJRMVlzU1VGQlF5eERRVUZCTEV0QlFVUXNSMEZCVXl4UFFVWldPenRSUVVsQkxFbEJRVWNzVFVGQlRTeERRVUZETEVsQlFWQXNTMEZCWlN4TFFVRnNRanRWUVVORExFbEJRVUVzUjBGQlR5eE5RVUZOTEVOQlFVTTdWVUZGWkN4SlFVRkhMRTFCUVUwc1EwRkJReXhKUVVGV08xbEJRME1zU1VGQlFTeEpRVUZSTEVsQlJGUTdWMEZJUkR0VFFVRkJMRTFCUVVFN1ZVRlBReXhKUVVGQkxFZEJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFWQndRanM3VVVGWFFTeEpRVUZETEVOQlFVRXNVVUZCUkN4RFFVRlZMRWxCUVZZN1VVRkhRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZkQlFWUXNSMEZCZFVJN1VVRkRka0lzVDBGQlFTeEhRVUZWTEUxQmVFTllPenROUVRCRFFTeEpRVUZITEVsQlFVTXNRMEZCUVN4TFFVRkVMRXRCUVZVc1RVRkJWaXhKUVVGeFFpeFBRVUY0UWp0UlFVVkRMRlZCUVVFc1IwRkJZU3hKUVVGRExFTkJRVUVzVTBGQlZTeERRVUZCTEV0QlFVRXNRMEZCVHl4RFFVRkJMRWxCUVVNc1EwRkJRU3hMUVVGRU8xRkJReTlDTEZWQlFVRXNSMEZCWVN4SlFVRkRMRU5CUVVFc1UwRkJWU3hEUVVGQkxFdEJRVUVzUTBGQlR5eERRVUZCTEVsQlFVTXNRMEZCUVN4TFFVRkVMRWRCUVZNc1EwRkJWRHRSUVVjdlFpeFpRVUZCTEVkQlFXVXNTVUZCUXl4RFFVRkJMRlZCUVZjc1EwRkJRU3hWUVVGVkxFTkJRVU1zVVVGQldEdFJRVU16UWl4WlFVRkJMRWRCUVdVc1NVRkJReXhEUVVGQkxGVkJRVmNzUTBGQlFTeFZRVUZWTEVOQlFVTXNVVUZCV0R0UlFVY3pRaXhSUVVGQkxFZEJRVmNzUTBGQlF5eEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVZJc1IwRkJhVUlzUTBGQmJFSXNRMEZCUVN4SFFVRjFRaXhKUVVGRExFTkJRVUU3VVVGRmJrTXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhKUVVGVUxFTkJRVUU3VVVGRFFTeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRk5CUVZRc1EwRkJiVUlzUTBGQmJrSXNSVUZCYzBJc1EwRkJReXhSUVVGMlFqdFJRVU5CTEVsQlFVTXNRMEZCUVN4alFVRkVMRU5CUVdkQ0xGbEJRV2hDTEVWQlFUaENMRmxCUVRsQ08xRkJRMEVzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4UFFVRlVMRU5CUVVFN1VVRkhRU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEVsQlFWUXNRMEZCUVR0UlFVTkJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeERRVUZ0UWl4RFFVRnVRaXhGUVVGelFpeEpRVUZETEVOQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVZJc1IwRkJhVUlzVVVGQmRrTTdVVUZGUVN4SlFVRkhMR3RDUVVGSU8xVkJRME1zV1VGQlFTeEhRVUZsTEVsQlFVTXNRMEZCUVN4VlFVRlhMRU5CUVVFc1ZVRkJWU3hEUVVGRExGRkJRVmc3VlVGRE0wSXNXVUZCUVN4SFFVRmxMRWxCUVVNc1EwRkJRU3hWUVVGWExFTkJRVUVzVlVGQlZTeERRVUZETEZGQlFWZzdWVUZGTTBJc1NVRkJSeXhWUVVGVkxFTkJRVU1zU1VGQldDeExRVUZ0UWl4TFFVRjBRanRaUVVORExGbEJRVmtzUTBGQlF5eE5RVUZpTEVkQlFYTkNMRlZCUVZVc1EwRkJReXhQUVVSc1F6czdWVUZIUVN4SlFVRkRMRU5CUVVFc1kwRkJSQ3hEUVVGblFpeFpRVUZvUWl4RlFVRTRRaXhaUVVFNVFpeEZRVkJFTzFOQlFVRXNUVUZCUVR0VlFWVkRMRWxCUVVFc1IwRkJUeXhKUVVGRExFTkJRVUVzVlVGQlJDeERRVUZCTzFWQlExQXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhUUVVGVUxFZEJRWEZDTzFWQlEzSkNMRTlCUVVFc1IwRkJWU3hKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZkQlFWUXNRMEZCY1VJc1NVRkJja0k3VlVGRFZpeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRkZCUVZRc1EwRkJhMElzU1VGQmJFSXNSVUZCZDBJc1EwRkJReXhKUVVGRExFTkJRVUVzVFVGQlRTeERRVUZETEV0QlFWSXNSMEZCWjBJc1QwRkJUeXhEUVVGRExFdEJRWHBDTEVOQlFVRXNSMEZCYTBNc1EwRkJNVVFzUlVGQk5rUXNRMEZCUXl4SlFVRkRMRU5CUVVFc1RVRkJUU3hEUVVGRExFMUJRVklzUjBGQmFVSXNSVUZCYkVJc1EwRkJRU3hIUVVGM1FpeERRVUZ5Uml4RlFXSkVPenRSUVdWQkxFbEJRVU1zUTBGQlFTeFBRVUZQTEVOQlFVTXNUMEZCVkN4RFFVRkJPMUZCUlVFc1NVRkJSeXhKUVVGRExFTkJRVUVzVFVGQlJDeEhRVUZWTEVkQlFXSTdWVUZEUXl4SlFVRkRMRU5CUVVFc1MwRkJSRHRWUVVOQkxFbEJRVU1zUTBGQlFTeE5RVUZFTEVkQlFWVTdWVUZEVml4SlFVRkhMR3RDUVVGSU8xbEJRME1zU1VGQlF5eERRVUZCTEV0QlFVUXNSMEZCVXl4UFFVUldPMWRCUVVFc1RVRkJRVHRaUVVkRExFbEJRVU1zUTBGQlFTeExRVUZFTEVkQlFWTXNUVUZJVmp0WFFVaEVPenRSUVZGQkxFOUJRVUVzUjBGQlZTeE5RVGxEV0RzN1RVRnBSRUVzU1VGQlJ5eEpRVUZETEVOQlFVRXNTMEZCUkN4TFFVRlZMRXRCUVZZc1NVRkJiMElzVDBGQmRrSTdVVUZEUXl4SlFVRkJMRWRCUVU4c1NVRkJReXhEUVVGQkxGVkJRVVFzUTBGQlFUdFJRVU5RTEVsQlFVTXNRMEZCUVN4TlFVRkVMRWRCUVZVN1VVRkRWaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZOQlFWUXNSMEZCY1VJN1VVRkRja0lzVDBGQlFTeEhRVUZWTEVsQlFVTXNRMEZCUVN4UFFVRlBMRU5CUVVNc1YwRkJWQ3hEUVVGeFFpeEpRVUZ5UWp0UlFVTldMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVVVGQlZDeERRVUZyUWl4SlFVRnNRaXhGUVVGM1FpeERRVUZETEVsQlFVTXNRMEZCUVN4TlFVRk5MRU5CUVVNc1MwRkJVaXhIUVVGblFpeFBRVUZQTEVOQlFVTXNTMEZCZWtJc1EwRkJRU3hIUVVGclF5eERRVUV4UkN4RlFVRTJSQ3hEUVVGRExFbEJRVU1zUTBGQlFTeE5RVUZOTEVOQlFVTXNUVUZCVWl4SFFVRnBRaXhGUVVGc1FpeERRVUZCTEVkQlFYZENMRU5CUVhKR08xRkJRMEVzVDBGQlFTeEhRVUZWTEUxQlRsZzdPMDFCVjBFc1MwRkJRU3hIUVVGUkxFbEJRVU1zUTBGQlFTeE5RVUZOTEVOQlFVTXNTMEZCVWl4SFFVRm5RanROUVVONFFpeE5RVUZCTEVkQlFWTXNTVUZCUXl4RFFVRkJMRTFCUVUwc1EwRkJReXhOUVVGU0xFZEJRV2xDTzAxQlJURkNMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zU1VGQlZDeERRVUZCTzAxQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhYUVVGVUxFZEJRWFZDTzAxQlEzWkNMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVTBGQlZDeEhRVUZ4UWp0TlFVTnlRaXhKUVVGRExFTkJRVUVzVDBGQlR5eERRVUZETEZGQlFWUXNRMEZCYTBJc1EwRkJiRUlzUlVGQmNVSXNUVUZCUVN4SFFVRlRMRVZCUVRsQ0xFVkJRV3RETEV0QlFXeERMRVZCUVhsRExFVkJRWHBETzAxQlEwRXNTVUZCUXl4RFFVRkJMRTlCUVU4c1EwRkJReXhWUVVGVUxFTkJRVzlDTEVOQlFYQkNMRVZCUVhWQ0xFMUJRVUVzUjBGQlV5eEZRVUZvUXl4RlFVRnZReXhMUVVGd1F5eEZRVUV5UXl4RlFVRXpRenROUVVWQkxFbEJRVU1zUTBGQlFTeFBRVUZQTEVOQlFVTXNVMEZCVkN4SFFVRnhRanROUVVOeVFpeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRkZCUVZRc1EwRkJhMElzUTBGQmJFSXNSVUZCY1VJc1RVRkJRU3hIUVVGVExFVkJRVGxDTEVWQlFXdERMRXRCUVVFc1IwRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZNTEVOQlFWTXNTVUZCUXl4RFFVRkJMRXRCUVVRc1IwRkJVeXhEUVVGRExFbEJRVU1zUTBGQlFTeFRRVUZWTEVOQlFVRXNTMEZCUVN4RFFVRk5MRU5CUVVNc1RVRkJiRUlzUjBGQk1rSXNRMEZCTlVJc1EwRkJiRUlzUlVGQmEwUXNRMEZCYkVRc1EwRkJSQ3hEUVVFeFF5eEZRVUZyUnl4RlFVRnNSenROUVVOQkxFbEJRVU1zUTBGQlFTeFBRVUZQTEVOQlFVTXNVMEZCVkN4SFFVRnhRanRCUVVWeVFqdEJRVUZCTEZkQlFVRXNjVU5CUVVFN08xRkJSVU1zU1VGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCVEN4TFFVRmhMRk5CUVdoQ08xVkJRME1zU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4WFFVRlVMRWRCUVhWQ0xGVkJSSGhDT3p0UlFVZEJMRVZCUVVFc1IwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZNTEVkQlFWVXNRMEZCUXl4SlFVRkRMRU5CUVVFc1UwRkJWU3hEUVVGQkxFdEJRVUVzUTBGQlRTeERRVUZETEUxQlFXeENMRWRCUVRKQ0xFTkJRVFZDTEVOQlFWZ3NRMEZCUVN4SFFVRTJRenRSUVVWc1JDeEpRVUZETEVOQlFVRXNUMEZCVHl4RFFVRkRMRk5CUVZRc1EwRkJRVHRSUVVOQkxFbEJRVU1zUTBGQlFTeFBRVUZQTEVOQlFVTXNUVUZCVkN4RFFVRm5RaXhGUVVGQkxFZEJRVXNzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4VFFVRlVMRWRCUVhGQ0xFTkJRVEZDTEVkQlFUaENMRU5CUVRsRExFVkJRV2xFTEUxQlFVRXNSMEZCVXl4RlFVRXhSRHRSUVVOQkxFbEJRVU1zUTBGQlFTeFBRVUZQTEVOQlFVTXNUVUZCVkN4RFFVRm5RaXhGUVVGQkxFZEJRVXNzU1VGQlF5eERRVUZCTEU5QlFVOHNRMEZCUXl4VFFVRlVMRWRCUVhGQ0xFTkJRVEZDTEVkQlFUaENMRU5CUVRsRExFVkJRV2xFTEUxQlFXcEVPMUZCUTBFc1NVRkJReXhEUVVGQkxFOUJRVThzUTBGQlF5eE5RVUZVTEVOQlFVRTdRVUZXUkR0aFFWbEJMRWxCUVVNc1EwRkJRU3hQUVVGUExFTkJRVU1zVDBGQlZDeERRVUZCTzBsQk4wcExPenR4UWtGclMwNHNTMEZCUVN4SFFVRlBMRk5CUVVNc1MwRkJSRHRCUVVOT0xGVkJRVUU3VFVGQlFTeE5RVUZCTEVkQlFWTXNTVUZCUXl4RFFVRkJMRTFCUVUwc1EwRkJReXhqUVVGU0xFTkJRWFZDTEV0QlFYWkNPMDFCUTFRc1EwRkJRU3hIUVVGSkxFMUJRVTBzUTBGQlF6dE5RVU5ZTEVOQlFVRXNSMEZCU1N4TlFVRk5MRU5CUVVNN1RVRkZXQ3hEUVVGQkxFZEJRVWs3VFVGRFNpeERRVUZCTEVkQlFVa3NRMEZCUVN4SFFVRkpMRWxCUVVNc1EwRkJRU3hOUVVGTkxFTkJRVU1zUzBGQldpeEhRVUZ2UWp0TlFVTjRRaXhEUVVGQkxFZEJRVWtzU1VGQlF5eERRVUZCTEUxQlFVMHNRMEZCUXl4TlFVRlNMRWRCUVdsQ08wMUJRM0pDTEVOQlFVRXNSMEZCU1N4RFFVRkJMRWRCUVVrN1RVRkhVaXhKUVVGSExFTkJRVUVzU1VGQlN5eERRVUZNTEVsQlFWY3NRMEZCUVN4SlFVRkxMRU5CUVdoQ0xFbEJRWE5DTEVOQlFVRXNTVUZCU3l4RFFVRXpRaXhKUVVGcFF5eERRVUZCTEVsQlFVc3NRMEZCZWtNN1VVRkRReXhKUVVGRExFTkJRVUVzUzBGQlJDeEhRVUZUTEVsQlFVa3NRMEZCUXl4TFFVRk1MRU5CUVZjc1EwRkJReXhEUVVGQkxFZEJRVWtzUTBGQlRDeERRVUZCTEVkQlFWVXNRMEZCUXl4RFFVRkJMRWRCUVVrc1EwRkJUQ3hEUVVGV0xFZEJRVzlDTEVOQlFVTXNTVUZCUXl4RFFVRkJMRk5CUVZVc1EwRkJRU3hMUVVGQkxFTkJRVTBzUTBGQlF5eE5RVUZzUWl4SFFVRXlRaXhEUVVFMVFpeERRVUV2UWp0UlFVTlVMRWxCUVVNc1EwRkJRU3hMUVVGRUxFZEJRVk03WlVGRFZDeEpRVUZETEVOQlFVRXNUVUZCUkN4SFFVRlZMRWxCU0ZnN08wbEJXRTA3TzNGQ1FXZENVQ3hIUVVGQkxFZEJRVXNzVTBGQlF5eExRVUZFTzAxQlJVb3NTVUZCUnl4TFFVRkxMRU5CUVVNc1MwRkJUaXhMUVVGbExFVkJRV3hDTzFGQlEwTXNTVUZCUXl4RFFVRkJMRXRCUVVRc1IwRkJVeXhEUVVGRExFbEJRVU1zUTBGQlFTeE5RVVJhT3p0TlFVbEJMRWxCUVVjc1MwRkJTeXhEUVVGRExFdEJRVTRzUzBGQlpTeEZRVUZzUWp0UlFVTkRMRWxCUVVNc1EwRkJRU3hMUVVGRUxFZEJRVk1zU1VGQlNTeERRVUZETEVkQlFVd3NRMEZCVXl4SlFVRkRMRU5CUVVFc1MwRkJSQ3hIUVVGVExFTkJRV3hDTEVWQlFYRkNMRU5CUVhKQ08xRkJRMVFzU1VGQlF5eERRVUZCTEUxQlFVUXNSMEZCVlR0UlFVTldMRWxCUVVNc1EwRkJRU3hMUVVGRUxFZEJRVk1zVDBGSVZqczdUVUZMUVN4SlFVRkhMRXRCUVVzc1EwRkJReXhMUVVGT0xFdEJRV1VzUlVGQmJFSTdVVUZEUXl4SlFVRkRMRU5CUVVFc1MwRkJSQ3hIUVVGVExFbEJRVWtzUTBGQlF5eEhRVUZNTEVOQlFWTXNTVUZCUXl4RFFVRkJMRXRCUVVRc1IwRkJVeXhEUVVGc1FpeEZRVUZ4UWl4SlFVRkRMRU5CUVVFc1UwRkJWU3hEUVVGQkxFdEJRVUVzUTBGQlRTeERRVUZETEUxQlFXeENMRWRCUVRKQ0xFTkJRV2hFTzFGQlExUXNTVUZCUXl4RFFVRkJMRTFCUVVRc1IwRkJWVHRsUVVOV0xFbEJRVU1zUTBGQlFTeExRVUZFTEVkQlFWTXNUMEZJVmpzN1NVRllTVHM3Y1VKQmFVSk1MRmxCUVVFc1IwRkJZeXhUUVVGRExFbEJRVVE3UVVGRllpeFZRVUZCTzAxQlFVRXNTMEZCUVN4SFFVRlJMRWxCUVVrc1EwRkJReXhIUVVGTUxFTkJRVk1zU1VGQlFTeEhRVUZQTEVsQlFVTXNRMEZCUVN4UlFVRnFRaXhGUVVFeVFpeERRVUV6UWp0TlFVTlNMRWxCUVVNc1EwRkJRU3hSUVVGRUxFZEJRVms3VFVGRFdpeEpRVUZETEVOQlFVRXNWMEZCUkN4SlFVRm5RanRCUVVWb1FpeGhRVUZOTEVsQlFVTXNRMEZCUVN4WFFVRkVMRWxCUVdkQ0xFMUJRVTBzUTBGQlF5eFJRVUUzUWp0UlFVVkRMRWxCUVVNc1EwRkJRU3hYUVVGRUxFbEJRV2RDTEUxQlFVMHNRMEZCUXp0UlFVTjJRaXhKUVVGRExFTkJRVUVzU1VGQlJDeERRVUZOTEUxQlFVMHNRMEZCUXl4UlFVRlFMRWRCUVd0Q0xFbEJRWGhDTzAxQlNFUTdZVUZMUVN4TlFVRk5MRU5CUVVNc2NVSkJRVkFzUTBGQk5rSXNRMEZCUVN4VFFVRkJMRXRCUVVFN1pVRkJRU3hUUVVGRExFbEJRVVE3YVVKQlFWVXNTMEZCUXl4RFFVRkJMRmxCUVVRc1EwRkJZeXhKUVVGa08xRkJRVlk3VFVGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVRkQ08wbEJXR0U3TzNGQ1FXTmtMRXRCUVVFc1IwRkJUeXhUUVVGQk8wMUJSVTRzU1VGQlJ5eEpRVUZETEVOQlFVRXNTVUZCUkN4RFFVRkJMRU5CUVVnN1VVRkZReXhKUVVGRExFTkJRVUVzVVVGQlJDeEhRVUZuUWl4SlFVRkJMRWxCUVVFc1EwRkJRU3hEUVVGTkxFTkJRVU1zVDBGQlVDeERRVUZCTzFGQlEyaENMRWxCUVVNc1EwRkJRU3hYUVVGRUxFZEJRV1U3WlVGRFppeEpRVUZETEVOQlFVRXNXVUZCUkN4RFFVRmpMRWxCUVVNc1EwRkJRU3hSUVVGbUxFVkJTa1E3TzBsQlJrMDdPenM3T3p0RlFWZFNMRU5CUVVFc1EwRkJSU3hUUVVGQk8xZEJSVVFzUTBGQlFTeERRVUZGTEZOQlFVWXNRMEZCV1N4RFFVRkRMRWxCUVdJc1EwRkJhMElzVFVGQmJFSXNSVUZCTUVJc1UwRkJRVHRCUVVWNlFpeFZRVUZCTzAxQlFVRXNUVUZCUVN4SFFVRmhMRWxCUVVFc1RVRkJRU3hEUVVGUExFbEJRVkE3WVVGRFlpeE5RVUZOTEVOQlFVTXNTMEZCVUN4RFFVRkJPMGxCU0hsQ0xFTkJRVEZDTEVOQlMwTXNRMEZCUXl4TlFVeEdMRU5CUzFNc1ZVRk1WQ3hEUVV0dlFpeERRVUZETEU5QlRISkNMRU5CU3paQ0xFMUJURGRDTzBWQlJrTXNRMEZCUmp0QlFYQmlRVHM3TzBGRFJVRTdSVUZCVFN4SlFVRkRMRU5CUVVFN1FVRkZUaXhSUVVGQk96dEpRVUZCTEZGQlFVRXNSMEZCVnp0TlFVVldMRlZCUVVFc1JVRkJXU3hKUVVaR08wMUJSMVlzVTBGQlFTeEZRVUZYTEVsQlNFUTdUVUZKVml4WFFVRkJMRVZCUVdFc1NVRktTRHROUVV0V0xGRkJRVUVzUlVGQlZTeERRVXhCTzAxQlRWWXNUMEZCUVN4RlFVRlRMRU5CVGtNN1RVRlBWaXhUUVVGQkxFVkJRVmNzUTBGUVJEdE5RVkZXTEZOQlFVRXNSVUZCVnl4SFFWSkVPMDFCVTFZc1VVRkJRU3hGUVVGVkxFVkJWRUU3VFVGVlZpeEpRVUZCTEVWQlFVMHNSMEZXU1R0TlFWbFdMRk5CUVVFc1JVRkJWeXhKUVZwRU8wMUJZVllzV1VGQlFTeEZRVUZqTEVsQllrbzdUVUZqVml4VFFVRkJMRVZCUVZjc1JVRmtSRHROUVdWV0xGbEJRVUVzUlVGQll5eEZRV1pLTzAxQlowSldMRlZCUVVFc1JVRkJXU3hOUVdoQ1JqdE5RV2xDVml4aFFVRkJMRVZCUVdVc1MwRnFRa3c3T3p0SlFXOUNXQ3hSUVVGQkxFZEJRVmM3VFVGRlZpeFBRVUZCTEVWQlFWTXNZVUZHUXpzN08wbEJVVVVzWTBGQlF5eFBRVUZFTEVWQlFWVXNUMEZCVmp0QlFVbGFMRlZCUVVFN1RVRkJRU3hIUVVGQkxFZEJRVTBzUTBGQlF5eERRVUZETEUxQlFVWXNRMEZCVXl4RlFVRlVMRVZCUVdFc1VVRkJZaXhGUVVGMVFpeFBRVUYyUWp0TlFVVk9MRWxCUVVNc1EwRkJRU3hWUVVGRUxFZEJRV01zUjBGQlJ5eERRVUZETzAxQlEyeENMRWxCUVVNc1EwRkJRU3hUUVVGRUxFZEJRV0VzUjBGQlJ5eERRVUZETzAxQlEycENMRWxCUVVNc1EwRkJRU3hUUVVGRUxFZEJRV2xDTEVsQlFVRXNVMEZCUVN4RFFVRkJPMDFCUjJwQ0xFbEJRVU1zUTBGQlFTeFRRVUZFTEVkQlFXRXNSMEZCUnl4RFFVRkRPMDFCUTJwQ0xFbEJRVU1zUTBGQlFTeFpRVUZFTEVkQlFXZENMRWRCUVVjc1EwRkJRenROUVVOd1FpeEpRVUZETEVOQlFVRXNXVUZCUkN4SFFVRm5RaXhIUVVGSExFTkJRVU03VFVGRGNFSXNTVUZCUXl4RFFVRkJMRk5CUVVRc1IwRkJZU3hIUVVGSExFTkJRVU03VFVGRGFrSXNTVUZCUXl4RFFVRkJMR0ZCUVVRc1IwRkJhVUlzUjBGQlJ5eERRVUZETzAxQlEzSkNMRWxCUVVNc1EwRkJRU3hWUVVGRUxFZEJRV01zUjBGQlJ5eERRVUZETzAxQlMyeENMRWxCUVVNc1EwRkJRU3hMUVVGRUxFZEJRVk1zUTBGQlFTeERRVUZGTEU5QlFVWXNRMEZCVlN4RFFVRkRMRWxCUVZnc1EwRkJaMElzVVVGQmFFSTdUVUZEVkN4SlFVRkRMRU5CUVVFc1RVRkJSQ3hIUVVGVkxFTkJRVUVzUTBGQlJTeFBRVUZHTEVOQlFWVXNRMEZCUXl4SlFVRllMRU5CUVdkQ0xGTkJRV2hDTzAxQlExWXNTVUZCUXl4RFFVRkJMRTlCUVVRc1IwRkJWeXhEUVVGQkxFTkJRVVVzVDBGQlJpeERRVUZWTEVOQlFVTXNTVUZCV0N4RFFVRm5RaXhQUVVGb1FqdE5RVU5ZTEVsQlFVTXNRMEZCUVN4UlFVRkVMRWRCUVZrc1EwRkJRU3hEUVVGRkxFOUJRVVlzUTBGQlZTeERRVUZETEVsQlFWZ3NRMEZCWjBJc1VVRkJhRUk3VFVGRFdpeEpRVUZETEVOQlFVRXNXVUZCUkN4SFFVRm5RaXhEUVVGQkxFTkJRVVVzVDBGQlJpeERRVUZWTEVOQlFVTXNTVUZCV0N4RFFVRm5RaXhaUVVGb1FqdE5RVWRvUWl4SlFVRkRMRU5CUVVFc1UwRkJVeXhEUVVGRExFOUJRVmdzUTBGQmJVSXNTVUZCUXl4RFFVRkJMRmxCUVhCQ0xFVkJRV3RETEVsQlFVTXNRMEZCUVN4TFFVRnVRenROUVVWQkxFbEJRVU1zUTBGQlFTeE5RVUZQTEVOQlFVRXNRMEZCUVN4RFFVRkZMRU5CUVVNc1UwRkJXQ3hIUVVGMVFpeEpRVUZETEVOQlFVRXNUVUZCVHl4RFFVRkJMRU5CUVVFc1EwRkJSU3hEUVVGRE8wMUJSV3hETEVOQlFVRXNRMEZCUlN4SlFVRkRMRU5CUVVFc1MwRkJTQ3hEUVVGVExFTkJRVU1zVDBGQlZpeERRVUZyUWl4RFFVRkJMRk5CUVVFc1MwRkJRVHRsUVVGQkxGTkJRVU1zUzBGQlJEdHBRa0ZCVnl4TFFVRkRMRU5CUVVFc1MwRkJSQ3hEUVVGUExFdEJRVkE3VVVGQldEdE5RVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJiRUk3VFVGSFFTeERRVUZCTEVOQlFVVXNTVUZCUXl4RFFVRkJMRTlCUVVnc1EwRkJWeXhEUVVGRExFdEJRVm9zUTBGQmJVSXNRMEZCUVN4VFFVRkJMRXRCUVVFN1pVRkJRU3hUUVVGQk8xVkJSV3hDTEV0QlFVTXNRMEZCUVN4SlFVRkVMRU5CUVVFN2FVSkJRMEVzUzBGQlF5eERRVUZCTEZWQlFVUXNRMEZCUVR0UlFVaHJRanROUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCYmtJN1RVRk5RU3hEUVVGQkxFTkJRVVVzU1VGQlF5eERRVUZCTEZGQlFVZ3NRMEZCV1N4RFFVRkRMRXRCUVdJc1EwRkJiMElzUTBGQlFTeFRRVUZCTEV0QlFVRTdaVUZCUVN4VFFVRkJPMmxDUVVWdVFpeExRVUZETEVOQlFVRXNWMEZCUkN4RFFVRkJPMUZCUm0xQ08wMUJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRndRanROUVU5QkxFbEJRVU1zUTBGQlFTeFJRVUZFTEVkQlFWa3NSMEZCUnl4RFFVRkRPMDFCUjJoQ0xFbEJRVU1zUTBGQlFTeEpRVUZFTEVkQlFWRXNSMEZCUnl4RFFVRkRPMDFCUlZvc1NVRkJReXhEUVVGQkxGRkJRVVFzUjBGQldTeEhRVUZITEVOQlFVTTdUVUZEYUVJc1NVRkJReXhEUVVGQkxFbEJRVVFzUjBGQlVTeEpRVUZKTEVOQlFVTXNTMEZCVEN4RFFVRlhMRU5CUVVzc1NVRkJRU3hKUVVGQkxFTkJRVUVzUTBGQlRDeERRVUZaTEVOQlFVTXNUMEZCWWl4RFFVRkJMRU5CUVVFc1IwRkJlVUlzU1VGQmNFTXNRMEZCUVN4SFFVRTBReXhKUVVGRExFTkJRVUU3VFVGRmNrUXNTVUZCUXl4RFFVRkJMRXRCUVVRc1EwRkJRVHROUVVOQkxFbEJRVU1zUTBGQlFTeEpRVUZFTEVkQlFWRXNTVUZCU1N4RFFVRkRMRWRCUVV3c1EwRkJVeXhKUVVGRExFTkJRVUVzU1VGQlJDeEhRVUZSTEVkQlFVY3NRMEZCUXl4UFFVRnlRaXhGUVVFNFFpeERRVUU1UWp0TlFVZFNMRWxCUVVNc1EwRkJRU3hQUVVGRUxFTkJRVUU3U1VFMVJGazdPMjFDUVc5RllpeFpRVUZCTEVkQlFXTXNVMEZCUXl4SlFVRkVMRVZCUVU4c1NVRkJVRHRCUVVWaUxGVkJRVUU3VFVGQlFTeEpRVUZCTEd0RVFVRm5ReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0TlFVVnFSQ3hKUVVGSExHTkJRVUVzU1VGQlZTeFBRVUZQTEVsQlFWQXNTMEZCWjBJc1VVRkJOMEk3UVVGRlF5eGhRVUZCTEZOQlFVRTdPMVZCUTBNc1NVRkJRU3hIUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZNTEVOQlFXRXNSMEZCUVN4SFFVRk5MRU5CUVc1Q0xFVkJRWE5DTEVOQlFYUkNPMEZCUkZJc1UwRkdSRHM3WVVGTFFUdEpRVlJoT3p0dFFrRmhaQ3hMUVVGQkxFZEJRVThzVTBGQlF5eEpRVUZFTEVWQlFVOHNTVUZCVUR0QlFVVk9MRlZCUVVFN1RVRkJRU3hMUVVGQkxFZEJRVkVzUTBGQlFTeERRVUZGTEdGQlFVWXNRMEZEVUN4RFFVRkRMRkZCUkUwc1EwRkRSeXhQUVVSSUxFTkJSVkFzUTBGQlF5eFJRVVpOTEVOQlJVY3NZMEZHU0N4RFFVZFFMRU5CUVVNc1NVRklUU3hEUVVkRUxFbEJRVU1zUTBGQlFTeFpRVUZFTEVOQlFXTXNTVUZCWkN4RlFVRnZRaXhKUVVGd1FpeERRVWhETzJGQlMxSXNRMEZCUVN4RFFVRkZMRWxCUVVNc1EwRkJRU3hOUVVGSUxFTkJRME1zUTBGQlF5eE5RVVJHTEVOQlExTXNTMEZFVkR0SlFWQk5PenR0UWtGVlVDeExRVUZCTEVkQlFVOHNVMEZCUXl4SlFVRkVMRVZCUVU4c1NVRkJVRHRoUVVWT0xFdEJRVUVzUTBGQlRTeEpRVUZETEVOQlFVRXNXVUZCUkN4RFFVRmpMRWxCUVdRc1JVRkJiMElzU1VGQmNFSXNRMEZCVGp0SlFVWk5PenR0UWtGUFVDeExRVUZCTEVkQlFVOHNVMEZCUVR0aFFVTk9MRWxCUVVNc1EwRkJRU3hKUVVGRUxFZEJRVkVzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4RFFVRkxMRWxCUVVFc1NVRkJRU3hEUVVGQkxFTkJRVXdzUTBGQldTeERRVUZETEU5QlFXSXNRMEZCUVN4RFFVRkJMRWRCUVhsQ0xFbEJRWEJETzBsQlJFWTdPMjFDUVVsUUxFbEJRVUVzUjBGQlRTeFRRVUZCTzBGQlJVd3NWVUZCUVR0TlFVRkJMRWRCUVVFc1IwRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVOQlFVc3NTVUZCUVN4SlFVRkJMRU5CUVVFc1EwRkJUQ3hEUVVGWkxFTkJRVU1zVDBGQllpeERRVUZCTEVOQlFVRXNSMEZCZVVJc1NVRkJjRU03VFVGRFRpeFBRVUZCTEVkQlFWVXNRMEZCUVN4RFFVRkZMRWxCUVVNc1EwRkJRU3hMUVVGSUxFTkJRVk1zUTBGQlF5eEhRVUZXTEVOQlFVRTdUVUZGVml4UFFVRkJMRWRCUVZVc1QwRkJUeXhEUVVGRExFdEJRVklzUTBGQll5eFhRVUZrTzAxQlNWWXNTVUZCUnl4cFFrRkJRU3hKUVVGaExHOUNRVUZvUWp0UlFVTkRMRTlCUVVFc1IwRkJWU3hQUVVGUkxFTkJRVUVzUTBGQlFUdEJRVVZzUWl4aFFVRkJMR0ZCUVVFN08xVkJSVU1zU1VGQlJ5eFBRVUZQTEVOQlFVTXNWMEZCVWl4RFFVRkJMRU5CUVVFc1MwRkJlVUlzUTBGQlF5eERRVUZETEZkQlFVWXNRMEZCUVN4RFFVRTFRanRaUVVWRExFbEJRVUVzUjBGQlR5eEpRVUZMTEVOQlFVRXNRMEZCUVR0WlFVVmFMRWxCUVVjc1QwRkJUeXhKUVVGUUxFdEJRV2RDTEZWQlFXNUNPMk5CUTBNc1NVRkJTU3hEUVVGRExFbEJRVXdzUTBGQlZTeEpRVUZXTzBGQlEwRXNjVUpCUmtRN1lVRktSRHM3UVVGR1JEdFJRVlZCTEVsQlFVTXNRMEZCUVN4TFFVRkVMRU5CUVU4c1lVRkJVQ3hGUVVGelFqdFZRVUZETEUxQlFVRXNSVUZCVVN4UFFVRlVPMU5CUVhSQ08wRkJRMEVzWlVGa1JEczdUVUZwUWtFc1NVRkJSeXhKUVVGRExFTkJRVUVzVTBGQlNqdFJRVVZETEVsQlFVY3NUMEZCVHl4RFFVRkRMRTFCUVZJc1IwRkJhVUlzU1VGQlF5eERRVUZCTEZOQlFYSkNPMVZCUTBNc1NVRkJReXhEUVVGQkxFdEJRVVFzUTBGQlR5eFZRVUZRTEVWQlFXMUNPMWxCUVVNc1MwRkJRU3hGUVVGUExFbEJRVU1zUTBGQlFTeFRRVUZVTzFkQlFXNUNPMEZCUTBFc2FVSkJSa1E3TzFGQlNVRXNTVUZCUnl4UFFVRlBMRU5CUVVNc1RVRkJVaXhIUVVGcFFpeEpRVUZETEVOQlFVRXNVMEZCY2tJN1ZVRkRReXhMUVVGQkxFTkJRVTBzVTBGQlRpeEZRVUZwUWp0WlFVRkRMRXRCUVVFc1JVRkJUeXhKUVVGRExFTkJRVUVzVTBGQlZEdFhRVUZxUWp0QlFVTkJMR2xDUVVaRU96dFJRVWxCTEVsQlFVY3NTVUZCUXl4RFFVRkJMRWxCUVVRc1IwRkJVU3hKUVVGRExFTkJRVUVzVVVGQlZDeEhRVUZ2UWl4SFFVRjJRanRWUVVORExFbEJRVU1zUTBGQlFTeExRVUZFTEVOQlFVOHNWVUZCVUR0QlFVTkJMR2xDUVVaRU96dFJRVXRCTEVsQlFVRXNSMEZCVHl4RFFVRkRMRU5CUVVNc1RVRkJSaXhEUVVGVExFVkJRVlFzUlVGQllTeEpRVUZETEVOQlFVRXNVMEZCWkN4RlFVRjVRanRWUVVGRExFOUJRVUVzUlVGQlV5eERRVUZCTEVOQlFVVXNTVUZCUXl4RFFVRkJMRXRCUVVnc1EwRkJVeXhEUVVGRExFZEJRVllzUTBGQlFTeERRVUZXTzFOQlFYcENPMUZCUlZBc1EwRkJReXhEUVVGRExFbEJRVVlzUTBGQlR6dFZRVVZPTEVkQlFVRXNSVUZCU3l4SlFVRkRMRU5CUVVFc1ZVRkdRVHRWUVVkT0xFOUJRVUVzUlVGQlV5eERRVUZCTEZOQlFVRXNTMEZCUVR0dFFrRkJRU3hUUVVGRExFbEJRVVE3Y1VKQlFWVXNTMEZCUXl4RFFVRkJMRTFCUVVRc1EwRkJVU3hKUVVGU08xbEJRVlk3VlVGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SlFVRkJMRU5CU0VnN1ZVRkpUaXhKUVVGQkxFVkJRVTBzU1VGS1FUdFZRVXRPTEZGQlFVRXNSVUZCVlN4TlFVeEtPMVZCVFU0c1RVRkJRU3hGUVVGUkxFbEJRVU1zUTBGQlFTeFZRVTVJTzFOQlFWQTdVVUZUUVN4SlFVRkRMRU5CUVVFc1NVRkJSQ3hIUVVGUk8yVkJRMUlzUTBGQlFTeERRVUZGTEVsQlFVTXNRMEZCUVN4UFFVRklMRU5CUVZjc1EwRkJReXhKUVVGYUxFTkJRV2xDTEUxQlFXcENMRVZCUVhsQ0xFbEJRVU1zUTBGQlFTeEpRVUZFTEVkQlFWRXNTVUZCUXl4RFFVRkJMRkZCUVd4RExFVkJNMEpFTzA5QlFVRXNUVUZCUVR0bFFTdENReXhKUVVGRExFTkJRVUVzUzBGQlJDeERRVUZQTEZsQlFWQXNSVUV2UWtRN08wbEJNVUpMT3p0dFFrRTBSRTRzVDBGQlFTeEhRVUZUTEZOQlFVRTdRVUZGVWl4VlFVRkJPMDFCUVVFc1NVRkJSeXhKUVVGRExFTkJRVUVzV1VGQlNqdFJRVVZETEVsQlFVRXNSMEZCVHl4RFFVRkRMRU5CUVVNc1RVRkJSaXhEUVVGVExFVkJRVlFzUlVGQllTeEpRVUZETEVOQlFVRXNXVUZCWkN4RlFVRTBRanRWUVVGRExFbEJRVUVzUlVGQlRTeEpRVUZETEVOQlFVRXNTVUZCVWp0VFFVRTFRanRSUVVWUUxFTkJRVU1zUTBGQlF5eEpRVUZHTEVOQlFVODdWVUZGVGl4SFFVRkJMRVZCUVVzc1NVRkJReXhEUVVGQkxGVkJSa0U3VlVGSFRpeEpRVUZCTEVWQlFVMHNTVUZJUVR0VlFVbE9MRkZCUVVFc1JVRkJWU3hEUVVGQkxGTkJRVUVzUzBGQlFUdHRRa0ZCUVN4VFFVRkJPM0ZDUVVGSExFdEJRVU1zUTBGQlFTeFZRVUZFTEVOQlFVRTdXVUZCU0R0VlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzUTBGS1NqdFZRVXRPTEU5QlFVRXNSVUZCVXl4RFFVRkJMRk5CUVVFc1MwRkJRVHR0UWtGQlFTeFRRVUZETEVsQlFVUTdjVUpCUVZVc1MwRkJReXhEUVVGQkxGVkJRVVFzUTBGQldTeEpRVUZhTzFsQlFWWTdWVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFTkJURWc3VlVGTlRpeFJRVUZCTEVWQlFWVXNUVUZPU2p0VlFVOU9MRTFCUVVFc1JVRkJVU3hKUVVGRExFTkJRVUVzWVVGUVNEdFRRVUZRTzJWQlZVRXNTVUZCUXl4RFFVRkJMRXRCUVVRc1EwRkJRU3hGUVdSRU8wOUJRVUVzVFVGQlFUdGxRV2xDUXl4SlFVRkRMRU5CUVVFc1MwRkJSQ3hEUVVGUExHVkJRVkFzUlVGcVFrUTdPMGxCUmxFN08yMUNRWFZDVkN4WFFVRkJMRWRCUVdFc1UwRkJRVHRoUVVWYUxFTkJRVUVzUTBGQlJTeEpRVUZETEVOQlFVRXNUVUZCU0N4RFFVRlZMRU5CUVVNc1MwRkJXQ3hEUVVGQk8wbEJSbGs3TzIxQ1FVdGlMRlZCUVVFc1IwRkJXU3hUUVVGQk8yRkJSVmdzUTBGQlFTeERRVUZGTEVsQlFVTXNRMEZCUVN4TFFVRklMRU5CUVZNc1EwRkJReXhIUVVGV0xFTkJRV01zUlVGQlpEdEpRVVpYT3p0dFFrRk5XaXhWUVVGQkxFZEJRVmtzVTBGQlF5eEpRVUZFTzJGQlExZ3NRMEZCUVN4RFFVRkZMRk5CUVVZc1EwRkRReXhEUVVGRExFbEJSRVlzUTBGRFR5eEpRVUZETEVOQlFVRXNVMEZCVXl4RFFVRkRMRTFCUVZnc1EwRkJhMElzU1VGQlNTeERRVUZETEU5QlFYWkNMRU5CUkZBc1EwRkZReXhEUVVGRExFMUJSa1lzUTBGSlJTeERRVUZCTEVOQlFVVXNhVUpCUVVZc1EwRkRReXhEUVVGRExGRkJSRVlzUTBGRFZ5eFhRVVJZTEVOQlJVTXNRMEZCUXl4SlFVWkdMRU5CUlU4c1RVRkdVQ3hGUVVWbExFbEJRVWtzUTBGQlF5eEpRVVp3UWl4RFFVcEdPMGxCUkZjN08yMUNRVmxhTEZWQlFVRXNSMEZCV1N4VFFVRkRMRWxCUVVRN1FVRkZXQ3hWUVVGQk8wMUJRVUVzUjBGQlFTeEhRVUZOTEVOQlFVRXNRMEZCUlN4aFFVRkdMRU5CUTB3c1EwRkJReXhSUVVSSkxFTkJRMHNzUzBGRVRDeERRVVZNTEVOQlFVTXNVVUZHU1N4RFFVVkxMR05CUmt3c1EwRkhUQ3hEUVVGRExFbEJTRWtzUTBGSFF5eE5RVWhFTEVWQlIxTXNTVUZCU1N4RFFVRkRMRWxCU0dRc1EwRkpUQ3hEUVVGRExFbEJTa2tzUTBGSlF5eFJRVXBFTEVWQlNWY3NTVUZCU1N4RFFVRkRMRTFCU21oQ08wMUJUVTRzU1VGQlFTeEhRVUZQTEVOQlFVRXNRMEZCUlN4aFFVRkdMRU5CUTA0c1EwRkJReXhSUVVSTExFTkJRMGtzVlVGRVNqdE5RVWRRTEVsQlFVRXNSMEZCVHl4RFFVRkJMRU5CUVVVc1lVRkJSaXhEUVVOT0xFTkJRVU1zVVVGRVN5eERRVU5KTEZkQlJFbzdUVUZIVUN4SlFVRkhMSE5DUVVGSU8xRkJSVU1zU1VGQlFTeEhRVUZQTEVOQlFVRXNRMEZCUlN4VFFVRkdMRU5CUTA0c1EwRkJReXhKUVVSTExFTkJRMEVzVFVGRVFTeEZRVU5STEVsQlFVTXNRMEZCUVN4WlFVRkVMRU5CUVdNc1NVRkJTU3hEUVVGRExFMUJRVzVDTEVOQlJGSXNRMEZGVGl4RFFVRkRMRkZCUmtzc1EwRkZTU3hoUVVaS0xFVkJSbEk3VDBGQlFTeE5RVUZCTzFGQlQwTXNTVUZCUVN4SFFVRlBMRU5CUVVFc1EwRkJSU3hoUVVGR0xFTkJRMDRzUTBGQlF5eFJRVVJMTEVOQlEwa3NZVUZFU2l4RlFWQlNPenROUVZsQkxFbEJRVUVzUjBGQlR5eERRVUZCTEVOQlFVVXNZVUZCUml4RFFVTk9MRU5CUVVNc1VVRkVTeXhEUVVOSkxHTkJSRW83VFVGTlVDeE5RVUZCTEVkQlFWTXNRMEZCUVN4RFFVRkZMR0ZCUVVZc1EwRkRVaXhEUVVGRExGRkJSRThzUTBGRFJTeG5Ra0ZFUml4RFFVVlNMRU5CUVVNc1VVRkdUeXhEUVVWRkxHRkJSa1lzUTBGSFVpeERRVUZETEVsQlNFOHNRMEZIUml4TFFVaEZMRVZCUjBzc1NVRkJTU3hEUVVGRExFMUJTRlk3VFVGTlZDeE5RVUZCTEVkQlFWTXNRMEZCUVN4RFFVRkZMRk5CUVVZc1EwRkJXU3hEUVVGRExFMUJRV0lzUTBGRlVpeERRVUZCTEVOQlFVVXNiVUpCUVVZc1EwRkRReXhEUVVGRExGRkJSRVlzUTBGRFZ5eFhRVVJZTEVOQlJVTXNRMEZCUXl4SlFVWkdMRU5CUlU4c1NVRkJTU3hEUVVGRExFMUJSbG9zUTBGR1VUdE5RVTlVTEU5QlFVRXNSMEZCVlN4SlFVRkRMRU5CUVVFc1ZVRkJSQ3hEUVVGWkxFbEJRVm83VFVGSlZpeERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1RVRkJVaXhEUVVGbExFMUJRV1lzUTBGQmMwSXNRMEZCUXl4TlFVRjJRaXhEUVVFNFFpeE5RVUU1UWp0TlFVTkJMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eE5RVUZTTEVOQlFXVXNUMEZCWmp0TlFVTkJMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eE5RVUZTTEVOQlFXVXNTVUZCWmp0TlFVTkJMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eE5RVUZTTEVOQlFXVXNTVUZCWmp0TlFVTkJMRU5CUVVFc1EwRkJSU3hIUVVGR0xFTkJRVTBzUTBGQlF5eE5RVUZRTEVOQlFXTXNTVUZCWkN4RFFVRnRRaXhEUVVGRExFMUJRWEJDTEVOQlFUSkNMRWxCUVROQ08yRkJRMEVzUTBGQlFTeERRVUZGTEVsQlFVTXNRMEZCUVN4TlFVRklMRU5CUVZVc1EwRkJReXhOUVVGWUxFTkJRV3RDTEVkQlFXeENPMGxCZEVSWE96dHRRa0Y1UkZvc1lVRkJRU3hIUVVGbExGTkJRVU1zVDBGQlJDeEZRVUZWTEVsQlFWWTdZVUZGWkN4RFFVRkJMRU5CUVVVc1QwRkJSaXhEUVVGVkxFTkJRVU1zU1VGQldDeERRVUZuUWl4bFFVRm9RaXhEUVVGblF5eERRVUZETEUxQlFXcERMRU5CUlVNc1NVRkJReXhEUVVGQkxGVkJRVVFzUTBGQldTeEpRVUZhTEVOQlJrUTdTVUZHWXpzN2JVSkJVMllzVlVGQlFTeEhRVUZaTEZOQlFVTXNTVUZCUkR0QlFVZFlMRlZCUVVFN1RVRkJRU3hOUVVGQkxFZEJRVk1zUTBGQlF5eEpRVUZETEVOQlFVRXNUVUZCVHl4RFFVRkJMRU5CUVVFc1EwRkJSU3hEUVVGRExGbEJRVmdzUjBGQk1FSXNTVUZCUXl4RFFVRkJMRTFCUVU4c1EwRkJRU3hEUVVGQkxFTkJRVVVzUTBGQlF5eFRRVUZ5UXl4SFFVRnBSQ3hKUVVGRExFTkJRVUVzVFVGQlR5eERRVUZCTEVOQlFVRXNRMEZCUlN4RFFVRkRMRmxCUVRkRUxFTkJRVUVzU1VGQk9FVTdUVUZEZGtZc1QwRkJRU3hIUVVGVkxFTkJRVUVzUTBGQlJTeEpRVUZETEVOQlFVRXNUVUZCU0N4RFFVRlZMRU5CUVVNc1VVRkJXQ3hEUVVGQkxFTkJRWEZDTEVOQlFVTXNTVUZCZEVJc1EwRkJRVHROUVVsV0xFbEJRVWNzVDBGQlR5eERRVUZETEUxQlFWSXNTMEZCYTBJc1EwRkJiRUlzU1VGQmRVSXNRMEZCUXl4RFFVRkJMRU5CUVVVc1QwRkJSaXhEUVVGVkxFTkJRVU1zUlVGQldDeERRVUZqTEdWQlFXUXNRMEZCTTBJN1VVRkZReXhKUVVGRExFTkJRVUVzVlVGQlJDeERRVUZaTEVsQlFWb3NSVUZHUkR0UFFVRkJMRTFCUVVFN1VVRkxReXhKUVVGQkxFZEJRVThzUTBGQlFTeERRVUZGTEU5QlFVWXNRMEZCVlN4RFFVRkRMRWxCUVZnc1EwRkJaMElzVFVGQmFFSTdVVUZEVUN4TlFVRkJMRWRCUVZNc1EwRkJRU3hEUVVGRkxFOUJRVVlzUTBGQlZTeERRVUZETEVsQlFWZ3NRMEZCWjBJc1VVRkJhRUk3VVVGRlZDeEpRVUZITEUxQlFVRXNTMEZCVlN4SlFVRkpMRU5CUVVNc1RVRkJaaXhKUVVFd1FpeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRk1MRWRCUVZrc1NVRkJZaXhEUVVGQkxFbEJRWE5DTEVsQlFVTXNRMEZCUVN4SlFVRndSRHRWUVVWRExFbEJRVU1zUTBGQlFTeGhRVUZFTEVOQlFXVXNUMEZCWml4RlFVRjNRaXhKUVVGNFFpeEZRVVpFTzFOQlFVRXNUVUZCUVR0VlFVdERMRWxCUVVNc1EwRkJRU3hWUVVGRUxFTkJRVmtzU1VGQldpeEZRVXhFTzFOQlVrUTdPMDFCYVVKQkxFbEJRVWNzVFVGQlNEdGxRVU5ETEVsQlFVTXNRMEZCUVN4TlFVRlBMRU5CUVVFc1EwRkJRU3hEUVVGRkxFTkJRVU1zVTBGQldDeEhRVUYxUWl4SlFVRkRMRU5CUVVFc1RVRkJUeXhEUVVGQkxFTkJRVUVzUTBGQlJTeERRVUZETEZsQlFWZ3NSMEZCTUVJc1JVRkViRVE3TzBsQmVrSlhPenR0UWtFclFsb3NUVUZCUVN4SFFVRlJMRk5CUVVNc1NVRkJSRHROUVVWUUxFbEJRV3RETEVsQlFVa3NRMEZCUXl4TlFVRk1MRXRCUVdVc1QwRkJha1E3WlVGQlFTeEpRVUZETEVOQlFVRXNTMEZCUkN4RFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGYUxFVkJRVzlDTEVsQlFVa3NRMEZCUXl4SlFVRjZRaXhGUVVGQk96dEpRVVpQT3p0dFFrRkxVaXhWUVVGQkxFZEJRVmtzVTBGQlF5eEpRVUZFTzBGQlJWZ3NWVUZCUVR0QlFVRkJPMWRCUVVFc2MwTkJRVUU3TzNGQ1FVTkRMRWxCUVVNc1EwRkJRU3hWUVVGRUxFTkJRVmtzVDBGQldqdEJRVVJFT3p0SlFVWlhPenR0UWtGTFdpeFZRVUZCTEVkQlFWa3NVMEZCUVR0aFFVVllMRlZCUVVFc1EwRkJWeXhEUVVGQkxGTkJRVUVzUzBGQlFUdGxRVUZCTEZOQlFVRTdhVUpCUlZZc1MwRkJReXhEUVVGQkxFOUJRVVFzUTBGQlFUdFJRVVpWTzAxQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGWUxFVkJSMFVzU1VGQlF5eERRVUZCTEZGQlFVUXNSMEZCV1N4SlFVaGtPMGxCUmxjN08yMUNRVkZhTEV0QlFVRXNSMEZCVHl4VFFVRkRMRXRCUVVRN1RVRkZUaXhKUVVGSExFdEJRVXNzUTBGQlF5eExRVUZPTEV0QlFXVXNSVUZCYkVJN1VVRkRReXhKUVVGRExFTkJRVUVzU1VGQlJDeERRVUZCTzJWQlEwRXNTVUZCUXl4RFFVRkJMRlZCUVVRc1EwRkJRU3hGUVVaRU96dEpRVVpOT3p0dFFrRlRVQ3haUVVGQkxFZEJRV01zVTBGQlF5eEpRVUZFTzBGQlJXSXNZVUZCVHl4SlFVRkRMRU5CUVVFc1UwRkJVeXhEUVVGRExFOUJRVmdzUTBGQmJVSXNVVUZCYmtJc1JVRkJOa0lzU1VGQk4wSTdTVUZHVFRzN096czdPMFZCYjBKbUxFTkJRVUVzUTBGQlJTeFRRVUZCTzBGQlJVUXNVVUZCUVR0SlFVRkJMRTFCUVVFc1IwRkJVeXhUUVVGQk8wRkJSVklzVlVGQlFUdE5RVUZCTEVkQlFVRXNSMEZCVFN4SlFVRkpMRU5CUVVNc1MwRkJUQ3hEUVVGWExFTkJRVXNzU1VGQlFTeEpRVUZCTEVOQlFVRXNRMEZCVEN4RFFVRlpMRU5CUVVNc1QwRkJZaXhEUVVGQkxFTkJRVUVzUjBGQmVVSXNTVUZCY0VNN1RVRkZUaXhEUVVGQkxFTkJRVVVzYTBKQlFVWXNRMEZCY1VJc1EwRkJReXhKUVVGMFFpeERRVUV5UWl4VFFVRkJPMEZCUlRGQ0xGbEJRVUU3VVVGQlFTeEpRVUZCTEVkQlFVOHNVVUZCUVN4RFFVRlRMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eEpRVUZTTEVOQlFXRXNUVUZCWWl4RFFVRlVPMUZCUTFBc1VVRkJRU3hIUVVGWExFZEJRVUVzUjBGQlRUdFJRVWxxUWl4SlFVRkhMRkZCUVVFc1IwRkJWeXhGUVVGa08xVkJSVU1zU1VGQlFTeEhRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkdiRUk3VTBGQlFTeE5RVUZCTzFWQlMwTXNTVUZCUVN4SFFVRlBMRTFCUVUwc1EwRkJReXhsUVVGUUxFTkJRWFZDTEZGQlFYWkNMRVZCVEZJN08yVkJUMEVzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWxCUVZJc1EwRkJZU3hKUVVGQkxFZEJRVThzUjBGQlVDeEhRVUZoTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJjRU03VFVGa01FSXNRMEZCTTBJN1RVRnBRa0VzUTBGQlFTeERRVUZGTEdGQlFVWXNRMEZCWjBJc1EwRkJReXhKUVVGcVFpeERRVUZ6UWl4VFFVRkJPMEZCUlhKQ0xGbEJRVUU3VVVGQlFTeEpRVUZITEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhKUVVGU0xFTkJRV0VzVlVGQllpeERRVUZCTEV0QlFUUkNMRTFCUVM5Q08xVkJSVU1zU1VGQlFTeEhRVUZQTEZGQlFVRXNRMEZCVXl4RFFVRkJMRU5CUVVVc1NVRkJSaXhEUVVGUExFTkJRVU1zU1VGQlVpeERRVUZoTEUxQlFXSXNRMEZCVkR0VlFVTlFMRWxCUVVFc1IwRkJUeXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTVUZCVWl4RFFVRmhMRTFCUVdJN1ZVRkRVQ3hSUVVGQkxFZEJRVmNzU1VGQlFTeEhRVUZQTzFWQlIyeENMRWxCUVVjc1VVRkJRU3hIUVVGWExFTkJRV1E3YlVKQlJVTXNRMEZCUVN4RFFVRkZMRWxCUVVZc1EwRkRReXhEUVVGRExFbEJSRVlzUTBGRFR5eE5RVUZOTEVOQlFVTXNWVUZCVUN4RFFVRnJRaXhSUVVGc1FpeERRVVJRTEVOQlJVTXNRMEZCUXl4UlFVWkdMRU5CUlZjc1ZVRkdXQ3hGUVVaRU8xZEJRVUVzVFVGQlFUdHRRa0ZQUXl4RFFVRkJMRU5CUVVVc1NVRkJSaXhEUVVORExFTkJRVU1zU1VGRVJpeERRVU5QTEVsQlJGQXNRMEZGUXl4RFFVRkRMRmRCUmtZc1EwRkZZeXhWUVVaa0xFVkJVRVE3VjBGUVJEczdUVUZHY1VJc1EwRkJkRUk3WVVGMVFrRXNWVUZCUVN4RFFVRlhMRTFCUVZnc1JVRkJiVUlzU1VGQmJrSTdTVUUxUTFFN1YwRTRRMVFzVFVGQlFTeERRVUZCTzBWQmFFUkRMRU5CUVVZN1FVRTVXRUU3T3p0QlEwRkJPMEZCUVVFc1RVRkJRVHM3UlVGQlFTeE5RVUZCTEVkQlFWTXNVMEZCUVR0QlFVVlNMRkZCUVVFN1NVRkJRU3hKUVVGQkxFZEJRVmNzU1VGQlFTeEpRVUZCTEVOQlFVRTdTVUZEV0N4SFFVRkJMRWRCUVUwc1NVRkJTU3hEUVVGRExFdEJRVXdzUTBGQlZ5eEpRVUZKTEVOQlFVTXNUMEZCVEN4RFFVRkJMRU5CUVVFc1IwRkJhVUlzU1VGQk5VSTdTVUZEVGl4RFFVRkJMRU5CUVVVc1pVRkJSaXhEUVVGclFpeERRVUZETEVsQlFXNUNMRU5CUVhkQ0xFbEJRVWtzUTBGQlF5eFhRVUZNTEVOQlFVRXNRMEZCZUVJN1NVRkZRU3hEUVVGQkxFTkJRVVVzV1VGQlJpeERRVUZsTEVOQlFVTXNTVUZCYUVJc1EwRkJjVUlzVTBGQlFUdEJRVVZ3UWl4VlFVRkJPMDFCUVVFc1JVRkJRU3hIUVVGTExFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4SlFVRlNMRU5CUVdFc1NVRkJZanRoUVVOTUxFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4SlFVRlNMRU5CUVdFc1RVRkJUU3hEUVVGRExGVkJRVkFzUTBGQmEwSXNTVUZCU1N4RFFVRkRMRWRCUVV3c1EwRkJVeXhGUVVGQkxFZEJRVXNzUjBGQlpDeEZRVUZ0UWl4RFFVRnVRaXhEUVVGc1FpeERRVUZpTzBsQlNHOUNMRU5CUVhKQ08xZEJUMEVzVlVGQlFTeERRVUZYTEUxQlFWZ3NSVUZCYlVJc1NVRkJia0k3UlVGaVVUczdSVUZwUWxRc1EwRkJRU3hEUVVGRkxGTkJRVUU3VjBGRFJDeE5RVUZCTEVOQlFVRTdSVUZFUXl4RFFVRkdPMEZCYWtKQk96czdRVU5CUVR0QlFVRkJMRTFCUVVFN08wVkJRVUVzVDBGQlFTeEhRVUZWT3p0RlFVZFdMRWxCUVVFc1IwRkJUeXhUUVVGRExFMUJRVVE3UVVGRlRpeFJRVUZCTzBsQlFVRXNWMEZCUVN4NVJFRkJaMFE3U1VGSmFFUXNRMEZCUVN4RFFVRkZMRTFCUVVZc1EwRkJVeXhEUVVGRExFbEJRVllzUTBGQlpTeG5Ra0ZCWml4RlFVRnBReXhUUVVGRExFdEJRVVE3WVVGRmFFTXNRMEZCUVN4RFFVRkZMRWxCUVVZc1EwRkJUeXhEUVVGRExFbEJRVklzUTBGQllTeFRRVUZpTEVOQlFYVkNMRU5CUVVNc1QwRkJlRUlzUTBGQlowTXNUVUZCYUVNN1NVRkdaME1zUTBGQmFrTTdTVUZOUVN4SlFVRkhMRmRCUVVnN1lVRkZReXhEUVVGQkxFTkJRVVVzVFVGQlJpeERRVUZUTEVOQlFVTXNTMEZCVml4RFFVRm5RanRSUVVGRExGRkJRVUVzUlVGQlZTeEpRVUZZTzFGQlFXbENMRWxCUVVFc1JVRkJUU3hKUVVGMlFqdFJRVUUyUWl4UlFVRkJMRVZCUVZVc1NVRkJka003VDBGQmFFSXNSVUZHUkR0TFFVRkJMRTFCUVVFN1lVRk5ReXhEUVVGQkxFTkJRVVVzVFVGQlJpeERRVUZUTEVOQlFVTXNTMEZCVml4RFFVRm5RanRSUVVGRExGRkJRVUVzUlVGQlZTeFJRVUZZTzFGQlFYRkNMRWxCUVVFc1JVRkJUU3hKUVVFelFqdFJRVUZwUXl4UlFVRkJMRVZCUVZVc1MwRkJNME03VDBGQmFFSXNSVUZPUkRzN1JVRmFUVHM3UlVGeFFsQXNRMEZCUVN4RFFVRkZMRk5CUVVFN1NVRkRSQ3hQUVVGQkxFZEJRVlVzUTBGQlFTeERRVUZGTEdsQ1FVRkdPMWRCUjFZc1EwRkJRU3hEUVVGRkxFOUJRVVlzUTBGQlZTeERRVUZETEVsQlFWZ3NRMEZCWjBJc1UwRkJReXhMUVVGRU8wMUJSV1lzU1VGQlJ5eExRVUZCTEV0QlFWTXNRMEZCV2p0UlFVTkRMRWxCUVVFc1EwRkJTeXhKUVVGTUxFVkJSRVE3TzAxQlIwRXNTVUZCUnl4TFFVRkJMRWRCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlVpeEhRVUZwUWl4RFFVRnNRaXhEUVVGWU8yVkJRME1zUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRVZCUVZJc1EwRkJWeXhwUWtGQldDeEZRVUU0UWl4VFFVRkRMRXRCUVVRN2FVSkJSVGRDTEVsQlFVRXNRMEZCU3l4UFFVRlJMRU5CUVVFc1MwRkJRU3hIUVVGUkxFTkJRVklzUTBGQllqdFJRVVkyUWl4RFFVRTVRaXhGUVVSRU96dEpRVXhsTEVOQlFXaENPMFZCU2tNc1EwRkJSanRCUVhoQ1FUczdPMEZEUTBFN1FVRkJRU3hOUVVGQk96dEZRVUZOTEVsQlFVTXNRMEZCUVR0QlFVVk9MRkZCUVVFN08wbEJRVUVzVVVGQlFTeEhRVUZYTzAxQlJWWXNVMEZCUVN4RlFVRlhPMUZCUlZZc1NVRkJRU3hGUVVGTkxGZEJSa2s3VVVGSFZpeEpRVUZCTEVWQlFVMHNWVUZJU1R0UlFVbFdMRWxCUVVFc1JVRkJUU3hUUVVwSk8xRkJTMVlzU1VGQlFTeEZRVUZOTEZkQlRFazdVVUZOVml4SlFVRkJMRVZCUVUwc1owSkJUa2s3VVVGUFZpeExRVUZCTEVWQlFVOHNaVUZRUnp0UlFWRldMRWxCUVVFc1JVRkJUU3haUVZKSk8wOUJSa1E3VFVGaFZpeEhRVUZCTEVWQlFVc3NNRUpCWWtzN096dEpRV3RDUlN4dFFrRkJReXhIUVVGRUxFVkJRVTBzVTBGQlRqdE5RVVZhTEVsQlFVTXNRMEZCUVN4SFFVRkVMR2xDUVVGUExFMUJRVTBzVVVGQlVTeERRVUZETzAxQlEzUkNMRWxCUVVNc1EwRkJRU3hIUVVGRUxFZEJRVThzUTBGQlF5eERRVUZETEUxQlFVWXNRMEZCVXl4RlFVRlVMRVZCUVdFc1VVRkJVU3hEUVVGRExGTkJRWFJDTEhOQ1FVRnBReXhaUVVGWkxFVkJRVGRETzBsQlNFczdPM2RDUVUxaUxFMUJRVUVzUjBGQlVTeFRRVUZETEVsQlFVUTdRVUZGVUN4VlFVRkJPMEZCUVVFN1FVRkJRU3hYUVVGQkxGRkJRVUU3TzFGQlJVTXNSMEZCUVN4SFFVRk5MRWxCUVVNc1EwRkJRU3hIUVVGSExFTkJRVU1zVDBGQlRDeERRVUZoTEZGQlFXSXNSVUZCZFVJc1EwRkJka0k3VVVGRFRpeFJRVUZCTEVkQlFWY3NOa0pCUVVFc1IwRkJaME1zUjBGQmFFTXNSMEZCYzBNc1UwRkJkRU1zUjBGQmEwUXNRMEZCYkVRc1IwRkJjMFFzVjBGQmRFUXNSMEZCYjBVc1EwRkJjRVVzUjBGQmQwVTdVVUZEYmtZc1NVRkJRU3hIUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEZGQlFXNUNPMEZCU2xJN1lVRlBRVHRKUVZSUE96dDNRa0ZYVWl4UFFVRkJMRWRCUVZNc1UwRkJReXhOUVVGRUxFVkJRVk1zVFVGQlZEdGhRVVZTTEVOQlFVRXNRMEZCUlN4TlFVRkdMRU5CUVZNc1EwRkJReXhQUVVGV0xFTkJRV3RDTzFGQlJXcENMRWxCUVVFc1JVRkJUU3hKUVVaWE8xRkJSMnBDTEU5QlFVRXNSVUZCVXl4UFFVaFJPMUZCU1dwQ0xGTkJRVUVzUlVGQlZ5eExRVXBOTzFGQlMycENMRXRCUVVFc1JVRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlRFdzdVVUZOYWtJc1QwRkJRU3hGUVVGVExFTkJRVUVzVTBGQlFTeExRVUZCTzJsQ1FVRkJMRk5CUVVFN2JVSkJRVWNzUzBGQlF5eERRVUZCTEdsQ1FVRkVMRU5CUVcxQ0xFMUJRVzVDTzFWQlFVZzdVVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFTkJUbEU3VVVGUGFrSXNVVUZCUVN4RlFVRlZMREJLUVZCUE8wOUJRV3hDTzBsQlJsRTdPM2RDUVZsVUxHbENRVUZCTEVkQlFXMUNMRk5CUVVNc1RVRkJSRHRCUVVWc1FpeFZRVUZCTzAxQlFVRXNVMEZCUVN4SFFVRlpMRU5CUVVFc1EwRkJSU3hoUVVGR08wRkJSVm83UVVGQlFTeFhRVUZCTEZGQlFVRTdPMUZCUTBNc1IwRkJRU3hIUVVGTkxFbEJRVU1zUTBGQlFTeEhRVUZITEVOQlFVTXNUMEZCVEN4RFFVRmhMRkZCUVdJc1JVRkJkVUlzUTBGQmRrSTdVVUZEVGl4SFFVRkJMRWRCUVUwc1EwRkJRU3hEUVVGRkxHRkJRVVlzUTBGRFRDeERRVUZETEZGQlJFa3NRMEZEU3l4VlFVUk1MRU5CUlV3c1EwRkJReXhKUVVaSkxFTkJSVU1zUzBGR1JDeEZRVVZSTEVkQlJsSXNRMEZIVEN4RFFVRkRMRWxCU0Vrc1EwRkhReXhMUVVoRUxFVkJSMUVzUTBGSVVpeERRVWxNTEVOQlFVTXNTVUZLU1N4RFFVbERMRTlCU2tRc1JVRkpWU3hEUVVwV0xFTkJTMHdzUTBGQlF5eExRVXhKTEVOQlMwVXNVMEZCUVR0cFFrRkZUaXhEUVVGQkxFTkJRVVVzVFVGQlJpeERRVUZUTEVOQlFVTXNSMEZCVml4RFFVRmpMRU5CUVVFc1EwRkJSU3hOUVVGR0xFTkJRVk1zUTBGQlF5eEhRVUZXTEVOQlFVRXNRMEZCUVN4SFFVRnJRaXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTVUZCVWl4RFFVRmhMRXRCUVdJc1EwRkJhRU03VVVGR1RTeERRVXhHTzFGQlZVNHNRMEZCUVN4RFFVRkZMRk5CUVVZc1EwRkJXU3hEUVVGRExFMUJRV0lzUTBGQmIwSXNSMEZCY0VJN1FVRmFSRHRCUVdOQkxHRkJRVTg3U1VGc1FsYzdPenM3T3p0RlFUUkNjRUlzVDBGQlFTeEhRVUZWT3p0RlFVZFdMRU5CUVVFc1EwRkJSU3hUUVVGQk8wRkJSVVFzVVVGQlFUdEpRVUZCTEZOQlFVRXNSMEZCWjBJc1NVRkJRU3hUUVVGQkxFTkJRVUU3VjBGRmFFSXNRMEZCUVN4RFFVRkZMSFZDUVVGR0xFTkJRVEJDTEVOQlFVTXNTVUZCTTBJc1EwRkJaME1zVTBGQlFUdEJRVVV2UWl4VlFVRkJPMDFCUVVFc1NVRkJRU3hIUVVGUExFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4SlFVRlNMRU5CUVVFN1RVRkRVQ3hKUVVGQkxFZEJRVThzVTBGQlV5eERRVUZETEUxQlFWWXNRMEZCYVVJc1NVRkJha0k3WVVGRFVDeERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1NVRkJVaXhEUVVGaExFbEJRV0k3U1VGS0swSXNRMEZCYUVNN1JVRktReXhEUVVGR08wRkJhRVpCT3pzN1FVTklRVHRCUVVGQkxFMUJRVUU3TzBWQlFVRXNUVUZCUVN4SFFVTkRPMGxCUVVFc1JVRkJRU3hGUVVGSkxFZEJRVW83U1VGRFFTeEZRVUZCTEVWQlFVa3NSMEZFU2p0SlFVVkJMRVZCUVVFc1JVRkJTU3hKUVVaS096czdSVUZOUkN4VFFVRkJMRWRCUVZrc1UwRkJRVHRCUVVOWUxGRkJRVUU3U1VGQlFTeExRVUZCTEVkQlFWRXNRMEZCUVN4RFFVRkZMRTFCUVVZc1EwRkJVeXhEUVVGRExFdEJRVllzUTBGQlFUdEpRVVZTTEVsQlFVY3NTMEZCUVN4SFFVRlJMRTFCUVUwc1EwRkJReXhGUVVGc1FqdGhRVU5ETEVOQlFVTXNTVUZCUkN4RlFVUkVPMHRCUVVFc1RVRkZTeXhKUVVGSExFdEJRVUVzUjBGQlVTeE5RVUZOTEVOQlFVTXNSVUZCYkVJN1lVRkRTaXhEUVVGRExFbEJRVVFzUlVGQlR5eEpRVUZRTEVWQlJFazdTMEZCUVN4TlFVVkJMRWxCUVVjc1MwRkJRU3hIUVVGUkxFMUJRVTBzUTBGQlF5eEZRVUZzUWp0aFFVTktMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUlVGQllTeEpRVUZpTEVWQlJFazdTMEZCUVN4TlFVRkJPMkZCUjBvc1EwRkJReXhKUVVGRUxFVkJRVThzU1VGQlVDeEZRVUZoTEVsQlFXSXNSVUZCYlVJc1NVRkJia0lzUlVGSVNUczdSVUZRVFRzN1JVRmhXaXhWUVVGQkxFZEJRV0VzVTBGQlF5eE5RVUZFTzBGQlExb3NVVUZCUVR0SlFVRkJMRTFCUVVFc1IwRkJVenRCUVVOVUxGTkJRVUVzZDBOQlFVRTdPMEZCUTBNc1YwRkJVeXd5UWtGQlZEdFJRVU5ETEUxQlFVMHNRMEZCUXl4SlFVRlFMRU5CUVZrc1RVRkJRU3hIUVVGUExFTkJRVkFzUjBGQlV5eEhRVUZVTEVkQlFWa3NRMEZCZUVJN1FVRkVSRHRCUVVSRU8xZEJSMEU3UlVGTVdUczdSVUZUWWl4UFFVRkJMRWRCUVZVc1UwRkJReXhOUVVGRUxFVkJRVk1zVFVGQlZEdEJRVU5VTEZGQlFVRTdRVUZCUVN4VFFVRkJMSGREUVVGQk96dE5RVU5ETEUxQlFVRXNSMEZCWVN4SlFVRkJMRTFCUVVFc1EwRkJUeXhOUVVGQkxFZEJRVThzUTBGQlVDeEhRVUZUTEZOQlFXaENPMDFCUTJJc1NVRkJRU3c0UkVGQk9FTXNRMEZCUVN4RFFVRkJPMDFCUXpsRExFbEJRWGxDTEZsQlFYcENPMEZCUVVFc1pVRkJUeXhSUVVGQkxFTkJRVk1zU1VGQlZDeEZRVUZRT3p0QlFVaEVPMEZCU1VFc1YwRkJUenRGUVV4Rk96dEZRVlZXTEZGQlFVRXNSMEZCVnl4VFFVRkJPMEZCUTFZc1VVRkJRVHRKUVVGQkxFMUJRVUVzUjBGQlV5eFRRVUZCTEVOQlFVRTdTVUZEVkN4UFFVRkJMRWRCUVZVc1ZVRkJRU3hEUVVGWExFMUJRVmc3U1VGRFZpeFJRVUZCTEVkQlFWY3NSMEZCUVN4SFFVRk5MRTlCUVU4c1EwRkJReXhKUVVGU0xFTkJRV0VzU1VGQllqdFhRVTlxUWl4RFFVRkJMRU5CUVVVc1pVRkJSaXhEUVVGclFpeERRVUZETEVsQlFXNUNMRU5CUVhkQ0xGTkJRVUU3UVVGRmRrSXNWVUZCUVR0TlFVRkJMRTlCUVVFc1IwRkJWVHROUVVOV0xFZEJRVUVzUjBGQlRUdE5RVU5PTEVkQlFVRXNSMEZCVFR0TlFVVk9MRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eFJRVUZTTEVOQlFXbENMRkZCUVdwQ0xFTkJRVEJDTEVOQlFVTXNTVUZCTTBJc1EwRkJaME1zVTBGQlFUdEJRVU12UWl4WlFVRkJPMUZCUVVFc1NVRkJRU3hIUVVGUExFOUJRVUVzUTBGQlVTeEpRVUZTTEVWQlFXTXNUVUZCWkR0UlFVTlFMRWRCUVVFc1NVRkJUenRSUVV0UUxFbEJRVWNzUjBGQlFTeEhRVUZOTEVWQlFWUTdWVUZEUXl4SFFVRkJMRWxCUVU4N1ZVRkRVQ3hIUVVGQkxFZEJSa1E3T3p0VlFVdEJMRTlCUVZFc1EwRkJRU3hIUVVGQkxFbEJRVkU3TzJWQlEyaENMRTlCUVZFc1EwRkJRU3hIUVVGQkxFTkJRVklzUjBGQlpTeEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRTlCUVZFc1EwRkJRU3hIUVVGQkxFTkJRV3BDTEVWQlFYVkNMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eE5RVUZTTEVOQlFVRXNRMEZCZGtJN1RVRmlaMElzUTBGQmFFTTdUVUZuUWtFc1IwRkJRU3hIUVVGTk8wMUJRMDRzUjBGQlFTeEhRVUZOTzAxQlEwNHNSMEZCUVN4SFFVRk5PMDFCUlU0c1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZETEZGQlFWSXNRMEZCYVVJc1VVRkJha0lzUTBGQk1FSXNRMEZCUXl4SlFVRXpRaXhEUVVGblF5eFRRVUZCTzFGQlF5OUNMRWRCUVVFc1NVRkJUeXhQUVVGQkxFTkJRVkVzU1VGQlVpeEZRVUZqTEUxQlFXUTdPMVZCUTFBc1RVRkJUenM3VVVGRlVDeEpRVUZITEVkQlFVRXNSMEZCVFN4RlFVRlVPMVZCUTBNc1IwRkJRU3hKUVVGUE8xVkJRMUFzUjBGQlFUdFZRVU5CTEVkQlFVRXNSMEZCVFN4TFFVaFFPenRsUVV0QkxFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4TlFVRlNMRU5CUVdVc1QwRkJVU3hEUVVGQkxFZEJRVUVzUTBGQmRrSTdUVUZVSzBJc1EwRkJhRU03VFVGWFFTeEZRVUZCTEVkQlFVc3NTVUZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhEUVVGRExFVkJRVUVzUjBGQlN5eEhRVUZPTEVOQlFVRXNSMEZCWVN4RFFVRjRRanROUVVOTUxFbEJRVWNzWVVGQlFTeEpRVUZUTEVWQlFVRXNSMEZCU3l4RFFVRnFRanRSUVVORExFTkJRVUVzUjBGQlNTeE5RVUZQTEVOQlFVRXNRMEZCUVR0QlFVVllMR0ZCUVZNc01rSkJRVlE3VlVGRFF5eERRVUZCTEVOQlFVVXNSMEZCUml4RFFVRk5MRU5CUVVNc1YwRkJVQ3hEUVVGdFFpeE5RVUZCTEVkQlFVOHNRMEZCVUN4SFFVRlRMRlZCUVZRc1IwRkJiVUlzUTBGQmRFTTdRVUZFUkR0bFFVVkJMRU5CUVVFc1EwRkJSU3hIUVVGR0xFTkJRVTBzUTBGQlF5eFJRVUZRTEVOQlFXZENMRTFCUVVFc1IwRkJUeXhEUVVGUUxFZEJRVk1zVlVGQlZDeEhRVUZ0UWl4RlFVRnVReXhGUVV4RU96dEpRWFJEZFVJc1EwRkJlRUk3UlVGV1ZUczdSVUYxUkZnc1YwRkJRU3hIUVVGakxGTkJRVUU3VjBGRFlpeERRVUZCTEVOQlFVVXNTMEZCUml4RFFVTkRMRU5CUVVNc1JVRkVSaXhEUVVOTExFMUJSRXdzUlVGRFlTeFJRVVJpTzBWQlJHRTdPMFZCUzJRc1EwRkJRU3hEUVVGRkxGTkJRVUVzUjBGQlFTeERRVUZHTzBGQmJrZEJPenM3UVVOQlFUdEJRVUZCTEUxQlFVRTdPMFZCUVVFc1MwRkJRU3hIUVVGUk96dEZRVWRTTEU5QlFVRXNSMEZCVlN4VFFVRkRMRXRCUVVRN1NVRkRWQ3hKUVVGakxFdEJRVXNzUTBGQlF5eExRVUZPTEV0QlFXVXNSVUZCTjBJN1RVRkJRU3hMUVVGQkxFZEJRVkVzUjBGQlVqczdTVUZEUVN4SlFVRmxMRXRCUVVzc1EwRkJReXhMUVVGT0xFdEJRV1VzUlVGQk9VSTdZVUZCUVN4TFFVRkJMRWRCUVZFc1NVRkJVanM3UlVGR1V6czdSVUZKVml4TFFVRkJMRWRCUVZFc1UwRkJReXhMUVVGRU8wbEJRMUFzU1VGQllTeExRVUZMTEVOQlFVTXNTMEZCVGl4TFFVRmxMRVZCUVdZc1NVRkJjVUlzUzBGQlN5eERRVUZETEV0QlFVNHNTMEZCWlN4RlFVRnFSRHRoUVVGQkxFdEJRVUVzUjBGQlVTeEZRVUZTT3p0RlFVUlBPenRGUVVsU0xGVkJRVUVzUjBGQllTeFRRVUZETEV0QlFVUTdRVUZEV2l4UlFVRkJPMGxCUVVFc1QwRkJUeXhEUVVGRExFZEJRVklzUTBGQldTeFpRVUZhTzBsQlEwRXNSMEZCUVN4SFFVRk5MRkZCUVVFc05rTkJRV2RETEVOQlFXaERPMGxCUTA0c1IwRkJRU3hIUVVGTkxGRkJRVUVzSzBOQlFXZERMRWRCUVdoRE8wbEJRMDRzU1VGQlFTeEhRVUZQTEZGQlFVRXNaMFJCUVdsRExFTkJRV3BETzBsQlJWQXNUVUZCUVN4SFFVRlRMRXRCUVVzc1EwRkJReXhOUVVGT0xFZEJRV1VzU1VGQlppeEhRVUZ6UWp0SlFVTXZRaXhMUVVGQkxFZEJRVkVzVVVGQlFTeDVRMEZCZVVJc1EwRkJla0k3U1VGRFVpeExRVUZCTEVkQlFWRXNTVUZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhMUVVGQkxFZEJRVkVzVFVGQmJrSXNSVUZCTWtJc1IwRkJNMElzUlVGQlowTXNSMEZCYUVNN1NVRkZVaXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVU5ETEVOQlFVTXNSMEZFUml4RFFVTk5MRXRCUkU0c1EwRkZReXhEUVVGRExFOUJSa1lzUTBGRlZTeFJRVVpXTzFkQlNVRXNTMEZCU3l4RFFVRkRMR05CUVU0c1EwRkJRVHRGUVdSWk96dEZRV2RDWWl4WlFVRkJMRWRCUVdVc1UwRkJReXhMUVVGRU8wRkJRMlFzVVVGQlFUdEpRVUZCTEU5QlFVOHNRMEZCUXl4SFFVRlNMRU5CUVZrc1kwRkJXanRKUVVOQkxFMUJRVUVzUjBGQlV5eERRVUZCTEVOQlFVVXNTVUZCUml4RFFVRlBMRU5CUVVNc1RVRkJVaXhEUVVGQkxFTkJRV2RDTEVOQlFVTXNVVUZCYWtJc1EwRkJNRUlzWTBGQk1VSTdTVUZEVkN4TlFVRkJMRzlFUVVGeFF6dEpRVU55UXl4TFFVRkJMSEZFUVVGdFF6dEpRVU51UXl4TFFVRkJMREpEUVVGM1FqdFhRVVY0UWl4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zU1VGQlZpeERRVUZsTEUxQlFVRXNSMEZCVXl4TFFVRlVMRWRCUVdsQ0xFdEJRV2hETzBWQlVHTTdPMFZCVldZc1kwRkJRU3hIUVVGcFFpeFRRVUZETEV0QlFVUTdRVUZEYUVJc1VVRkJRVHRKUVVGQkxFOUJRVThzUTBGQlF5eEhRVUZTTEVOQlFWa3NaMEpCUVZvN1NVRkRRU3hMUVVGQkxFZEJRVkVzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRTFCUVZJc1EwRkJRU3hEUVVGblFpeERRVUZETEUxQlFXcENMRU5CUVVFc1EwRkJlVUlzUTBGQlF5eFJRVUV4UWl4RFFVRnRReXhQUVVGdVF6dEpRVU5TTEVkQlFVRXNSMEZCVFN4UlFVRkJMRGhEUVVGcFF5eERRVUZxUXp0SlFVTk9MRWRCUVVFc1IwRkJUU3hSUVVGQkxHZEVRVUZwUXl4SFFVRnFRenRKUVVOT0xFbEJRVUVzUjBGQlR5eFJRVUZCTEdsRVFVRnJReXhEUVVGc1F6dEpRVVZRTEV0QlFVRXNSMEZCVVN4UlFVRkJMREJEUVVFeVFpeERRVUV6UWp0SlFVTlNMRXRCUVVFc1IwRkJVU3hKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEV0QlFVRXNSMEZCVVN4TFFVRkJMRWRCUVZFc1NVRkJNMElzUlVGQmFVTXNSMEZCYWtNc1JVRkJjME1zUjBGQmRFTTdWMEZEVWl4RFFVRkJMRU5CUVVVc1MwRkJSaXhEUVVGUkxFTkJRVU1zUjBGQlZDeERRVUZoTEV0QlFXSXNRMEZCYlVJc1EwRkJReXhQUVVGd1FpeERRVUUwUWl4UlFVRTFRanRGUVZSblFqczdSVUZaYWtJc1kwRkJRU3hIUVVGcFFpeFRRVUZETEV0QlFVUTdRVUZEYUVJc1VVRkJRVHRKUVVGQkxFOUJRVThzUTBGQlF5eEhRVUZTTEVOQlFWa3NaMEpCUVZvN1NVRkRRU3hMUVVGQkxFZEJRVkVzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRTFCUVZJc1EwRkJRU3hEUVVGblFpeERRVUZETEUxQlFXcENMRU5CUVVFc1EwRkJlVUlzUTBGQlF5eFJRVUV4UWl4RFFVRnRReXhQUVVGdVF6dEpRVU5TTEVkQlFVRXNSMEZCVFN4UlFVRkJMRGhEUVVGcFF5eERRVUZxUXp0SlFVTk9MRWRCUVVFc1IwRkJUU3hSUVVGQkxHZEVRVUZwUXl4SFFVRnFRenRKUVVOT0xFbEJRVUVzUjBGQlR5eFJRVUZCTEdsRVFVRnJReXhEUVVGc1F6dEpRVVZRTEV0QlFVRXNSMEZCVVN4UlFVRkJMREJEUVVFeVFpeERRVUV6UWp0SlFVTlNMRXRCUVVFc1IwRkJVU3hKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEV0QlFVRXNSMEZCVVN4TFFVRkJMRWRCUVZFc1NVRkJNMElzUlVGQmFVTXNSMEZCYWtNc1JVRkJjME1zUjBGQmRFTTdWMEZEVWl4RFFVRkJMRU5CUVVVc1MwRkJSaXhEUVVGUkxFTkJRVU1zUjBGQlZDeERRVUZoTEV0QlFXSXNRMEZCYlVJc1EwRkJReXhQUVVGd1FpeERRVUUwUWl4UlFVRTFRanRGUVZSblFqczdSVUZqYWtJc1EwRkJRU3hEUVVGRkxGTkJRVUU3U1VGRFJDeERRVUZCTEVOQlFVVXNUVUZCUml4RFFVTkRMRU5CUVVNc1MwRkVSaXhEUVVOUkxFdEJSRklzUTBGRlF5eERRVUZETEU5QlJrWXNRMEZGVlN4UFFVWldPMGxCU1VFc1EwRkJRU3hEUVVGRkxIVkRRVUZHTEVOQlEwTXNRMEZCUXl4SlFVUkdMRU5CUTA4c1dVRkVVQ3hGUVVOeFFpeFZRVVJ5UWp0SlFVZEJMRU5CUVVFc1EwRkJSU3h0UWtGQlJpeERRVU5ETEVOQlFVTXNUVUZFUml4RFFVTlRMRmxCUkZRc1EwRkZReXhEUVVGRExGTkJSa1lzUTBGRldTeFpRVVphTzBsQlNVRXNRMEZCUVN4RFFVRkZMR1ZCUVVZc1EwRkJhMElzUTBGQlF5eFJRVUZ1UWl4RFFVRTBRaXhSUVVFMVFpeERRVU5ETEVOQlFVTXNTMEZFUml4RFFVTlJMR05CUkZJN1YwRkpRU3hEUVVGQkxFTkJRVVVzWTBGQlJpeERRVUZwUWl4RFFVRkRMRkZCUVd4Q0xFTkJRVEpDTEZGQlFUTkNMRU5CUTBNc1EwRkJReXhMUVVSR0xFTkJRMUVzWTBGRVVqdEZRV2hDUXl4RFFVRkdPMEZCTDBSQk96czdRVU5IUVR0RlFVRkJMRU5CUVVFc1EwRkJSU3hUUVVGQk8wRkJSVVFzVVVGQlFUdEpRVUZCTEU5QlFVOHNRMEZCUXl4SFFVRlNMRU5CUVZrc1EwRkJRU3hEUVVGRkxGRkJRVVlzUTBGQlZ5eERRVUZETEVsQlFWb3NRMEZCUVN4RFFVRmFPMGxCUlVFc1NVRkJRU3hIUVVGUE8wbEJSMUFzU1VGQlFTeEhRVUZQTEZOQlFVTXNUMEZCUkR0aFFVVk9PMUZCUVVNc1MwRkJRU3hGUVVGUExFTkJRVUVzUTBGQlJTeFBRVUZHTEVOQlFWVXNRMEZCUXl4TFFVRllMRU5CUVVFc1EwRkJVanRSUVVFMFFpeE5RVUZCTEVWQlFWRXNRMEZCUVN4RFFVRkZMRTlCUVVZc1EwRkJWU3hEUVVGRExFMUJRVmdzUTBGQlFTeERRVUZ3UXpzN1NVRkdUVHRKUVVsUUxGRkJRVUVzUjBGQlZ5eFRRVUZETEU5QlFVUTdZVUZGVml4RFFVRkJMRU5CUVVVc1QwRkJSaXhEUVVGVkxFTkJRVU1zVFVGQldDeERRVUZCTzBsQlJsVTdTVUZOV0N4SlFVRkJMRWRCUVU4c1UwRkJRVHRCUVVWT0xGVkJRVUU3VFVGQlFTeEpRVUZITEVOQlFVa3NTVUZCVUR0UlFVVkRMRWxCUVVFc1IwRkJUenRSUVVkUUxGZEJRVUVzUjBGQll5eERRVUZCTEVOQlFVVXNZVUZCUml4RFFVTmlMRU5CUVVNc1NVRkVXU3hEUVVOUUxFbEJSRThzUlVGRFJDeGhRVVJETEVOQlJXSXNRMEZCUXl4UlFVWlpMRU5CUlVnc1UwRkdSeXhEUVVkaUxFTkJRVU1zUjBGSVdTeERRVWRTTEVsQlFVRXNRMEZCU3l4UlFVRk1MRU5CU0ZFc1EwRkpZaXhEUVVGRExFdEJTbGtzUTBGSlRpeEpRVXBOTEVOQlMySXNRMEZCUXl4SlFVeFpMRU5CUVVFN1VVRlRaQ3hWUVVGQkxFZEJRV0VzUTBGQlFTeERRVUZGTEdGQlFVWXNRMEZEV2l4RFFVRkRMRWxCUkZjc1EwRkRUaXhKUVVSTkxFVkJRMEVzV1VGRVFTeERRVVZhTEVOQlFVTXNVVUZHVnl4RFFVVkdMRk5CUmtVc1EwRkhXaXhEUVVGRExFZEJTRmNzUTBGSFVDeFZRVWhQTEVWQlIwc3NUMEZJVEN4RFFVbGFMRU5CUVVNc1IwRktWeXhEUVVsUUxGTkJTazhzUlVGSlNTeE5RVXBLTEVOQlMxb3NRMEZCUXl4SFFVeFhMRU5CUzFBc1NVRkJRU3hEUVVGTExGVkJRVXdzUTBGTVR5eERRVTFhTEVOQlFVTXNTMEZPVnl4RFFVMU1MRWxCVGtzc1EwRlBXaXhEUVVGRExFbEJVRmNzUTBGQlFUdFJRVmRpTEU5QlFVOHNRMEZCUXl4SFFVRlNMRU5CUVZrc1EwRkJRU3hEUVVGRkxEQkNRVUZHTEVOQlFWbzdVVUZEUVN4UFFVRlBMRU5CUVVNc1IwRkJVaXhEUVVGWkxFTkJRVUVzUTBGQlJTeHpRa0ZCUml4RFFVRmFPMUZCUzBFc1EwRkJRU3hEUVVGRkxEQkNRVUZHTEVOQlFUWkNMRU5CUVVNc1NVRkJPVUlzUTBGQmJVTXNVMEZCUVR0QlFVVnNReXhqUVVGQk8xVkJRVUVzU1VGQlFTeEhRVUZQTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhMUVVGU0xFTkJRVUU3VlVGRFVDeERRVUZCTEVkQlFVa3NVVUZCUVN4RFFVRlRMRWxCUVZRN1ZVRkRTaXhEUVVGQkxFZEJRVWtzU1VGQlFTeERRVUZMTEVsQlFVdzdWVUZGU2l4RFFVRkJMRU5CUVVVc1NVRkJSaXhEUVVORExFTkJRVU1zVVVGRVJpeERRVU5YTEZGQlJGZ3NRMEZGUXl4RFFVRkRMRWRCUmtZc1EwRkZUU3hWUVVaT0xFVkJSV3RDTEZWQlJteENMRU5CUjBNc1EwRkJReXhQUVVoR0xFTkJSMVU3V1VGQlF5eFRRVUZCTEVWQlFWY3NWVUZCV2p0WlFVRjNRaXhMUVVGQkxFVkJRVThzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWxCUVZJc1EwRkJZU3hOUVVGaUxFTkJRUzlDTzFkQlNGWXNRMEZKUXl4RFFVRkRMRWRCU2tZc1EwRkpUU3hEUVVwT0xFTkJTME1zUTBGQlF5eEhRVXhHTEVOQlMwMHNRMEZNVGp0VlFVOUJMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eEpRVUZTTEVOQlFXRXNVMEZCWWl4RFFVRjFRaXhEUVVGRExGVkJRWGhDTEVOQlFXMURMRTlCUVc1RE8ybENRVVZCTEVOQlFVRXNRMEZCUlN4WFFVRkdMRU5CUTBNc1EwRkJReXhOUVVSR0xFTkJRMU1zU1VGRVZEdFJRV1pyUXl4RFFVRnVRenRSUVcxQ1FTeERRVUZCTEVOQlFVVXNjMEpCUVVZc1EwRkJlVUlzUTBGQlF5eEpRVUV4UWl4RFFVRXJRaXhUUVVGQk8wRkJSVGxDTEdOQlFVRTdWVUZCUVN4SlFVRkJMRWRCUVU4c1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZETEV0QlFWSXNRMEZCUVR0VlFVTlFMRU5CUVVFc1IwRkJTU3hSUVVGQkxFTkJRVk1zU1VGQlZEdFZRVU5LTEVOQlFVRXNSMEZCU1N4SlFVRkJMRU5CUVVzc1NVRkJURHRWUVVWS0xFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlEwTXNRMEZCUXl4UlFVUkdMRU5CUTFjc1VVRkVXQ3hEUVVWRExFTkJRVU1zUjBGR1JpeERRVVZOTEZWQlJrNHNSVUZGYTBJc1ZVRkdiRUlzUTBGSFF5eERRVUZETEU5QlNFWXNRMEZIVlR0WlFVRkRMRk5CUVVFc1JVRkJWeXhWUVVGYU8xbEJRWGRDTEV0QlFVRXNSVUZCVHl4RFFVRkJMRU5CUVVVc1NVRkJSaXhEUVVGUExFTkJRVU1zU1VGQlVpeERRVUZoTEUxQlFXSXNRMEZCTDBJN1YwRklWaXhEUVVsRExFTkJRVU1zUjBGS1JpeERRVWxOTEVOQlNrNHNRMEZMUXl4RFFVRkRMRWRCVEVZc1EwRkxUU3hEUVV4T08xVkJUMEVzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWxCUVZJc1EwRkJZU3hUUVVGaUxFTkJRWFZDTEVOQlFVTXNWVUZCZUVJc1EwRkJiVU1zVDBGQmJrTTdhVUpCUlVFc1EwRkJRU3hEUVVGRkxGVkJRVVlzUTBGRFF5eERRVUZETEUxQlJFWXNRMEZEVXl4SlFVUlVPMUZCWmpoQ0xFTkJRUzlDTzFGQmJVSkJMRU5CUVVFc1EwRkJSU3hOUVVGR0xFTkJRME1zUTBGQlF5eE5RVVJHTEVOQlExTXNWMEZFVkN4RFFVVkRMRU5CUVVNc1RVRkdSaXhEUVVWVExGVkJSbFE3VVVGSlFTeERRVUZCTEVOQlFVVXNWMEZCUml4RFFVRmpMRU5CUVVNc1RVRkJaaXhEUVVGQk8yVkJRMEVzUTBGQlFTeERRVUZGTEZWQlFVWXNRMEZCWVN4RFFVRkRMRTFCUVdRc1EwRkJRU3hGUVRGRlJEczdTVUZHVFR0SlFTdEZVQ3hKUVVGQkxFZEJRVThzVTBGQlFUdE5RVVZPTEVsQlFVY3NTVUZCU0R0UlFVVkRMRWxCUVVFc1IwRkJUenRsUVVOUUxFTkJRVUVzUTBGQlJTeFZRVUZHTEVOQlFXRXNRMEZCUXl4UFFVRmtMRU5CUVhOQ08xVkJRVU1zVVVGQlFTeEZRVUZWTEZOQlFVRTdiVUpCUldoRExFTkJRVUVzUTBGQlJTeFZRVUZHTEVOQlFXRXNRMEZCUXl4TlFVRmtMRU5CUVVFN1ZVRkdaME1zUTBGQldEdFRRVUYwUWl4RlFVaEVPenRKUVVaTk8wbEJXVkFzUTBGQlFTeERRVUZGTEZWQlFVWXNRMEZCWVN4RFFVRkRMRXRCUVdRc1EwRkJiMElzVTBGQlFUdGhRVVZ1UWl4SlFVRkJMRU5CUVVFN1NVRkdiVUlzUTBGQmNFSTdWMEZMUVN4RFFVRkJMRU5CUVVVc1VVRkJSaXhEUVVGWExFTkJRVU1zVDBGQldpeERRVUZ2UWl4VFFVRkRMRXRCUVVRN1RVRkZia0lzU1VGQlZTeExRVUZMTEVOQlFVTXNTMEZCVGl4TFFVRmxMRVZCUVhwQ08yVkJRVUVzU1VGQlFTeERRVUZCTEVWQlFVRTdPMGxCUm0xQ0xFTkJRWEJDTzBWQmFraERMRU5CUVVZN1FVRkJRVHM3TzBGRFNFRTdRVUZCUVN4TlFVRkJPenRGUVVGQkxGRkJRVUVzUjBGQlZ6czdSVUZEV0N4UFFVRkJMRWRCUVZVc1EwRkJReXhSUVVGRUxFVkJRVmNzUzBGQldEczdSVUZGVml4SlFVRkhMRU5CUVVrc1RVRkJUU3hEUVVGRExIRkNRVUZrTzBGQlEwa3NVMEZCUVN4NVEwRkJRVHM3VFVGRFNTeE5RVUZOTEVOQlFVTXNjVUpCUVZBc1IwRkJLMElzVFVGQlR5eERRVUZCTEUxQlFVRXNSMEZCVXl4MVFrRkJWRHROUVVOMFF5eE5RVUZOTEVOQlFVTXNiMEpCUVZBc1IwRkJPRUlzVFVGQlR5eERRVUZCTEUxQlFVRXNSMEZCVXl4elFrRkJWQ3hEUVVGUUxFbEJRVEpETEUxQlFVOHNRMEZCUVN4TlFVRkJMRWRCUVZNc05rSkJRVlE3UVVGR2NFWXNTMEZFU2pzN08wVkJTMEVzVFVGQlRTeERRVUZETERCQ1FVRlFMRTFCUVUwc1EwRkJReXgzUWtGQk1FSXNVMEZCUXl4UlFVRkVMRVZCUVZjc1QwRkJXRHRCUVVNM1FpeFJRVUZCTzBsQlFVRXNVVUZCUVN4SFFVRmxMRWxCUVVFc1NVRkJRU3hEUVVGQkxFTkJRVTBzUTBGQlF5eFBRVUZRTEVOQlFVRTdTVUZEWml4VlFVRkJMRWRCUVdFc1NVRkJTU3hEUVVGRExFZEJRVXdzUTBGQlV5eERRVUZVTEVWQlFWa3NSVUZCUVN4SFFVRkxMRU5CUVVNc1VVRkJRU3hIUVVGWExGRkJRVm9zUTBGQmFrSTdTVUZGWWl4RlFVRkJMRWRCUVVzc1RVRkJUU3hEUVVGRExGVkJRVkFzUTBGQmEwSXNVMEZCUVR0aFFVTnVRaXhSUVVGQkxFTkJRVk1zVVVGQlFTeEhRVUZYTEZWQlFYQkNPMGxCUkcxQ0xFTkJRV3hDTEVWQlJVZ3NWVUZHUnp0WFFVbE1PMFZCVWpaQ096dEZRVlZxUXl4TlFVRk5MRU5CUVVNc2VVSkJRVkFzVFVGQlRTeERRVUZETEhWQ1FVRjVRaXhUUVVGRExFVkJRVVE3VjBGRE5VSXNXVUZCUVN4RFFVRmhMRVZCUVdJN1JVRkVORUk3UVVGc1FtaERPenM3UVVOSlFUdEZRVUZCTEVOQlFVRXNRMEZCUlN4VFFVRkJPMWRCUTBRc1EwRkJRU3hEUVVGRkxHZENRVUZHTEVOQlFXMUNMRU5CUVVNc1NVRkJjRUlzUTBGQmVVSXNVMEZCUVR0QlFVTjRRaXhWUVVGQk8wMUJRVUVzVDBGQlFTeEhRVUZWTzAxQlExWXNSVUZCUVN4SFFVRkxMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eEpRVUZTTEVOQlFXRXNTMEZCWWp0aFFVTk1MRU5CUVVFc1EwRkJSU3hIUVVGQkxFZEJRVTBzUlVGQlVpeERRVUZYTEVOQlFVTXNUVUZCV2l4RFFVRnRRaXhUUVVGRExFdEJRVVE3UVVGRmJFSXNXVUZCUVR0UlFVRkJMRWxCUVVFc1IwRkJUeXhIUVVGSExFTkJRVU1zWlVGQlNpeERRVUZ2UWl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVTBzUTBGQlFTeERRVUZCTEVOQlFYWkRPMUZCUTFBc1NVRkJLMElzV1VGQkwwSTdhVUpCUVVFc1EwRkJRU3hEUVVGRkxFOUJRVVlzUTBGQlZTeERRVUZETEVsQlFWZ3NRMEZCWjBJc1MwRkJhRUlzUlVGQmRVSXNTVUZCZGtJc1JVRkJRVHM3VFVGSWEwSXNRMEZCYmtJc1EwRk5ReXhEUVVGRExFOUJUa1lzUTBGTlZTeFJRVTVXTzBsQlNIZENMRU5CUVhwQ08wVkJSRU1zUTBGQlJqdEJRVUZCT3pzN1FVTkdRVHRCUVVGQkxFMUJRVUU3TzBWQlFVRXNSMEZCUVN4SFFVRk5MRk5CUVVNc1NVRkJSRHRYUVVOTUxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCYUVJc1IwRkJkVUlzVVVGQlFTeEhRVUZYTzBWQlJEZENPenRGUVU5T0xFMUJRVUVzUjBGQlV5eFRRVUZCTzFkQlExSXNSMEZCUVN4RFFVRkpMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eEpRVUZTTEVOQlFXRXNUVUZCWWl4RFFVRktPMFZCUkZFN08wVkJTVlFzVFVGQlFTeEhRVUZUTEZOQlFVRTdWMEZEVWl4SFFVRkJMRU5CUVVrc1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZETEVkQlFWSXNRMEZCUVN4RFFVRktPMFZCUkZFN08wVkJTMVFzUTBGQlFTeERRVUZGTEZOQlFVRTdTVUZEUkN4RFFVRkJMRU5CUVVVc2EwSkJRVVlzUTBGQmNVSXNRMEZCUXl4TlFVRjBRaXhEUVVFMlFpeE5RVUUzUWp0WFFVTkJMRU5CUVVFc1EwRkJSU3hyUWtGQlJpeERRVUZ4UWl4RFFVRkRMRXRCUVhSQ0xFTkJRVFJDTEUxQlFUVkNPMFZCUmtNc1EwRkJSanRCUVdoQ1FUczdPMEZEUmtFN1FVRkJRU3hOUVVGQk96dEZRVUZCTEUxQlFVRXNSMEZCVXl4VFFVRkJPMEZCUTFJc1VVRkJRVHRKUVVGQkxFMUJRVUVzUjBGQlV5eERRVUZCTEVOQlFVVXNWVUZCUml4RFFVRmhMRU5CUVVNc1RVRkJaQ3hEUVVGQkxFTkJRVUVzUjBGQmVVSTdWMEZEYkVNc1EwRkJRU3hEUVVGRkxFMUJRVVlzUTBGQlV5eERRVUZETEVkQlFWWXNRMEZCWXl4aFFVRmtMRVZCUVRaQ0xFMUJRVUVzUjBGQlV5eEpRVUYwUXp0RlFVWlJPenRGUVV0VUxFTkJRVUVzUTBGQlJTeFRRVUZCTzBsQlEwUXNRMEZCUVN4RFFVRkZMRTFCUVVZc1EwRkJVeXhEUVVGRExFMUJRVllzUTBGQmFVSXNVMEZCUVR0aFFVRkhMRTFCUVVFc1EwRkJRVHRKUVVGSUxFTkJRV3BDTzFkQlEwRXNUVUZCUVN4RFFVRkJPMFZCUmtNc1EwRkJSanRCUVV4Qk96czdRVU5GUVR0QlFVRkJMRTFCUVVFN08wVkJRVUVzWVVGQlFTeEhRVUZuUWl4VFFVRkRMRXRCUVVRN1YwRkRaaXgxUWtGQlFTeEhRVUV3UWl4TFFVRXhRaXhIUVVGclF6dEZRVVJ1UWpzN1JVRkhhRUlzV1VGQlFTeEhRVUZsTEZOQlFVTXNTMEZCUkR0QlFVTmtMRkZCUVVFN1NVRkJRU3hIUVVGQkxFZEJRVTBzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4RFFVRkRMRWxCUVVrc1NVRkJUQ3hEUVVGVkxFTkJRVU1zVDBGQldDeERRVUZCTEVOQlFVRXNSMEZCZFVJc1NVRkJiRU03U1VGRFRpeExRVUZCTEVkQlFWRXNVVUZCUVN4RFFVRlRMRU5CUVVFc1EwRkJSU3hMUVVGR0xFTkJRVkVzUTBGQlF5eEpRVUZVTEVOQlFXTXNUMEZCWkN4RFFVRlVPMGxCUTFJc1IwRkJRU3hIUVVGTkxGRkJRVUVzUTBGQlV5eERRVUZCTEVOQlFVVXNTMEZCUml4RFFVRlJMRU5CUVVNc1NVRkJWQ3hEUVVGakxFdEJRV1FzUTBGQlZEdEpRVU5PTEZGQlFVRXNSMEZCVnl4UlFVRkJMRU5CUVZNc1EwRkJRU3hEUVVGRkxFdEJRVVlzUTBGQlVTeERRVUZETEVsQlFWUXNRMEZCWXl4VlFVRmtMRU5CUVZRN1NVRkRXQ3hIUVVGQkxFZEJRVTBzU1VGQlNTeERRVUZETEVkQlFVd3NRMEZCVXl4SFFVRlVMRVZCUVdNc1VVRkJaRHRKUVVOT0xFdEJRVUVzUjBGQlVTeEpRVUZKTEVOQlFVTXNTMEZCVEN4RFFVRlhMRVZCUVVFc1IwRkJTeXhKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVOQlFVTXNSMEZCUVN4SFFVRk5MRXRCUVZBc1EwRkJRU3hIUVVGblFpeERRVUZETEVkQlFVRXNSMEZCVFN4TFFVRlFMRU5CUVROQ0xFVkJRVEJETEVOQlFURkRMRVZCUVRaRExFTkJRVGRETEVOQlFXaENPMGxCUTFJc1EwRkJRU3hEUVVGRkxFdEJRVVlzUTBGQlVTeERRVUZETEVsQlFWUXNRMEZCWXl4TFFVRmtMRVZCUVhGQ0xHRkJRVUVzUTBGQll5eExRVUZrTEVOQlFYSkNPMGxCUlVFc1NVRkJORU1zUzBGQlFTeEhRVUZSTEVWQlFYQkVPMkZCUVVFc1ZVRkJRU3hEUVVGWExFTkJRVU1zVTBGQlFUdGxRVUZITEZsQlFVRXNRMEZCWVN4TFFVRmlPMDFCUVVnc1EwRkJSQ3hEUVVGWUxFVkJRVzlETEVsQlFYQkRMRVZCUVVFN08wVkJWR003TzBWQlYyWXNRMEZCUVN4RFFVRkZMRk5CUVVFN1NVRkRSQ3hEUVVGQkxFTkJRVVVzYlVKQlFVWXNRMEZCYzBJc1EwRkJReXhKUVVGMlFpeERRVUUwUWl4VFFVRkJPMkZCUVVjc1dVRkJRU3hEUVVGaExFbEJRV0k3U1VGQlNDeERRVUUxUWp0WFFVVkJMRU5CUVVFc1EwRkJSU3hoUVVGR0xFTkJRV2RDTEVOQlFVTXNSVUZCYWtJc1EwRkJiMElzWlVGQmNFSXNSVUZCY1VNc1UwRkJReXhMUVVGRU8wRkJRM0JETEZWQlFVRTdUVUZCUVN4SlFVRkJMRWRCUVU4c1EwRkJRU3hEUVVGRkxFdEJRVXNzUTBGQlF5eGhRVUZTTEVOQlFYTkNMRU5CUVVNc1NVRkJka0lzUTBGQk5FSXNUVUZCTlVJN1lVRkRVQ3hEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTVUZCVWl4RFFVRmhMR3RDUVVGaUxFTkJRV2RETEVOQlFVTXNSMEZCYWtNc1EwRkJjVU1zU1VGQmNrTTdTVUZHYjBNc1EwRkJja003UlVGSVF5eERRVUZHTzBGQlpFRTdPenRCUTBaQk8wRkJRVUVzVFVGQlFUczdSVUZCUVN4SFFVRkJMRWRCUVUwN08wVkJSMDRzVjBGQlFTeEhRVUZqTEZOQlFVTXNUVUZCUkN4RlFVRlRMRXRCUVZRc1JVRkJaMElzVVVGQmFFSXNSVUZCTUVJc1VVRkJNVUlzUlVGQmIwTXNWVUZCY0VNc1JVRkJaMFFzVlVGQmFFUTdRVUZGWWl4UlFVRkJPMGxCUVVFc1IwRkJRU3hIUVVGTkxFTkJRVUVzUTBGQlJTeEhRVUZCTEVkQlFVMHNUVUZCVGl4SFFVRmxMRTFCUVdwQ08wbEJRMDRzUzBGQlFTeEhRVUZSTEVOQlFVRXNRMEZCUlN4SFFVRkJMRWRCUVUwc1RVRkJUaXhIUVVGbExGRkJRV3BDTzBsQlIxSXNTVUZCUnl4SFFVRkhMRU5CUVVNc1RVRkJTaXhIUVVGaExFTkJRV2hDTzAxQlEwTXNTMEZCUVN4SFFVRlJMRU5CUVVFc1EwRkJSU3hIUVVGR0xFTkJRVTBzUTBGQlF5eFJRVUZRTEVOQlFXZENMR1ZCUVdoQ08wMUJSVklzUTBGQlFTeERRVUZGTEV0QlFVWXNRMEZEUXl4RFFVRkRMRWxCUkVZc1EwRkRUeXhMUVVSUUxFVkJRMk1zVVVGRVpDeERRVVZETEVOQlFVTXNTVUZHUml4RFFVVlBMRXRCUmxBc1JVRkZZeXhSUVVaa0xFTkJSME1zUTBGQlF5eEpRVWhHTEVOQlIwOHNTMEZJVUN4RlFVZGpMRXRCU0dRN08xbEJTVTBzUTBGQlF6dFBRVkJTT3p0SlFWVkJMRWxCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTRzUjBGQlpTeERRVUZzUWp0TlFVTkRMRXRCUVVFc1IwRkJVU3hEUVVGQkxFTkJRVVVzUzBGQlJpeERRVUZSTEVOQlFVTXNVVUZCVkN4RFFVRnJRaXhsUVVGc1FqdE5RVVZTTEVsQlFVY3NhMEpCUVVnN1pVRkRReXhEUVVGQkxFTkJRVVVzUzBGQlJpeERRVU5ETEVOQlFVTXNTVUZFUml4RFFVTlBMRXRCUkZBc1JVRkRZeXhWUVVSa0xFTkJSVU1zUTBGQlF5eEpRVVpHTEVOQlJVOHNTMEZHVUN4RlFVVmpMRlZCUm1Rc1JVRkVSRHRQUVVGQkxFMUJRVUU3WlVGTFF5eERRVUZCTEVOQlFVVXNTMEZCUml4RFFVTkRMRU5CUVVNc1NVRkVSaXhEUVVOUExFdEJSRkFzUlVGRFl5eERRVVJrTEVOQlJVTXNRMEZCUXl4SlFVWkdMRU5CUlU4c1MwRkdVQ3hGUVVWakxFTkJSbVFzUlVGTVJEdFBRVWhFT3p0RlFXaENZVHM3UlVFMlFtUXNVMEZCUVN4SFFVRlpMRk5CUVVNc1RVRkJSQ3hGUVVGVExFdEJRVlFzUlVGQlowSXNVVUZCYUVJc1JVRkJNRUlzVVVGQk1VSTdTVUZEV0N4RFFVRkJMRU5CUVVVc1IwRkJRU3hIUVVGTkxFMUJRVTRzUjBGQlpTeE5RVUZxUWl4RFFVTkRMRU5CUVVNc1NVRkVSaXhEUVVOUExFdEJSRkE3U1VGSFFTeERRVUZCTEVOQlFVVXNSMEZCUVN4SFFVRk5MRTFCUVU0c1IwRkJaU3hOUVVGcVFpeERRVU5ETEVOQlFVTXNTVUZFUml4RFFVTlBMRkZCUkZBN1YwRkhRU3hEUVVGQkxFTkJRVVVzUjBGQlFTeEhRVUZOTEUxQlFVNHNSMEZCWlN4TlFVRnFRaXhEUVVORExFTkJRVU1zU1VGRVJpeERRVU5QTEZGQlJGQTdSVUZRVnpzN1JVRlZXaXhSUVVGQkxFZEJRVmNzVTBGQlF5eE5RVUZFTEVWQlFWTXNTMEZCVkR0WFFVTldMRU5CUVVFc1EwRkJSU3hIUVVGQkxFZEJRVTBzVFVGQlVpeERRVU5ETEVOQlFVTXNTVUZFUml4RFFVTlBMRXRCUkZBN1JVRkVWVHM3UlVGUFdDeEpRVUZCTEVkQlFVOHNVMEZCUXl4SlFVRkVPMEZCUTA0c1VVRkJRVHRKUVVGQkxGZEJRVUVzUTBGQldTeFJRVUZhTEVWQlFYTkNMRWxCUVVrc1EwRkJReXhOUVVFelFpeEZRVUZ0UXl4RFFVRnVReXhGUVVGelF5eEpRVUZKTEVOQlFVTXNVMEZCTTBNc1JVRkJjMFFzU1VGQlNTeERRVUZETEZsQlFUTkVMRVZCUVhsRkxFbEJRVWtzUTBGQlF5eG5Ra0ZCT1VVN1NVRkRRU3hUUVVGQkxFTkJRVlVzVVVGQlZpeEZRVUZ2UWl4SlFVRkpMRU5CUVVNc1RVRkJla0lzUlVGQmFVTXNRMEZCYWtNc1JVRkJiME1zU1VGQlNTeERRVUZETEZOQlFYcERPMGxCUlVFc1YwRkJRU3hEUVVGWkxGRkJRVm9zUlVGQmMwSXNTVUZCU1N4RFFVRkRMRTFCUVROQ0xFVkJRVzFETEVOQlFXNURMRVZCUVhORExFbEJRVWtzUTBGQlF5eFRRVUV6UXl4RlFVRnpSQ3hKUVVGSkxFTkJRVU1zV1VGQk0wUXNSVUZCZVVVc1NVRkJTU3hEUVVGRExHZENRVUU1UlR0SlFVTkJMRk5CUVVFc1EwRkJWU3hSUVVGV0xFVkJRVzlDTEVsQlFVa3NRMEZCUXl4TlFVRjZRaXhGUVVGcFF5eERRVUZxUXl4RlFVRnZReXhKUVVGSkxFTkJRVU1zVTBGQmVrTTdTVUZGUVN4WFFVRkJMRU5CUVZrc1VVRkJXaXhGUVVGelFpeEpRVUZKTEVOQlFVTXNUVUZCTTBJc1JVRkJiVU1zUTBGQmJrTXNSVUZCYzBNc1EwRkJkRU1zUlVGQmVVTXNTVUZCU1N4RFFVRkRMRmxCUVRsRExFVkJRVFJFTEVsQlFVa3NRMEZCUXl4blFrRkJha1U3U1VGRFFTeFRRVUZCTEVOQlFWVXNVVUZCVml4RlFVRnZRaXhKUVVGSkxFTkJRVU1zVFVGQmVrSXNSVUZCYVVNc1EwRkJha01zUlVGQmIwTXNRMEZCY0VNN1NVRkZRU3hYUVVGQkxFTkJRVmtzV1VGQldpeEZRVUV3UWl4SlFVRkpMRU5CUVVNc1ZVRkJMMElzUlVGQk1rTXNRMEZCTTBNc1JVRkJPRU1zU1VGQlNTeERRVUZETEdGQlFXNUVMRVZCUVd0RkxFbEJRV3hGTEVWQlFYZEZMRWxCUVhoRk8wbEJRMEVzVTBGQlFTeERRVUZWTEZsQlFWWXNSVUZCZDBJc1NVRkJTU3hEUVVGRExGVkJRVGRDTEVWQlFYbERMRU5CUVhwRExFVkJRVFJETEVsQlFVa3NRMEZCUXl4aFFVRnFSRHRKUVVkQkxGZEJRVUVzUTBGQldTeFhRVUZhTEVWQlFYbENMRWxCUVVrc1EwRkJReXh0UWtGQk9VSXNSVUZCYlVRc1EwRkJia1FzUlVGQmMwUXNTVUZCU1N4RFFVRkRMSE5DUVVFelJDeEZRVUZ0Uml4SlFVRnVSaXhGUVVGNVJpeEpRVUY2Ump0SlFVTkJMRk5CUVVFc1EwRkJWU3hYUVVGV0xFVkJRWFZDTEVsQlFVa3NRMEZCUXl4dFFrRkJOVUlzUlVGQmFVUXNRMEZCYWtRc1JVRkJiMFFzU1VGQlNTeERRVUZETEhOQ1FVRjZSRHRKUVVWQkxGZEJRVUVzUTBGQldTeFZRVUZhTEVWQlFYZENMRWxCUVVrc1EwRkJReXhyUWtGQk4wSXNSVUZCYVVRc1EwRkJha1FzUlVGQmIwUXNTVUZCU1N4RFFVRkRMSEZDUVVGNlJDeEZRVUZuUml4SlFVRm9SaXhGUVVGelJpeEpRVUYwUmp0SlFVTkJMRk5CUVVFc1EwRkJWU3hWUVVGV0xFVkJRWE5DTEVsQlFVa3NRMEZCUXl4clFrRkJNMElzUlVGQkswTXNRMEZCTDBNc1JVRkJhMFFzU1VGQlNTeERRVUZETEhGQ1FVRjJSRHRKUVVWQkxGZEJRVUVzUTBGQldTeFJRVUZhTEVWQlFYTkNMRWxCUVVrc1EwRkJReXhuUWtGQk0wSXNSVUZCTmtNc1EwRkJOME1zUlVGQlowUXNTVUZCU1N4RFFVRkRMRzFDUVVGeVJDeEZRVUV3UlN4SlFVRXhSU3hGUVVGblJpeEpRVUZvUmp0SlFVTkJMRk5CUVVFc1EwRkJWU3hSUVVGV0xFVkJRVzlDTEVsQlFVa3NRMEZCUXl4blFrRkJla0lzUlVGQk1rTXNRMEZCTTBNc1JVRkJPRU1zU1VGQlNTeERRVUZETEcxQ1FVRnVSRHRKUVhWQ1FTeExRVUZCTEVkQlFWRXNUMEZCVHl4RFFVRkRMRTlCUVZJc1EwRkJaMElzVVVGQlVTeERRVUZETEVsQlFYcENMRU5CUVRoQ0xFTkJRVU1zUzBGQkwwSXNRMEZCUVR0SlFVVlNMRWxCUVVjc1pVRkJRU3hKUVVGWExITkNRVUZrTzBGQmRVSkRMRmRCUVVFc1UwRkJRVHM3VVVGRFF5eExRVUZMTEVOQlFVTXNUVUZCVHl4RFFVRkJMRU5CUVVFc1EwRkJZaXhIUVVGclFqdEJRVVJ1UWp0aFFVZEJMRXRCUVVzc1EwRkJReXhOUVVGT0xFTkJRVUVzUlVFeFFrUTdPMFZCT1VOTk96dEZRVFpGVUN4TlFVRkJMRWRCUVZNc1UwRkJReXhKUVVGRU8wbEJSVklzU1VGQlFTeERRVUZMTEVsQlFVdzdTVUZGUVN4SlFVRkhMRWxCUVVrc1EwRkJReXhOUVVGU08wMUJSVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRm9RaXhEUVVGQkxFVkJSa1E3UzBGQlFTeE5RVUZCTzAxQlNVTXNRMEZCUXl4RFFVRkRMRWxCUVVZc1EwRkJUenRSUVVWT0xFZEJRVUVzUlVGQlN5eEhRVUZCTEVkQlFVMHNaMEpCUmt3N1VVRkhUaXhSUVVGQkxFVkJRVlVzVFVGSVNqdFJRVWxPTEUxQlFVRXNSVUZCVVN4TFFVcEdPMUZCUzA0c1QwRkJRU3hGUVVGVExFMUJURWc3VDBGQlVEdE5RVkZCTEVOQlFVTXNRMEZCUXl4SlFVRkdMRU5CUVU4N1VVRkZUaXhIUVVGQkxFVkJRVXNzUjBGQlFTeEhRVUZOTEZkQlJrdzdVVUZIVGl4UlFVRkJMRVZCUVZVc1RVRklTanRSUVVsT0xFMUJRVUVzUlVGQlVTeExRVXBHTzFGQlMwNHNUMEZCUVN4RlFVRlRMRTlCVEVnN1QwRkJVQ3hGUVZwRU96dFhRVzlDUVN4VlFVRkJMRU5CUVZjc1NVRkJXQ3hGUVVGcFFpeEpRVUZKTEVOQlFVTXNWVUZCVEN4SFFVRnJRaXhKUVVGdVF6dEZRWGhDVVRzN1JVRXlRbFFzVFVGQlFTeEhRVUZUTEZOQlFVTXNTVUZCUkR0QlFVTlNMRkZCUVVFN1FVRkJRU3hUUVVGQkxITkRRVUZCT3p0TlFVTkRMRTFCUVUwc1EwRkJReXhOUVVGUUxFTkJRV003VVVGRllpeExRVUZCTEVWQlFVOHNWVUZCUVN4SFFVRmhMRU5CUVVNc1EwRkJReXhMUVVGbUxFZEJRWFZDTEZkQlJtcENPMUZCUjJJc1QwRkJRU3hGUVVGVExFVkJTRWs3VVVGSllpeEhRVUZCTEVWQlFVc3NWMEZCUVN4SFFVRmpMRU5CUVVNc1EwRkJReXhGUVVwU08wOUJRV1E3UVVGRVJEdEpRVk5CTEVsQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVZZN1lVRkRReXhOUVVGTkxFTkJRVU1zVlVGQlVDeERRVUZCTEVWQlJFUTdPMFZCVmxFN08wVkJZVlFzVDBGQlFTeEhRVUZWTEZOQlFVTXNTVUZCUkR0QlFVTlVMRkZCUVVFN1FVRkJRU3hUUVVGQkxITkRRVUZCT3p0TlFVTkRMRTFCUVUwc1EwRkJReXhOUVVGUUxFTkJRV003VVVGRllpeExRVUZCTEVWQlFVOHNWVUZCUVN4SFFVRmhMRU5CUVVNc1EwRkJReXhOUVVGbUxFZEJRWGRDTEdGQlFYaENMRWRCUVhkRExFTkJRVU1zUTBGQlF5eExRVUV4UXl4SFFVRnJSQ3hQUVVZMVF6dFJRVWRpTEU5QlFVRXNSVUZCVXl4RFFVRkRMRU5CUVVNc1QwRklSVHRSUVVsaUxFZEJRVUVzUlVGQlN5eHJRa0ZCUVN4SFFVRnhRaXhEUVVGRExFTkJRVU1zUlVGS1pqdFBRVUZrTzBGQlJFUTdTVUZUUVN4SlFVRkhMRTFCUVUwc1EwRkJReXhOUVVGV08yRkJRME1zVFVGQlRTeERRVUZETEZWQlFWQXNRMEZCUVN4RlFVUkVPenRGUVZaVE96dEZRV1ZXTEVsQlFVRXNSMEZCVHl4VFFVRkJPMWRCUlU0c1EwRkJReXhEUVVGRExFbEJRVVlzUTBGQlR6dE5RVVZPTEVkQlFVRXNSVUZCU3l4SFFVWkRPMDFCUjA0c1VVRkJRU3hGUVVGVkxFMUJTRW83VFVGSlRpeE5RVUZCTEVWQlFWRXNTMEZLUmp0TlFVdE9MRTlCUVVFc1JVRkJVeXhOUVV4SU8wdEJRVkE3UlVGR1RUczdSVUZoVUN4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zUzBGQlZpeERRVUZuUWl4VFFVRkJPMWRCUTJZc1NVRkJRU3hEUVVGQk8wVkJSR1VzUTBGQmFFSTdPMFZCU1VFc1EwRkJRU3hEUVVGRkxGTkJRVUU3VjBGRFJDeEpRVUZCTEVOQlFVRTdSVUZFUXl4RFFVRkdPMEZCZEUxQk96czdRVU5EUVR0QlFVRkJMRTFCUVVFN08wVkJRVUVzVFVGQlFTeEhRVUZUTEZOQlFVRTdWMEZGVWl4RFFVRkJMRU5CUVVVc1UwRkJSaXhEUVVGWkxFTkJRVU1zU1VGQllpeERRVUZyUWl4VFFVRkJPMDFCUldwQ0xFbEJRVWNzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRWxCUVZJc1EwRkJZU3hSUVVGaUxFTkJRVUVzUzBGQk1FSXNUMEZCTjBJN1pVRkZReXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTMEZCVWl4RFFVRmpMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eE5RVUZTTEVOQlFVRXNRMEZCWkN4RlFVWkVPMDlCUVVFc1RVRkJRVHRsUVV0RExFTkJRVUVzUTBGQlJTeEpRVUZHTEVOQlFVOHNRMEZCUXl4TlFVRlNMRU5CUVdVc1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZETEV0QlFWSXNRMEZCUVN4RFFVRm1MRVZCVEVRN08wbEJSbWxDTEVOQlFXeENPMFZCUmxFN08wVkJWMVFzUTBGQlFTeERRVUZGTEZOQlFVRTdTVUZEUkN4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zVFVGQlZpeERRVUZwUWl4VFFVRkJPMkZCUTJoQ0xFMUJRVUVzUTBGQlFUdEpRVVJuUWl4RFFVRnFRanRYUVVkQkxFMUJRVUVzUTBGQlFUdEZRVXBETEVOQlFVWTdRVUZZUVRzN08wRkRRVUU3UVVGQlFTeE5RVUZCT3p0RlFVRkJMRTlCUVVFc1IwRkJWU3hUUVVGQk8wRkJRMVFzVVVGQlFUdEpRVUZCTEU5QlFVRXNSMEZCVlN4UlFVRkJMRGhFUVVGcFJDeERRVUZxUkR0SlFVTldMRWxCUVVFc1IwRkJUeXhSUVVGQkxFTkJRVk1zUTBGQlFTeERRVUZGTEcxQ1FVRkdMRU5CUVhOQ0xFTkJRVU1zU1VGQmRrSXNRMEZCUVN4RFFVRlVPMGxCUTFBc1IwRkJRU3hIUVVGTkxGRkJRVUVzSzBOQlFXZERMRU5CUVdoRE8wbEJRMDRzUjBGQlFTeEhRVUZOTEZGQlFVRXNlVU5CUVRCQ0xFTkJRVEZDTzBsQlEwNHNTVUZCUVN4SFFVRlBMRWRCUVVFc1IwRkJUVHRKUVVWaUxFbEJRV1VzU1VGQlFTeEhRVUZQTEVsQlFYUkNPMDFCUVVFc1NVRkJRU3hIUVVGUExFdEJRVkE3TzBsQlEwRXNSMEZCUVN4SFFVRk5MRWRCUVVFc1IwRkJUVHRKUVVOYUxFbEJRVUVzU1VGQlVUdEpRVVZTTEVsQlFVY3NRMEZCU1N4TFFVRkJMRU5CUVUwc1NVRkJUaXhEUVVGUU8wMUJSVU1zUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZEUXl4RFFVRkRMRWRCUkVZc1EwRkRUU3hIUVVST0xFTkJSVU1zUTBGQlF5eEpRVVpHTEVOQlJVOHNTMEZHVUN4RlFVVmpMRWRCUm1RN1RVRkpRU3hEUVVGQkxFTkJRVVVzYlVKQlFVWXNRMEZEUXl4RFFVRkRMRWxCUkVZc1EwRkRUeXhKUVVSUU8yRkJSMEVzUTBGQlFTeERRVUZGTEZsQlFVWXNRMEZCWlN4RFFVRkRMRWxCUVdoQ0xFTkJRWEZDTEZOQlFVRTdRVUZEY0VJc1dVRkJRVHRSUVVGQkxFZEJRVUVzUjBGQlRTeFJRVUZCTEhsRFFVRjVRaXhEUVVGNlFqdGxRVU5PTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhKUVVGU0xFTkJRV0VzUzBGQllpeEZRVUZ2UWl4SlFVRkJMRWRCUVU4c1IwRkJNMEk3VFVGR2IwSXNRMEZCY2tJc1JVRlVSRHM3UlVGWVV6czdSVUY1UWxZc1RVRkJRU3hIUVVGVExGTkJRVU1zUjBGQlJDeEZRVUZOTEVkQlFVNDdWMEZCWXl4SlFVRkpMRU5CUVVNc1MwRkJUQ3hEUVVGWExFbEJRVWtzUTBGQlF5eE5RVUZNTEVOQlFVRXNRMEZCUVN4SFFVRm5RaXhEUVVGRExFZEJRVUVzUjBGQlRTeEhRVUZRTEVOQlFXaENMRWRCUVRoQ0xFZEJRWHBETzBWQlFXUTdPMFZCUlZRc1VVRkJRU3hIUVVGWExGTkJRVU1zUzBGQlJEdEJRVU5XTEZGQlFVRTdTVUZCUVN4TFFVRkJMRWRCUVZFc1RVRkJRU3hEUVVGUExFTkJRVkFzUlVGQlZTeExRVUZMTEVOQlFVTXNUVUZCVGl4SFFVRmxMRU5CUVhwQ08xZEJRMUlzUzBGQlRTeERRVUZCTEV0QlFVRTdSVUZHU1RzN1JVRlJXQ3hKUVVGQkxFZEJRVThzVTBGQlFUdEJRVVZPTEZGQlFVRTdTVUZCUVN4UlFVRkJMRWRCUVZjc1EwRkJRU3hEUVVGRkxIRkNRVUZHTzBsQlExZ3NRMEZCUVN4RFFVRkZMRkZCUVVZc1EwRkJWeXhEUVVGRExFZEJRVm9zUTBGQlowSXNRMEZCYUVJc1EwRkJhMElzUTBGQlF5eFBRVUZ1UWl4RFFVRXlRaXhSUVVFelFqdEpRVU5CTEUxQlFVRXNSMEZCVXl4UlFVRkJMRU5CUVZNc1EwRkJRU3hEUVVGRkxHMUNRVUZHTEVOQlFYTkNMRU5CUVVNc1NVRkJka0lzUTBGQlFTeERRVUZVTzBGQlIxUXNVMEZCVXl4cFJrRkJWRHROUVVWRExGTkJRVUVzUjBGQldTeFJRVUZCTEVOQlFWTXNVVUZCVkR0TlFVTmFMRWRCUVVFc1IwRkJUU3hSUVVGQkxFTkJRVk1zUTBGQlFTeERRVUZGTEZOQlFVWXNRMEZCV1N4RFFVRkRMRWRCUVdJc1EwRkJRU3hEUVVGVU8wMUJRMDRzUTBGQlFTeERRVUZGTEZOQlFVWXNRMEZCV1N4RFFVRkRMRWRCUVdJc1EwRkJhVUlzUjBGQlFTeEhRVUZOTEVOQlFYWkNPMEZCU2tRN1YwRlBRU3hEUVVGQkxFTkJRVVVzVVVGQlJpeERRVUZYTEVOQlFVTXNUMEZCV2l4RFFVRnZRaXhSUVVGd1FqdEZRV1JOT3p0RlFYRkNVQ3hEUVVGQkxFTkJRVVVzVTBGQlFUdEpRVU5FTEVOQlFVRXNRMEZCUlN4WlFVRkdMRU5CUTBNc1EwRkJReXhKUVVSR0xFTkJRMDhzYjBKQlJGQXNSVUZETmtJc1QwRkVOMElzUTBGRlF5eERRVUZETEU5QlJrWXNRMEZGVlN4UlFVWldPMGxCU1VFc1EwRkJRU3hEUVVGRkxHRkJRVVlzUTBGRFF5eERRVUZETEV0QlJFWXNRMEZEVVN4SlFVUlNPMWRCUjBFc1NVRkJRU3hEUVVGQk8wVkJVa01zUTBGQlJqdEJRWGhFUVRzN08wRkRRVUU3UVVGQlFTeE5RVUZCT3p0RlFVRkJMRlZCUVVFc1IwRkJZVHM3UlVGRllpeFBRVUZCTEVkQlFWVXNVMEZCUVR0SlFVTlVMRWxCUVRaQ0xFTkJRVWtzVlVGQmFrTTdUVUZCUVN4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRV2hDTEVOQlFVRXNSVUZCUVRzN1YwRkRRU3hWUVVGQkxFZEJRV0U3UlVGR1NqczdSVUZKVml4TlFVRkJMRWRCUVZNc1UwRkJReXhMUVVGRU8wRkJRMUlzVVVGQlFUdEpRVUZCTEVkQlFVRXNSMEZCVFN4RFFVRkJMRU5CUVVVc1MwRkJSaXhEUVVGUkxFTkJRVU1zVVVGQlZDeERRVUZyUWl4bFFVRnNRaXhEUVVGclF5eERRVUZETEVsQlFXNURMRU5CUVVFN1NVRkRUaXhMUVVGQkxFZEJRVkVzUTBGQlFTeERRVUZGTEV0QlFVWXNRMEZCVVN4RFFVRkRMRkZCUVZRc1EwRkJhMElzYVVKQlFXeENPMGxCUTFJc1NVRkJRU3hIUVVGUExFbEJRVWtzUTBGQlF5eExRVUZNTEVOQlFWY3NRMEZCUXl4SlFVRkpMRWxCUVV3c1EwRkJWU3hEUVVGRExFOUJRVmdzUTBGQlFTeERRVUZCTEVkQlFYVkNMRTFCUVd4RE8wbEJSMUFzUjBGQlFTeEhRVUZOTEVOQlFVRXNRMEZCUlN4SFFVRkdMRU5CUVUwc1EwRkJReXhKUVVGUUxFTkJRVmtzUzBGQldqdEpRVU5PTEVkQlFVRXNSMEZCVFN4RFFVRkJMRU5CUVVVc1IwRkJSaXhEUVVGTkxFTkJRVU1zU1VGQlVDeERRVUZaTEV0QlFWbzdTVUZEVGl4SlFVRkJMRWRCUVU4c1EwRkJRU3hEUVVGRkxFZEJRVVlzUTBGQlRTeERRVUZETEVsQlFWQXNRMEZCV1N4TlFVRmFPMGxCUTFBc1JVRkJRU3hIUVVGTExFTkJRVUVzUTBGQlJTeEhRVUZHTEVOQlFVMHNRMEZCUXl4SlFVRlFMRU5CUVZrc1NVRkJXanRKUVVOTUxFVkJRVUVzUjBGQlN5eERRVUZCTEVOQlFVVXNSMEZCUml4RFFVRk5MRU5CUVVNc1NVRkJVQ3hEUVVGWkxFbEJRVm83U1VGSlRDeFJRVUZCTEVkQlFWY3NUMEZCUVN4cFJFRkJhME1zUzBGQmJFTTdTVUZEV0N4TlFVRkJMRWRCUVZNc1QwRkJRU3hwUkVGQlowTXNTVUZCYUVNN1NVRkZWQ3hKUVVGSExGbEJRVWc3VFVGRFF5eEpRVUZCTEVkQlFVOHNTVUZCU1N4RFFVRkRMRWRCUVV3c1EwRkJVeXhKUVVGVUxFVkJRV1VzU1VGQlppeEZRVVJTT3p0SlFVZEJMRWRCUVVFc1IwRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVsQlFWZ3NSVUZCYVVJc1IwRkJha0lzUlVGQmMwSXNSMEZCZEVJN1NVRkhUaXhQUVVGQkxFZEJRVlVzUTBGQlF5eEhRVUZCTEVkQlFVMHNSMEZCVUN4RFFVRkJMRWRCUVdNc1EwRkJReXhIUVVGQkxFZEJRVTBzUjBGQlVEdEpRVU40UWl4SlFVRjVRaXhSUVVGNlFqdE5RVUZCTEU5QlFVRXNSMEZCVlN4RFFVRkJMRWRCUVVrc1VVRkJaRHM3U1VGTFFTeERRVUZCTEVOQlFVVXNSMEZCUml4RFFVRk5MRU5CUVVNc1IwRkJVQ3hEUVVGWExFOUJRVmdzUlVGQmIwSXNRMEZCUXl4UFFVRkJMRWRCUVZVc1IwRkJXQ3hEUVVGQkxFZEJRV3RDTEVkQlFYUkRPMGxCUTBFc1NVRkJiMFVzV1VGQlFTeEpRVUZSTEZsQlFUVkZPMDFCUVVFc1EwRkJRU3hEUVVGRkxFZEJRVVlzUTBGQlRTeERRVUZETEVkQlFWQXNRMEZCVnl4clFrRkJXQ3hGUVVFclFpeEpRVUZKTEVOQlFVTXNWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeEZRVUY1UWl4RlFVRjZRaXhGUVVFMlFpeEZRVUUzUWl4RFFVRXZRaXhGUVVGQk96dEpRVU5CTEVOQlFVRXNRMEZCUlN4TFFVRkdMRU5CUVZFc1EwRkJReXhKUVVGVUxESkRRVUZqTEUxQlFVMHNRMEZCUXl4WFFVRlpMRWRCUVVFc1IwRkJUU3hoUVVGMlF6dEpRVVZCTEVsQlFXRXNTVUZCUVN4SFFVRlBMRWRCUVZBc1NVRkJaU3hOUVVFMVFqdE5RVUZCTEU5QlFVRXNRMEZCUVN4RlFVRkJPenRYUVVWQkxGVkJRVUVzUTBGQlZ5eFRRVUZCTzJGQlJWWXNUVUZCUVN4RFFVRlBMRXRCUVZBN1NVRkdWU3hEUVVGWUxFVkJTVVVzU1VGS1JqdEZRVzVEVVRzN1JVRXdRMVFzVTBGQlFTeEhRVUZaTEZOQlFVTXNTMEZCUkR0QlFVVllMRkZCUVVFN1NVRkJRU3hKUVVGQkxFZEJRVThzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4RFFVRkRMRWxCUVVrc1NVRkJUQ3hEUVVGVkxFTkJRVU1zVDBGQldDeERRVUZCTEVOQlFVRXNSMEZCZFVJc1RVRkJiRU03U1VGRFVDeEhRVUZCTEVkQlFVMHNRMEZCUVN4RFFVRkZMRXRCUVVZc1EwRkJVU3hEUVVGRExFbEJRVlFzUTBGQll5eExRVUZrTzBsQlEwNHNSMEZCUVN4SFFVRk5MRU5CUVVFc1EwRkJSU3hMUVVGR0xFTkJRVkVzUTBGQlF5eEpRVUZVTEVOQlFXTXNTMEZCWkR0SlFVTk9MRWRCUVVFc1IwRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVsQlFWZ3NSVUZCYVVJc1IwRkJha0lzUlVGQmMwSXNSMEZCZEVJN1NVRkZUaXhQUVVGQkxFZEJRVlVzUTBGQlFTeEhRVUZKTEVOQlFVTXNSMEZCUVN4SFFVRk5MRWRCUVZBc1EwRkJRU3hIUVVGakxFTkJRVU1zUjBGQlFTeEhRVUZOTEVkQlFWQTdTVUZGTlVJc1EwRkJRU3hEUVVGRkxFdEJRVVlzUTBGQlVTeERRVUZETEVkQlFWUXNRMEZCWVN4UFFVRmlMRVZCUVhOQ0xFTkJRVU1zVDBGQlFTeEhRVUZWTEVkQlFWZ3NRMEZCUVN4SFFVRnJRaXhIUVVGNFF6dFhRVVZCTEZWQlFVRXNRMEZCVnl4VFFVRkJPMkZCUlZZc1UwRkJRU3hEUVVGVkxFdEJRVlk3U1VGR1ZTeERRVUZZTEVWQlNVVXNTVUZLUmp0RlFWaFhPenRGUVc5Q1dpeERRVUZCTEVOQlFVVXNVMEZCUVR0SlFVTkVMRU5CUVVFc1EwRkJSU3huUWtGQlJpeERRVUZ0UWl4RFFVRkRMRWxCUVhCQ0xFTkJRWGxDTEZOQlFVRTdZVUZEZUVJc1RVRkJRU3hEUVVGUExFbEJRVkE3U1VGRWQwSXNRMEZCZWtJN1YwRkhRU3hEUVVGQkxFTkJRVVVzTmtKQlFVWXNRMEZCWjBNc1EwRkJReXhKUVVGcVF5eERRVUZ6UXl4VFFVRkJPMkZCUTNKRExGTkJRVUVzUTBGQlZTeEpRVUZXTzBsQlJIRkRMRU5CUVhSRE8wVkJTa01zUTBGQlJqdEJRWEJGUVRzN08wRkRSRUU3UlVGQlFTeERRVUZCTEVOQlFVVXNVMEZCUVR0WFFVTkVMRU5CUVVFc1EwRkJSU3g1UWtGQlJpeERRVUUwUWl4RFFVRkRMRWxCUVRkQ0xFTkJRV3RETEZOQlFVRTdRVUZGYWtNc1ZVRkJRVHROUVVGQkxFOUJRVUVzUjBGQlZUdFJRVVZVTEVsQlFVRXNSVUZCVFN4SlFVWkhPMUZCUjFRc1UwRkJRU3hGUVVGWExGZEJTRVk3TzAxQlRWWXNUMEZCUVN4SFFVRlZMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eEpRVUZTTEVOQlFXRXNVMEZCWWp0TlFVVldMRWxCUVVjc1pVRkJTRHRSUVVORExFOUJRVThzUTBGQlF5eFBRVUZTTEVkQlFXdENMRkZCUkc1Q096dGhRVWxCTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhQUVVGU0xFTkJRV2RDTEU5QlFXaENPMGxCWkdsRExFTkJRV3hETzBWQlJFTXNRMEZCUmp0QlFVRkJPenM3UVVORFFUdEZRVUZCTEVOQlFVRXNRMEZCUlN4VFFVRkJPMEZCUlVRc1VVRkJRVHRKUVVGQkxGTkJRVUVzUjBGQldUdEpRVU5hTEVOQlFVRXNRMEZCUlN4blFrRkJSaXhEUVVGdFFpeERRVUZETEU5QlFYQkNMRU5CUVRSQ08wMUJRVU1zVDBGQlFTeEZRVUZUTEZGQlFWWTdUVUZCYjBJc1UwRkJRU3hGUVVGWExGRkJRUzlDTzB0QlFUVkNPMGxCUlVFc1NVRkJRU3hIUVVGUExGTkJRVU1zU1VGQlJEdE5RVVZPTEVsQlFVY3NXVUZCU0R0bFFVVkRMRU5CUVVFc1EwRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVDeERRVU5ETEVOQlFVTXNTVUZFUml4RFFVTlBMRTlCUkZBc1JVRkRaMElzVDBGRWFFSXNRMEZGUXl4RFFVRkRMRkZCUmtZc1EwRkZWeXhwUWtGR1dDeERRVWRETEVOQlFVTXNTMEZJUml4RFFVRkJMRU5CU1VNc1EwRkJReXhQUVVwR0xFTkJTVlVzVFVGS1ZpeEZRVVpFT3p0SlFVWk5PMGxCVjFBc1QwRkJRU3hIUVVGVkxGTkJRVU1zUzBGQlJEdEJRVVZVTEZWQlFVRTdUVUZCUVN4SlFVRkJMRWRCUVU4c1UwRkJWU3hEUVVGQkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCVml4RFFVRmxMRU5CUVVNc1MwRkJNVUlzUTBGQlFUdE5RVVZRTEVsQlFVY3NXVUZCU0R0UlFVVkRMRU5CUVVNc1EwRkJReXhKUVVGR0xFTkJRVTg3VlVGRlRpeEhRVUZCTEVWQlFVc3NlVUpCUmtNN1ZVRkhUaXhSUVVGQkxFVkJRVlVzVFVGSVNqdFZRVWxPTEVsQlFVRXNSVUZCVFR0WlFVRkRMRWxCUVVFc1JVRkJUU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFXcENPMWxCUVhWQ0xFdEJRVUVzUlVGQlR5eEpRVUZKTEVOQlFVTXNTMEZCYmtNN1YwRktRVHRWUVV0T0xFMUJRVUVzUlVGQlVTeE5RVXhHTzFOQlFWQTdVVUZSUVN4VlFVRkJMRU5CUVZjc1UwRkJRVHRwUWtGRlZpeEpRVUZCTEVOQlFVc3NTVUZCVER0UlFVWlZMRU5CUVZnc1JVRkhSU3hIUVVoR0xFVkJWa1E3VDBGQlFTeE5RVUZCTzFGQlpVTXNRMEZCUXl4RFFVRkRMRWxCUVVZc1EwRkJUenRWUVVWT0xFZEJRVUVzUlVGQlN5eDVRa0ZHUXp0VlFVZE9MRkZCUVVFc1JVRkJWU3hOUVVoS08xVkJTVTRzU1VGQlFTeEZRVUZOTzFsQlFVTXNTVUZCUVN4RlFVRk5MRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQmFrSTdXVUZCZFVJc1MwRkJRU3hGUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCVml4SFFVRnJRaXhEUVVGb1JEdFhRVXBCTzFWQlMwNHNUVUZCUVN4RlFVRlJMRTFCVEVZN1UwRkJVQ3hGUVdaRU96dGhRVEJDUVN4RFFVRkJMRU5CUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZhTEVOQlFYRkNMRU5CUVVNc1RVRkJkRUlzUTBGQk5rSXNUMEZCTjBJc1JVRkJjME1zVDBGQmRFTXNRMEZEUXl4RFFVRkRMRmRCUkVZc1EwRkRZeXhwUWtGRVpDeERRVVZETEVOQlFVTXNUMEZHUml4RFFVVlZMRTFCUmxZN1NVRTVRbE03U1VGelExWXNUMEZCUVN4SFFVRlZMRk5CUVVNc1RVRkJSQ3hGUVVGVExFbEJRVlFzUlVGQlpTeEpRVUZtTzBGQlJWUXNWVUZCUVR0TlFVRkJMRWxCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXdzUjBGQllTeERRVUZvUWp0UlFVZERMRXRCUVVFc1IwRkJVU3hEUVVGQkxFTkJRVVVzWVVGQlJpeERRVUZuUWl4RFFVRkRMRkZCUVdwQ0xFTkJRVEJDTEZsQlFURkNPMUZCUTFJc1RVRkJRU3hIUVVGVExFTkJRVUVzUTBGQlJTeGhRVUZHTEVOQlFXZENMRU5CUVVNc1VVRkJha0lzUTBGQk1FSXNZMEZCTVVJN1VVRkRWQ3hQUVVGQkxFZEJRVlVzUTBGQlFTeERRVUZGTEdGQlFVWXNRMEZCWjBJc1EwRkJReXhSUVVGcVFpeERRVUV3UWl4bFFVRXhRanRSUVVOV0xFMUJRVUVzUjBGQlV5eERRVUZCTEVOQlFVVXNZVUZCUml4RFFVRm5RaXhEUVVGRExGRkJRV3BDTEVOQlFUQkNMR05CUVRGQ08xRkJRMVFzU1VGQlFTeEhRVUZQTEVOQlFVRXNRMEZCUlN4aFFVRkdMRU5CUVdkQ0xFTkJRVU1zVVVGQmFrSXNRMEZCTUVJc1dVRkJNVUk3VVVGRFVDeE5RVUZCTEVkQlFWTXNRMEZCUVN4RFFVRkZMR0ZCUVVZc1EwRkJaMElzUTBGQlF5eFJRVUZxUWl4RFFVRXdRaXhqUVVFeFFqdFJRVU5VTEV0QlFVRXNSMEZCVVN4RFFVRkJMRU5CUVVVc1YwRkJSaXhEUVVGakxFTkJRVU1zVVVGQlppeERRVUYzUWl4aFFVRjRRanRSUVVWU0xFdEJRVUVzUjBGQlVTeERRVUZCTEVOQlFVVXNZVUZCUml4RFFVRm5RaXhEUVVGRExGRkJRV3BDTEVOQlFUQkNMRmRCUVRGQ08xRkJRMUlzU1VGQlFTeEhRVUZQTEVOQlFVRXNRMEZCUlN4aFFVRkdMRU5CUVdkQ0xFTkJRVU1zVVVGQmFrSXNRMEZCTUVJc2FVSkJRVEZDTEVOQlFUUkRMRU5CUVVNc1NVRkJOME1zUTBGQmEwUXNUMEZCYkVRc1JVRkJNa1FzUzBGQk0wUXNRMEZCYVVVc1EwRkJReXhKUVVGc1JTeERRVUYxUlN4SlFVRkpMRU5CUVVNc1IwRkJOVVU3VVVGRFVDeEpRVUZCTEVkQlFVOHNRMEZCUVN4RFFVRkZMR0ZCUVVZc1EwRkJaMElzUTBGQlF5eFJRVUZxUWl4RFFVRXdRaXhuUWtGQk1VSXNRMEZCTWtNc1EwRkJReXhKUVVFMVF5eERRVUZwUkN4UFFVRnFSQ3hGUVVFd1JDeEpRVUV4UkN4RFFVRXJSQ3hEUVVGRExFbEJRV2hGTEVOQlFYRkZMRWxCUVVrc1EwRkJReXhGUVVFeFJUdFJRVVZRTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUVU4c1EwRkJReXhMUVVGU0xFTkJRV01zVTBGQlFUdFZRVVZpTEVOQlFVTXNRMEZCUXl4SlFVRkdMRU5CUVU4N1dVRkZUaXhIUVVGQkxFVkJRVXNzZVVKQlJrTTdXVUZIVGl4UlFVRkJMRVZCUVZVc1RVRklTanRaUVVsT0xFbEJRVUVzUlVGQlRUdGpRVUZETEVsQlFVRXNSVUZCVFN4SlFVRlFPMk5CUVdFc1RVRkJRU3hGUVVGUkxFTkJRWEpDTzJGQlNrRTdXVUZMVGl4TlFVRkJMRVZCUVZFc1RVRk1SanRYUVVGUU8xVkJVVUVzUTBGQlFTeERRVUZGTEV0QlFVWXNRMEZCVVN4RFFVRkRMRXRCUVZRc1EwRkJaU3hOUVVGbU8ybENRVVZCTEVsQlFVRXNRMEZCU3l4TlFVRk1MRVZCUVdFc1NVRkJZaXhGUVVGdFFpeEpRVUZ1UWp0UlFWcGhMRU5CUVdRN1VVRmxRU3hEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTMEZCVWl4RFFVRmpMRk5CUVVFN1ZVRkZZaXhEUVVGRExFTkJRVU1zU1VGQlJpeERRVUZQTzFsQlJVNHNSMEZCUVN4RlFVRkxMSGxDUVVaRE8xbEJSMDRzVVVGQlFTeEZRVUZWTEUxQlNFbzdXVUZKVGl4SlFVRkJMRVZCUVUwN1kwRkJReXhKUVVGQkxFVkJRVTBzU1VGQlVEdGpRVUZoTEUxQlFVRXNSVUZCVVN4RFFVRnlRanRoUVVwQk8xbEJTMDRzVFVGQlFTeEZRVUZSTEUxQlRFWTdWMEZCVUR0cFFrRlJRU3hEUVVGQkxFTkJRVVVzUzBGQlJpeERRVUZSTEVOQlFVTXNTMEZCVkN4RFFVRmxMRTFCUVdZN1VVRldZU3hEUVVGa08xRkJZMEVzUTBGQlFTeERRVUZGTEV0QlFVWXNRMEZEUXl4RFFVRkRMRWxCUkVZc1EwRkRUeXhKUVVGSkxFTkJRVU1zUzBGRVdqdFJRVWRCTEVOQlFVRXNRMEZCUlN4SlFVRkdMRU5CUTBNc1EwRkJReXhKUVVSR0xFTkJRMDhzU1VGQlNTeERRVUZETEZkQlJGbzdVVUZIUVN4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVORExFTkJRVU1zVFVGRVJpeERRVU5UTEV0QlJGUTdVVUZKUVN4RFFVRkJMRU5CUVVVc1MwRkJSaXhEUVVORExFTkJRVU1zVFVGRVJpeERRVU5UTEVsQlJGUXNRMEZGUXl4RFFVRkRMRTFCUmtZc1EwRkZVeXhKUVVaVU8xRkJTVUVzUTBGQlFTeERRVUZGTEUxQlFVWXNRMEZEUXl4RFFVRkRMRTFCUkVZc1EwRkRVeXhMUVVSVU8xRkJTVUVzUTBGQlFTeERRVUZGTEU5QlFVWXNRMEZEUXl4RFFVRkRMRTFCUkVZc1EwRkRVeXhOUVVSVUxFTkJSVU1zUTBGQlF5eE5RVVpHTEVOQlJWTXNTVUZHVkN4RFFVZERMRU5CUVVNc1RVRklSaXhEUVVkVExFMUJTRlE3VVVGTFFTeERRVUZCTEVOQlFVVXNUVUZCUml4RFFVTkRMRU5CUVVNc1RVRkVSaXhEUVVOVExFOUJSRlE3VVVGSFFTeERRVUZCTEVOQlFVVXNTMEZCUml4RFFVTkRMRU5CUVVNc1RVRkVSaXhEUVVOVExFMUJSRlE3VVVGSFFTeERRVUZCTEVOQlFVVXNUVUZCUml4RFFVTkRMRU5CUVVNc1RVRkVSaXhEUVVOVExFdEJSRlE3WlVGSFFTeERRVUZCTEVOQlFVVXNTMEZCUml4RFFVRlJMRU5CUVVNc1MwRkJWQ3hEUVVGbE8xVkJRVU1zVVVGQlFTeEZRVUZWTEZGQlFWZzdWVUZCY1VJc1NVRkJRU3hGUVVGTkxFbEJRVE5DTzFWQlFXbERMRkZCUVVFc1JVRkJWU3hMUVVFelF6dFRRVUZtTEVWQk5VVkVPMDlCUVVFc1RVRkJRVHRsUVdkR1F5eEpRVUZCTEVOQlFVc3NUVUZCVEN4RlFVRmhMRWxCUVdJc1JVRkJiVUlzU1VGQmJrSXNSVUZvUmtRN08wbEJSbE03U1VGelJsWXNTVUZCUVN4SFFVRlBMRk5CUVVNc1RVRkJSQ3hGUVVGVExFbEJRVlFzUlVGQlpTeEpRVUZtTzBGQlIwNHNWVUZCUVR0TlFVRkJMRkZCUVVFc1IwRkJWenROUVVOWUxFdEJRVUVzUjBGQlVTeERRVUZCTEVOQlFVVXNUVUZCUml4RFFVRlRMRU5CUVVNc1QwRkJWaXhEUVVGclFpeHpRa0ZCYkVJc1EwRkJlVU1zUTBGQlF5eE5RVUV4UXl4SFFVRnRSRHROUVVjelJDeERRVUZCTEVOQlFVVXNUVUZCUml4RFFVRlRMRU5CUVVNc1NVRkJWaXhEUVVGbExHZENRVUZtTEVOQlFXZERMRU5CUVVNc1NVRkJha01zUTBGQmMwTXNVMEZCUVR0QlFVZHlReXhaUVVGQk8xRkJRVUVzU1VGQlFTeEhRVUZQTzFGQlExQXNTMEZCUVN4SFFVRlJMRU5CUVVFc1EwRkJSU3hKUVVGR0xFTkJRVThzUTBGQlF5eEpRVUZTTEVOQlFXRXNaMEpCUVdJN1VVRkZVaXhKUVVGVkxFdEJRVUVzUjBGQlVTeEpRVUZKTEVOQlFVTXNTMEZCWWl4SlFVRnpRaXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNUMEZCVWl4RFFVRm5RaXh6UWtGQmFFSXNRMEZCZFVNc1EwRkJReXhOUVVGNFF5eExRVUZyUkN4TFFVRnNSanRCUVVGQkxHbENRVUZCT3p0UlFVbEJMRWxCUVVjc2RVSkJRVWc3VlVGRFF5eEpRVUZCTEVkQlFVOHNVVUZCVXl4RFFVRkJMRXRCUVVFc1JVRkVha0k3VTBGQlFTeE5RVUZCTzFWQlIwTXNTVUZCUVN4SFFVRlBPMWxCUlU0c1VVRkJRU3hGUVVGVkxFVkJSa283V1VGSFRpeEpRVUZCTEVWQlFVMHNTVUZJUVR0WlFVbE9MRXRCUVVFc1JVRkJUeXhMUVVwRU96dFZRVTFRTEZGQlFWTXNRMEZCUVN4TFFVRkJMRU5CUVZRc1IwRkJhMElzUzBGVWJrSTdPMUZCV1VFc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZrTEVOQlFXMUNMRWxCUVc1Q08yVkJRMEVzU1VGQlNTeERRVUZETEVsQlFVd3NSMEZCV1R0TlFYWkNlVUlzUTBGQmRFTTdUVUV3UWtFc1VVRkJRU3hIUVVGWExGRkJRVkVzUTBGQlF5eE5RVUZVTEVOQlFXZENMRk5CUVVNc1QwRkJSRHRSUVVVeFFpeEpRVUZITEdWQlFVZzdRVUZEUXl4cFFrRkJUeXhMUVVSU08xTkJRVUVzVFVGQlFUdEJRVWRETEdsQ1FVRlBMRTFCU0ZJN08wMUJSakJDTEVOQlFXaENPMDFCVlZnc1UwRkJWU3hEUVVGQkxFbEJRVUVzUTBGQlZpeEhRVUZyUWp0aFFVTnNRaXhKUVVGQkxFTkJRVXNzVVVGQlVTeERRVUZETEV0QlFWUXNRMEZCUVN4RFFVRk1PMGxCTlVOTk8xZEJhMFJRTEVOQlFVRXNRMEZCUlN4eFFrRkJSaXhEUVVGM1FpeERRVUZETEVsQlFYcENMRU5CUVRoQ0xGTkJRVUU3UVVGRk4wSXNWVUZCUVR0TlFVRkJMRWxCUVVFc1IwRkJUeXhEUVVGQkxFTkJRVVVzU1VGQlJpeERRVUZQTEVOQlFVTXNTVUZCVWl4RFFVRmhMR1ZCUVdJN1lVRkZVQ3hEUVVGRExFTkJRVU1zU1VGQlJpeERRVUZQTzFGQlJVNHNSMEZCUVN4RlFVRkxMSGxDUVVaRE8xRkJSMDRzVVVGQlFTeEZRVUZWTEUxQlNFbzdVVUZKVGl4SlFVRkJMRVZCUVUwN1ZVRkJReXhKUVVGQkxFVkJRVTBzU1VGQlVEdFRRVXBCTzFGQlMwNHNUVUZCUVN4RlFVRlJMRXRCVEVZN1VVRk5UaXhQUVVGQkxFVkJRVk1zUTBGQlFTeFRRVUZCTEV0QlFVRTdhVUpCUVVFc1UwRkJReXhKUVVGRU8xbEJRMUlzU1VGQk5rSXNTVUZCU1N4RFFVRkRMRTFCUVd4RE8zRkNRVUZCTEU5QlFVRXNRMEZCVVN4TFFVRlNMRVZCUVdNc1NVRkJaQ3hGUVVGdlFpeEpRVUZ3UWl4RlFVRkJPenRWUVVSUk8xRkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVN4RFFVNUlPMDlCUVZBN1NVRktOa0lzUTBGQk9VSTdSVUU1VEVNc1EwRkJSanRCUVVGQk96czdRVU5FUVR0QlFVRkJMRTFCUVVFN08wVkJRVUVzVFVGQlRTeERRVUZETEZkQlFWQXNUVUZCVFN4RFFVRkRMRk5CUTA0N1NVRkJRU3hKUVVGQkxFVkJRME03VFVGQlFTeEhRVUZCTEVWQlFVc3NSMEZCVER0TlFVTkJMRWxCUVVFc1JVRkJUU3hIUVVST08wMUJSVUVzVFVGQlFTeEZRVUZSTEVkQlJsSTdUVUZIUVN4TlFVRkJMRVZCUVZFc1IwRklVanRMUVVSRU96czdPMGxCVTBRc1RVRkJUU3hEUVVGRExGTkJRVlU3T3p0RlFVbHFRaXhEUVVGQkxFTkJRVVVzVFVGQlJpeERRVUZUTEVOQlFVTXNTMEZCVml4RFFVRm5RaXhUUVVGQk8xZEJRMllzVFVGQlRTeERRVUZETEUxQlFWQXNSMEZCWjBJN1JVRkVSQ3hEUVVGb1FqczdSVUZIUVN4RFFVRkJMRU5CUVVVc1RVRkJSaXhEUVVGVExFTkJRVU1zU1VGQlZpeERRVUZsTEZOQlFVRTdWMEZEWkN4TlFVRk5MRU5CUVVNc1RVRkJVQ3hIUVVGblFqdEZRVVJHTEVOQlFXWTdPMFZCUjBFc1EwRkJRU3hEUVVGRkxFMUJRVVlzUTBGQlV5eERRVUZETEUxQlFWWXNRMEZCYVVJc1UwRkJRVHRKUVVOb1FpeEpRVUVyUWl4SlFVRkpMRU5CUVVNc1VVRkJjRU03VFVGQlFTeFpRVUZCTEVOQlFXRXNTVUZCU1N4RFFVRkRMRkZCUVd4Q0xFVkJRVUU3TzFkQlEwRXNTVUZCU1N4RFFVRkRMRkZCUVV3c1IwRkJaMElzVlVGQlFTeERRVUZYTEZOQlFVRTdZVUZETVVJc1EwRkJRU3hEUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZETEU5QlFWSXNRMEZCWjBJc1UwRkJhRUk3U1VGRU1FSXNRMEZCV0N4RlFVVmtMRWRCUm1NN1JVRkdRU3hEUVVGcVFqczdSVUZUUVN4TlFVRk5MRU5CUVVNc1UwRkJVQ3hOUVVGTkxFTkJRVU1zVDBGQlV5eFRRVUZETEV0QlFVUXNSVUZCVVN4UFFVRlNPMEZCUTJRc1VVRkJRVHRKUVVGQkxFMUJRVUVzUjBGQlV6dEJRVU5VTEZOQlFYVkNMR3RHUVVGMlFqdE5RVUZCTEUxQlFVRXNTVUZCVlR0QlFVRldPMWRCUlVFc1EwRkJReXhOUVVGQkxFZEJRVk1zUzBGQlZpeERRVUZuUWl4RFFVRkRMRXRCUVdwQ0xFTkJRWFZDTEU5QlFVRXNSMEZCVlN4RFFVRkRMRU5CUVd4RE8wVkJTbU03TzBWQlQyaENMRmxCUVVFc1IwRkJaU3hUUVVGRExFdEJRVVE3U1VGRFpDeEpRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk9MRWRCUVdVc1EwRkJiRUk3WVVGRFF5eExRVUZCTEVkQlFWRXNTVUZFVkR0TFFVRkJMRTFCUVVFN1lVRkhReXhOUVVoRU96dEZRVVJqT3p0RlFVMW1MRlZCUVVFc1IwRkJZU3hUUVVGRExFbEJRVVFzUlVGQlR5eExRVUZRTEVWQlFXTXNUVUZCWkR0SlFVTmFMRWxCUVVFc1IwRkJUeXhaUVVGQkxFTkJRV0VzU1VGQllqdEpRVVZRTEVsQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVV3c1IwRkJZeXhEUVVGcVFqdE5RVU5ETEVsQlFVRXNTVUZCVVN4TlFVRk5MRU5CUVVNc1NVRkJVQ3hEUVVGWkxFdEJRVm9zUlVGQmJVSXNRMEZCYmtJc1JVRkVWRHRMUVVGQkxFMUJRVUU3VFVGSFF5eEpRVUZCTEVsQlFWRXNUVUZJVkRzN1YwRkxRU3hKUVVGQkxFZEJRVTg3UlVGU1N6czdSVUZYWWl4TlFVRk5MRU5CUVVNc1pVRkJVQ3hOUVVGTkxFTkJRVU1zWVVGQlpTeFRRVUZETEV0QlFVUTdRVUZGY2tJc1VVRkJRVHRKUVVGQkxFbEJRVUVzUjBGQlR6dEpRVU5RTEVsQlFVRXNSMEZCVnl4SlFVRkJMRWxCUVVFc1EwRkJTeXhMUVVGQkxFZEJRVkVzU1VGQllqdEpRVU5ZTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJUQ3hEUVVGQkxFTkJRVUVzUjBGQmIwSTdTVUZEZUVJc1EwRkJRU3hIUVVGSkxFbEJRVWtzUTBGQlF5eFhRVUZNTEVOQlFVRTdTVUZEU2l4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExHRkJRVXdzUTBGQlFUdEpRVU5LTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGQk8wbEJSMG9zU1VGQkswSXNRMEZCUVN4SFFVRkpMRU5CUVc1RE8wMUJRVUVzU1VGQlFTeEpRVUZSTEVOQlFVRXNSMEZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRWGhDT3p0SlFVTkJMRWxCUVdkRUxFTkJRVUVzUjBGQlNTeERRVUZ3UkR0TlFVRkJMRWxCUVVFc1IwRkJUeXhWUVVGQkxFTkJRVmNzU1VGQldDeEZRVUZwUWl4RFFVRnFRaXhGUVVGdlFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVdoRExFVkJRVkE3TzBsQlEwRXNTVUZCYTBRc1EwRkJRU3hIUVVGSkxFTkJRVW9zU1VGQlV5eERRVUZCTEVkQlFVa3NRMEZCTDBRN1RVRkJRU3hKUVVGQkxFZEJRVThzVlVGQlFTeERRVUZYTEVsQlFWZ3NSVUZCYVVJc1EwRkJha0lzUlVGQmIwSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGb1F5eEZRVUZRT3p0SlFVTkJMRWxCUVd0RUxFTkJRVUVzUjBGQlNTeERRVUZLTEVsQlFWTXNRMEZCUVN4SFFVRkpMRU5CUVdJc1NVRkJhMElzUTBGQlFTeEhRVUZKTEVOQlFYaEZPMDFCUVVFc1NVRkJRU3hIUVVGUExGVkJRVUVzUTBGQlZ5eEpRVUZZTEVWQlFXbENMRU5CUVdwQ0xFVkJRVzlDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJhRU1zUlVGQlVEczdWMEZGUVR0RlFXWnhRanM3UlVGcFFuUkNMRTFCUVUwc1EwRkJReXh2UWtGQlVDeE5RVUZOTEVOQlFVTXNhMEpCUVc5Q0xGTkJRVU1zUzBGQlJEdEJRVVV4UWl4UlFVRkJPMGxCUVVFc1NVRkJRU3hIUVVGUE8wbEJRMUFzU1VGQlFTeEhRVUZYTEVsQlFVRXNTVUZCUVN4RFFVRkxMRXRCUVVFc1IwRkJVU3hKUVVGaU8wbEJRMWdzUTBGQlFTeEhRVUZKTEVsQlFVa3NRMEZCUXl4VlFVRk1MRU5CUVVFc1EwRkJRU3hIUVVGdlFqdEpRVU40UWl4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExGZEJRVXdzUTBGQlFUdEpRVU5LTEVOQlFVRXNSMEZCU1N4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGQk8wbEJRMG9zUTBGQlFTeEhRVUZKTEVsQlFVa3NRMEZCUXl4aFFVRk1MRU5CUVVFN1NVRkhTaXhKUVVFNFFpeERRVUZCTEVkQlFVa3NRMEZCYkVNN1FVRkJRU3hoUVVGUExFTkJRVUVzUjBGQlNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVhaQ096dEpRVU5CTEVsQlFXZEVMRU5CUVVFc1IwRkJTU3hEUVVGd1JEdEJRVUZCTEdGQlFVOHNWVUZCUVN4RFFVRlhMRWxCUVZnc1JVRkJhVUlzUTBGQmFrSXNSVUZCYjBJc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZvUXl4RlFVRlFPenRKUVVOQkxFbEJRV3RFTEVOQlFVRXNSMEZCU1N4RFFVRjBSRHRCUVVGQkxHRkJRVThzVlVGQlFTeERRVUZYTEVsQlFWZ3NSVUZCYVVJc1EwRkJha0lzUlVGQmIwSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGb1F5eEZRVUZRT3p0SlFVTkJMRWxCUVd0RUxFTkJRVUVzUjBGQlNTeERRVUYwUkR0QlFVRkJMR0ZCUVU4c1ZVRkJRU3hEUVVGWExFbEJRVmdzUlVGQmFVSXNRMEZCYWtJc1JVRkJiMElzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRm9ReXhGUVVGUU96dEZRV0l3UWpzN1JVRnJRak5DTEZWQlFVRXNSMEZCWVRzN1ZVRkhZaXhOUVVGTkxFTkJRVU1zVTBGQlVTeERRVUZETEdkQ1FVRkVMRU5CUVVNc1ZVRkJXU3hUUVVGQk8wbEJRek5DTEVsQlFVY3NRMEZCU1N4VlFVRlFPMDFCUTBNc1ZVRkJRU3hIUVVGaE8yRkJRMklzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRm9RaXhEUVVGMVFpeEpRVUYyUWl4RlFVWkVPenRGUVVReVFqczdSVUZSTlVJc1lVRkJRU3hIUVVGblFqczdSVUZEYUVJc1RVRkJUU3hEUVVGRExGZEJRVkFzVFVGQlRTeERRVUZETEZOQlFWY3NVMEZCUXl4TFFVRkVPMWRCUTJwQ0xHRkJRV0VzUTBGQlF5eEpRVUZrTEVOQlFXMUNMRXRCUVc1Q08wVkJSR2xDT3p0RlFVbHNRaXhMUVVGQkxFZEJRVkVzVTBGQlF5eEhRVUZFTzBGQlExQXNVVUZCUVR0SlFVRkJMRWxCUVdVc1IwRkJRU3hMUVVGUExFbEJRVkFzU1VGQlpTeFBRVUZSTEVkQlFWSXNTMEZCYTBJc1VVRkJhRVE3UVVGQlFTeGhRVUZQTEVsQlFWQTdPMGxCUTBFc1NVRkJRU3hIUVVGWExFbEJRVUVzUjBGQlJ5eERRVUZETEZkQlFVb3NRMEZCUVR0QlFVTllMRk5CUVVFc1ZVRkJRVHROUVVORExFbEJRVXNzUTBGQlFTeEhRVUZCTEVOQlFVd3NSMEZCV1N4TFFVRkJMRU5CUVUwc1IwRkJTU3hEUVVGQkxFZEJRVUVzUTBGQlZqdEJRVVJpTzFkQlJVRTdSVUZNVHpzN1JVRlBVaXhWUVVGQkxFZEJRV0VzVTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2p0SlFVTmFMRTlCUVU4c1EwRkJReXhIUVVGU0xFTkJRVmtzUjBGQldpeEZRVUZwUWl4RFFVRnFRaXhGUVVGdlFpeERRVUZ3UWp0WFFVTkJMRlZCUVVFc1EwRkJWeXhEUVVGRExGTkJRVUU3VFVGRFdDeFBRVUZQTEVOQlFVTXNSMEZCVWl4RFFVRlpMRWRCUVZvc1JVRkJhVUlzUTBGQmFrSXNSVUZCYjBJc1EwRkJjRUk3WVVGRFFTeERRVUZETEVOQlFVTXNUVUZCUml4RFFVRlRMRU5CUVZRc1JVRkJXVHRSUVVWWUxGTkJRVUVzUlVGQlZ6dFZRVVZXTEVsQlFVRXNSVUZCVFN4UlFVWkpPMU5CUmtFN1VVRk5XQ3hWUVVGQkxFVkJRVmtzVDBGT1JEdFBRVUZhTzBsQlJsY3NRMEZCUkN4RFFVRllMRVZCVlU4c1EwRkJRU3hIUVVGSkxFbEJWbGc3UlVGR1dUczdSVUZwUW1Jc1RVRkJUU3hEUVVGRExHVkJRVkFzVFVGQlRTeERRVUZETEdGQlFXVXNVMEZCUVR0QlFVTnlRaXhSUVVGQk8wbEJRVUVzU1VGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVmp0QlFVVkRMRmRCUVVFc0swUkJRVUU3TzFGQlEwTXNWVUZCUVN4RFFVRlhMRU5CUVVNc1EwRkJReXhOUVVGR0xFTkJRVk1zUlVGQlZDeEZRVUZoTEZsQlFXSXNRMEZCV0N4RlFVRjFReXhMUVVGMlF6dEJRVVJFTzJGQlJVRXNZVUZCUVN4SFFVRm5RaXhIUVVwcVFqczdSVUZFY1VJN08wVkJVM1JDTEVOQlFVRXNRMEZCUlN4TlFVRkdMRU5CUVZNc1EwRkJReXhMUVVGV0xFTkJRV2RDTEZOQlFVRTdWMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJVQ3hEUVVGQk8wVkJRVWdzUTBGQmFFSTdPMFZCV1VFc1NVRkJTU3hEUVVGRExGVkJRVXdzU1VGQlNTeERRVUZETEZGQlFWVXNVMEZCUXl4TFFVRkVMRVZCUVZFc1IwRkJVaXhGUVVGaExFZEJRV0k3VjBGRFpDeEpRVUZKTEVOQlFVTXNSMEZCVEN4RFFVRlRMRWxCUVVrc1EwRkJReXhIUVVGTUxFTkJRVk1zUzBGQlZDeEZRVUZuUWl4SFFVRm9RaXhEUVVGVUxFVkJRU3RDTEVkQlFTOUNPMFZCUkdNN08wVkJTV1lzU1VGQlNTeERRVUZETEZOQlFVd3NTVUZCU1N4RFFVRkRMRTlCUVZNc1UwRkJReXhEUVVGRUxFVkJRVWtzUTBGQlNpeEZRVUZQTEVOQlFWQTdWMEZEWWl4RFFVRkRMRU5CUVVFc1IwRkJTU3hEUVVGTUxFTkJRVUVzUjBGQlZTeERRVUZETEVOQlFVRXNSMEZCU1N4RFFVRkRMRU5CUVVFc1IwRkJTU3hEUVVGTUxFTkJRVXc3UlVGRVJ6czdSVUZMWkN4SlFVRkpMRU5CUVVNc1lVRkJUQ3hKUVVGSkxFTkJRVU1zVjBGQllTeFRRVUZETEVkQlFVUTdRVUZEWkN4UlFVRkJPMGxCUVVFc1RVRkJRU3hIUVVGVExESkRRVUV5UXl4RFFVRkRMRWxCUVRWRExFTkJRV2xFTEVkQlFXcEVPMGxCUTFRc1NVRkxTeXhOUVV4TU8wRkJRVUVzWVVGQlR6dFJRVU5JTEVOQlFVRXNSVUZCUnl4UlFVRkJMRU5CUVZNc1RVRkJUeXhEUVVGQkxFTkJRVUVzUTBGQmFFSXNSVUZCYjBJc1JVRkJjRUlzUTBGRVFUdFJRVVZJTEVOQlFVRXNSVUZCUnl4UlFVRkJMRU5CUVZNc1RVRkJUeXhEUVVGQkxFTkJRVUVzUTBGQmFFSXNSVUZCYjBJc1JVRkJjRUlzUTBGR1FUdFJRVWRJTEVOQlFVRXNSVUZCUnl4UlFVRkJMRU5CUVZNc1RVRkJUeXhEUVVGQkxFTkJRVUVzUTBGQmFFSXNSVUZCYjBJc1JVRkJjRUlzUTBGSVFUdFJRVUZRT3p0WFFVMUJPMFZCVW1NN08wVkJWV3hDTEVsQlFVa3NRMEZCUXl4aFFVRk1MRWxCUVVrc1EwRkJReXhYUVVGaExGTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NSVUZCVHl4RFFVRlFPMEZCUTJRc1YwRkJUeXhIUVVGQkxFZEJRVTBzUTBGQlF5eERRVUZETEVOQlFVRXNTVUZCU3l4RlFVRk9MRU5CUVVFc1IwRkJXU3hEUVVGRExFTkJRVUVzU1VGQlN5eEZRVUZPTEVOQlFWb3NSMEZCZDBJc1EwRkJReXhEUVVGQkxFbEJRVXNzUTBGQlRpeERRVUY0UWl4SFFVRnRReXhEUVVGd1F5eERRVUZ6UXl4RFFVRkRMRkZCUVhaRExFTkJRV2RFTEVWQlFXaEVMRU5CUVcxRUxFTkJRVU1zUzBGQmNFUXNRMEZCTUVRc1EwRkJNVVE3UlVGRVF6czdSVUZKYkVJc1NVRkJTU3hEUVVGRExHVkJRVXdzU1VGQlNTeERRVUZETEdGQlFXVXNVMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkE3UVVGRmJrSXNVVUZCUVR0SlFVRkJMRVZCUVVFc1IwRkJTeXhKUVVGSkxFTkJRVU1zVVVGQlRDeERRVUZqTEVOQlFXUTdTVUZEVEN4RlFVRkJMRWRCUVVzc1NVRkJTU3hEUVVGRExGRkJRVXdzUTBGQll5eERRVUZrTzBsQlJVd3NSVUZCUVN4SFFVRkxPMDFCUTBvc1EwRkJRU3hGUVVGSExFbEJRVWtzUTBGQlF5eExRVUZNTEVOQlFWY3NTVUZCU1N4RFFVRkRMRWxCUVV3c1EwRkJWU3hEUVVGV0xFVkJRV0VzUlVGQlJTeERRVUZETEVOQlFXaENMRVZCUVcxQ0xFVkJRVVVzUTBGQlF5eERRVUYwUWl4RFFVRllMRU5CUkVNN1RVRkZTaXhEUVVGQkxFVkJRVWNzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4SlFVRkpMRU5CUVVNc1NVRkJUQ3hEUVVGVkxFTkJRVllzUlVGQllTeEZRVUZGTEVOQlFVTXNRMEZCYUVJc1JVRkJiVUlzUlVGQlJTeERRVUZETEVOQlFYUkNMRU5CUVZnc1EwRkdRenROUVVkS0xFTkJRVUVzUlVGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCVEN4RFFVRlhMRWxCUVVrc1EwRkJReXhKUVVGTUxFTkJRVlVzUTBGQlZpeEZRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRm9RaXhGUVVGdFFpeEZRVUZGTEVOQlFVTXNRMEZCZEVJc1EwRkJXQ3hEUVVoRE96dEJRVTFNTEZkQlFVOHNTVUZCU1N4RFFVRkRMRkZCUVV3c1EwRkJZeXhGUVVGRkxFTkJRVU1zUTBGQmFrSXNSVUZCYjBJc1JVRkJSU3hEUVVGRExFTkJRWFpDTEVWQlFUQkNMRVZCUVVVc1EwRkJReXhEUVVFM1FqdEZRVmhaT3p0RlFXbENjRUlzWTBGQlFTeEhRVUZwUWl4VFFVRkJPMEZCUTJoQ0xGRkJRVUU3U1VGQlFTeEhRVUZCTEVkQlFVMHNRMEZCUVN4RFFVRkZMRWxCUVVZc1EwRkJUeXhEUVVGRExGRkJRVklzUTBGQmFVSXNaVUZCYWtJN1NVRkRUaXhMUVVGQkxFZEJRVkVzUTBGQlFTeERRVUZGTEVsQlFVWXNRMEZCVHl4RFFVRkRMRkZCUVZJc1EwRkJhVUlzYVVKQlFXcENPMGxCUlZJc1IwRkJRU3hIUVVGTkxFTkJRVUVzUTBGQlJTeEhRVUZHTEVOQlFVMHNRMEZCUXl4SlFVRlFMRU5CUVZrc1MwRkJXanRKUVVOT0xFZEJRVUVzUjBGQlRTeERRVUZCTEVOQlFVVXNSMEZCUml4RFFVRk5MRU5CUVVNc1NVRkJVQ3hEUVVGWkxFdEJRVm83U1VGRFRpeEZRVUZCTEVkQlFVc3NRMEZCUVN4RFFVRkZMRWRCUVVZc1EwRkJUU3hEUVVGRExFbEJRVkFzUTBGQldTeEpRVUZhTzBsQlEwd3NSVUZCUVN4SFFVRkxMRU5CUVVFc1EwRkJSU3hIUVVGR0xFTkJRVTBzUTBGQlF5eEpRVUZRTEVOQlFWa3NTVUZCV2p0SlFVTk1MRWRCUVVFc1IwRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVOQlFVRXNRMEZCUlN4SFFVRkdMRU5CUVUwc1EwRkJReXhKUVVGUUxFTkJRVmtzUzBGQldpeERRVUZZTEVWQlFTdENMRWRCUVM5Q0xFVkJRVzlETEVkQlFYQkRPMGxCUTA0c1VVRkJRU3hIUVVGWExFOUJRVUVzYVVSQlFXdERMRXRCUVd4RE8wbEJSVmdzVDBGQlFTeEhRVUZWTEVOQlFVTXNSMEZCUVN4SFFVRk5MRWRCUVZBc1EwRkJRU3hIUVVGakxFTkJRVU1zUjBGQlFTeEhRVUZOTEVkQlFWQXNRMEZCWkN4SFFVRTBRanRKUVVOMFF5eEpRVUV5UWl4UlFVRXpRanROUVVGQkxFOUJRVUVzUjBGQlZTeEhRVUZCTEVkQlFVMHNVVUZCYUVJN08wbEJUVUVzUTBGQlFTeERRVUZGTEVkQlFVWXNRMEZCVFN4RFFVRkRMRWRCUVZBc1EwRkJWeXhQUVVGWUxFVkJRVzlDTEU5QlFVRXNSMEZCVlN4SFFVRTVRanRKUVVOQkxFbEJRVEJGTEZsQlFVRXNTVUZCVVN4WlFVRnNSanROUVVGQkxFTkJRVUVzUTBGQlJTeEhRVUZHTEVOQlFVMHNRMEZCUXl4SFFVRlFMRU5CUVZjc2EwSkJRVmdzUlVGQkswSXNTVUZCU1N4RFFVRkRMRlZCUVV3c1EwRkJaMElzVDBGQlFTeEhRVUZWTEVkQlFURkNMRVZCUVN0Q0xFVkJRUzlDTEVWQlFXMURMRVZCUVc1RExFTkJRUzlDTEVWQlFVRTdPMWRCU1VFc1EwRkJRU3hEUVVGRkxFdEJRVVlzUTBGQlVTeERRVUZETEVsQlFWUXNRMEZCWXl4SFFVRkJMRWRCUVUwc1MwRkJUaXhIUVVGakxFZEJRVFZDTzBWQmRrSm5RanM3UlVGNVFtcENMRU5CUVVFc1EwRkJSU3hUUVVGQk8xZEJRMFFzUTBGQlFTeERRVUZGTEZkQlFVWXNRMEZCWXl4RFFVRkRMRWxCUVdZc1EwRkJiMElzVTBGQlFUdGhRVU51UWl4SlFVRkpMRU5CUVVNc1YwRkJUQ3hKUVVGSkxFTkJRVU1zVTBGQlZ6dEpRVVJITEVOQlFYQkNPMFZCUkVNc1EwRkJSanM3UlVGTlFTeGpRVUZCTEVkQlFXbENPenM3T3pzN096czdPenM3T3pzN096czdPMFZCYlVKcVFpeHBRa0ZCYVVJc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQk5VSXNSMEZCTmtNN08wVkJXVGRETEVOQlFVTXNVMEZCUVR0QlFVVkJMRkZCUVVFN1YwRkJRU3hQUVVGQkxFZEJRVlVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXpzN1FVRkZaanM3T3pzN096czdPenM3T3pzN096czdPenM3TzBWQlNrRXNRMEZCUkN4RFFVRkJMRU5CUVVFN08xZEJhME5CTEUxQlFVMHNRMEZCUXl4VlFVRlRMRU5CUVVNc1owSkJRVVFzUTBGQlF5eFRRVUZYTEZOQlFVRTdWMEZETTBJc1NVRkJTU3hEUVVGRExFOUJRVXdzUTBGQllTdzJRa0ZCWWl4RlFVRTBReXhOUVVFMVF6dEZRVVF5UWpzN1YwRkxOVUlzVFVGQlRTeERRVUZETEZWQlFWTXNRMEZCUXl4dlFrRkJSQ3hEUVVGRExHRkJRV1VzVTBGQlF5eE5RVUZFTEVWQlFWTXNUMEZCVkR0WFFVTXZRaXhKUVVGSkxFTkJRVU1zVDBGQlRDeERRVUZwUWl4SlFVRkJMRTFCUVVFc1EwRkJUeXhOUVVGTkxFTkJRVU1zVFVGQlVDeERRVUZCTEVOQlFWQXNSVUZCZDBJc1NVRkJlRUlzUTBGQmFrSXNSVUZCWjBRc1QwRkJhRVE3UlVGRUswSTdRVUZzVTJoRElpd2labWxzWlNJNkltRndjQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmtCaGNIQWdQU0JoYm1kMWJHRnlMbTF2WkhWc1pTZ25aMkZ0WlNjc0lGdGRLVnh5WEc1Y2NseHVYSEpjYmx4eVhHNUFZWEJ3TG1OdmJuUnliMnhzWlhJb0owZGhiV1ZEYjI1MGNtOXNiR1Z5Snl3Z1d5Y2tjMk52Y0dVbkxDQW9KSE5qYjNCbEtTQXRQbHh5WEc1Y2NseHVYSEpjYmx4MEpITmpiM0JsTG5KdmRXNWtJRDBnS0haaGJIVmxMQ0J3Y21WamFYTnBiMjRwSUMwK1hISmNibHh5WEc1Y2RGeDBjQ0E5SUhCeVpXTnBjMmx2YmlBL0lEQmNjbHh1WEhSY2RHNGdQU0JOWVhSb0xuQnZkeWd4TUN3Z2NDbGNjbHh1WEhKY2JseDBYSFJOWVhSb0xuSnZkVzVrS0haaGJIVmxJQ29nYmlrZ0x5QnVYSEpjYmx4eVhHNWRLVnh5WEc1Y2NseHVYSEpjYmx4eVhHNUFZWEJ3TG1OdmJuUnliMnhzWlhJb0oxQnNZWGxsY2tOdmJuUnliMnhzWlhJbkxDQmJKeVJ6WTI5d1pTY3NJQ2drYzJOdmNHVXBJQzArWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJ2YkdRZ1BTQmtiMk4xYldWdWRDNTBhWFJzWlZ4eVhHNWNkSFZ3WkdGMFpTQTlJQ2dwSUQwK1hISmNibHh5WEc1Y2RGeDBhV1lnUUdselFuVnplVnh5WEc1Y2NseHVYSFJjZEZ4MGJtOTNJRDBnVFdGMGFDNXliM1Z1WkNnb2JtVjNJRVJoZEdVb0tTa3VaMlYwVkdsdFpTZ3BJQzhnTVRBd01DbGNjbHh1WEhSY2RGeDBiR1ZtZENBOUlFMWhkR2d1YldGNEtFQnFiMkpGYm1RZ0xTQnViM2NzSURBcFhISmNibHh5WEc1Y2RGeDBYSFJrYjJOMWJXVnVkQzUwYVhSc1pTQTlJSGRwYm1SdmR5NTBhVzFsUm05eWJXRjBLR3hsWm5RcElDc2dKeUF0SUNjZ0t5QnZiR1JjY2x4dVhISmNibHgwWEhSelpYUlVhVzFsYjNWMEtIVndaR0YwWlN3Z01UQXdNQ2xjY2x4dVhISmNibHh5WEc1Y2NseHVYSFIxY0dSaGRHVW9LVnh5WEc1Y2NseHVYU2xjY2x4dVhISmNiaUlzSWx4eVhHNWNjbHh1WTJ4cFkydGxaQ0E5SUMwK1hISmNibHgwSkNnbkxtRjJZWFJoY2ljcExuSmxiVzkyWlVOc1lYTnpLQ2RoWTNScGRtVW5LVnh5WEc1Y2RDUW9KeU5oZG1GMFlYSW5LUzUyWVd3b0pDaDBhR2x6S1M1a1lYUmhLQ2RoZG1GMFlYSW5LU2xjY2x4dVhIUWtLSFJvYVhNcExtRmtaRU5zWVhOektDZGhZM1JwZG1VbktWeHlYRzVjY2x4dVhISmNiaVFnTFQ1Y2NseHVYSFFrS0NjdVlYWmhkR0Z5SnlrdVkyeHBZMnNvWTJ4cFkydGxaQ2t1Wm1seWMzUW9LUzUwY21sbloyVnlLQ2RqYkdsamF5Y3BJaXdpWTI5dVptbG5JRDFjY2x4dVhIUm1iMjUwVTJsNlpUb2dNekJjY2x4dVhIUmlZWEpHYjI1MFUybDZaVG9nTWpCY2NseHVYSFJ1WVcxbFJtOXVkRk5wZW1VNklETXdYSEpjYmx4MGJXRnlaMmx1T2lBMVhISmNibHgwYVc1MFpYSjJZV3c2SURFd01EQWdMeUEyTUZ4eVhHNWNjbHh1WEhKY2JseHlYRzVqYkdGemN5QkRhR0Z5WVdOMFpYSmNjbHh1WEhKY2JseHlYRzVjZEdOdmJuTjBjblZqZEc5eU9pQW9kR1ZoYlN3Z1pHRjBZU2tnTFQ1Y2NseHVYSEpjYmx4MFhIUnBiV0ZuWlNBOUlHNWxkeUJKYldGblpTZ3BYSEpjYmx4MFhIUnBiV0ZuWlM1emNtTWdQU0JrWVhSaExtRjJZWFJoY2x4eVhHNWNkRngwYVcxaFoyVXViMjVzYjJGa0lEMGdQVDVjY2x4dVhIUmNkRngwUUdGMllYUmhjaUE5SUdsdFlXZGxYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBYSFJBZEdWaGJTQTlJSFJsWVcxY2NseHVYSFJjZEVCdVlXMWxJRDBnWkdGMFlTNXVZVzFsWEhKY2JseDBYSFJBYVdRZ1BTQmtZWFJoTG1sa1hISmNibHgwWEhSQWJHVjJaV3dnUFNCa1lYUmhMbXhsZG1Wc1hISmNibHgwWEhSQWFHVmhiSFJvSUQwZ1pHRjBZUzVvWldGc2RHaGNjbHh1WEhSY2RFQnRZWGhJWldGc2RHZ2dQU0JrWVhSaExtMWhlRWhsWVd4MGFGeHlYRzVjY2x4dVhISmNibHgwWkhKaGR6b2dLR052Ym5SbGVIUXNJSE5wZW1VcElDMCtYSEpjYmx4MFhIUnBaaUJBZEdWaGJTQTlQU0FuY21Wa0oxeHlYRzVjZEZ4MFhIUmpiMjUwWlhoMExuTjBjbTlyWlZOMGVXeGxJRDBnSjNKblltRW9NakUzTENBNE15d2dOemtzSURFcEoxeHlYRzVjZEZ4MFhIUmpiMjUwWlhoMExtWnBiR3hUZEhsc1pTQTlJQ2R5WjJKaEtESXhOeXdnT0RNc0lEYzVMQ0F3TGpRcEoxeHlYRzVjZEZ4MFpXeHpaVnh5WEc1Y2RGeDBYSFJqYjI1MFpYaDBMbk4wY205clpWTjBlV3hsSUQwZ0ozSm5ZbUVvTlRFc0lERXlNaXdnTVRnekxDQXhLU2RjY2x4dVhIUmNkRngwWTI5dWRHVjRkQzVtYVd4c1UzUjViR1VnUFNBbmNtZGlZU2cxTVN3Z01USXlMQ0F4T0RNc0lEQXVOQ2tuWEhKY2JseHlYRzVjZEZ4MFkyOXVkR1Y0ZEM1bWFXeHNVbVZqZENnd0xDQXdMQ0J6YVhwbExDQnphWHBsS1Z4eVhHNWNkRngwWTI5dWRHVjRkQzV6ZEhKdmEyVlNaV04wS0RBc0lEQXNJSE5wZW1Vc0lITnBlbVVwWEhKY2JseHlYRzVjZEZ4MGFXWWdRR0YyWVhSaGNqOWNjbHh1WEhSY2RGeDBZMjl1ZEdWNGRDNWtjbUYzU1cxaFoyVW9RR0YyWVhSaGNpd2dZMjl1Wm1sbkxtMWhjbWRwYml3Z1kyOXVabWxuTG0xaGNtZHBiaXdnYzJsNlpTQXRJR052Ym1acFp5NXRZWEpuYVc0Z0tpQXlMQ0J6YVhwbElDMGdZMjl1Wm1sbkxtMWhjbWRwYmlBcUlESXBYSEpjYmx4eVhHNWNkRngwZEdWNGRDQTlJRUJ1WVcxbElDc2dKeUFvSnlBcklFQnNaWFpsYkNBcklDY3BKMXh5WEc1Y2NseHVYSFJjZEdOdmJuUmxlSFF1Wm05dWRDQTlJR052Ym1acFp5NXVZVzFsUm05dWRGTnBlbVVnS3lBbmNIZ2dVbTlpYjNSdkoxeHlYRzVjZEZ4MFkyOXVkR1Y0ZEM1c2FXNWxWMmxrZEdnZ1BTQXhYSEpjYmx4MFhIUmpiMjUwWlhoMExtWnBiR3hUZEhsc1pTQTlJQ2NqUmtaR1JrWkdKMXh5WEc1Y2RGeDBZMjl1ZEdWNGRDNXpkSEp2YTJWVGRIbHNaU0E5SUNjak1EQXdNREF3SjF4eVhHNWNkRngwYldWaGMzVnlaU0E5SUdOdmJuUmxlSFF1YldWaGMzVnlaVlJsZUhRb2RHVjRkQ2xjY2x4dVhIUmNkR052Ym5SbGVIUXVabWxzYkZSbGVIUW9kR1Y0ZEN3Z0tITnBlbVVnTFNCdFpXRnpkWEpsTG5kcFpIUm9LU0F2SURJc0lHTnZibVpwWnk1dVlXMWxSbTl1ZEZOcGVtVXBYSEpjYmx4MFhIUmpiMjUwWlhoMExuTjBjbTlyWlZSbGVIUW9kR1Y0ZEN3Z0tITnBlbVVnTFNCdFpXRnpkWEpsTG5kcFpIUm9LU0F2SURJc0lHTnZibVpwWnk1dVlXMWxSbTl1ZEZOcGVtVXBYSEpjYmx4eVhHNWNjbHh1WEhSY2RHTnZiblJsZUhRdVptOXVkQ0E5SUdOdmJtWnBaeTVpWVhKR2IyNTBVMmw2WlNBcklDZHdlQ0JTYjJKdmRHOG5YSEpjYmx4MFhIUmpiMjUwWlhoMExuTjBjbTlyWlZOMGVXeGxJRDBnSjNKblltRW9NQ3dnTUN3Z01Dd2dNQzQzS1NkY2NseHVYSFJjZEdOdmJuUmxlSFF1Wm1sc2JGTjBlV3hsSUQwZ0ozSm5ZbUVvTUN3Z01Dd2dNQ3dnTUM0MEtTZGNjbHh1WEhSY2RHTnZiblJsZUhRdVptbHNiRkpsWTNRb1kyOXVabWxuTG0xaGNtZHBiaXdnYzJsNlpTQXRJR052Ym1acFp5NWlZWEpHYjI1MFUybDZaU0F0SUdOdmJtWnBaeTV0WVhKbmFXNHNJSE5wZW1VZ0xTQmpiMjVtYVdjdWJXRnlaMmx1SUNvZ01pd2dZMjl1Wm1sbkxtSmhja1p2Ym5SVGFYcGxLVnh5WEc1Y2RGeDBZMjl1ZEdWNGRDNXpkSEp2YTJWU1pXTjBLR052Ym1acFp5NXRZWEpuYVc0c0lITnBlbVVnTFNCamIyNW1hV2N1WW1GeVJtOXVkRk5wZW1VZ0xTQmpiMjVtYVdjdWJXRnlaMmx1TENCemFYcGxJQzBnWTI5dVptbG5MbTFoY21kcGJpQXFJRElzSUdOdmJtWnBaeTVpWVhKR2IyNTBVMmw2WlNsY2NseHVYSEpjYmx4MFhIUmpiMjUwWlhoMExtWnBiR3hUZEhsc1pTQTlJQ2R5WjJKaEtESXhOeXdnT0RNc0lEYzVMQ0F4S1NkY2NseHVYSFJjZEdOdmJuUmxlSFF1Wm1sc2JGSmxZM1FvWTI5dVptbG5MbTFoY21kcGJpd2djMmw2WlNBdElHTnZibVpwWnk1aVlYSkdiMjUwVTJsNlpTQXRJR052Ym1acFp5NXRZWEpuYVc0c0lDaHphWHBsSUMwZ1kyOXVabWxuTG0xaGNtZHBiaUFxSURJcElDb2dLRUJvWldGc2RHZ2dMeUJBYldGNFNHVmhiSFJvS1N3Z1kyOXVabWxuTG1KaGNrWnZiblJUYVhwbEtWeHlYRzVjY2x4dVhIUmNkSFJsZUhRZ1BTQk5ZWFJvTG5KdmRXNWtLRUJvWldGc2RHZ3BJQ3NnSnlBdklDY2dLeUJBYldGNFNHVmhiSFJvWEhKY2JseDBYSFJ0WldGemRYSmxJRDBnWTI5dWRHVjRkQzV0WldGemRYSmxWR1Y0ZENoMFpYaDBLVnh5WEc1Y2RGeDBZMjl1ZEdWNGRDNW1hV3hzVTNSNWJHVWdQU0FuSXpBd01EQXdNQ2RjY2x4dVhIUmNkR052Ym5SbGVIUXVabWxzYkZSbGVIUW9kR1Y0ZEN3Z0tITnBlbVVnTFNCdFpXRnpkWEpsTG5kcFpIUm9LU0F2SURJc0lITnBlbVVnTFNCamIyNW1hV2N1WW1GeVJtOXVkRk5wZW1VZ0x5QXlLVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JtTnNZWE56SUVKaGRIUnNaVnh5WEc1Y2NseHVYSFJ6Y0dWbFpEb2dYSEpjYmx4MFhIUjJhV1YzT2lBekxqQmNjbHh1WEhSY2RHbHVabTg2SURNdU1GeHlYRzVjZEZ4MGJtVjRkRG9nTXk0d1hISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkR052Ym5OMGNuVmpkRzl5T2lBb1pXeGxiV1Z1ZENrZ0xUNWNjbHh1WEhKY2JseDBYSFJBWTJGdWRtRnpJRDBnSkNobGJHVnRaVzUwS1M1amFHbHNaSEpsYmlnblkyRnVkbUZ6SnlsYk1GMWNjbHh1WEhSY2RFQmpiMjUwWlhoMElEMGdRR05oYm5aaGN5NW5aWFJEYjI1MFpYaDBLQ2N5WkNjcFhISmNibHh5WEc1Y2RGeDBRR0poZEhSc1pVeHZaeUE5SUNRdWNHRnljMlZLVTA5T0tDUW9aV3hsYldWdWRDa3VZMmhwYkdSeVpXNG9KeTVpWVhSMGJHVXRiRzluSnlrdVptbHljM1FvS1M1MFpYaDBLQ2twWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4MGJHOWhaRG9nTFQ1Y2NseHVYSEpjYmx4MFhIUkFhVzVrWlhnZ1BTQXdYSEpjYmx4MFhIUkFZMmhoY21GamRHVnljeUE5SUZ0ZFhISmNibHgwWEhSQWMzUmhkR1VnUFNBbmRtbGxkeWRjY2x4dVhIUmNkRUJ2Wm1aelpYUWdQU0F3WEhKY2JseDBYSFJBY0dGMWMyVWdQU0JtWVd4elpWeHlYRzVjY2x4dVhIUmNkQ1FvUUdOaGJuWmhjeWt1WTJ4cFkyc29LR1YyWlc1MEtTQTlQaUJBWTJ4cFkyc29aWFpsYm5RcEtWeHlYRzVjZEZ4MEpDaGtiMk4xYldWdWRDa3VhMlY1Wkc5M2JpZ29aWFpsYm5RcElEMCtJRUJyWlhrb1pYWmxiblFwS1Z4eVhHNWNjbHh1WEhSY2RHWnZjaUJrWVhSaElHbHVJRUJpWVhSMGJHVk1iMmRiSjNSbFlXMXpKMTFiSjNKbFpDZGRYSEpjYmx4MFhIUmNkR05vWVhKaFkzUmxjaUE5SUc1bGR5QkRhR0Z5WVdOMFpYSW9KM0psWkNjc0lHUmhkR0VwWEhKY2JseDBYSFJjZEVCamFHRnlZV04wWlhKelcyTm9ZWEpoWTNSbGNpNXBaRjBnUFNCamFHRnlZV04wWlhKY2NseHVYSEpjYmx4eVhHNWNkRngwWm05eUlHUmhkR0VnYVc0Z1FHSmhkSFJzWlV4dloxc25kR1ZoYlhNblhWc25ZbXgxWlNkZFhISmNibHgwWEhSY2RHTm9ZWEpoWTNSbGNpQTlJRzVsZHlCRGFHRnlZV04wWlhJb0oySnNkV1VuTENCa1lYUmhLVnh5WEc1Y2RGeDBYSFJBWTJoaGNtRmpkR1Z5YzF0amFHRnlZV04wWlhJdWFXUmRJRDBnWTJoaGNtRmpkR1Z5WEhKY2JseHlYRzVjZEZ4MFFHTnZiblJsZUhRdVptOXVkQ0E5SUdOdmJtWnBaeTVtYjI1MFUybDZaU0FySUNkd2VDQlNiMkp2ZEc4blhISmNibHh5WEc1Y2NseHVYSFJjZEVCaFkzUnBiMjRnUFNCQVltRjBkR3hsVEc5bld5ZHNiMmNuWFZ0QWFXNWtaWGhkWEhKY2JseDBYSFJBWVhSMFlXTnJaWElnUFNCQVkyaGhjbUZqZEdWeWMxdEFZV04wYVc5dUxtRjBkR0ZqYTJWeVhWeHlYRzVjZEZ4MFFHUmxabVZ1WkdWeUlEMGdRR05vWVhKaFkzUmxjbk5iUUdGamRHbHZiaTVrWldabGJtUmxjbDFjY2x4dVhISmNibHgwWEhSMGNuVmxYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjZEdSeVlYZERhR0Z5WVdOMFpYSnpPaUFvWVhSMFlXTnJaWElzSUdSbFptVnVaR1Z5S1NBdFBseHlYRzVjY2x4dVhIUmNkSE5wZW1VZ1BTQkFZMkZ1ZG1GekxtaGxhV2RvZENBcUlEQXVObHh5WEc1Y2RGeDBhR0ZzWmxkcFpIUm9JRDBnUUdOaGJuWmhjeTUzYVdSMGFDQXZJREpjY2x4dVhISmNibHgwWEhSQVkyOXVkR1Y0ZEM1ellYWmxLQ2xjY2x4dVhIUmNkRUJqYjI1MFpYaDBMblJ5WVc1emJHRjBaU2dvYUdGc1psZHBaSFJvSUMwZ2MybDZaU2tnTHlBeUxDQW9RR05oYm5aaGN5NW9aV2xuYUhRZ0xTQnphWHBsS1NBdklESXBYSEpjYmx4MFhIUmhkSFJoWTJ0bGNpNWtjbUYzS0VCamIyNTBaWGgwTENCemFYcGxLVnh5WEc1Y2RGeDBRR052Ym5SbGVIUXVjbVZ6ZEc5eVpTZ3BYSEpjYmx4eVhHNWNkRngwUUdOdmJuUmxlSFF1YzJGMlpTZ3BYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNTBjbUZ1YzJ4aGRHVW9LR2hoYkdaWGFXUjBhQ0F0SUhOcGVtVXBJQzhnTWlBcklHaGhiR1pYYVdSMGFDd2dLRUJqWVc1MllYTXVhR1ZwWjJoMElDMGdjMmw2WlNrZ0x5QXlLVnh5WEc1Y2RGeDBaR1ZtWlc1a1pYSXVaSEpoZHloQVkyOXVkR1Y0ZEN3Z2MybDZaU2xjY2x4dVhIUmNkRUJqYjI1MFpYaDBMbkpsYzNSdmNtVW9LVnh5WEc1Y2NseHVYSEpjYmx4MFpISmhkMGx1Wm04NklDaDBaWGgwS1NBdFBseHlYRzVjZEZ4MGFHRnNabGRwWkhSb0lEMGdRR05oYm5aaGN5NTNhV1IwYUNBdklESmNjbHh1WEhSY2RHaGhiR1pJWldsbmFIUWdQU0JBWTJGdWRtRnpMbWhsYVdkb2RDQXZJREpjY2x4dVhIUmNkR0pzYjJOclUybDZaU0E5SUVCallXNTJZWE11YUdWcFoyaDBJQ29nTUM0MlhISmNibHh5WEc1Y2RGeDBjM1JoY2xKaFpHbDFjeUE5SURVd1hISmNibHgwWEhSemRHRnlWMmxrZEdnZ1BTQnpkR0Z5VW1Ga2FYVnpJQ29nTWx4eVhHNWNkRngwYzNSaGNsZ2dQU0JvWVd4bVYybGtkR2dnS3lBb1lteHZZMnRUYVhwbElDc2djM1JoY2xKaFpHbDFjeWtnTHlBeVhISmNibHgwWEhSemRHRnlXU0E5SUdoaGJHWklaV2xuYUhSY2NseHVYSFJjZEhOMFlYSlhJRDBnS0dKc2IyTnJVMmw2WlNBcUlEQXVOeWtnTHlCemRHRnlWMmxrZEdoY2NseHVYSFJjZEhOMFlYSklJRDBnTVM0eVhISmNibHgwWEhSemRHRnlVR2xyWlhNZ1BTQXhNMXh5WEc1Y2NseHVYSFJjZEVCamIyNTBaWGgwTG1admJuUWdQU0JqYjI1bWFXY3VabTl1ZEZOcGVtVWdLeUFuY0hnZ1VtOWliM1J2SjF4eVhHNWNkRngwYldWaGMzVnlaU0E5SUVCamIyNTBaWGgwTG0xbFlYTjFjbVZVWlhoMEtIUmxlSFFwWEhKY2JseDBYSFIwWlhoMFdDQTlJSE4wWVhKWUlDMGdiV1ZoYzNWeVpTNTNhV1IwYUNBdklESmNjbHh1WEhSY2RIUmxlSFJaSUQwZ2FHRnNaa2hsYVdkb2RGeHlYRzVjY2x4dVhISmNibHh5WEc1Y2RGeDBRR052Ym5SbGVIUXVjMkYyWlNncFhISmNibHgwWEhSQVkyOXVkR1Y0ZEM1c2FXNWxWMmxrZEdnZ1BTQXlYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNTBjbUZ1YzJ4aGRHVW9jM1JoY2xnc0lITjBZWEpaS1Z4eVhHNWNkRngwUUdOdmJuUmxlSFF1YzJOaGJHVW9jM1JoY2xjc0lITjBZWEpJS1Z4eVhHNWNkRngwUUdOdmJuUmxlSFF1Wm1sc2JGTjBlV3hsSUQwZ0p5TkdSa1pHUmtZblhISmNibHgwWEhSQVkyOXVkR1Y0ZEM1emRISnZhMlZUZEhsc1pTQTlJQ2NqTURBd01EQXdKMXh5WEc1Y2RGeDBRR1J5WVhkVGRHRnlLSE4wWVhKUWFXdGxjeXdnYzNSaGNsSmhaR2wxY3lBcUlEQXVOaXdnYzNSaGNsSmhaR2wxY3lsY2NseHVYSFJjZEVCamIyNTBaWGgwTG5KbGMzUnZjbVVvS1Z4eVhHNWNjbHh1WEhSY2RFQmpiMjUwWlhoMExuTmhkbVVvS1Z4eVhHNWNkRngwUUdOdmJuUmxlSFF1ZEhKaGJuTnNZWFJsS0hSbGVIUllMQ0IwWlhoMFdTbGNjbHh1WEhSY2RFQmpiMjUwWlhoMExtWnBiR3hUZEhsc1pTQTlJQ2NqTURBd01EQXdKMXh5WEc1Y2RGeDBRR052Ym5SbGVIUXVabWxzYkZSbGVIUW9kR1Y0ZEN3Z01Dd2dNQ2xjY2x4dVhIUmNkRUJqYjI1MFpYaDBMbkpsYzNSdmNtVW9LVnh5WEc1Y2NseHVYSEpjYmx4MFpISmhkMU4wWVhJNklDaHdhV3RsY3l3Z2FXNXVaWEpTWVdScGRYTXNJRzkxZEdWeVVtRmthWFZ6S1NBdFBseHlYRzVjZEZ4MGNtOTBJRDBnVFdGMGFDNVFTU0F2SURJZ0tpQXpYSEpjYmx4MFhIUnpkR1Z3SUQwZ1RXRjBhQzVRU1NBdklIQnBhMlZ6WEhKY2JseHlYRzVjZEZ4MFFHTnZiblJsZUhRdVltVm5hVzVRWVhSb0tDbGNjbHh1WEhSY2RIZ2dQU0JOWVhSb0xtTnZjeWh5YjNRcElDb2diM1YwWlhKU1lXUnBkWE5jY2x4dVhIUmNkSGtnUFNCTllYUm9Mbk5wYmloeWIzUXBJQ29nYjNWMFpYSlNZV1JwZFhOY2NseHVYSFJjZEVCamIyNTBaWGgwTG0xdmRtVlVieWg0TENCNUtWeHlYRzVjZEZ4MGNtOTBJQ3M5SUhOMFpYQmNjbHh1WEhKY2JseDBYSFJtYjNJZ2FTQnBiaUJiTVM0dWNHbHJaWE5kWEhKY2JseDBYSFJjZEhnZ1BTQk5ZWFJvTG1OdmN5aHliM1FwSUNvZ2FXNXVaWEpTWVdScGRYTmNjbHh1WEhSY2RGeDBlU0E5SUUxaGRHZ3VjMmx1S0hKdmRDa2dLaUJwYm01bGNsSmhaR2wxYzF4eVhHNWNkRngwWEhSQVkyOXVkR1Y0ZEM1c2FXNWxWRzhvZUN3Z2VTbGNjbHh1WEhSY2RGeDBjbTkwSUNzOUlITjBaWEJjY2x4dVhISmNibHgwWEhSY2RIZ2dQU0JOWVhSb0xtTnZjeWh5YjNRcElDb2diM1YwWlhKU1lXUnBkWE5jY2x4dVhIUmNkRngwZVNBOUlFMWhkR2d1YzJsdUtISnZkQ2tnS2lCdmRYUmxjbEpoWkdsMWMxeHlYRzVjZEZ4MFhIUkFZMjl1ZEdWNGRDNXNhVzVsVkc4b2VDd2dlU2xjY2x4dVhIUmNkRngwY205MElDczlJSE4wWlhCY2NseHVYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNXNhVzVsVkc4b01Dd2dMVzkxZEdWeVVtRmthWFZ6S1Z4eVhHNWNkRngwUUdOdmJuUmxlSFF1Wm1sc2JDZ3BYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNXpkSEp2YTJVb0tWeHlYRzVjZEZ4MFFHTnZiblJsZUhRdVkyeHZjMlZRWVhSb0tDbGNjbHh1WEhSY2RGeHlYRzVjY2x4dVhIUm5aWFJGYm1SVVpYaDBPaUF0UGx4eVhHNWNjbHh1WEhSY2RHbG1JRUJpWVhSMGJHVk1iMmRiSjNkcGJpZGRYSEpjYmx4eVhHNWNkRngwWEhScE1UaHVMbUpoZEhSc1pTNTNhVzVjY2x4dVhISmNibHgwWEhSbGJITmxYSEpjYmx4eVhHNWNkRngwWEhScE1UaHVMbUpoZEhSc1pTNXNiM05sWEhKY2JseHlYRzVjY2x4dVhIUmtjbUYzT2lBb1pHVnNkR0VwTFQ1Y2NseHVYSEpjYmx4MFhIUkFZMjl1ZEdWNGRDNW1hV3hzVTNSNWJHVWdQU0FuSTBaR1JrWkdSaWRjY2x4dVhIUmNkRUJqYjI1MFpYaDBMbU5zWldGeVVtVmpkQ2d3TENBd0xDQkFZMkZ1ZG1GekxuZHBaSFJvTENCQVkyRnVkbUZ6TG1obGFXZG9kQ2xjY2x4dVhIUmNkRUJ2Wm1aelpYUWdLejBnUUhOd1pXVmtXMEJ6ZEdGMFpWMGdLaUJrWld4MFlWeHlYRzVjZEZ4MFlXNXBiV0YwWlNBOUlIUnlkV1ZjY2x4dVhISmNibHgwWEhScFppQkFjM1JoZEdVZ1BUMGdKM1pwWlhjbklHRnVaQ0JoYm1sdFlYUmxYSEpjYmx4MFhIUmNkR0ZqZEdsdmJpQTlJRUJpWVhSMGJHVk1iMmRiSjJ4dlp5ZGRXMEJwYm1SbGVGMWNjbHh1WEhSY2RGeDBZWFIwWVdOclpYSWdQU0JBWTJoaGNtRmpkR1Z5YzF0aFkzUnBiMjR1WVhSMFlXTnJaWEpkWEhKY2JseDBYSFJjZEdSbFptVnVaR1Z5SUQwZ1FHTm9ZWEpoWTNSbGNuTmJZV04wYVc5dUxtUmxabVZ1WkdWeVhWeHlYRzVjY2x4dVhIUmNkRngwYVdZb1lXTjBhVzl1TG5SNWNHVWdQVDBnSjJocGRDY3BYSEpjYmx4MFhIUmNkRngwWkdWbVpXNWtaWEl1YUdWaGJIUm9JRDBnWVdOMGFXOXVMbWhsWVd4MGFGeHlYRzVjY2x4dVhIUmNkRngwUUdSeVlYZERhR0Z5WVdOMFpYSnpLR0YwZEdGamEyVnlMQ0JrWldabGJtUmxjaWxjY2x4dVhISmNibHgwWEhSY2RHbG1LRUJ2Wm1aelpYUWdQaUF4TGpBZ1lXNWtJRzV2ZENCQWNHRjFjMlVwWEhKY2JseDBYSFJjZEZ4MFFHOW1abk5sZENBOUlEQXVNRnh5WEc1Y2RGeDBYSFJjZEdSbFptVnVaR1Z5TG5OMFlYSjBTR1ZoYkhSb0lEMGdaR1ZtWlc1a1pYSXVhR1ZoYkhSb1hISmNibHh5WEc1Y2RGeDBYSFJjZEdsbUlHRmpkR2x2Ymk1MGVYQmxJRDA5SUNkb2FYUW5YSEpjYmx4MFhIUmNkRngwWEhSa1pXWmxibVJsY2k1bGJtUklaV0ZzZEdnZ1BTQk5ZWFJvTG0xaGVDaGtaV1psYm1SbGNpNW9aV0ZzZEdnZ0xTQmhZM1JwYjI0dVpHRnRZV2RsTENBd0tWeHlYRzVjZEZ4MFhIUmNkR1ZzYzJWY2NseHVYSFJjZEZ4MFhIUmNkR1JsWm1WdVpHVnlMbVZ1WkVobFlXeDBhQ0E5SUdSbFptVnVaR1Z5TG1obFlXeDBhRnh5WEc1Y2NseHVYSFJjZEZ4MFhIUkFjM1JoZEdVZ1BTQW5hVzVtYnlkY2NseHVYSEpjYmx4MFhIUmNkR0Z1YVcxaGRHVWdQU0JtWVd4elpWeHlYRzVjY2x4dVhIUmNkR2xtSUVCemRHRjBaU0E5UFNBbmFXNW1ieWNnWVc1a0lHRnVhVzFoZEdWY2NseHVYSFJjZEZ4MFlXTjBhVzl1SUQwZ1FHSmhkSFJzWlV4dloxc25iRzluSjExYlFHbHVaR1Y0WFZ4eVhHNWNkRngwWEhSaGRIUmhZMnRsY2lBOUlFQmphR0Z5WVdOMFpYSnpXMkZqZEdsdmJpNWhkSFJoWTJ0bGNsMWNjbHh1WEhSY2RGeDBaR1ZtWlc1a1pYSWdQU0JBWTJoaGNtRmpkR1Z5YzF0aFkzUnBiMjR1WkdWbVpXNWtaWEpkWEhKY2JseHlYRzVjZEZ4MFhIUkFaSEpoZDBOb1lYSmhZM1JsY25Nb1lYUjBZV05yWlhJc0lHUmxabVZ1WkdWeUtWeHlYRzVjY2x4dVhIUmNkRngwYVdZZ1FHOW1abk5sZENBOFBTQXhMakJjY2x4dVhIUmNkRngwWEhSQVkyOXVkR1Y0ZEM1bmJHOWlZV3hCYkhCb1lTQTlJRUJ2Wm1aelpYUmNjbHh1WEhSY2RGeDBYSFJrWldabGJtUmxjaTVvWldGc2RHZ2dQU0JrWldabGJtUmxjaTV6ZEdGeWRFaGxZV3gwYUZ4eVhHNWNkRngwWEhSbGJITmxYSEpjYmx4MFhIUmNkRngwYVdZZ1FHOW1abk5sZENBOFBTQXlMakJjY2x4dVhIUmNkRngwWEhSY2RFQmpiMjUwWlhoMExtZHNiMkpoYkVGc2NHaGhJRDBnTVM0d1hISmNibHh5WEc1Y2RGeDBYSFJjZEZ4MGFTQTlJRTFoZEdndVkyeGhiWEFvUUc5bVpuTmxkQ0F0SURFdU1Dd2dNQ3dnTVNsY2NseHVYSFJjZEZ4MFhIUmNkR1JsWm1WdVpHVnlMbWhsWVd4MGFDQTlJRTFoZEdndWJHVnljQ2hwTENCa1pXWmxibVJsY2k1bGJtUklaV0ZzZEdnc0lHUmxabVZ1WkdWeUxuTjBZWEowU0dWaGJIUm9LVnh5WEc1Y2NseHVYSFJjZEZ4MFhIUmxiSE5sWEhKY2JseDBYSFJjZEZ4MFhIUmtaV1psYm1SbGNpNW9aV0ZzZEdnZ1BTQmtaV1psYm1SbGNpNWxibVJJWldGc2RHaGNjbHh1WEhSY2RGeDBYSFJjZEVCamIyNTBaWGgwTG1kc2IySmhiRUZzY0doaElEMGdUV0YwYUM1dFlYZ29NeTR3SUMwZ1FHOW1abk5sZEN3Z01DbGNjbHh1WEhKY2JseDBYSFJjZEdsbUtFQnZabVp6WlhRZ1BpQTBMakFwWEhKY2JseDBYSFJjZEZ4MFFHOW1abk5sZENBOUlEQXVNRnh5WEc1Y2RGeDBYSFJjZEVCemRHRjBaU0E5SUNkdVpYaDBKMXh5WEc1Y2NseHVYSFJjZEZ4MGFXWWdZV04wYVc5dUxuUjVjR1VnUFQwZ0oyaHBkQ2RjY2x4dVhIUmNkRngwWEhSMFpYaDBJRDBnWVdOMGFXOXVMbVJoYldGblpWeHlYRzVjY2x4dVhIUmNkRngwWEhScFppQmhZM1JwYjI0dVkzSnBkRnh5WEc1Y2RGeDBYSFJjZEZ4MGRHVjRkQ0FyUFNBbklTZGNjbHh1WEhKY2JseDBYSFJjZEdWc2MyVmNjbHh1WEhSY2RGeDBYSFIwWlhoMElEMGdhVEU0Ymk1aVlYUjBiR1V1Wkc5a1oyVmNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUmNkRngwUUdSeVlYZEpibVp2S0hSbGVIUXBYSEpjYmx4eVhHNWNjbHh1WEhSY2RGeDBRR052Ym5SbGVIUXVaMnh2WW1Gc1FXeHdhR0VnUFNBeExqQmNjbHh1WEhSY2RGeDBZVzVwYldGMFpTQTlJR1poYkhObFhISmNibHh5WEc1Y2RGeDBhV1lnUUhOMFlYUmxJRDA5SUNkdVpYaDBKeUJoYm1RZ1lXNXBiV0YwWlZ4eVhHNWNjbHh1WEhSY2RGeDBjSEpsZGtGamRHbHZiaUE5SUVCaVlYUjBiR1ZNYjJkYkoyeHZaeWRkVzBCcGJtUmxlRjFjY2x4dVhIUmNkRngwYm1WNGRFRmpkR2x2YmlBOUlFQmlZWFIwYkdWTWIyZGJKMnh2WnlkZFcwQnBibVJsZUNBcklERmRYSEpjYmx4eVhHNWNjbHh1WEhSY2RGeDBjSEpsZGtGMGRHRmphMlZ5SUQwZ1FHTm9ZWEpoWTNSbGNuTmJjSEpsZGtGamRHbHZiaTVoZEhSaFkydGxjbDFjY2x4dVhIUmNkRngwY0hKbGRrUmxabVZ1WkdWeUlEMGdRR05vWVhKaFkzUmxjbk5iY0hKbGRrRmpkR2x2Ymk1a1pXWmxibVJsY2wxY2NseHVYSEpjYmx4eVhHNWNkRngwWEhSd2IzTnBkR2x2YmlBOUlDaEFZMkZ1ZG1GekxtaGxhV2RvZENBdklESXBJQ29nUUc5bVpuTmxkRnh5WEc1Y2NseHVYSFJjZEZ4MFFHTnZiblJsZUhRdWMyRjJaU2dwWEhKY2JseDBYSFJjZEVCamIyNTBaWGgwTG5SeVlXNXpiR0YwWlNnd0xDQXRjRzl6YVhScGIyNHBYSEpjYmx4MFhIUmNkRUJrY21GM1EyaGhjbUZqZEdWeWN5aHdjbVYyUVhSMFlXTnJaWElzSUhCeVpYWkVaV1psYm1SbGNpbGNjbHh1WEhSY2RGeDBRR052Ym5SbGVIUXVjbVZ6ZEc5eVpTZ3BYSEpjYmx4eVhHNWNjbHh1WEhSY2RGeDBRR052Ym5SbGVIUXVjMkYyWlNncFhISmNibHgwWEhSY2RFQmpiMjUwWlhoMExuUnlZVzV6YkdGMFpTZ3dMQ0JBWTJGdWRtRnpMbWhsYVdkb2RDQXRJSEJ2YzJsMGFXOXVLVnh5WEc1Y2NseHVYSFJjZEZ4MGFXWWdibVY0ZEVGamRHbHZiajljY2x4dVhIUmNkRngwWEhSdVpYaDBRWFIwWVdOclpYSWdQU0JBWTJoaGNtRmpkR1Z5YzF0dVpYaDBRV04wYVc5dUxtRjBkR0ZqYTJWeVhWeHlYRzVjZEZ4MFhIUmNkRzVsZUhSRVpXWmxibVJsY2lBOUlFQmphR0Z5WVdOMFpYSnpXMjVsZUhSQlkzUnBiMjR1WkdWbVpXNWtaWEpkWEhKY2JseHlYRzVjZEZ4MFhIUmNkR2xtS0c1bGVIUkJZM1JwYjI0dWRIbHdaU0E5UFNBbmFHbDBKeWxjY2x4dVhIUmNkRngwWEhSY2RHNWxlSFJFWldabGJtUmxjaTVvWldGc2RHZ2dQU0J1WlhoMFFXTjBhVzl1TG1obFlXeDBhRnh5WEc1Y2NseHVYSFJjZEZ4MFhIUkFaSEpoZDBOb1lYSmhZM1JsY25Nb2JtVjRkRUYwZEdGamEyVnlMQ0J1WlhoMFJHVm1aVzVrWlhJcFhISmNibHh5WEc1Y2RGeDBYSFJsYkhObFhISmNibHgwWEhSY2RGeDBkR1Y0ZENBOUlFQm5aWFJGYm1SVVpYaDBLQ2xjY2x4dVhIUmNkRngwWEhSQVkyOXVkR1Y0ZEM1bWFXeHNVM1I1YkdVZ1BTQW5JekF3TURBd01DZGNjbHh1WEhSY2RGeDBYSFJ0WldGemRYSmxJRDBnUUdOdmJuUmxlSFF1YldWaGMzVnlaVlJsZUhRb2RHVjRkQ2xjY2x4dVhIUmNkRngwWEhSQVkyOXVkR1Y0ZEM1bWFXeHNWR1Y0ZENoMFpYaDBMQ0FvUUdOaGJuWmhjeTUzYVdSMGFDQXRJRzFsWVhOMWNtVXVkMmxrZEdncElDOGdNaXdnS0VCallXNTJZWE11YUdWcFoyaDBJQzBnTVRVcElDOGdNaWxjY2x4dVhISmNibHgwWEhSY2RFQmpiMjUwWlhoMExuSmxjM1J2Y21Vb0tWeHlYRzVjY2x4dVhIUmNkRngwYVdZZ1FHOW1abk5sZENBK0lESXVNRnh5WEc1Y2RGeDBYSFJjZEVCcGJtUmxlQ3NyWEhKY2JseDBYSFJjZEZ4MFFHOW1abk5sZENBOUlEQXVNRnh5WEc1Y2RGeDBYSFJjZEdsbUlHNWxlSFJCWTNScGIyNC9YSEpjYmx4MFhIUmNkRngwWEhSQWMzUmhkR1VnUFNBbmRtbGxkeWRjY2x4dVhIUmNkRngwWEhSbGJITmxYSEpjYmx4MFhIUmNkRngwWEhSQWMzUmhkR1VnUFNBblpXNWtKMXh5WEc1Y2NseHVYSFJjZEZ4MFlXNXBiV0YwWlNBOUlHWmhiSE5sWEhKY2JseHlYRzVjY2x4dVhIUmNkR2xtSUVCemRHRjBaU0E5UFNBblpXNWtKeUJoYm1RZ1lXNXBiV0YwWlZ4eVhHNWNkRngwWEhSMFpYaDBJRDBnUUdkbGRFVnVaRlJsZUhRb0tWeHlYRzVjZEZ4MFhIUkFiMlptYzJWMElEMGdNQzR3WEhKY2JseDBYSFJjZEVCamIyNTBaWGgwTG1acGJHeFRkSGxzWlNBOUlDY2pNREF3TURBd0oxeHlYRzVjZEZ4MFhIUnRaV0Z6ZFhKbElEMGdRR052Ym5SbGVIUXViV1ZoYzNWeVpWUmxlSFFvZEdWNGRDbGNjbHh1WEhSY2RGeDBRR052Ym5SbGVIUXVabWxzYkZSbGVIUW9kR1Y0ZEN3Z0tFQmpZVzUyWVhNdWQybGtkR2dnTFNCdFpXRnpkWEpsTG5kcFpIUm9LU0F2SURJc0lDaEFZMkZ1ZG1GekxtaGxhV2RvZENBdElERTFLU0F2SURJcFhISmNibHgwWEhSY2RHRnVhVzFoZEdVZ1BTQm1ZV3h6WlZ4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUmNkSGRwWkhSb0lEMGdRR05oYm5aaGN5NTNhV1IwYUNBdElEUmNjbHh1WEhSY2RHaGxhV2RvZENBOUlFQmpZVzUyWVhNdWFHVnBaMmgwSUMwZ01seHlYRzVjY2x4dVhIUmNkRUJqYjI1MFpYaDBMbk5oZG1Vb0tWeHlYRzVjZEZ4MFFHTnZiblJsZUhRdWMzUnliMnRsVTNSNWJHVWdQU0FuY21kaVlTZ3dMQ0F3TENBd0xDQXdMamNwSjF4eVhHNWNkRngwUUdOdmJuUmxlSFF1Wm1sc2JGTjBlV3hsSUQwZ0ozSm5ZbUVvTUN3Z01Dd2dNQ3dnTUM0MEtTZGNjbHh1WEhSY2RFQmpiMjUwWlhoMExtWnBiR3hTWldOMEtESXNJR2hsYVdkb2RDQXRJREl3TENCM2FXUjBhQ3dnTWpBcFhISmNibHgwWEhSQVkyOXVkR1Y0ZEM1emRISnZhMlZTWldOMEtESXNJR2hsYVdkb2RDQXRJREl3TENCM2FXUjBhQ3dnTWpBcFhISmNibHh5WEc1Y2RGeDBRR052Ym5SbGVIUXVabWxzYkZOMGVXeGxJRDBnSnlNMVFrTXdSRVVuWEhKY2JseDBYSFJBWTI5dWRHVjRkQzVtYVd4c1VtVmpkQ2d5TENCb1pXbG5hSFFnTFNBeU1Dd2dkMmxrZEdnZ0tpQW9UV0YwYUM1dGFXNG9RR2x1WkdWNElDOGdLRUJpWVhSMGJHVk1iMmRiSjJ4dlp5ZGRMbXhsYm1kMGFDQXRJREVwTENBeEtTa3NJREl3S1Z4eVhHNWNkRngwUUdOdmJuUmxlSFF1YkdsdVpWZHBaSFJvSUQwZ05WeHlYRzVjY2x4dVhIUmNkR1p2Y2lCdFlYSnJJR2x1SUVCaVlYUjBiR1ZNYjJkYkoyMWhjbXR6SjExY2NseHVYSEpjYmx4MFhIUmNkR2xtSUcxaGNtc3VkSGx3WlNBOVBTQW5abUZwYm5SbFpDZGNjbHh1WEhSY2RGeDBYSFJBWTI5dWRHVjRkQzV6ZEhKdmEyVlRkSGxzWlNBOUlDY2pSRGsxTXpSR0oxeHlYRzVjY2x4dVhIUmNkRngwWVhRZ1BTQW9iV0Z5YXk1aGRDQXZJQ2hBWW1GMGRHeGxURzluV3lkc2IyY25YUzVzWlc1bmRHZ2dMU0F4S1NrZ0tpQjNhV1IwYUZ4eVhHNWNjbHh1WEhSY2RGeDBRR052Ym5SbGVIUXVZbVZuYVc1UVlYUm9LQ2xjY2x4dVhIUmNkRngwUUdOdmJuUmxlSFF1Ylc5MlpWUnZLR0YwSUMwZ1FHTnZiblJsZUhRdWJHbHVaVmRwWkhSb0lDOGdNaUFySURJc0lHaGxhV2RvZENBdElESXdLVnh5WEc1Y2RGeDBYSFJBWTI5dWRHVjRkQzVzYVc1bFZHOG9ZWFFnTFNCQVkyOXVkR1Y0ZEM1c2FXNWxWMmxrZEdnZ0x5QXlJQ3NnTWl3Z2FHVnBaMmgwS1Z4eVhHNWNkRngwWEhSQVkyOXVkR1Y0ZEM1emRISnZhMlVvS1Z4eVhHNWNjbHh1WEhSY2RFQmpiMjUwWlhoMExuSmxjM1J2Y21Vb0tWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJqYkdsamF6b2dLR1YyWlc1MEtTQXRQbHh5WEc1Y2RGeDBZMjl2Y21SeklEMGdRR05oYm5aaGN5NXlaV3hOYjNWelpVTnZiM0prY3lobGRtVnVkQ2xjY2x4dVhIUmNkSGdnUFNCamIyOXlaSE11ZUZ4eVhHNWNkRngwZVNBOUlHTnZiM0prY3k1NVhISmNibHh5WEc1Y2RGeDBiQ0E5SURKY2NseHVYSFJjZEhJZ1BTQnNJQ3NnUUdOaGJuWmhjeTUzYVdSMGFDQXRJRFJjY2x4dVhIUmNkR0lnUFNCQVkyRnVkbUZ6TG1obGFXZG9kQ0F0SURKY2NseHVYSFJjZEhRZ1BTQmlJQzBnTWpCY2NseHVYSEpjYmx4eVhHNWNkRngwYVdZZ2VDQStQU0JzSUdGdVpDQjRJRHc5SUhJZ1lXNWtJSGtnUGowZ2RDQmhibVFnZVNBOFBTQmlYSEpjYmx4MFhIUmNkRUJwYm1SbGVDQTlJRTFoZEdndWNtOTFibVFvS0hnZ0xTQnNLU0F2SUNoeUlDMGdiQ2tnS2lBb1FHSmhkSFJzWlV4dloxc25iRzluSjEwdWJHVnVaM1JvSUMwZ01Ta3BYSEpjYmx4MFhIUmNkRUJ6ZEdGMFpTQTlJQ2QyYVdWM0oxeHlYRzVjZEZ4MFhIUkFiMlptYzJWMElEMGdNQzR3WEhKY2JseHlYRzVjZEd0bGVUb2dLR1YyWlc1MEtTQXRQbHh5WEc1Y2NseHVYSFJjZEdsbUlHVjJaVzUwTG5kb2FXTm9JRDA5SURNeVhISmNibHgwWEhSY2RFQndZWFZ6WlNBOUlDRkFjR0YxYzJWY2NseHVYSEpjYmx4eVhHNWNkRngwYVdZZ1pYWmxiblF1ZDJocFkyZ2dQVDBnTXpkY2NseHVYSFJjZEZ4MFFHbHVaR1Y0SUQwZ1RXRjBhQzV0WVhnb1FHbHVaR1Y0SUMwZ01Td2dNQ2xjY2x4dVhIUmNkRngwUUc5bVpuTmxkQ0E5SURFdU1GeHlYRzVjZEZ4MFhIUkFjM1JoZEdVZ1BTQW5kbWxsZHlkY2NseHVYSEpjYmx4MFhIUnBaaUJsZG1WdWRDNTNhR2xqYUNBOVBTQXpPVnh5WEc1Y2RGeDBYSFJBYVc1a1pYZ2dQU0JOWVhSb0xtMXBiaWhBYVc1a1pYZ2dLeUF4TENCQVltRjBkR3hsVEc5bld5ZHNiMmNuWFM1c1pXNW5kR2dnTFNBeEtWeHlYRzVjZEZ4MFhIUkFiMlptYzJWMElEMGdNUzR3WEhKY2JseDBYSFJjZEVCemRHRjBaU0E5SUNkMmFXVjNKMXh5WEc1Y2NseHVYSEpjYmx4MGNtVnhkV1Z6ZEVaeVlXMWxPaUFvZEdsdFpTa2dMVDVjY2x4dVhISmNibHgwWEhSa1pXeDBZU0E5SUUxaGRHZ3ViV0Y0S0hScGJXVWdMU0JBYkdGemRGUnBiV1VzSURBcFhISmNibHgwWEhSQWJHRnpkRlJwYldVZ1BTQjBhVzFsWEhKY2JseDBYSFJBWVdOamRXMTFiR0YwYjNJZ0t6MGdaR1ZzZEdGY2NseHVYSEpjYmx4MFhIUjNhR2xzWlNCQVlXTmpkVzExYkdGMGIzSWdQajBnWTI5dVptbG5MbWx1ZEdWeWRtRnNYSEpjYmx4eVhHNWNkRngwWEhSQVlXTmpkVzExYkdGMGIzSWdMVDBnWTI5dVptbG5MbWx1ZEdWeWRtRnNYSEpjYmx4MFhIUmNkRUJrY21GM0tHTnZibVpwWnk1cGJuUmxjblpoYkNBdklERXdNREFwWEhKY2JseHlYRzVjZEZ4MGQybHVaRzkzTG5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTZ29kR2x0WlNrZ1BUNGdRSEpsY1hWbGMzUkdjbUZ0WlNoMGFXMWxLU2xjY2x4dVhISmNibHh5WEc1Y2RITjBZWEowT2lBdFBseHlYRzVjY2x4dVhIUmNkR2xtSUVCc2IyRmtLQ2xjY2x4dVhISmNibHgwWEhSY2RFQnNZWE4wVkdsdFpTQTlJRzVsZHlCRVlYUmxLQ2t1WjJWMFZHbHRaU2dwWEhKY2JseDBYSFJjZEVCaFkyTjFiWFZzWVhSdmNpQTlJREF1TUZ4eVhHNWNkRngwWEhSQWNtVnhkV1Z6ZEVaeVlXMWxLRUJzWVhOMFZHbHRaU2xjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmlRb0xUNWNjbHh1WEhKY2JseDBKQ2duTG1KaGRIUnNaU2NwTG1KcGJtUW9KM05vYjNjbkxDQXRQbHh5WEc1Y2NseHVYSFJjZEdKaGRIUnNaU0E5SUc1bGR5QkNZWFIwYkdVb2RHaHBjeWxjY2x4dVhIUmNkR0poZEhSc1pTNXpkR0Z5ZENncFhISmNibHgwWEhKY2JseDBLUzVtYVd4MFpYSW9KenAyYVhOcFlteGxKeWt1ZEhKcFoyZGxjaWduYzJodmR5Y3BYSEpjYmx4eVhHNHBJaXdpWEhKY2JseHlYRzVqYkdGemN5QkFRMmhoZEZ4eVhHNWNjbHh1WEhSa1pXWmhkV3gwY3lBOUlIdGNjbHh1WEhKY2JseDBYSFJ0WlhOellXZGxWWEpzT2lCdWRXeHNMRnh5WEc1Y2RGeDBjR3hoZVdWeVZYSnNPaUJ1ZFd4c0xGeHlYRzVjZEZ4MFpXMXZkR2xqYjI1VmNtdzZJRzUxYkd3c1hISmNibHgwWEhScGJuUmxjblpoYkRvZ01peGNjbHh1WEhSY2RHaHBjM1J2Y25rNklEQXNYSEpjYmx4MFhIUnRhVzVNWlc1bmRHZzZJREVzWEhKY2JseDBYSFJ0WVhoTVpXNW5kR2c2SURVeE1peGNjbHh1WEhSY2RHTnZiMnhrYjNkdU9pQTJNQ3hjY2x4dVhIUmNkR3B2YVc0NklERXlNQ3hjY2x4dVhISmNibHgwWEhSaGJHeHZkMU5sYm1RNklIUnlkV1VzWEhKY2JseDBYSFJoYkd4dmQxSmxZMlZwZG1VNklIUnlkV1VzWEhKY2JseDBYSFJ6Wlc1a1JYaDBjbUU2SUh0OUxGeHlYRzVjZEZ4MGNtVmpaV2wyWlVWNGRISmhPaUI3ZlN4Y2NseHVYSFJjZEhObGJtUk5aWFJvYjJRNklDZFFUMU5VSnl4Y2NseHVYSFJjZEhKbFkyVnBkbVZOWlhSb2IyUTZJQ2RIUlZRbkxGeHlYRzVjZEgxY2NseHVYSEpjYmx4MFkyOXRiV0Z1WkhNZ1BTQjdYSEpjYmx4eVhHNWNkRngwSjJOc1pXRnlKem9nSjJOc1pXRnlUM1YwY0hWMEp5eGNjbHh1WEhSOVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkR052Ym5OMGNuVmpkRzl5T2lBb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3lrZ0xUNWNjbHh1WEhKY2JseDBYSFFqWVd4bGNuUW9KM2RsYkdOdmJXVW5LVnh5WEc1Y2NseHVYSFJjZEc5d2RDQTlJQ1F1WlhoMFpXNWtLSHQ5TENCa1pXWmhkV3gwY3l3Z2IzQjBhVzl1Y3lsY2NseHVYSEpjYmx4MFhIUkFiV1Z6YzJGblpWVnliQ0E5SUc5d2RDNXRaWE56WVdkbFZYSnNYSEpjYmx4MFhIUkFjR3hoZVdWeVZYSnNJRDBnYjNCMExuQnNZWGxsY2xWeWJGeHlYRzVjZEZ4MFFHVnRiM1JwWTI5dWN5QTlJRzVsZHlCRmJXOTBhV052Ym5Nb0tWeHlYRzVjY2x4dVhISmNibHgwWEhSQVlXeHNiM2RUWlc1a0lEMGdiM0IwTG1Gc2JHOTNVMlZ1WkZ4eVhHNWNkRngwUUdGc2JHOTNVbVZqWldsMlpTQTlJRzl3ZEM1aGJHeHZkMUpsWTJWcGRtVmNjbHh1WEhSY2RFQnlaV05sYVhabFJYaDBjbUVnUFNCdmNIUXVjbVZqWldsMlpVVjRkSEpoWEhKY2JseDBYSFJBYzJWdVpFVjRkSEpoSUQwZ2IzQjBMbk5sYm1SRmVIUnlZVnh5WEc1Y2RGeDBRSEpsWTJWcGRtVk5aWFJvYjJRZ1BTQnZjSFF1Y21WalpXbDJaVTFsZEdodlpGeHlYRzVjZEZ4MFFITmxibVJOWlhSb2IyUWdQU0J2Y0hRdWMyVnVaRTFsZEdodlpGeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJjZEVCcGJuQjFkQ0E5SUNRb1pXeGxiV1Z1ZENrdVptbHVaQ2duTG1sdWNIVjBKeWxjY2x4dVhIUmNkRUJ2ZFhSd2RYUWdQU0FrS0dWc1pXMWxiblFwTG1acGJtUW9KeTV2ZFhSd2RYUW5LVnh5WEc1Y2RGeDBRSE5sYm1SQ2RHNGdQU0FrS0dWc1pXMWxiblFwTG1acGJtUW9KeTV6Wlc1a0p5bGNjbHh1WEhSY2RFQmpiR1ZoY2tKMGJpQTlJQ1FvWld4bGJXVnVkQ2t1Wm1sdVpDZ25MbU5zWldGeUp5bGNjbHh1WEhSY2RFQmxiVzkwYVdOdmJuTkNkRzRnUFNBa0tHVnNaVzFsYm5RcExtWnBibVFvSnk1bGJXOTBhV052Ym5NbktWeHlYRzVjY2x4dVhISmNibHgwWEhSQVpXMXZkR2xqYjI1ekxuQnZjRzkyWlhJb1FHVnRiM1JwWTI5dWMwSjBiaXdnUUdsdWNIVjBLVnh5WEc1Y2NseHVYSFJjZEVCdmRYUndkWFJiTUYwdWMyTnliMnhzVkc5d0lEMGdRRzkxZEhCMWRGc3dYUzV6WTNKdmJHeElaV2xuYUhSY2NseHVYSEpjYmx4MFhIUWtLRUJwYm5CMWRDa3VhMlY1Wkc5M2JpZ29aWFpsYm5RcElEMCtJRUJ2Ymt0bGVTaGxkbVZ1ZENrcFhISmNibHh5WEc1Y2NseHVYSFJjZENRb1FITmxibVJDZEc0cExtTnNhV05yS0NBOVBseHlYRzVjY2x4dVhIUmNkRngwUUhObGJtUW9LVnh5WEc1Y2RGeDBYSFJBWTJ4bFlYSkpibkIxZENncFhISmNibHgwWEhRcFhISmNibHh5WEc1Y2RGeDBKQ2hBWTJ4bFlYSkNkRzRwTG1Oc2FXTnJLQ0E5UGx4eVhHNWNjbHh1WEhSY2RGeDBRR05zWldGeVQzVjBjSFYwS0NsY2NseHVYSFJjZENsY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhSY2RFQnBiblJsY25aaGJDQTlJRzl3ZEM1cGJuUmxjblpoYkZ4eVhHNWNjbHh1WEhKY2JseDBYSFJBYW05cGJpQTlJRzl3ZEM1cWIybHVYSEpjYmx4eVhHNWNkRngwUUdOdmIyeGtiM2R1SUQwZ2IzQjBMbU52YjJ4a2IzZHVYSEpjYmx4MFhIUkFjMlZ1ZENBOUlFMWhkR2d1Y205MWJtUW9LRzVsZHlCRVlYUmxLQ2twTG1kbGRGUnBiV1VvS1NBdklERXdNREFwSUMwZ1FHTnZiMnhrYjNkdVhISmNibHh5WEc1Y2RGeDBRSFJ2ZFdOb0tDbGNjbHh1WEhSY2RFQjBhVzFsSUQwZ1RXRjBhQzV0WVhnb1FIUnBiV1VnTFNCdmNIUXVhR2x6ZEc5eWVTd2dNQ2xjY2x4dVhISmNibHh5WEc1Y2RGeDBRSEpsWTJWcGRtVW9LVnh5WEc1Y2RGeDBYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHgwWjJWMFJYSnliM0pVWlhoME9pQW9ibUZ0WlN3Z1lYSm5jeWtnTFQ1Y2NseHVYSEpjYmx4MFhIUjBaWGgwSUQwZ2FURTRiaTVqYUdGMExtVnljbTl5YzF0dVlXMWxYU0EvSUdreE9HNHVZMmhoZEM1bGNuSnZjbk11ZFc1cmJtOTNibHh5WEc1Y2NseHVYSFJjZEdsbUlHRnlaM00vSUdGdVpDQjBlWEJsYjJZb1lYSm5jeWtnUFQwZ0oyOWlhbVZqZENkY2NseHVYSEpjYmx4MFhIUmNkR1p2Y2lCckxDQjJJRzltSUdGeVozTmNjbHh1WEhSY2RGeDBYSFIwWlhoMElEMGdkR1Y0ZEM1eVpYQnNZV05sS0NjNkp5QXJJR3NzSUhZcFhISmNibHh5WEc1Y2RGeDBkR1Y0ZEZ4eVhHNWNjbHh1WEhKY2JseHlYRzVjZEdWeWNtOXlPaUFvYm1GdFpTd2dZWEpuY3lrZ0xUNWNjbHh1WEhKY2JseDBYSFJoYkdWeWRDQTlJQ1FvSnp4a2FYWStQQzlrYVhZK0p5bGNjbHh1WEhSY2RGeDBMbUZrWkVOc1lYTnpLQ2RoYkdWeWRDY3BYSEpjYmx4MFhIUmNkQzVoWkdSRGJHRnpjeWduWVd4bGNuUXRaR0Z1WjJWeUp5bGNjbHh1WEhSY2RGeDBMblJsZUhRb1FHZGxkRVZ5Y205eVZHVjRkQ2h1WVcxbExDQmhjbWR6S1NsY2NseHVYSEpjYmx4MFhIUWtLRUJ2ZFhSd2RYUXBYSEpjYmx4MFhIUmNkQzVoY0hCbGJtUW9ZV3hsY25RcFhISmNibHh5WEc1Y2RHRnNaWEowT2lBb2JtRnRaU3dnWVhKbmN5a2dMVDVjY2x4dVhISmNibHgwWEhSaGJHVnlkQ2hBWjJWMFJYSnliM0pVWlhoMEtHNWhiV1VzSUdGeVozTXBLVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhSMGIzVmphRG9nTFQ1Y2NseHVYSFJjZEVCMGFXMWxJRDBnVFdGMGFDNXliM1Z1WkNnb2JtVjNJRVJoZEdVb0tTa3VaMlYwVkdsdFpTZ3BJQzhnTVRBd01DbGNjbHh1WEhKY2JseHlYRzVjZEhObGJtUTZJQzArWEhKY2JseHlYRzVjZEZ4MGJtOTNJRDBnVFdGMGFDNXliM1Z1WkNnb2JtVjNJRVJoZEdVb0tTa3VaMlYwVkdsdFpTZ3BJQzhnTVRBd01DbGNjbHh1WEhSY2RHMWxjM05oWjJVZ1BTQWtLRUJwYm5CMWRDa3VkbUZzS0NsY2NseHVYSEpjYmx4MFhIUnRZWFJqYUdWeklEMGdiV1Z6YzJGblpTNXRZWFJqYUNndlhseGNMeWhjWEhjcktTOXBLVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkRngwYVdZZ2JXRjBZMmhsY3o4Z1lXNWtJRzFoZEdOb1pYTmJNVjAvWEhKY2JseDBYSFJjZEdOdmJXMWhibVFnUFNCdFlYUmphR1Z6V3pGZFhISmNibHh5WEc1Y2RGeDBYSFJtYjNJZ2F5d2dkaUJ2WmlCamIyMXRZVzVrYzF4eVhHNWNjbHh1WEhSY2RGeDBYSFJwWmlCamIyMXRZVzVrTG5SdlRHOTNaWEpEWVhObEtDa2dQVDBnYXk1MGIweHZkMlZ5UTJGelpTZ3BYSEpjYmx4eVhHNWNkRngwWEhSY2RGeDBablZ1WXlBOUlIUm9hWE5iZGwxY2NseHVYSEpjYmx4MFhIUmNkRngwWEhScFppQjBlWEJsYjJZb1puVnVZeWtnUFQwZ0oyWjFibU4wYVc5dUoxeHlYRzVjZEZ4MFhIUmNkRngwWEhSbWRXNWpMbU5oYkd3b2RHaHBjeWxjY2x4dVhIUmNkRngwWEhSY2RGeDBjbVYwZFhKdVhISmNibHh5WEc1Y2RGeDBYSFJBWlhKeWIzSW9KMk50WkU1dmRFWnZkVzVrSnl3Z2V5ZHVZVzFsSnpvZ1kyOXRiV0Z1WkgwcFhISmNibHgwWEhSY2RISmxkSFZ5Ymx4eVhHNWNjbHh1WEhKY2JseDBYSFJwWmlCQVlXeHNiM2RUWlc1a1hISmNibHh5WEc1Y2RGeDBYSFJwWmlCdFpYTnpZV2RsTG14bGJtZDBhQ0E4SUVCdGFXNU1aVzVuZEdoY2NseHVYSFJjZEZ4MFhIUkFZV3hsY25Rb0ozUnZiMU5vYjNKMEp5d2dleWR0YVc0bk9pQkFiV2x1VEdWdVozUm9mU2xjY2x4dVhIUmNkRngwWEhSeVpYUjFjbTRnWEhKY2JseHlYRzVjZEZ4MFhIUnBaaUJ0WlhOellXZGxMbXhsYm1kMGFDQStJRUJ0WVhoTVpXNW5kR2hjY2x4dVhIUmNkRngwWEhSaGJHVnlkQ2duZEc5dlRHOXVaeWNzSUhzbmJXRjRKem9nUUcxaGVFeGxibWQwYUgwcFhISmNibHgwWEhSY2RGeDBjbVYwZFhKdVhISmNibHh5WEc1Y2RGeDBYSFJwWmlCQWMyVnVkQ0FySUVCamIyOXNaRzkzYmlBK0lHNXZkMXh5WEc1Y2RGeDBYSFJjZEVCaGJHVnlkQ2duWTI5dmJHUnZkMjRuS1Z4eVhHNWNkRngwWEhSY2RISmxkSFZ5Ymx4eVhHNWNjbHh1WEhKY2JseDBYSFJjZEdSaGRHRWdQU0FrTG1WNGRHVnVaQ2g3ZlN3Z1FITmxibVJGZUhSeVlTd2dlMjFsYzNOaFoyVTZJQ1FvUUdsdWNIVjBLUzUyWVd3b0tYMHBYSEpjYmx4eVhHNWNkRngwWEhRa0xtRnFZWGdvZTF4eVhHNWNjbHh1WEhSY2RGeDBYSFIxY213NklFQnRaWE56WVdkbFZYSnNMRnh5WEc1Y2RGeDBYSFJjZEhOMVkyTmxjM002SUNoa1lYUmhLU0E5UGlCQWIyNVRaVzUwS0dSaGRHRXBMRnh5WEc1Y2RGeDBYSFJjZEdSaGRHRTZJR1JoZEdFc1hISmNibHgwWEhSY2RGeDBaR0YwWVZSNWNHVTZJQ2RxYzI5dUp5eGNjbHh1WEhSY2RGeDBYSFJ0WlhSb2IyUTZJRUJ6Wlc1a1RXVjBhRzlrTEZ4MFhISmNibHgwWEhSY2RIMHBYSEpjYmx4eVhHNWNkRngwWEhSQWMyVnVkQ0E5SUc1dmQxeHlYRzVjZEZ4MFhIUWtLRUJ6Wlc1a1FuUnVLUzVrWVhSaEtDZDBhVzFsSnl3Z1FITmxiblFnS3lCQVkyOXZiR1J2ZDI0cFhISmNibHh5WEc1Y2RGeDBaV3h6WlZ4eVhHNWNjbHh1WEhSY2RGeDBRR1Z5Y205eUtDZGpZVzV1YjNSVFpXNWtKeWxjY2x4dVhISmNibHh5WEc1Y2RISmxZMlZwZG1VNklDMCtYSEpjYmx4eVhHNWNkRngwYVdZZ1FHRnNiRzkzVW1WalpXbDJaVnh5WEc1Y2NseHVYSFJjZEZ4MFpHRjBZU0E5SUNRdVpYaDBaVzVrS0h0OUxDQkFjbVZqWldsMlpVVjRkSEpoTENCN2RHbHRaVG9nUUhScGJXVjlLVnh5WEc1Y2NseHVYSFJjZEZ4MEpDNWhhbUY0S0h0Y2NseHVYSEpjYmx4MFhIUmNkRngwZFhKc09pQkFiV1Z6YzJGblpWVnliQ3hjY2x4dVhIUmNkRngwWEhSa1lYUmhPaUJrWVhSaExGeHlYRzVjZEZ4MFhIUmNkR052YlhCc1pYUmxPaUE5UGlCQWIyNURiMjF3YkdWMFpTZ3BMRnh5WEc1Y2RGeDBYSFJjZEhOMVkyTmxjM002SUNoa1lYUmhLU0E5UGlCQWIyNVNaV05sYVhabFpDaGtZWFJoS1N4Y2NseHVYSFJjZEZ4MFhIUmtZWFJoVkhsd1pUb2dKMnB6YjI0bkxGeHlYRzVjZEZ4MFhIUmNkRzFsZEdodlpEb2dRSEpsWTJWcGRtVk5aWFJvYjJRc1hISmNibHgwWEhSY2RIMHBYSEpjYmx4eVhHNWNkRngwWEhSQWRHOTFZMmdvS1Z4eVhHNWNkRngwWld4elpWeHlYRzVjY2x4dVhIUmNkRngwUUdWeWNtOXlLQ2RqWVc1dWIzUlNaV05sYVhabEp5bGNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUmpiR1ZoY2s5MWRIQjFkRG9nTFQ1Y2NseHVYSEpjYmx4MFhIUWtLRUJ2ZFhSd2RYUXBMbVZ0Y0hSNUtDbGNjbHh1WEhKY2JseHlYRzVjZEdOc1pXRnlTVzV3ZFhRNklDMCtYSEpjYmx4eVhHNWNkRngwSkNoQWFXNXdkWFFwTG5aaGJDZ25KeWxjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJuWlhSTlpYTnpZV2RsT2lBb1pHRjBZU2tnTFQ1Y2NseHVYSFJjZENRb0p6eHdQand2Y0Q0bktWeHlYRzVjZEZ4MFhIUXVhSFJ0YkNoQVpXMXZkR2xqYjI1ekxtbHVjMlZ5ZENoa1lYUmhMbTFsYzNOaFoyVXBLVnh5WEc1Y2RGeDBYSFF1WVhCd1pXNWtLRnh5WEc1Y2NseHVYSFJjZEZ4MFhIUWtLQ2M4YzIxaGJHdytQQzl6YldGc2JENG5LVnh5WEc1Y2RGeDBYSFJjZEZ4MExtRmtaRU5zWVhOektDZGphR0YwTFhScGJXVW5LVnh5WEc1Y2RGeDBYSFJjZEZ4MExtUmhkR0VvSjNScGJXVW5MQ0JrWVhSaExuUnBiV1VwWEhKY2JseDBYSFJjZENsY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhSdVpYZE5aWE56WVdkbE9pQW9aR0YwWVNrZ0xUNWNjbHh1WEhKY2JseDBYSFJ5YjNjZ1BTQWtLQ2M4WkdsMlBqd3ZaR2wyUGljcFhISmNibHgwWEhSY2RDNWhaR1JEYkdGemN5Z25jbTkzSnlsY2NseHVYSFJjZEZ4MExtRmtaRU5zWVhOektDZGphR0YwTFcxbGMzTmhaMlVuS1Z4eVhHNWNkRngwWEhRdVpHRjBZU2duZEdsdFpTY3NJR1JoZEdFdWRHbHRaU2xjY2x4dVhIUmNkRngwTG1SaGRHRW9KMkYxZEdodmNpY3NJR1JoZEdFdVlYVjBhRzl5S1Z4eVhHNWNjbHh1WEhSY2RHTnZiREVnUFNBa0tDYzhaR2wyUGp3dlpHbDJQaWNwWEhKY2JseDBYSFJjZEM1aFpHUkRiR0Z6Y3lnblkyOXNMWGh6TFRFbktWeHlYRzVjY2x4dVhIUmNkR052YkRJZ1BTQWtLQ2M4WkdsMlBqd3ZaR2wyUGljcFhISmNibHgwWEhSY2RDNWhaR1JEYkdGemN5Z25ZMjlzTFhoekxURXhKeWxjY2x4dVhISmNibHgwWEhScFppQkFjR3hoZVdWeVZYSnNQMXh5WEc1Y2NseHVYSFJjZEZ4MFpHbDJNU0E5SUNRb0p6eGhQand2WVQ0bktWeHlYRzVjZEZ4MFhIUmNkQzVoZEhSeUtDZG9jbVZtSnl3Z1FHZGxkRkJzWVhsbGNsVnliQ2hrWVhSaExtRjFkR2h2Y2lrcFhISmNibHgwWEhSY2RGeDBMbUZrWkVOc1lYTnpLQ2RqYUdGMExXRjFkR2h2Y2ljcFhISmNibHgwWEhSbGJITmxYSEpjYmx4MFhIUmNjbHh1WEhSY2RGeDBaR2wyTVNBOUlDUW9KenhrYVhZK1BDOWthWFkrSnlsY2NseHVYSFJjZEZ4MFhIUXVZV1JrUTJ4aGMzTW9KMk5vWVhRdFlYVjBhRzl5SnlsY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhSY2RHUnBkaklnUFNBa0tDYzhaR2wyUGp3dlpHbDJQaWNwWEhKY2JseDBYSFJjZEM1aFpHUkRiR0Z6Y3lnblkyaGhkQzFqYjI1MFpXNTBKeWxjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4MFhIUmhkbUYwWVhJZ1BTQWtLQ2M4YVcxblBqd3ZhVzFuUGljcFhISmNibHgwWEhSY2RDNWhaR1JEYkdGemN5Z25hVzFuTFhKbGMzQnZibk5wZG1VbktWeHlYRzVjZEZ4MFhIUXVZV1JrUTJ4aGMzTW9KMk5vWVhRdFlYWmhkR0Z5SnlsY2NseHVYSFJjZEZ4MExtRjBkSElvSjNOeVl5Y3NJR1JoZEdFdVlYWmhkR0Z5S1Z4eVhHNWNjbHh1WEhKY2JseDBYSFJoZFhSb2IzSWdQU0FrS0NjOGNENDhMM0ErSnlrdVlYQndaVzVrS0Z4eVhHNWNjbHh1WEhSY2RGeDBKQ2duUEhOMGNtOXVaejQ4TDNOMGNtOXVaejRuS1Z4eVhHNWNkRngwWEhSY2RDNWhaR1JEYkdGemN5Z25ZMmhoZEMxdVlXMWxKeWxjY2x4dVhIUmNkRngwWEhRdWRHVjRkQ2hrWVhSaExtRjFkR2h2Y2lrc1hISmNibHgwWEhRcFhISmNibHh5WEc1Y2RGeDBiV1Z6YzJGblpTQTlJRUJuWlhSTlpYTnpZV2RsS0dSaGRHRXBYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBYSFFrS0dScGRqRXBMbUZ3Y0dWdVpDaGhkbUYwWVhJcExtRndjR1Z1WkNoaGRYUm9iM0lwWEhKY2JseDBYSFFrS0dScGRqSXBMbUZ3Y0dWdVpDaHRaWE56WVdkbEtWeHlYRzVjZEZ4MEpDaGpiMnd4S1M1aGNIQmxibVFvWkdsMk1TbGNjbHh1WEhSY2RDUW9ZMjlzTWlrdVlYQndaVzVrS0dScGRqSXBYSEpjYmx4MFhIUWtLSEp2ZHlrdVlYQndaVzVrS0dOdmJERXBMbUZ3Y0dWdVpDaGpiMnd5S1Z4eVhHNWNkRngwSkNoQWIzVjBjSFYwS1M1aGNIQmxibVFvY205M0tWeHlYRzVjY2x4dVhISmNibHgwYlc5a2FXWjVUV1Z6YzJGblpUb2dLRzFsYzNOaFoyVXNJR1JoZEdFcElDMCtYSEpjYmx4eVhHNWNkRngwSkNodFpYTnpZV2RsS1M1bWFXNWtLQ2N1WTJoaGRDMWpiMjUwWlc1MEp5a3VZWEJ3Wlc1a0tGeHlYRzVjY2x4dVhIUmNkRngwUUdkbGRFMWxjM05oWjJVb1pHRjBZU2xjY2x4dVhIUmNkQ2xjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJoWkdSTlpYTnpZV2RsT2lBb1pHRjBZU2t0UGx4eVhHNWNjbHh1WEhKY2JseDBYSFJ6WTNKdmJHd2dQU0FvUUc5MWRIQjFkRnN3WFM1elkzSnZiR3hJWldsbmFIUWdMU0JBYjNWMGNIVjBXekJkTG5OamNtOXNiRlJ2Y0NBdElFQnZkWFJ3ZFhSYk1GMHVZMnhwWlc1MFNHVnBaMmgwS1NBOFBTQXhYSEpjYmx4MFhIUnRaWE56WVdkbElEMGdKQ2hBYjNWMGNIVjBLUzVqYUdsc1pISmxiaWdwTG14aGMzUW9LVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkRngwYVdZZ2JXVnpjMkZuWlM1c1pXNW5kR2dnUFQwZ01DQnZjaUFoSkNodFpYTnpZV2RsS1M1cGN5Z25MbU5vWVhRdGJXVnpjMkZuWlNjcFhISmNibHgwWEhSY2RGeHlYRzVjZEZ4MFhIUkFibVYzVFdWemMyRm5aU2hrWVhSaEtWeHlYRzVjZEZ4MFpXeHpaVnh5WEc1Y2NseHVYSFJjZEZ4MGRHbHRaU0E5SUNRb2JXVnpjMkZuWlNrdVpHRjBZU2duZEdsdFpTY3BYSEpjYmx4MFhIUmNkR0YxZEdodmNpQTlJQ1FvYldWemMyRm5aU2t1WkdGMFlTZ25ZWFYwYUc5eUp5bGNjbHh1WEhKY2JseDBYSFJjZEdsbUlHRjFkR2h2Y2lBOVBTQmtZWFJoTG1GMWRHaHZjaUJoYm1RZ0tHUmhkR0V1ZEdsdFpTQXRJSFJwYldVcElEdzlJRUJxYjJsdVhISmNibHgwWEhSY2RGeDBYSEpjYmx4MFhIUmNkRngwUUcxdlpHbG1lVTFsYzNOaFoyVW9iV1Z6YzJGblpTd2daR0YwWVNsY2NseHVYSFJjZEZ4MFpXeHpaVnh5WEc1Y2NseHVYSFJjZEZ4MFhIUkFibVYzVFdWemMyRm5aU2hrWVhSaEtWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2RGeDBhV1lnYzJOeWIyeHNYSEpjYmx4MFhIUmNkRUJ2ZFhSd2RYUmJNRjB1YzJOeWIyeHNWRzl3SUQwZ1FHOTFkSEIxZEZzd1hTNXpZM0p2Ykd4SVpXbG5hSFFnTFNBeFhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkRzl1VTJWdWREb2dLR1JoZEdFcElDMCtYSEpjYmx4eVhHNWNkRngwUUdWeWNtOXlLR1JoZEdFdWNtVmhjMjl1TENCa1lYUmhMbUZ5WjNNcElHbG1JR1JoZEdFdWMzUmhkSFZ6SUQwOUlDZGxjbkp2Y2lkY2NseHVYSEpjYmx4eVhHNWNkRzl1VW1WalpXbDJaV1E2SUNoa1lYUmhLU0F0UGx4eVhHNWNjbHh1WEhSY2RHWnZjaUJ0WlhOellXZGxJR2x1SUdSaGRHRmNjbHh1WEhSY2RGeDBRR0ZrWkUxbGMzTmhaMlVvYldWemMyRm5aU2xjY2x4dVhISmNibHgwYjI1RGIyMXdiR1YwWlRvZ0xUNWNjbHh1WEhKY2JseDBYSFJ6WlhSVWFXMWxiM1YwS0QwK1hISmNibHh5WEc1Y2RGeDBYSFJBY21WalpXbDJaU2dwWEhKY2JseDBYSFFzSUVCcGJuUmxjblpoYkNBcUlERXdNREFwWEhKY2JseHlYRzVjY2x4dVhIUnZia3RsZVRvZ0tHVjJaVzUwS1NBdFBseHlYRzVjY2x4dVhIUmNkR2xtSUdWMlpXNTBMbmRvYVdOb0lEMDlJREV6WEhKY2JseDBYSFJjZEVCelpXNWtLQ2xjY2x4dVhIUmNkRngwUUdOc1pXRnlTVzV3ZFhRb0tWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFJuWlhSUWJHRjVaWEpWY213NklDaHVZVzFsS1NBdFBseHlYRzVjY2x4dVhIUmNkSEpsZEhWeWJpQkFjR3hoZVdWeVZYSnNMbkpsY0d4aFkyVW9KM3R1WVcxbGZTY3NJRzVoYldVcFhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dUpDZ3RQbHh5WEc1Y2NseHVYSFIxY0dSaGRHVWdQU0FvS1NBdFBseHlYRzVjY2x4dVhIUmNkRzV2ZHlBOUlFMWhkR2d1Y205MWJtUW9LRzVsZHlCRVlYUmxLQ2twTG1kbGRGUnBiV1VvS1NBdklERXdNREFwWEhKY2JseHlYRzVjZEZ4MEpDZ25MbU5vWVhRZ0xtTm9ZWFF0ZEdsdFpTY3BMbVZoWTJnb0xUNWNjbHh1WEhKY2JseDBYSFJjZEhScGJXVWdQU0J3WVhKelpVbHVkQ2drS0hSb2FYTXBMbVJoZEdFb0ozUnBiV1VuS1NsY2NseHVYSFJjZEZ4MGFXNTBaWEoyWVd3Z1BTQnViM2NnTFNCMGFXMWxYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBYSFJjZEdsbUlHbHVkR1Z5ZG1Gc0lEd2dOakJjY2x4dVhISmNibHgwWEhSY2RGeDBkR1Y0ZENBOUlHa3hPRzR1WTJoaGRDNW1aWGRUWldOelhISmNibHgwWEhSY2RHVnNjMlZjY2x4dVhISmNibHgwWEhSY2RGeDBkR1Y0ZENBOUlIZHBibVJ2ZHk1MGFXMWxSbTl5YldGMFUyaHZjblFvYVc1MFpYSjJZV3dwWEhKY2JseHlYRzVjZEZ4MFhIUWtLSFJvYVhNcExuUmxlSFFvZEdWNGRDQXJJQ2NnSnlBcklHa3hPRzR1WTJoaGRDNWhaMjhwWEhKY2JseDBYSFFwWEhKY2JseHlYRzVjZEZ4MEpDZ25MbU5vWVhRZ0xuTmxibVFuS1M1bFlXTm9LQzArWEhKY2JseHlYRzVjZEZ4MFhIUnBaaUFrS0hSb2FYTXBMbVJoZEdFb0oyUnBjMkZpYkdWa0p5a2dJVDBnSjNSeWRXVW5YSEpjYmx4eVhHNWNkRngwWEhSY2RIUnBiV1VnUFNCd1lYSnpaVWx1ZENna0tIUm9hWE1wTG1SaGRHRW9KM1JwYldVbktTbGNjbHh1WEhSY2RGeDBYSFIwWlhoMElEMGdKQ2gwYUdsektTNWtZWFJoS0NkMFpYaDBKeWxjY2x4dVhIUmNkRngwWEhScGJuUmxjblpoYkNBOUlIUnBiV1VnTFNCdWIzZGNjbHh1WEhKY2JseHlYRzVjZEZ4MFhIUmNkR2xtSUdsdWRHVnlkbUZzSUQ0Z01GeHlYRzVjY2x4dVhIUmNkRngwWEhSY2RDUW9kR2hwY3lsY2NseHVYSFJjZEZ4MFhIUmNkRngwTG5SbGVIUW9kMmx1Wkc5M0xuUnBiV1ZHYjNKdFlYUW9hVzUwWlhKMllXd3BLVnh5WEc1Y2RGeDBYSFJjZEZ4MFhIUXVZV1JrUTJ4aGMzTW9KMlJwYzJGaWJHVmtKeWxjY2x4dVhIUmNkRngwWEhSbGJITmxYSEpjYmx4eVhHNWNkRngwWEhSY2RGeDBKQ2gwYUdsektWeHlYRzVjZEZ4MFhIUmNkRngwWEhRdWRHVjRkQ2gwWlhoMEtWeHlYRzVjZEZ4MFhIUmNkRngwWEhRdWNtVnRiM1psUTJ4aGMzTW9KMlJwYzJGaWJHVmtKeWxjY2x4dVhISmNibHgwWEhRcFhISmNibHh5WEc1Y2NseHVYSFJjZEhObGRGUnBiV1Z2ZFhRb2RYQmtZWFJsTENBeE1EQXdLVnh5WEc1Y2NseHVYSFIxY0dSaGRHVW9LVnh5WEc0cElpd2lYSEpjYmx4eVhHNTFjR1JoZEdVZ1BTQW9LU0F0UGx4eVhHNWNjbHh1WEhSa1lYUmxJRDBnYm1WM0lFUmhkR1VvS1Z4eVhHNWNkRzV2ZHlBOUlFMWhkR2d1Y205MWJtUW9aR0YwWlM1blpYUlVhVzFsS0NrZ0x5QXhNREF3S1Z4eVhHNWNkQ1FvSnk1amRYSnlaVzUwTFhScGJXVW5LUzUwWlhoMEtHUmhkR1V1ZEc5VlZFTlRkSEpwYm1jb0tTbGNjbHh1WEhKY2JseDBKQ2duTG5ScGJXVXRiR1ZtZENjcExtVmhZMmdvTFQ1Y2NseHVYSEpjYmx4MFhIUjBieUE5SUNRb2RHaHBjeWt1WkdGMFlTZ25kRzhuS1Z4eVhHNWNkRngwSkNoMGFHbHpLUzUwWlhoMEtIZHBibVJ2ZHk1MGFXMWxSbTl5YldGMEtFMWhkR2d1YldGNEtIUnZJQzBnYm05M0xDQXdLU2twWEhKY2JseDBLVnh5WEc1Y2NseHVYSEpjYmx4MGMyVjBWR2x0Wlc5MWRDaDFjR1JoZEdVc0lERXdNREFwWEhKY2JseHlYRzVjY2x4dVhISmNiaVFnTFQ1Y2NseHVYSFIxY0dSaGRHVW9LU0lzSWx4eVhHNWNjbHh1WkdsaGJHOW5jeUE5SUZ0ZFhISmNibHh5WEc1Y2NseHVjMmh2ZHlBOUlDaGthV0ZzYjJjcElDMCtYSEpjYmx4eVhHNWNkR1JwYzIxcGMzTnBZbXhsSUQwZ0tDUW9aR2xoYkc5bktTNWtZWFJoS0Nka2FYTnRhWE56YVdKc1pTY3BLU0EvSUhSeWRXVmNjbHh1WEhKY2JseHlYRzVjY2x4dVhIUWtLR1JwWVd4dlp5a3VZbWx1WkNnbmMyaHZkMjR1WW5NdWJXOWtZV3duTENBb1pYWmxiblFwSUMwK1hISmNibHh5WEc1Y2RGeDBKQ2gwYUdsektTNW1hVzVrS0NjdVltRjBkR3hsSnlrdWRISnBaMmRsY2lnbmMyaHZkeWNwWEhKY2JseDBLVnh5WEc1Y2NseHVYSEpjYmx4MGFXWWdaR2x6YldsemMybGliR1ZjY2x4dVhISmNibHgwWEhRa0tHUnBZV3h2WnlrdWJXOWtZV3dvZTJKaFkydGtjbTl3T2lCMGNuVmxMQ0J6YUc5M09pQjBjblZsTENCclpYbGliMkZ5WkRvZ2RISjFaWDBwWEhKY2JseHlYRzVjZEdWc2MyVmNjbHh1WEhKY2JseDBYSFFrS0dScFlXeHZaeWt1Ylc5a1lXd29lMkpoWTJ0a2NtOXdPaUFuYzNSaGRHbGpKeXdnYzJodmR6b2dkSEoxWlN3Z2EyVjVZbTloY21RNklHWmhiSE5sZlNsY2NseHVYSEpjYmx4eVhHNGtJQzArWEhKY2JseDBaR2xoYkc5bmN5QTlJQ1FvSnk1dGIyUmhiQzVoZFhSdmMyaHZkeWNwWEhKY2JseHlYRzVjY2x4dVhIUWtLR1JwWVd4dlozTXBMbVZoWTJnb0tHbHVaR1Y0S1NBdFBseHlYRzVjY2x4dVhIUmNkR2xtSUdsdVpHVjRJRDA5SURCY2NseHVYSFJjZEZ4MGMyaHZkeWgwYUdsektWeHlYRzVjY2x4dVhIUmNkR2xtSUdsdVpHVjRJRHdnS0dScFlXeHZaM011YkdWdVozUm9JQzBnTVNsY2NseHVYSFJjZEZ4MEpDaDBhR2x6S1M1dmJpZ25hR2xrWkdWdUxtSnpMbTF2WkdGc0p5d2dLR1YyWlc1MEtTQXRQbHh5WEc1Y2NseHVYSFJjZEZ4MFhIUnphRzkzS0dScFlXeHZaM05iYVc1a1pYZ2dLeUF4WFNsY2NseHVYSFJjZEZ4MEtWeHlYRzVjZENraUxDSmNjbHh1WEhKY2JseHlYRzVqYkdGemN5QkFSVzF2ZEdsamIyNXpYSEpjYmx4eVhHNWNkR1JsWm1GMWJIUnpJRDBnZTF4eVhHNWNjbHh1WEhSY2RHVnRiM1JwWTI5dWN6b2dlMXh5WEc1Y2NseHVYSFJjZEZ4MEp6c3BKem9nSjJKc2FXNXJMbkJ1Wnljc1hISmNibHgwWEhSY2RDYzZSQ2M2SUNkbmNtbHVMbkJ1Wnljc1hISmNibHgwWEhSY2RDYzZLQ2M2SUNkellXUXVjRzVuSnl4Y2NseHVYSFJjZEZ4MEp6b3BKem9nSjNOdGFXeGxMbkJ1Wnljc1hISmNibHgwWEhSY2RDZENLU2M2SUNkemRXNW5iR0Z6YzJWekxuQnVaeWNzWEhKY2JseDBYSFJjZENkUExtOG5PaUFuYzNWeWNISnBjMlZrTG5CdVp5Y3NYSEpjYmx4MFhIUmNkQ2M2Y0NjNklDZDBiMjVuZFdVdWNHNW5KeXdnWEhKY2JseDBYSFI5TEZ4eVhHNWNjbHh1WEhSY2RIVnliRG9nSnk5cGJXRm5aWE12WlcxdmRHbGpiMjV6TDN0dVlXMWxmU2NzWEhKY2JseDBmVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkR052Ym5OMGNuVmpkRzl5T2lBb2RYSnNMQ0JsYlc5MGFXTnZibk1wSUMwK1hISmNibHh5WEc1Y2RGeDBRSFZ5YkNBOUlIVnliQ0EvSUdSbFptRjFiSFJ6TG5WeWJGeHlYRzVjZEZ4MFFITmxkQ0E5SUNRdVpYaDBaVzVrS0h0OUxDQmtaV1poZFd4MGN5NWxiVzkwYVdOdmJuTXNJR1Z0YjNScFkyOXVjeUEvSUh0OUtWeHlYRzVjY2x4dVhISmNibHgwYVc1elpYSjBPaUFvZEdWNGRDa2dMVDVjY2x4dVhISmNibHgwWEhSbWIzSWdheXdnZGlCdlppQkFjMlYwWEhKY2JseHlYRzVjZEZ4MFhIUjFjbXdnUFNCQWRYSnNMbkpsY0d4aFkyVW9KM3R1WVcxbGZTY3NJSFlwWEhKY2JseDBYSFJjZEdWdGIzUnBZMjl1SUQwZ0p6eHBiV2NnWTJ4aGMzTTlYQ0psYlc5MGFXTnZibHdpSUhOeVl6MWNJaWNnS3lCMWNtd2dLeUFuWENJZ1lXeDBQVndpSnlBcklHc2dLeUFuWENJZ2RHbDBiR1U5WENJbklDc2dheUFySUNkY0lpOCtKMXh5WEc1Y2RGeDBYSFIwWlhoMElEMGdkR1Y0ZEM1eVpYQnNZV05sUVd4c0tHc3NJR1Z0YjNScFkyOXVLVnh5WEc1Y2NseHVYSEpjYmx4MFhIUjBaWGgwWEhKY2JseHlYRzVjZEhCdmNHOTJaWEk2SUNoaWRYUjBiMjRzSUc5MWRIQjFkQ2tnTFQ1Y2NseHVYSEpjYmx4MFhIUWtLR0oxZEhSdmJpa3VjRzl3YjNabGNpaDdYSEpjYmx4eVhHNWNkRngwWEhSb2RHMXNPaUIwY25WbExGeHlYRzVjZEZ4MFhIUjBjbWxuWjJWeU9pQW5ZMnhwWTJzbkxGeHlYRzVjZEZ4MFhIUndiR0ZqWlcxbGJuUTZJQ2QwYjNBbkxGeHlYRzVjZEZ4MFhIUjBhWFJzWlRvZ2FURTRiaTVsYlc5MGFXTnZibk11ZEdsMGJHVXNYSEpjYmx4MFhIUmNkR052Ym5SbGJuUTZJRDArSUVCblpYUlFiM0J2ZG1WeVEyOXVkR1Z1ZENodmRYUndkWFFwTEZ4eVhHNWNkRngwWEhSMFpXMXdiR0YwWlRvZ0p6eGthWFlnWTJ4aGMzTTlYQ0p3YjNCdmRtVnlYQ0lnY205c1pUMWNJblJ2YjJ4MGFYQmNJajQ4WkdsMklHTnNZWE56UFZ3aVlYSnliM2RjSWo0OEwyUnBkajQ4YURNZ1kyeGhjM005WENKd2IzQnZkbVZ5TFhScGRHeGxYQ0krUEM5b016NDhaR2wySUdOc1lYTnpQVndpY0c5d2IzWmxjaTFqYjI1MFpXNTBJR1Z0YjNScFkyOXVMV052Ym5SaGFXNWxjbHdpUGp3dlpHbDJQand2WkdsMlBpY3NYSEpjYmx4MFhIUjlLVnh5WEc1Y2NseHVYSFJuWlhSUWIzQnZkbVZ5UTI5dWRHVnVkRG9nS0c5MWRIQjFkQ2tnTFQ1Y2NseHVYSEpjYmx4MFhIUmpiMjUwWVdsdVpYSWdQU0FrS0NjOFpHbDJQand2WkdsMlBpY3BYSEpjYmx4eVhHNWNkRngwWm05eUlHc3NJSFlnYjJZZ1FITmxkRnh5WEc1Y2RGeDBYSFIxY213Z1BTQkFkWEpzTG5KbGNHeGhZMlVvSjN0dVlXMWxmU2NzSUhZcFhISmNibHgwWEhSY2RHbHRaeUE5SUNRb0p6eHBiV2MrUEM5cGJXYytKeWxjY2x4dVhIUmNkRngwWEhRdVlXUmtRMnhoYzNNb0oyVnRiM1JwWTI5dUp5bGNjbHh1WEhSY2RGeDBYSFF1WVhSMGNpZ25jM0pqSnl3Z2RYSnNLVnh5WEc1Y2RGeDBYSFJjZEM1aGRIUnlLQ2RoYkhRbkxDQnJLVnh5WEc1Y2RGeDBYSFJjZEM1aGRIUnlLQ2QwYVhSc1pTY3NJR3NwWEhKY2JseDBYSFJjZEZ4MExtTnNhV05yS0MwK1hISmNibHh5WEc1Y2RGeDBYSFJjZEZ4MEpDaHZkWFJ3ZFhRcExuWmhiQ2drS0c5MWRIQjFkQ2t1ZG1Gc0tDa2dLeUFrS0hSb2FYTXBMbUYwZEhJb0oyRnNkQ2NwS1Z4eVhHNWNkRngwWEhSY2RDbGNjbHh1WEhKY2JseDBYSFJjZENRb1kyOXVkR0ZwYm1WeUtTNWhjSEJsYm1Rb2FXMW5LVnh5WEc1Y2NseHVYSFJjZEhKbGRIVnliaUJqYjI1MFlXbHVaWEpjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVkyOTFiblJsY2lBOUlEQmNjbHh1WEhKY2JseHlYRzRrS0MwK1hISmNibHh5WEc1Y2RHVnRiM1JwWTI5dWN5QTlJRzVsZHlCRmJXOTBhV052Ym5Nb0tWeHlYRzVjY2x4dVhIUWtLQ2RiWkdGMFlTMWxiVzkwYVdOdmJuTTlkSEoxWlYwbktTNWxZV05vS0MwK1hISmNibHh5WEc1Y2RGeDBkR1Y0ZENBOUlDUW9kR2hwY3lrdWRHVjRkQ2dwWEhKY2JseDBYSFIwWlhoMElEMGdaVzF2ZEdsamIyNXpMbWx1YzJWeWRDaDBaWGgwS1Z4eVhHNWNkRngwSkNoMGFHbHpLUzVvZEcxc0tIUmxlSFFwWEhKY2JseDBLVnh5WEc0cElpd2lkMmxrZEdoeklEMWNjbHh1WEhSNGN6b2dOelk0TEZ4eVhHNWNkSE50T2lBNU9USXNYSEpjYmx4MGJXUTZJREV5TURBc1hISmNibHh5WEc1Y2NseHVYSEpjYm1kbGRGQnlaV1pwZUNBOUlDMCtYSEpjYmx4MGQybGtkR2dnUFNBa0tIZHBibVJ2ZHlrdWQybGtkR2dvS1Z4eVhHNWNjbHh1WEhScFppQjNhV1IwYUNBOElIZHBaSFJvY3k1NGMxeHlYRzVjZEZ4MFd5ZDRjeWRkWEhKY2JseDBaV3h6WlNCcFppQjNhV1IwYUNBOElIZHBaSFJvY3k1emJWeHlYRzVjZEZ4MFd5ZHpiU2NzSUNkNGN5ZGRYSEpjYmx4MFpXeHpaU0JwWmlCM2FXUjBhQ0E4SUhkcFpIUm9jeTV0WkZ4eVhHNWNkRngwV3lkdFpDY3NJQ2R6YlNjc0lDZDRjeWRkWEhKY2JseDBaV3h6WlZ4eVhHNWNkRngwV3lkc1p5Y3NJQ2R0WkNjc0lDZHpiU2NzSUNkNGN5ZGRYSEpjYmx4eVhHNWNjbHh1WjJWMFEyOXNkVzF1Y3lBOUlDaHdjbVZtYVhncElDMCtYSEpjYmx4MGNtVnpkV3gwSUQwZ1cxMWNjbHh1WEhSbWIzSWdjQ0JwYmlCd2NtVm1hWGhjY2x4dVhIUmNkR1p2Y2lCcElHbHVJRnN4TGk0eE1sMWNjbHh1WEhSY2RGeDBjbVZ6ZFd4MExuQjFjMmdvWENKamIyd3RJM3R3ZlMwamUybDlYQ0lwWEhKY2JseDBjbVZ6ZFd4MFhISmNibHh5WEc1Y2NseHVYSEpjYm1kbGRGTnBlbVVnUFNBb2IySnFaV04wTENCd2NtVm1hWGdwSUMwK1hISmNibHgwWm05eUlIQWdhVzRnY0hKbFptbDRYSEpjYmx4MFhIUnlaV2RsZUhBZ1BTQnVaWGNnVW1WblJYaHdLRndpWTI5c0xTTjdjSDB0S0Z4Y1hGeGtLeWxjSWlsY2NseHVYSFJjZEhOcGVtVWdQU0FrS0c5aWFtVmpkQ2t1WVhSMGNpZ25ZMnhoYzNNbktTNXRZWFJqYUNoeVpXZGxlSEFwUDFzeFhWeHlYRzVjZEZ4MGNtVjBkWEp1SUhCaGNuTmxTVzUwS0hOcGVtVXBJR2xtSUhOcGVtVS9YSEpjYmx4MGNtVjBkWEp1SUc1MWJHeGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibVZ4ZFdGc2FYcGxJRDBnTFQ1Y2NseHVYSFJ3Y21WbWFYZ2dQU0JuWlhSUWNtVm1hWGdvS1Z4eVhHNWNkR052YkhWdGJuTWdQU0JuWlhSRGIyeDFiVzV6S0hCeVpXWnBlQ2xjY2x4dVhIUnpaV3hsWTNSdmNpQTlJQ2N1SnlBcklHTnZiSFZ0Ym5NdWFtOXBiaWduTEM0bktWeHlYRzVjZEZ4eVhHNWNkQ05qYjI1emIyeGxMbXh2WnlnbmNISmxabWw0T2lBbkxDQndjbVZtYVhncFhISmNibHgwSTJOdmJuTnZiR1V1Ykc5bktDZGpiMngxYlc1ek9pQW5MQ0JqYjJ4MWJXNXpLVnh5WEc1Y2RDTmpiMjV6YjJ4bExteHZaeWduYzJWc1pXTjBiM0k2SUNjc0lITmxiR1ZqZEc5eUtWeHlYRzVjY2x4dVhISmNibHgwSkNnbkxuSnZkeTVsY1hWaGJHbDZaU2NwTG1WaFkyZ2dMVDVjY2x4dVhIUmNkQ05qYjI1emIyeGxMbXh2WnlnbmJtVjNJSEp2ZHljcFhISmNibHgwWEhSb1pXbG5hSFJ6SUQwZ1cxMWNjbHh1WEhSY2RISnZkeUE5SURCY2NseHVYSFJjZEhOMWJTQTlJREJjY2x4dVhISmNibHgwWEhRa0tIUm9hWE1wTG1Ob2FXeGtjbVZ1S0hObGJHVmpkRzl5S1M1bFlXTm9JQzArWEhKY2JseDBYSFJjZEhOcGVtVWdQU0JuWlhSVGFYcGxLSFJvYVhNc0lIQnlaV1pwZUNsY2NseHVYSFJjZEZ4MGMzVnRJQ3M5SUhOcGVtVmNjbHh1WEhKY2JseDBYSFJjZENOamIyNXpiMnhsTG14dlp5Z25jMmw2WlRvZ0p5d2djMmw2WlNsY2NseHVYSFJjZEZ4MEkyTnZibk52YkdVdWJHOW5LQ2R6ZFcwNklDY3NJSE4xYlNsY2NseHVYSEpjYmx4MFhIUmNkR2xtSUhOMWJTQStJREV5WEhKY2JseDBYSFJjZEZ4MGMzVnRJQzA5SURFeVhISmNibHgwWEhSY2RGeDBjbTkzS3l0Y2NseHVYSFJjZEZ4MFhIUWpZMjl1YzI5c1pTNXNiMmNvSjI1bGVIUWdjbTkzSUNjc0lISnZkeXdnYzJsNlpTbGNjbHh1WEhKY2JseDBYSFJjZEdobGFXZG9kSE5iY205M1hTQS9QU0F3WEhKY2JseDBYSFJjZEdobGFXZG9kSE5iY205M1hTQTlJRTFoZEdndWJXRjRLR2hsYVdkb2RITmJjbTkzWFN3Z0pDaDBhR2x6S1M1b1pXbG5hSFFvS1NsY2NseHVYSFJjZEZ4MEkyTnZibk52YkdVdWJHOW5LQ2RvWldsbmFIUWdKeXdnYUdWcFoyaDBjMXR5YjNkZEtWeHlYRzVjY2x4dVhIUmNkSEp2ZHlBOUlEQmNjbHh1WEhSY2RITjFiU0E5SURCY2NseHVYSFJjZEdOdmJDQTlJRzUxYkd4Y2NseHVYSEpjYmx4MFhIUWtLSFJvYVhNcExtTm9hV3hrY21WdUtITmxiR1ZqZEc5eUtTNWxZV05vSUMwK1hISmNibHgwWEhSY2RITjFiU0FyUFNCblpYUlRhWHBsS0hSb2FYTXNJSEJ5WldacGVDbGNjbHh1WEhSY2RGeDBZMjlzSUQ4OUlIUm9hWE5jY2x4dVhISmNibHgwWEhSY2RHbG1JSE4xYlNBK0lERXlYSEpjYmx4MFhIUmNkRngwYzNWdElDMDlJREV5WEhKY2JseDBYSFJjZEZ4MGNtOTNLeXRjY2x4dVhIUmNkRngwWEhSamIyd2dQU0IwYUdselhISmNibHh5WEc1Y2RGeDBYSFFrS0hSb2FYTXBMbWhsYVdkb2RDaG9aV2xuYUhSelczSnZkMTBwWEhKY2JseHlYRzVjZEZ4MGFITWdQU0JOWVhSb0xuSnZkVzVrSUNneE1pQXRJSE4xYlNrZ0x5QXlYSEpjYmx4MFhIUnBaaUJqYjJ3L0lHRnVaQ0JvY3lBK0lEQmNjbHh1WEhSY2RGeDBjQ0E5SUhCeVpXWnBlRnN3WFZ4eVhHNWNjbHh1WEhSY2RGeDBabTl5SUdrZ2FXNGdXekV1TGpFeVhWeHlYRzVjZEZ4MFhIUmNkQ1FvWTI5c0tTNXlaVzF2ZG1WRGJHRnpjeWhjSW1OdmJDMGplM0I5TFc5bVpuTmxkQzBqZTJsOVhDSXBYSEpjYmx4MFhIUmNkQ1FvWTI5c0tTNWhaR1JEYkdGemN5aGNJbU52YkMwamUzQjlMVzltWm5ObGRDMGplMmh6ZlZ3aUtWeHlYRzVjY2x4dVlXWjBaWEpNYjJGa1pXUWdQU0F0UGx4eVhHNWNkQ1FvSjJsdFp5Y3BYSEpjYmx4MFhIUXViMjRvSjJ4dllXUW5MQ0JsY1hWaGJHbDZaU2xjY2x4dVhISmNibHh5WEc0a0lDMCtYSEpjYmx4MEkyRm1kR1Z5VEc5aFpHVmtLQ2xjY2x4dVhIUWpKQ2gzYVc1a2IzY3BMbTl1S0NkeVpYTnBlbVZrSnl3Z1pYRjFZV3hwZW1VcFhISmNibHgwSTJWeGRXRnNhWHBsS0NraUxDSnpjR1ZsWkNBOUlERmNjbHh1WEhKY2JseHlYRzVyWlhsRWIzZHVJRDBnS0dWMlpXNTBLU0F0UGx4eVhHNWNkSE53WldWa0lEMGdNVEFnYVdZZ1pYWmxiblF1ZDJocFkyZ2dQVDBnTVRkY2NseHVYSFJ6Y0dWbFpDQTlJREV3TUNCcFppQmxkbVZ1ZEM1M2FHbGphQ0E5UFNBeE5seHlYRzVjY2x4dWEyVjVWWEFnUFNBb1pYWmxiblFwSUMwK1hISmNibHgwYzNCbFpXUWdQU0F4SUdsbUlHVjJaVzUwTG5kb2FXTm9JRDA5SURFM0lHOXlJR1YyWlc1MExuZG9hV05vSUQwOUlERTJYSEpjYmx4eVhHNWNjbHh1Ylc5MWMyVlhhR1ZsYkNBOUlDaGxkbVZ1ZENrZ0xUNWNjbHh1WEhSamIyNXpiMnhsTG14dlp5Z25iVzkxYzJWWGFHVmxiQ2NwWEhKY2JseDBiV2x1SUQwZ2NHRnljMlZKYm5RZ0tDUW9kR2hwY3lrdVlYUjBjaWduYldsdUp5a2dQeUF3S1Z4eVhHNWNkRzFoZUNBOUlIQmhjbk5sU1c1MElDZ2tLSFJvYVhNcExtRjBkSElvSjIxaGVDY3BJRDhnTVRBd0tWeHlYRzVjZEhOMFpYQWdQU0J3WVhKelpVbHVkQ0FvSkNoMGFHbHpLUzVoZEhSeUtDZHpkR1Z3SnlrZ1B5QXhLVnh5WEc1Y2NseHVYSFJqYUdGdVoyVWdQU0JsZG1WdWRDNWtaV3gwWVZrZ0tpQnpkR1Z3SUNvZ2MzQmxaV1JjY2x4dVhIUjJZV3gxWlNBOUlIQmhjbk5sU1c1MElDUW9kR2hwY3lrdWRtRnNLQ2tnUHlBd1hISmNibHgwZG1Gc2RXVWdQU0JOWVhSb0xtTnNZVzF3SUhaaGJIVmxJQ3NnWTJoaGJtZGxMQ0J0YVc0c0lHMWhlRnh5WEc1Y2NseHVYSFFrS0hSb2FYTXBYSEpjYmx4MFhIUXVkbUZzSUhaaGJIVmxYSEpjYmx4MFhIUXVkSEpwWjJkbGNpQW5ZMmhoYm1kbEoxeHlYRzVjY2x4dVhIUmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwWEhKY2JseHlYRzV5WVc1blpVTm9ZVzVuWldRZ1BTQW9aWFpsYm5RcElDMCtYSEpjYmx4MFkyOXVjMjlzWlM1c2IyY29KM0poYm1kbFEyaGhibWRsWkNjcFhISmNibHgwYjNWMGNIVjBJRDBnSkNoMGFHbHpLUzV3WVhKbGJuUW9LUzVqYUdsc1pISmxiaWduTG5KaGJtZGxMWFpoYkhWbEp5bGNjbHh1WEhSaVpXWnZjbVVnUFNBb0pDaHZkWFJ3ZFhRcExtUmhkR0VnSjJKbFptOXlaU2NwSUQ4Z0p5ZGNjbHh1WEhSaFpuUmxjaUE5SUNna0tHOTFkSEIxZENrdVpHRjBZU0FuWVdaMFpYSW5LU0EvSUNjblhISmNibHgwZG1Gc2RXVWdQU0FrS0hSb2FYTXBMblpoYkNncElEOGdNRnh5WEc1Y2NseHVYSFFrS0c5MWRIQjFkQ2t1ZEdWNGRDQmlaV1p2Y21VZ0t5QjJZV3gxWlNBcklHRm1kR1Z5WEhKY2JseHlYRzVjY2x4dWJuVnRZbVZ5UkdWamNtVmhjMlVnUFNBb1pYWmxiblFwSUMwK1hISmNibHgwWTI5dWMyOXNaUzVzYjJjb0oyNTFiV0psY2tSbFkzSmxZWE5sSnlsY2NseHVYSFJwYm5CMWRDQTlJQ1FvZEdocGN5a3VjR0Z5Wlc1MEtDa3VjR0Z5Wlc1MEtDa3VZMmhwYkdSeVpXNG9KMmx1Y0hWMEp5bGNjbHh1WEhSdGFXNGdQU0J3WVhKelpVbHVkQ0FvSkNocGJuQjFkQ2t1WVhSMGNpZ25iV2x1SnlrZ1B5QXdLVnh5WEc1Y2RHMWhlQ0E5SUhCaGNuTmxTVzUwSUNna0tHbHVjSFYwS1M1aGRIUnlLQ2R0WVhnbktTQS9JREV3TUNsY2NseHVYSFJ6ZEdWd0lEMGdjR0Z5YzJWSmJuUWdLQ1FvYVc1d2RYUXBMbUYwZEhJb0ozTjBaWEFuS1NBL0lERXBYSEpjYmx4eVhHNWNkSFpoYkhWbElEMGdjR0Z5YzJWSmJuUWdLQ1FvYVc1d2RYUXBMblpoYkNncElEOGdNQ2xjY2x4dVhIUjJZV3gxWlNBOUlFMWhkR2d1WTJ4aGJYQW9kbUZzZFdVZ0xTQnpjR1ZsWkNBcUlITjBaWEFzSUcxcGJpd2diV0Y0S1Z4eVhHNWNkQ1FvYVc1d2RYUXBMblpoYkNoMllXeDFaU2t1ZEhKcFoyZGxjaWduWTJoaGJtZGxKeWxjY2x4dVhISmNibHh5WEc1dWRXMWlaWEpKYm1OeVpXRnpaU0E5SUNobGRtVnVkQ2tnTFQ1Y2NseHVYSFJqYjI1emIyeGxMbXh2WnlnbmJuVnRZbVZ5U1c1amNtVmhjMlVuS1Z4eVhHNWNkR2x1Y0hWMElEMGdKQ2gwYUdsektTNXdZWEpsYm5Rb0tTNXdZWEpsYm5Rb0tTNWphR2xzWkhKbGJpZ25hVzV3ZFhRbktWeHlYRzVjZEcxcGJpQTlJSEJoY25ObFNXNTBJQ2drS0dsdWNIVjBLUzVoZEhSeUtDZHRhVzRuS1NBL0lEQXBYSEpjYmx4MGJXRjRJRDBnY0dGeWMyVkpiblFnS0NRb2FXNXdkWFFwTG1GMGRISW9KMjFoZUNjcElEOGdNVEF3S1Z4eVhHNWNkSE4wWlhBZ1BTQndZWEp6WlVsdWRDQW9KQ2hwYm5CMWRDa3VZWFIwY2lnbmMzUmxjQ2NwSUQ4Z01TbGNjbHh1WEhKY2JseDBkbUZzZFdVZ1BTQndZWEp6WlVsdWRDQW9KQ2hwYm5CMWRDa3VkbUZzS0NrZ1B5QXdLVnh5WEc1Y2RIWmhiSFZsSUQwZ1RXRjBhQzVqYkdGdGNDaDJZV3gxWlNBcklITndaV1ZrSUNvZ2MzUmxjQ3dnYldsdUxDQnRZWGdwWEhKY2JseDBKQ2hwYm5CMWRDa3VkbUZzS0haaGJIVmxLUzUwY21sbloyVnlLQ2RqYUdGdVoyVW5LVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1SkNBdFBpQmNjbHh1WEhRa0tIZHBibVJ2ZHlsY2NseHVYSFJjZEM1clpYbDFjQ0JyWlhsVmNGeHlYRzVjZEZ4MExtdGxlV1J2ZDI0Z2EyVjVSRzkzYmx4eVhHNWNjbHh1WEhRa0tDZHBibkIxZEZ0MGVYQmxQVzUxYldKbGNsMHNJR2x1Y0hWMFczUjVjR1U5Y21GdVoyVmRKeWxjY2x4dVhIUmNkQzVpYVc1a0lDZHRiM1Z6Wlhkb1pXVnNKeXdnYlc5MWMyVlhhR1ZsYkZ4eVhHNWNjbHh1WEhRa0tDZHBibkIxZEZ0MGVYQmxQWEpoYm1kbFhTY3BYSEpjYmx4MFhIUXVZMmhoYm1kbElISmhibWRsUTJoaGJtZGxaRnh5WEc1Y2RGeDBMbTF2ZFhObGJXOTJaU0J5WVc1blpVTm9ZVzVuWldSY2NseHVYSEpjYmx4MEpDZ25MbTUxYldKbGNpMXRhVzUxY3ljcExtTm9hV3hrY21WdUtDZGlkWFIwYjI0bktWeHlYRzVjZEZ4MExtTnNhV05ySUc1MWJXSmxja1JsWTNKbFlYTmxYSEpjYmx4eVhHNWNjbHh1WEhRa0tDY3ViblZ0WW1WeUxYQnNkWE1uS1M1amFHbHNaSEpsYmlnblluVjBkRzl1SnlsY2NseHVYSFJjZEM1amJHbGpheUJ1ZFcxaVpYSkpibU55WldGelpWeHlYRzVjY2x4dUlpd2lYSEpjYmx4eVhHNWNjbHh1SkNndFBseHlYRzVjY2x4dVhIUmpiMjV6YjJ4bExteHZaeWdrS0dSdlkzVnRaVzUwS1M1emFYcGxLQ2twWEhKY2JseHlYRzVjZEdobGJIQWdQU0JtWVd4elpWeHlYRzVjY2x4dVhISmNibHgwYzJsNlpTQTlJQ2hsYkdWdFpXNTBLU0F0UGx4eVhHNWNjbHh1WEhSY2RIdDNhV1IwYURvZ0pDaGxiR1Z0Wlc1MEtTNTNhV1IwYUNncExDQm9aV2xuYUhRNklDUW9aV3hsYldWdWRDa3VhR1ZwWjJoMEtDbDlYSEpjYmx4eVhHNWNkSEJ2YzJsMGFXOXVJRDBnS0dWc1pXMWxiblFwSUMwK1hISmNibHh5WEc1Y2RGeDBKQ2hsYkdWdFpXNTBLUzV2Wm1aelpYUW9LVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkSE5vYjNjZ1BTQXRQbHh5WEc1Y2NseHVYSFJjZEdsbUlHNXZkQ0JvWld4d1hISmNibHh5WEc1Y2RGeDBYSFJvWld4d0lEMGdkSEoxWlZ4eVhHNWNjbHh1WEhSY2RGeDBYSEpjYmx4MFhIUmNkRzFoYVc1UGRtVnliR0Y1SUQwZ0pDZ25QR1JwZGo0OEwyUnBkajRuS1Z4eVhHNWNkRngwWEhSY2RDNWhkSFJ5S0NkcFpDY3NJQ2R0WVdsdVQzWmxjbXhoZVNjcFhISmNibHgwWEhSY2RGeDBMbUZrWkVOc1lYTnpLQ2R2ZG1WeWJHRjVKeWxjY2x4dVhIUmNkRngwWEhRdVkzTnpLSE5wZW1Vb1pHOWpkVzFsYm5RcEtWeHlYRzVjZEZ4MFhIUmNkQzVqYkdsamF5aG9hV1JsS1Z4eVhHNWNkRngwWEhSY2RDNW9hV1JsS0NsY2NseHVYSEpjYmx4eVhHNWNjbHh1WEhSY2RGeDBibUYyVDNabGNteGhlU0E5SUNRb0p6eGthWFkrUEM5a2FYWStKeWxjY2x4dVhIUmNkRngwWEhRdVlYUjBjaWduYVdRbkxDQW5ibUYyVDNabGNteGhlU2NwWEhKY2JseDBYSFJjZEZ4MExtRmtaRU5zWVhOektDZHZkbVZ5YkdGNUp5bGNjbHh1WEhSY2RGeDBYSFF1WTNOektDZHdiM05wZEdsdmJpY3NJQ2RtYVhobFpDY3BYSEpjYmx4MFhIUmNkRngwTG1OemN5Z25laTFwYm1SbGVDY3NJREV3TURBd01DbGNjbHh1WEhSY2RGeDBYSFF1WTNOektITnBlbVVvSnlOdFlXbHVUbUYySnlrcFhISmNibHgwWEhSY2RGeDBMbU5zYVdOcktHaHBaR1VwWEhKY2JseDBYSFJjZEZ4MExtaHBaR1VvS1Z4eVhHNWNjbHh1WEhKY2JseHlYRzVjZEZ4MFhIUmpiMjV6YjJ4bExteHZaeWdrS0NjamJXRnBia052Ym5SbGJuUWdXMlJoZEdFdGFHVnNjRjBuS1NsY2NseHVYSFJjZEZ4MFkyOXVjMjlzWlM1c2IyY29KQ2duSTIxaGFXNU9ZWFlnVzJSaGRHRXRhR1ZzY0YwbktTbGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHgwWEhSY2RDUW9KeU50WVdsdVEyOXVkR1Z1ZENCYlpHRjBZUzFvWld4d1hTY3BMbVZoWTJnb0xUNWNjbHh1WEhKY2JseDBYSFJjZEZ4MFkyOXdlU0E5SUNRb2RHaHBjeWt1WTJ4dmJtVW9LVnh5WEc1Y2RGeDBYSFJjZEhBZ1BTQndiM05wZEdsdmJpaDBhR2x6S1Z4eVhHNWNkRngwWEhSY2RITWdQU0J6YVhwbEtIUm9hWE1wWEhKY2JseHlYRzVjZEZ4MFhIUmNkQ1FvWTI5d2VTbGNjbHh1WEhSY2RGeDBYSFJjZEM1aFpHUkRiR0Z6Y3lnbmFHVnNjR1Z5SnlsY2NseHVYSFJjZEZ4MFhIUmNkQzVqYzNNb0ozQnZjMmwwYVc5dUp5d2dKMkZpYzI5c2RYUmxKeWxjY2x4dVhIUmNkRngwWEhSY2RDNTBiMjlzZEdsd0tIdHdiR0ZqWlcxbGJuUTZJQ2RoZFhSdklIUnZjQ2NzSUhScGRHeGxPaUFrS0hSb2FYTXBMbVJoZEdFb0oyaGxiSEFuS1gwcFhISmNibHgwWEhSY2RGeDBYSFF1WTNOektIQXBYSEpjYmx4MFhIUmNkRngwWEhRdVkzTnpLSE1wWEhKY2JseHlYRzVjZEZ4MFhIUmNkQ1FvWTI5d2VTa3VabWx1WkNnblczUnBkR3hsWFNjcExuSmxiVzkyWlVGMGRISW9KM1JwZEd4bEp5bGNjbHh1WEhKY2JseDBYSFJjZEZ4MEpDaHRZV2x1VDNabGNteGhlU2xjY2x4dVhIUmNkRngwWEhSY2RDNWhjSEJsYm1Rb1kyOXdlU2xjY2x4dVhIUmNkRngwS1Z4eVhHNWNjbHh1WEhSY2RGeDBKQ2duSTIxaGFXNU9ZWFlnVzJSaGRHRXRhR1ZzY0YwbktTNWxZV05vS0MwK1hISmNibHh5WEc1Y2RGeDBYSFJjZEdOdmNIa2dQU0FrS0hSb2FYTXBMbU5zYjI1bEtDbGNjbHh1WEhSY2RGeDBYSFJ3SUQwZ2NHOXphWFJwYjI0b2RHaHBjeWxjY2x4dVhIUmNkRngwWEhSeklEMGdjMmw2WlNoMGFHbHpLVnh5WEc1Y2NseHVYSFJjZEZ4MFhIUWtLR052Y0hrcFhISmNibHgwWEhSY2RGeDBYSFF1WVdSa1EyeGhjM01vSjJobGJIQmxjaWNwWEhKY2JseDBYSFJjZEZ4MFhIUXVZM056S0Nkd2IzTnBkR2x2Ymljc0lDZGhZbk52YkhWMFpTY3BYSEpjYmx4MFhIUmNkRngwWEhRdWRHOXZiSFJwY0NoN2NHeGhZMlZ0Wlc1ME9pQW5ZWFYwYnlCMGIzQW5MQ0IwYVhSc1pUb2dKQ2gwYUdsektTNWtZWFJoS0Nkb1pXeHdKeWw5S1Z4eVhHNWNkRngwWEhSY2RGeDBMbU56Y3lod0tWeHlYRzVjZEZ4MFhIUmNkRngwTG1OemN5aHpLVnh5WEc1Y2NseHVYSFJjZEZ4MFhIUWtLR052Y0hrcExtWnBibVFvSjF0MGFYUnNaVjBuS1M1eVpXMXZkbVZCZEhSeUtDZDBhWFJzWlNjcFhISmNibHh5WEc1Y2RGeDBYSFJjZENRb2JtRjJUM1psY214aGVTbGNjbHh1WEhSY2RGeDBYSFJjZEM1aGNIQmxibVFvWTI5d2VTbGNjbHh1WEhSY2RGeDBLVnh5WEc1Y2NseHVYSFJjZEZ4MEpDZ25ZbTlrZVNjcFhISmNibHgwWEhSY2RGeDBMbUZ3Y0dWdVpDaHRZV2x1VDNabGNteGhlU2xjY2x4dVhIUmNkRngwWEhRdVlYQndaVzVrS0c1aGRrOTJaWEpzWVhrcFhISmNibHh5WEc1Y2RGeDBYSFFrS0cxaGFXNVBkbVZ5YkdGNUtTNW1ZV1JsU1c0b0tWeHlYRzVjZEZ4MFhIUWtLRzVoZGs5MlpYSnNZWGtwTG1aaFpHVkpiaWdwWEhKY2JseHlYRzVjY2x4dVhIUm9hV1JsSUQwZ0xUNWNjbHh1WEhKY2JseDBYSFJwWmlCb1pXeHdYSEpjYmx4eVhHNWNkRngwWEhSb1pXeHdJRDBnWm1Gc2MyVmNjbHh1WEhSY2RGeDBKQ2duTG05MlpYSnNZWGtuS1M1bVlXUmxUM1YwS0h0amIyMXdiR1YwWlRvZ0xUNWNjbHh1WEhKY2JseDBYSFJjZEZ4MEpDZ25MbTkyWlhKc1lYa25LUzV5WlcxdmRtVW9LVnh5WEc1Y2RGeDBYSFI5S1Z4eVhHNWNjbHh1WEhKY2JseHlYRzVjZENRb0p5Tm9aV3h3UW5SdUp5a3VZMnhwWTJzb0xUNWNjbHh1WEhKY2JseDBYSFJ6YUc5M0tDbGNjbHh1WEhRcFhISmNibHh5WEc1Y2RDUW9aRzlqZFcxbGJuUXBMbXRsZVdSdmQyNG9LR1YyWlc1MEtTQXRQbHh5WEc1Y2NseHVYSFJjZEdocFpHVW9LU0JwWmlCbGRtVnVkQzUzYUdsamFDQTlQU0F5TjF4eVhHNWNkQ2xjY2x4dUtTSXNJbXhoYzNSVWFXMWxJRDBnTUZ4eVhHNTJaVzVrYjNKeklEMGdXeWQzWldKcmFYUW5MQ0FuYlc5NkoxMWNjbHh1WEhKY2JtbG1JRzV2ZENCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbFhISmNiaUFnSUNCbWIzSWdkbVZ1Wkc5eUlHbHVJSFpsYm1SdmNuTmNjbHh1SUNBZ0lDQWdJQ0IzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsSUQwZ2QybHVaRzkzVzNabGJtUnZjaUFySUNkU1pYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW5YVnh5WEc0Z0lDQWdJQ0FnSUhkcGJtUnZkeTVqWVc1alpXeEJibWx0WVhScGIyNUdjbUZ0WlNBOUlIZHBibVJ2ZDF0MlpXNWtiM0lnS3lBblEyRnVZMlZzUVc1cGJXRjBhVzl1Um5KaGJXVW5YU0I4ZkNCM2FXNWtiM2RiZG1WdVpHOXlJQ3NnSjBOaGJtTmxiRkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlNkZFhISmNibHh5WEc1M2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbElHOXlQU0FvWTJGc2JHSmhZMnNzSUdWc1pXMWxiblFwSUMwK1hISmNiaUFnSUNCamRYSnlWR2x0WlNBOUlHNWxkeUJFWVhSbEtDa3VaMlYwVkdsdFpTZ3BYSEpjYmlBZ0lDQjBhVzFsVkc5RFlXeHNJRDBnVFdGMGFDNXRZWGdvTUN3Z01UWWdMU0FvWTNWeWNsUnBiV1VnTFNCc1lYTjBWR2x0WlNrcFhISmNibHh5WEc0Z0lDQWdhV1FnUFNCM2FXNWtiM2N1YzJWMFZHbHRaVzkxZENndFBseHlYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJLR04xY25KVWFXMWxJQ3NnZEdsdFpWUnZRMkZzYkNsY2NseHVJQ0FnSUN3Z2RHbHRaVlJ2UTJGc2JDbGNjbHh1WEhKY2JpQWdJQ0JwWkZ4eVhHNWNjbHh1ZDJsdVpHOTNMbU5oYm1ObGJFRnVhVzFoZEdsdmJrWnlZVzFsSUc5eVBTQW9hV1FwSUMwK1hISmNiaUFnSUNCamJHVmhjbFJwYldWdmRYUW9hV1FwSWl3aVhISmNibHh5WEc1Y2NseHVYSEpjYmlRZ0xUNGdYSEpjYmx4MEpDZ25MbWx0WVdkbExYQnlaWFpwWlhjbktTNWxZV05vSUMwK1hISmNibHgwWEhSd2NtVjJhV1YzSUQwZ2RHaHBjMXh5WEc1Y2RGeDBhV1FnUFNBa0tIUm9hWE1wTG1SaGRHRW9KMlp2Y2ljcFhISmNibHgwWEhRa0tDY2pKeUFySUdsa0tTNWphR0Z1WjJVb0tHVjJaVzUwS1NBdFBpQmNjbHh1WEhKY2JseDBYSFJjZEhCaGRHZ2dQU0JWVWt3dVkzSmxZWFJsVDJKcVpXTjBWVkpNS0dWMlpXNTBMblJoY21kbGRDNW1hV3hsYzFzd1hTbGNjbHh1WEhSY2RGeDBKQ2h3Y21WMmFXVjNLUzVoZEhSeUlDZHpjbU1uTENCd1lYUm9JR2xtSUhCaGRHZy9YSEpjYmx4eVhHNWNkRngwWEhSY2NseHVYSFJjZENrdWRISnBaMmRsY2lBblkyaGhibWRsSjF4eVhHNGlMQ0pjY2x4dVhISmNibk5sZENBOUlDaHNZVzVuS1NBdFBseHlYRzVjZEhkcGJtUnZkeTVzYjJOaGRHbHZiaTVvY21WbUlEMGdKeTlzWVc1bkx5Y2dLeUJzWVc1blhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WW5WMGRHOXVJRDBnS0NrZ0xUNWNjbHh1WEhSelpYUW9KQ2gwYUdsektTNWtZWFJoS0Nkc1lXNW5KeWtwWEhKY2JseHlYRzVjY2x4dWMyVnNaV04wSUQwZ0tDa2dMVDVjY2x4dVhIUnpaWFFvSkNoMGFHbHpLUzUyWVd3b0tTbGNjbHh1WEhKY2JseHlYRzVjY2x4dUpDQXRQbHh5WEc1Y2RDUW9KeTVzWVc1bmRXRm5aUzF6Wld4bFkzUW5LUzVqYUdGdVoyVW9jMlZzWldOMEtWeHlYRzVjZENRb0p5NXNZVzVuZFdGblpTMWlkWFIwYjI0bktTNWpiR2xqYXloaWRYUjBiMjRwWEhKY2JpSXNJbTVoZG1acGVDQTlJQzArWEhKY2JseDBhR1ZwWjJoMElEMGdKQ2duSTIxaGFXNU9ZWFluS1M1b1pXbG5hSFFvS1NBcklERXdYSEpjYmx4MEpDZ25ZbTlrZVNjcExtTnpjeWduY0dGa1pHbHVaeTEwYjNBbkxDQm9aV2xuYUhRZ0t5QW5jSGduS1Z4eVhHNWNjbHh1WEhKY2JpUWdMVDVjY2x4dVhIUWtLSGRwYm1SdmR5a3VjbVZ6YVhwbElDMCtJRzVoZG1acGVDZ3BYSEpjYmx4MGJtRjJabWw0S0NraUxDSmNjbHh1WEhKY2JtbHRZV2RsUm05eVJuSmhiV1VnUFNBb1puSmhiV1VwSUMwK1hISmNibHgwSnk5cGJXRm5aWE12Y0d4aGJuUnpMM0JzWVc1MExTY2dLeUJtY21GdFpTQXJJQ2N1Y0c1bkoxeHlYRzVjY2x4dWNtVm1jbVZ6YUZCc1lXNTBJRDBnS0hCc1lXNTBLU0F0UGlCY2NseHVYSFJ1YjNjZ1BTQk5ZWFJvTG5KdmRXNWtLQ2h1WlhjZ1JHRjBaU2t1WjJWMFZHbHRaU2dwSUM4Z01UQXdNQ2xjY2x4dVhIUnpkR0Z5ZENBOUlIQmhjbk5sU1c1MElDUW9jR3hoYm5RcExtUmhkR0VnSjNOMFlYSjBKMXh5WEc1Y2RHVnVaQ0E5SUhCaGNuTmxTVzUwSUNRb2NHeGhiblFwTG1SaGRHRWdKMlZ1WkNkY2NseHVYSFIzWVhSbGNtbHVaeUE5SUhCaGNuTmxTVzUwSUNRb2NHeGhiblFwTG1SaGRHRWdKM2RoZEdWeWFXNW5KMXh5WEc1Y2RHNXZkeUE5SUUxaGRHZ3ViV2x1SUc1dmR5d2dkMkYwWlhKcGJtZGNjbHh1WEhSbWNtRnRaU0E5SUUxaGRHZ3VabXh2YjNJb01UY2dLaUJOWVhSb0xtTnNZVzF3S0NodWIzY2dMU0J6ZEdGeWRDa2dMeUFvWlc1a0lDMGdjM1JoY25RcExDQXdMQ0F4S1NrZ1hISmNibHgwSkNod2JHRnVkQ2t1WVhSMGNpQW5jM0pqSnl3Z2FXMWhaMlZHYjNKR2NtRnRaU0JtY21GdFpWeHlYRzVjY2x4dVhIUnpaWFJVYVcxbGIzVjBJQ2d0UGlCeVpXWnlaWE5vVUd4aGJuUWdjR3hoYm5RcExDQXhNREF3SUdsbUlHWnlZVzFsSUR3Z01UZGNjbHh1WEhKY2JpUWdMVDVjY2x4dVhIUWtLQ2N1Y0d4aGJuUmhkR2x2Ymkxd2JHRnVkQ2NwTG1WaFkyZ2dMVDRnY21WbWNtVnphRkJzWVc1MElIUm9hWE5jY2x4dVhISmNibHgwSkNnbkkzTmxaV1J6VFc5a1lXd25LUzV2YmlBbmMyaHZkeTVpY3k1dGIyUmhiQ2NzSUNobGRtVnVkQ2tnTFQ1Y2NseHVYSFJjZEhOc2IzUWdQU0FrS0dWMlpXNTBMbkpsYkdGMFpXUlVZWEpuWlhRcExtUmhkR0VnSjNOc2IzUW5YSEpjYmx4MFhIUWtLSFJvYVhNcExtWnBibVFvSjJsdWNIVjBXMjVoYldVOWMyeHZkRjBuS1M1MllXd2djMnh2ZENJc0luVnliQ0E5SUNjdllYQnBMMk5vWVhKaFkzUmxjaWM3WEhKY2JseHlYRzVjY2x4dWMyVjBVSEp2WjNKbGMzTWdQU0FvYjJKcVpXTjBMQ0IyWVd4MVpTd2diV2x1Vm1Gc2RXVXNJRzFoZUZaaGJIVmxMQ0JzWVhOMFZYQmtZWFJsTENCdVpYaDBWWEJrWVhSbEtTQXRQbHh5WEc1Y2NseHVYSFJpWVhJZ1BTQWtLQ2N1SnlBcklHOWlhbVZqZENBcklDY3RZbUZ5SnlsY2NseHVYSFIwYVcxbGNpQTlJQ1FvSnk0bklDc2diMkpxWldOMElDc2dKeTEwYVcxbGNpY3BYSEpjYmx4eVhHNWNjbHh1WEhScFppQmlZWEl1YkdWdVozUm9JRDRnTUZ4eVhHNWNkRngwWTJocGJHUWdQU0FrS0dKaGNpa3VZMmhwYkdSeVpXNGdKeTV3Y205bmNtVnpjeTFpWVhJblhISmNibHh5WEc1Y2RGeDBKQ2hqYUdsc1pDbGNjbHh1WEhSY2RGeDBMbVJoZEdFZ0oyMWhlQ2NzSUcxaGVGWmhiSFZsWEhKY2JseDBYSFJjZEM1a1lYUmhJQ2R0YVc0bkxDQnRhVzVXWVd4MVpWeHlYRzVjZEZ4MFhIUXVaR0YwWVNBbmJtOTNKeXdnZG1Gc2RXVmNjbHh1WEhSY2RHSmhjbHN3WFM1MWNHUmhkR1UvS0NsY2NseHVYSEpjYmx4eVhHNWNkR2xtSUhScGJXVnlMbXhsYm1kMGFDQStJREJjY2x4dVhIUmNkR05vYVd4a0lEMGdKQ2gwYVcxbGNpa3VZMmhwYkdSeVpXNGdKeTV3Y205bmNtVnpjeTFpWVhJblhISmNibHh5WEc1Y2RGeDBhV1lnYm1WNGRGVndaR0YwWlQ5Y2NseHVYSFJjZEZ4MEpDaGphR2xzWkNsY2NseHVYSFJjZEZ4MFhIUXVaR0YwWVNBbmJXRjRKeXdnYm1WNGRGVndaR0YwWlZ4eVhHNWNkRngwWEhSY2RDNWtZWFJoSUNkdGFXNG5MQ0JzWVhOMFZYQmtZWFJsWEhKY2JseDBYSFJsYkhObFhISmNibHgwWEhSY2RDUW9ZMmhwYkdRcFhISmNibHgwWEhSY2RGeDBMbVJoZEdFZ0oyMWhlQ2NzSURGY2NseHVYSFJjZEZ4MFhIUXVaR0YwWVNBbmJXbHVKeXdnTUZ4eVhHNWNjbHh1WEhKY2JuTmxkRlpoYkhWbGN5QTlJQ2h2WW1wbFkzUXNJSFpoYkhWbExDQnRhVzVXWVd4MVpTd2diV0Y0Vm1Gc2RXVXBJQzArWEhKY2JseDBKQ2duTGljZ0t5QnZZbXBsWTNRZ0t5QW5MVzV2ZHljcFhISmNibHgwWEhRdWRHVjRkQ0IyWVd4MVpWeHlYRzVjY2x4dVhIUWtLQ2N1SnlBcklHOWlhbVZqZENBcklDY3RiV2x1SnlsY2NseHVYSFJjZEM1MFpYaDBJRzFwYmxaaGJIVmxYSEpjYmx4eVhHNWNkQ1FvSnk0bklDc2diMkpxWldOMElDc2dKeTF0WVhnbktWeHlYRzVjZEZ4MExuUmxlSFFnYldGNFZtRnNkV1ZjY2x4dVhISmNibk5sZEZaaGJIVmxJRDBnS0c5aWFtVmpkQ3dnZG1Gc2RXVXBJQzArWEhKY2JseDBKQ2duTGljZ0t5QnZZbXBsWTNRcFhISmNibHgwWEhRdWRHVjRkQ0IyWVd4MVpWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVabWxzYkNBOUlDaGtZWFJoS1NBdFBseHlYRzVjZEhObGRGQnliMmR5WlhOeklDZG9aV0ZzZEdnbkxDQmtZWFJoTG1obFlXeDBhQ3dnTUN3Z1pHRjBZUzV0WVhoSVpXRnNkR2dzSUdSaGRHRXVhR1ZoYkhSb1ZYQmtZWFJsTENCa1lYUmhMbTVsZUhSSVpXRnNkR2hWY0dSaGRHVmNjbHh1WEhSelpYUldZV3gxWlhNZ0oyaGxZV3gwYUNjc0lHUmhkR0V1YUdWaGJIUm9MQ0F3TENCa1lYUmhMbTFoZUVobFlXeDBhRnh5WEc1Y2NseHVYSFJ6WlhSUWNtOW5jbVZ6Y3lBblpXNWxjbWQ1Snl3Z1pHRjBZUzVsYm1WeVoza3NJREFzSUdSaGRHRXViV0Y0Ulc1bGNtZDVMQ0JrWVhSaExtVnVaWEpuZVZWd1pHRjBaU3dnWkdGMFlTNXVaWGgwUlc1bGNtZDVWWEJrWVhSbFhISmNibHgwYzJWMFZtRnNkV1Z6SUNkbGJtVnlaM2tuTENCa1lYUmhMbVZ1WlhKbmVTd2dNQ3dnWkdGMFlTNXRZWGhGYm1WeVozbGNjbHh1WEhKY2JseDBjMlYwVUhKdlozSmxjM01nSjNkaGJuUmxaQ2NzSUdSaGRHRXVkMkZ1ZEdWa0xDQXdMQ0EyTENCa1lYUmhMbmRoYm5SbFpGVndaR0YwWlN3Z1pHRjBZUzV1WlhoMFYyRnVkR1ZrVlhCa1lYUmxYSEpjYmx4MGMyVjBWbUZzZFdWeklDZDNZVzUwWldRbkxDQmtZWFJoTG5kaGJuUmxaQ3dnTUN3Z05seHlYRzVjY2x4dVhIUnpaWFJRY205bmNtVnpjeUFuWlhod1pYSnBaVzVqWlNjc0lHUmhkR0V1Wlhod1pYSnBaVzVqWlN3Z01Dd2daR0YwWVM1dFlYaEZlSEJsY21sbGJtTmxMQ0J1ZFd4c0xDQnVkV3hzWEhKY2JseDBjMlYwVm1Gc2RXVnpJQ2RsZUhCbGNtbGxibU5sSnl3Z1pHRjBZUzVsZUhCbGNtbGxibU5sTENBd0xDQmtZWFJoTG0xaGVFVjRjR1Z5YVdWdVkyVmNjbHh1WEhKY2JseHlYRzVjZEhObGRGQnliMmR5WlhOeklDZHdiR0Z1ZEdGMGIzSW5MQ0JrWVhSaExuQnNZVzUwWVhSdmNrVjRjR1Z5YVdWdVkyVXNJREFzSUdSaGRHRXVjR3hoYm5SaGRHOXlUV0Y0Ulhod1pYSnBaVzVqWlN3Z2JuVnNiQ3dnYm5Wc2JGeHlYRzVjZEhObGRGWmhiSFZsY3lBbmNHeGhiblJoZEc5eUp5d2daR0YwWVM1d2JHRnVkR0YwYjNKRmVIQmxjbWxsYm1ObExDQXdMQ0JrWVhSaExuQnNZVzUwWVhSdmNrMWhlRVY0Y0dWeWFXVnVZMlZjY2x4dVhISmNibHgwYzJWMFVISnZaM0psYzNNZ0ozTnRkV2RuYkdWeUp5d2daR0YwWVM1emJYVm5aMnhsY2tWNGNHVnlhV1Z1WTJVc0lEQXNJR1JoZEdFdWMyMTFaMmRzWlhKTllYaEZlSEJsY21sbGJtTmxMQ0J1ZFd4c0xDQnVkV3hzWEhKY2JseDBjMlYwVm1Gc2RXVnpJQ2R6YlhWbloyeGxjaWNzSUdSaGRHRXVjMjExWjJkc1pYSkZlSEJsY21sbGJtTmxMQ0F3TENCa1lYUmhMbk50ZFdkbmJHVnlUV0Y0Ulhod1pYSnBaVzVqWlZ4eVhHNWNjbHh1WEhSelpYUlFjbTluY21WemN5QW5aR1ZoYkdWeUp5d2daR0YwWVM1a1pXRnNaWEpGZUhCbGNtbGxibU5sTENBd0xDQmtZWFJoTG1SbFlXeGxjazFoZUVWNGNHVnlhV1Z1WTJVc0lHNTFiR3dzSUc1MWJHeGNjbHh1WEhSelpYUldZV3gxWlhNZ0oyUmxZV3hsY2ljc0lHUmhkR0V1WkdWaGJHVnlSWGh3WlhKcFpXNWpaU3dnTUN3Z1pHRjBZUzVrWldGc1pYSk5ZWGhGZUhCbGNtbGxibU5sWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSFFqYzJWMFZtRnNkV1VnSjJ4bGRtVnNKeXdnWkdGMFlTNXNaWFpsYkZ4eVhHNWNkQ056WlhSV1lXeDFaU0FuY0d4aGJuUmhkRzl5TFd4bGRtVnNKeXdnWkdGMFlTNXdiR0Z1ZEdGMGIzSk1aWFpsYkZ4eVhHNWNkQ056WlhSV1lXeDFaU0FuYzIxMVoyZHNaWEl0YkdWMlpXd25MQ0JrWVhSaExuTnRkV2RuYkdWeVRHVjJaV3hjY2x4dVhIUWpjMlYwVm1Gc2RXVWdKMlJsWVd4bGNpMXNaWFpsYkNjc0lHUmhkR0V1WkdWaGJHVnlUR1YyWld4Y2NseHVYSFFqYzJWMFZtRnNkV1VnSjNOMGNtVnVaM1JvSnl3Z1pHRjBZUzV6ZEhKbGJtZDBhQ3hjY2x4dVhIUWpjMlYwVm1Gc2RXVWdKM0JsY21ObGNIUnBiMjRuTENCa1lYUmhMbkJsY21ObGNIUnBiMjVjY2x4dVhIUWpjMlYwVm1Gc2RXVWdKMlZ1WkhWeVlXNWpaU2NzSUdSaGRHRXVaVzVrZFhKaGJtTmxYSEpjYmx4MEkzTmxkRlpoYkhWbElDZGphR0Z5YVhOdFlTY3NJR1JoZEdFdVkyaGhjbWx6YldGY2NseHVYSFFqYzJWMFZtRnNkV1VnSjJsdWRHVnNiR2xuWlc1alpTY3NJR1JoZEdFdWFXNTBaV3hzYVdkbGJtTmxYSEpjYmx4MEkzTmxkRlpoYkhWbElDZGhaMmxzYVhSNUp5d2daR0YwWVM1aFoybHNhWFI1WEhKY2JseDBJM05sZEZaaGJIVmxJQ2RzZFdOckp5d2daR0YwWVM1c2RXTnJJQ3NnSnlVblhISmNibHgwSTNObGRGWmhiSFZsSUNkemRHRjBhWE4wYVdOUWIybHVkSE1uTENCa1lYUmhMbk4wWVhScGMzUnBZMUJ2YVc1MGMxeHlYRzVjZENOelpYUldZV3gxWlNBbmRHRnNaVzUwVUc5cGJuUnpKeXdnWkdGMFlTNTBZV3hsYm5SUWIybHVkSE5jY2x4dVhIUWpjMlYwVm1Gc2RXVWdKMjF2Ym1WNUp5d2dKeVFuSUNzZ1pHRjBZUzV0YjI1bGVWeHlYRzVjZENOelpYUldZV3gxWlNBbmNtVndiM0owY3ljc0lHUmhkR0V1Y21Wd2IzSjBjME52ZFc1MFhISmNibHgwSTNObGRGWmhiSFZsSUNkdFpYTnpZV2RsY3ljc0lHUmhkR0V1YldWemMyRm5aWE5EYjNWdWRGeHlYRzVjY2x4dVhIUnpZMjl3WlNBOUlHRnVaM1ZzWVhJdVpXeGxiV1Z1ZENoa2IyTjFiV1Z1ZEM1aWIyUjVLUzV6WTI5d1pTZ3BYSEpjYmx4eVhHNWNkR2xtSUhOamIzQmxQeUJoYm1RZ2MyTnZjR1V1Y0d4aGVXVnlQMXh5WEc1Y2RGeDBJM05qYjNCbExuQnNZWGxsY2k1c1pYWmxiQ0E5SUdSaGRHRXViR1YyWld4Y2NseHVYSFJjZENOelkyOXdaUzV3YkdGNVpYSXVjR3hoYm5SaGRHOXlUR1YyWld3Z1BTQmtZWFJoTG5Cc1lXNTBZWFJ2Y2t4bGRtVnNYSEpjYmx4MFhIUWpjMk52Y0dVdWNHeGhlV1Z5TG5OdGRXZG5iR1Z5VEdWMlpXd2dQU0JrWVhSaExuTnRkV2RuYkdWeVRHVjJaV3hjY2x4dVhIUmNkQ056WTI5d1pTNXdiR0Y1WlhJdVpHVmhiR1Z5VEdWMlpXd2dQU0JrWVhSaExtUmxZV3hsY2t4bGRtVnNYSEpjYmx4MFhIUWpjMk52Y0dVdWNHeGhlV1Z5TG5OMGNtVnVaM1JvSUQwZ1pHRjBZUzV6ZEhKbGJtZDBhRnh5WEc1Y2RGeDBJM05qYjNCbExuQnNZWGxsY2k1d1pYSmpaWEIwYVc5dUlEMGdaR0YwWVM1d1pYSmpaWEIwYVc5dVhISmNibHgwWEhRamMyTnZjR1V1Y0d4aGVXVnlMbVZ1WkhWeVlXNWpaU0E5SUdSaGRHRXVaVzVrZFhKaGJtTmxYSEpjYmx4MFhIUWpjMk52Y0dVdWNHeGhlV1Z5TG1Ob1lYSnBjMjFoSUQwZ1pHRjBZUzVqYUdGeWFYTnRZVnh5WEc1Y2RGeDBJM05qYjNCbExuQnNZWGxsY2k1cGJuUmxiR3hwWjJWdVkyVWdQU0JrWVhSaExtbHVkR1ZzYkdsblpXNWpaVnh5WEc1Y2RGeDBJM05qYjNCbExuQnNZWGxsY2k1aFoybHNhWFI1SUQwZ1pHRjBZUzVoWjJsc2FYUjVYSEpjYmx4MFhIUWpjMk52Y0dVdWNHeGhlV1Z5TG14MVkyc2dQU0JrWVhSaExteDFZMnRjY2x4dVhIUmNkQ056WTI5d1pTNXdiR0Y1WlhJdWNtVnpjR1ZqZENBOUlHUmhkR0V1Y21WemNHVmpkRnh5WEc1Y2RGeDBJM05qYjNCbExuQnNZWGxsY2k1M1pXbG5hSFFnUFNCa1lYUmhMbmRsYVdkb2RGeHlYRzVjZEZ4MEkzTmpiM0JsTG5Cc1lYbGxjaTVqWVhCaFkybDBlU0E5SUdSaGRHRXVZMkZ3WVdOcGRIbGNjbHh1WEhSY2RDTnpZMjl3WlM1d2JHRjVaWEl1YldsdVJHRnRZV2RsSUQwZ1pHRjBZUzV0YVc1RVlXMWhaMlZjY2x4dVhIUmNkQ056WTI5d1pTNXdiR0Y1WlhJdWJXRjRSR0Z0WVdkbElEMGdaR0YwWVM1dFlYaEVZVzFoWjJWY2NseHVYSFJjZENOelkyOXdaUzV3YkdGNVpYSXVaR1ZtWlc1elpTQTlJR1JoZEdFdVpHVm1aVzV6WlZ4eVhHNWNkRngwSTNOamIzQmxMbkJzWVhsbGNpNWpjbWwwUTJoaGJtTmxJRDBnWkdGMFlTNWpjbWwwUTJoaGJtTmxYSEpjYmx4MFhIUWpjMk52Y0dVdWNHeGhlV1Z5TG5Od1pXVmtJRDBnWkdGMFlTNXpjR1ZsWkZ4eVhHNWNkRngwSTNOamIzQmxMbkJzWVhsbGNpNWxlSEJsY21sbGJtTmxUVzlrYVdacFpYSWdQU0JrWVhSaExtVjRjR1Z5YVdWdVkyVk5iMlJwWm1sbGNseHlYRzVjZEZ4MEkzTmpiM0JsTG5Cc1lYbGxjaTV0YjI1bGVVMXZaR2xtYVdWeUlEMGdaR0YwWVM1dGIyNWxlVTF2WkdsbWFXVnlYSEpjYmx4eVhHNWNkRngwWm05eUlHc3NJSFlnYjJZZ1pHRjBZVnh5WEc1Y2RGeDBYSFJ6WTI5d1pTNXdiR0Y1WlhKYmExMGdQU0IyWEhKY2JseHlYRzVjZEZ4MGMyTnZjR1V1SkdGd2NHeDVLQ2xjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYm14dllXUmxaQ0E5SUNoa1lYUmhLU0F0UGx4eVhHNWNjbHh1WEhSbWFXeHNJR1JoZEdGY2NseHVYSEpjYmx4MGFXWWdaR0YwWVM1eVpXeHZZV1JjY2x4dVhISmNibHgwWEhSM2FXNWtiM2N1Ykc5allYUnBiMjR1Y21WbWNtVnphQ2dwWEhKY2JseDBaV3h6WlZ4eVhHNWNkRngwSkM1aGFtRjRJSHRjY2x4dVhISmNibHgwWEhSY2RIVnliRG9nZFhKc0lDc2dKeTl1YjNScFptbGpZWFJwYjI1ekp5eGNjbHh1WEhSY2RGeDBaR0YwWVZSNWNHVTZJQ2RxYzI5dUp5eGNjbHh1WEhSY2RGeDBiV1YwYUc5a09pQW5SMFZVSnl4Y2NseHVYSFJjZEZ4MGMzVmpZMlZ6Y3pvZ2JtOTBhV1o1WEhKY2JseDBYSFI5WEhKY2JseHlYRzVjZEZ4MEpDNWhhbUY0SUh0Y2NseHVYSEpjYmx4MFhIUmNkSFZ5YkRvZ2RYSnNJQ3NnSnk5dFpYTnpZV2RsY3ljc1hISmNibHgwWEhSY2RHUmhkR0ZVZVhCbE9pQW5hbk52Ymljc1hISmNibHgwWEhSY2RHMWxkR2h2WkRvZ0owZEZWQ2NzWEhKY2JseDBYSFJjZEhOMVkyTmxjM002SUcxbGMzTmhaMlVzWEhKY2JseDBYSFI5WEhKY2JseHlYRzVjZEhObGRGUnBiV1Z2ZFhRZ2JHOWhaQ3dnWkdGMFlTNXVaWGgwVlhCa1lYUmxJQ29nTVRBd01GeHlYRzVjY2x4dVhISmNibTV2ZEdsbWVTQTlJQ2hrWVhSaEtTQXRQbHh5WEc1Y2RHWnZjaUJ1SUdsdUlHUmhkR0ZjY2x4dVhIUmNkSGRwYm1SdmR5NXViM1JwWm5rZ2UxeHlYRzVjY2x4dVhIUmNkRngwZEdsMGJHVTZJQ2M4YzNSeWIyNW5QaWNnS3lCdUxuUnBkR3hsSUNzZ0p6d3ZjM1J5YjI1blBpY3NYSEpjYmx4MFhIUmNkRzFsYzNOaFoyVTZJQ2NuTEZ4eVhHNWNkRngwWEhSMWNtdzZJQ2N2Y21Wd2IzSjBjeThuSUNzZ2JpNXBaQ3hjY2x4dVhISmNibHgwWEhSOVhISmNibHh5WEc1Y2RHbG1JSGRwYm1SdmR5NWhZM1JwZG1WY2NseHVYSFJjZEhkcGJtUnZkeTV1YjNScFpubFRhRzkzS0NsY2NseHVYSEpjYm0xbGMzTmhaMlVnUFNBb1pHRjBZU2tnTFQ1Y2NseHVYSFJtYjNJZ2JpQnBiaUJrWVhSaFhISmNibHgwWEhSM2FXNWtiM2N1Ym05MGFXWjVJSHRjY2x4dVhISmNibHgwWEhSY2RIUnBkR3hsT2lBblBITjBjbTl1Wno0bklDc2diaTVoZFhSb2IzSWdLeUFuUEM5emRISnZibWMrT2lBbklDc2diaTUwYVhSc1pTQXJJQ2M4WW5JdlBpY3NYSEpjYmx4MFhIUmNkRzFsYzNOaFoyVTZJRzR1WTI5dWRHVnVkQ3hjY2x4dVhIUmNkRngwZFhKc09pQW5MMjFsYzNOaFoyVnpMMmx1WW05NEx5Y2dLeUJ1TG1sa0xGeHlYRzVjY2x4dVhIUmNkSDFjY2x4dVhISmNibHgwYVdZZ2QybHVaRzkzTG1GamRHbDJaVnh5WEc1Y2RGeDBkMmx1Wkc5M0xtNXZkR2xtZVZOb2IzY29LVnh5WEc1Y2NseHVYSEpjYmx4eVhHNXNiMkZrSUQwZ0xUNWNjbHh1WEhKY2JseDBKQzVoYW1GNElIdGNjbHh1WEhKY2JseDBYSFIxY213NklIVnliQ3hjY2x4dVhIUmNkR1JoZEdGVWVYQmxPaUFuYW5OdmJpY3NYSEpjYmx4MFhIUnRaWFJvYjJRNklDZEhSVlFuTEZ4eVhHNWNkRngwYzNWalkyVnpjem9nYkc5aFpHVmtYSEpjYmx4MGZWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2RGeHlYRzRrS0hkcGJtUnZkeWt1Wm05amRYTWdMVDVjY2x4dVhIUnNiMkZrS0NsY2NseHVYSEpjYmx4eVhHNGtJQzArWEhKY2JseDBiRzloWkNncElpd2lYSEpjYm5OeGRXRnlaU0E5SUMwK1hISmNibHh5WEc1Y2RDUW9KeTV6Y1hWaGNtVW5LUzVsWVdOb0lDMCtYSEpjYmx4eVhHNWNkRngwYVdZZ0pDaDBhR2x6S1M1a1lYUmhLQ2R6Y1hWaGNtVW5LU0E5UFNBbmQybGtkR2duWEhKY2JseHlYRzVjZEZ4MFhIUWtLSFJvYVhNcExuZHBaSFJvSUNRb2RHaHBjeWt1YUdWcFoyaDBLQ2xjY2x4dVhIUmNkR1ZzYzJWY2NseHVYSEpjYmx4MFhIUmNkQ1FvZEdocGN5a3VhR1ZwWjJoMElDUW9kR2hwY3lrdWQybGtkR2dvS1Z4eVhHNWNjbHh1SkNBdFBseHlYRzVjZENRb2QybHVaRzkzS1M1eVpYTnBlbVVnTFQ0Z1hISmNibHgwWEhSemNYVmhjbVVvS1Z4eVhHNWNkRngwWEhKY2JseDBjM0YxWVhKbEtDa2lMQ0pjY2x4dVkyaGhibWRsWkNBOUlDMCtJRnh5WEc1Y2RHTjFjbkpsYm5RZ1BTQndZWEp6WlVsdWRDQW9KQ2duSTJOMWNuSmxiblJUZEdGMGFYTjBhV056VUc5cGJuUnpKeWt1ZEdWNGRDZ3BJRDhnTUNsY2NseHVYSFJzWldaMElEMGdjR0Z5YzJWSmJuUWdKQ2duSTNOMFlYUnBjM1JwWTNOUWIybHVkSE1uS1M1MFpYaDBLQ2xjY2x4dVhIUnZiR1FnUFNCd1lYSnpaVWx1ZENBb0pDaDBhR2x6S1M1a1lYUmhLQ2R2YkdRbktTQS9JREFwWEhKY2JseDBkbUZzSUQwZ2NHRnljMlZKYm5RZ0tDUW9kR2hwY3lrdWRtRnNLQ2tnUHlBd0tWeHlYRzVjZEdScFptWWdQU0IyWVd3Z0xTQnZiR1JjY2x4dVhISmNibHgwWkdsbVppQTlJR3hsWm5RZ2FXWWdaR2xtWmlBK0lHeGxablJjY2x4dVhIUjJZV3dnUFNCdmJHUWdLeUJrYVdabVhISmNibHgwYkdWbWRDQXRQU0JrYVdabVhISmNibHh5WEc1Y2RHbG1JRzV2ZENCcGMwNWhUaUJrYVdabVhISmNibHh5WEc1Y2RGeDBKQ2gwYUdsektWeHlYRzVjZEZ4MFhIUXVkbUZzSUhaaGJGeHlYRzVjZEZ4MFhIUXVaR0YwWVNBbmIyeGtKeXdnZG1Gc1hISmNibHh5WEc1Y2RGeDBKQ2duSTNOMFlYUnBjM1JwWTNOUWIybHVkSE1uS1Z4eVhHNWNkRngwWEhRdWRHVjRkQ0JzWldaMFhISmNibHh5WEc1Y2RGeDBKQ2duTG5OMFlYUnBjM1JwWXljcExtVmhZMmdnTFQ1Y2NseHVYSFJjZEZ4MGRtRnNJRDBnY0dGeWMyVkpiblFnSkNoMGFHbHpLUzUyWVd3b0tTQS9JREJjY2x4dVhIUmNkRngwSkNoMGFHbHpLUzVoZEhSeUlDZHRZWGduTENCc1pXWjBJQ3NnZG1Gc1hISmNibHh5WEc1Y2NseHVjbUZ1Wkc5dElEMGdLRzFwYml3Z2JXRjRLU0F0UGlCTllYUm9Mbkp2ZFc1a0tFMWhkR2d1Y21GdVpHOXRLQ2tnS2lBb2JXRjRJQzBnYldsdUtTQXJJRzFwYmlsY2NseHVYSEpjYm5KaGJtUnZiVWx1SUQwZ0tHRnljbUY1S1NBdFBseHlYRzVjZEdsdVpHVjRJRDBnY21GdVpHOXRLREFzSUdGeWNtRjVMbXhsYm1kMGFDQXRJREVwWEhKY2JseDBZWEp5WVhsYmFXNWtaWGhkWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVjbTlzYkNBOUlDMCtYSEpjYmx4eVhHNWNkSEp2Ykd4aFlteGxJRDBnSkNnbkxuTjBZWFJwYzNScFl5NXliMnhzWVdKc1pTY3BYSEpjYmx4MEpDaHliMnhzWVdKc1pTa3VkbUZzS0RBcExuUnlhV2RuWlhJb0oyTm9ZVzVuWlNjcFhISmNibHgwY0c5cGJuUnpJRDBnY0dGeWMyVkpiblFnSkNnbkkzTjBZWFJwYzNScFkzTlFiMmx1ZEhNbktTNTBaWGgwS0NsY2NseHVYSEpjYmx4eVhHNWNkR1p2Y2lCcElHbHVJRnN4TGk1d2IybHVkSE5kWEhKY2JseHlYRzVjZEZ4MGMzUmhkR2x6ZEdsaklEMGdjbUZ1Wkc5dFNXNG9jbTlzYkdGaWJHVXBYSEpjYmx4MFhIUjJZV3dnUFNCd1lYSnpaVWx1ZENBa0tITjBZWFJwYzNScFl5a3VkbUZzS0NsY2NseHVYSFJjZENRb2MzUmhkR2x6ZEdsaktTNTJZV3dvZG1Gc0lDc2dNU2xjY2x4dVhISmNibHh5WEc1Y2RDUW9jbTlzYkdGaWJHVXBMblJ5YVdkblpYSWdKMk5vWVc1blpTZGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVKQ0F0UGlCY2NseHVYSFFrS0NjdWMzUmhkR2x6ZEdsakp5bGNjbHh1WEhSY2RDNWlhVzVrSUNkclpYbDFjQ0JwYm5CMWRDQmphR0Z1WjJVbkxDQmphR0Z1WjJWa1hISmNibHgwWEhRdWRISnBaMmRsY2lBblkyaGhibWRsSjF4eVhHNWNjbHh1WEhRa0tDY3VjM1JoZEZKdmJHeGxjaWNwWEhKY2JseDBYSFF1WTJ4cFkyc29jbTlzYkNsY2NseHVYSEpjYmx4MGNtOXNiQ2dwWEhKY2JpSXNJbHh5WEc1eVpXWnlaWE5vYVc1bklEMGdabUZzYzJWY2NseHVYSEpjYm5KbFpuSmxjMmdnUFNBdFBseHlYRzVjZEhkcGJtUnZkeTVzYjJOaGRHbHZiaTV5WldaeVpYTm9LQ2tnYVdZZ2JtOTBJSEpsWm5KbGMyaHBibWRjY2x4dVhIUnlaV1p5WlhOb2FXNW5JRDBnZEhKMVpWeHlYRzVjY2x4dWRYQmtZWFJsSUQwZ0tIUnBiV1Z5S1NBdFBseHlYRzVjZEdKaGNpQTlJQ1FvZEdsdFpYSXBMbU5vYVd4a2NtVnVLQ2N1Y0hKdlozSmxjM010WW1GeUp5a3ViR0Z6ZENncFhISmNibHgwYkdGaVpXd2dQU0FrS0hScGJXVnlLUzVqYUdsc1pISmxiaUFuTG5CeWIyZHlaWE56TFd4aFltVnNKMXh5WEc1Y2RIUnBiV1VnUFNCTllYUm9Mbkp2ZFc1a0lDaHVaWGNnUkdGMFpTa3VaMlYwVkdsdFpTZ3BJQzhnTVRBd01DNHdYSEpjYmx4eVhHNWNjbHh1WEhSdGFXNGdQU0FrS0dKaGNpa3VaR0YwWVNBbmJXbHVKMXh5WEc1Y2RHMWhlQ0E5SUNRb1ltRnlLUzVrWVhSaElDZHRZWGduWEhKY2JseDBjM1J2Y0NBOUlDUW9ZbUZ5S1M1a1lYUmhJQ2R6ZEc5d0oxeHlYRzVjZEdOaElEMGdKQ2hpWVhJcExtUmhkR0VvSjJOaEp5bGNjbHh1WEhSallpQTlJQ1FvWW1GeUtTNWtZWFJoS0NkallpY3BYSEpjYmx4eVhHNWNjbHh1WEhKY2JseDBjbVYyWlhKelpXUWdQU0JDYjI5c1pXRnVLQ1FvWW1GeUtTNWtZWFJoS0NkeVpYWmxjbk5sWkNjcElEOGdabUZzYzJVcFhISmNibHgwY21Wc2IyRmtJRDBnUW05dmJHVmhiaWdrS0dKaGNpa3VaR0YwWVNnbmNtVnNiMkZrSnlrZ1B5QjBjblZsS1Z4eVhHNWNjbHh1WEhScFppQnpkRzl3UDF4eVhHNWNkRngwZEdsdFpTQTlJRTFoZEdndWJXbHVJSFJwYldVc0lITjBiM0JjY2x4dVhISmNibHgwYm05M0lEMGdUV0YwYUM1amJHRnRjQ2gwYVcxbExDQnRhVzRzSUcxaGVDbGNjbHh1WEhKY2JseHlYRzVjZEhCbGNtTmxiblFnUFNBb2JtOTNJQzBnYldsdUtTQXZJQ2h0WVhnZ0xTQnRhVzRwWEhKY2JseDBjR1Z5WTJWdWRDQTlJREVnTFNCd1pYSmpaVzUwSUdsbUlISmxkbVZ5YzJWa1hISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkQ1FvWW1GeUtTNWpjM01nSjNkcFpIUm9KeXdnS0hCbGNtTmxiblFnS2lBeE1EQXBJQ3NnSnlVblhISmNibHgwSkNoaVlYSXBMbU56Y3lnblltRmphMmR5YjNWdVpDMWpiMnh2Y2ljc0lFMWhkR2d1YkdWeWNFTnZiRzl5Y3lod1pYSmpaVzUwTENCallTd2dZMklwS1NCcFppQmpZVDhnWVc1a0lHTmlQMXh5WEc1Y2RDUW9iR0ZpWld3cExuUmxlSFFnZDJsdVpHOTNMblJwYldWR2IzSnRZWFEvSUcxaGVDQXRJRzV2ZDF4eVhHNWNjbHh1WEhSeVpXWnlaWE5vS0NrZ2FXWWdkR2x0WlNBK0lHMWhlQ0JoYm1RZ2NtVnNiMkZrWEhKY2JseHlYRzVjZEhObGRGUnBiV1Z2ZFhRb0xUNGdYSEpjYmx4eVhHNWNkRngwZFhCa1lYUmxLSFJwYldWeUtWeHlYRzVjY2x4dVhIUXNJREV3TURBcElDTnBaaUIwYVcxbElEdzlJRzFoZUZ4eVhHNWNjbHh1WEhKY2JuVndaR0YwWlU1aGRpQTlJQ2gwYVcxbGNpa2dMVDVjY2x4dVhISmNibHgwZEdsdFpTQTlJRTFoZEdndWNtOTFibVFnS0c1bGR5QkVZWFJsS1M1blpYUlVhVzFsS0NrZ0x5QXhNREF3TGpCY2NseHVYSFJ0YVc0Z1BTQWtLSFJwYldWeUtTNWtZWFJoSUNkdGFXNG5YSEpjYmx4MGJXRjRJRDBnSkNoMGFXMWxjaWt1WkdGMFlTQW5iV0Y0SjF4eVhHNWNkRzV2ZHlBOUlFMWhkR2d1WTJ4aGJYQW9kR2x0WlN3Z2JXbHVMQ0J0WVhncFhISmNibHh5WEc1Y2RIQmxjbU5sYm5RZ1BTQXhJQzBnS0c1dmR5QXRJRzFwYmlrZ0x5QW9iV0Y0SUMwZ2JXbHVLVnh5WEc1Y2NseHVYSFFrS0hScGJXVnlLUzVqYzNNb0ozZHBaSFJvSnl3Z0tIQmxjbU5sYm5RZ0tpQXhNREFwSUNzZ0p5VW5LVnh5WEc1Y2NseHVYSFJ6WlhSVWFXMWxiM1YwS0MwK0lGeHlYRzVjY2x4dVhIUmNkSFZ3WkdGMFpVNWhkaWgwYVcxbGNpbGNjbHh1WEhKY2JseDBMQ0F4TURBd0tWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVKQ0F0UGx4eVhHNWNkQ1FvSnk1d2NtOW5jbVZ6Y3kxMGFXMWxKeWt1WldGamFDQXRQbHh5WEc1Y2RGeDBkWEJrWVhSbElIUm9hWE5jY2x4dVhISmNibHgwSkNnbkxtNWhkaTEwYVcxbGNpQStJQzV1WVhZdGRHbHRaWEl0WW1GeUp5a3VaV0ZqYUNBdFBseHlYRzVjZEZ4MGRYQmtZWFJsVG1GMklIUm9hWE5jY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmlJc0lpUWdMVDVjY2x4dVhIUWtLQ2RiWkdGMFlTMTBiMmRuYkdVOVhDSjBiMjlzZEdsd1hDSmRKeWt1WldGamFDZ3RQbHh5WEc1Y2NseHVYSFJjZEc5d2RHbHZibk1nUFNCN1hISmNibHh5WEc1Y2RGeDBYSFJvZEcxc09pQjBjblZsTEZ4eVhHNWNkRngwWEhSd2JHRmpaVzFsYm5RNklDZGhkWFJ2SUd4bFpuUW5YSEpjYmx4MFhIUjlYSEpjYmx4eVhHNWNkRngwZEhKcFoyZGxjaUE5SUNRb2RHaHBjeWt1WkdGMFlTZ25kSEpwWjJkbGNpY3BYSEpjYmx4eVhHNWNkRngwYVdZZ2RISnBaMmRsY2o5Y2NseHVYSFJjZEZ4MGIzQjBhVzl1Y3k1MGNtbG5aMlZ5SUQwZ2RISnBaMmRsY2x4eVhHNWNjbHh1WEhKY2JseDBYSFFrS0hSb2FYTXBMblJ2YjJ4MGFYQW9iM0IwYVc5dWN5bGNjbHh1WEhRcElpd2lYSEpjYmlRZ0xUNWNjbHh1WEhKY2JseDBkSFYwYjNKcFlXeHpJRDBnZTMxY2NseHVYSFFrS0NjdWRIVjBiM0pwWVd3dGMzUmxjQ2NwTG5CdmNHOTJaWElvZTNSeWFXZG5aWEk2SUNkdFlXNTFZV3duTENCd2JHRmpaVzFsYm5RNklDZGliM1IwYjIwbmZTbGNjbHh1WEhKY2JseDBjMmh2ZHlBOUlDaHpkR1Z3S1NBdFBseHlYRzVjY2x4dVhIUmNkR2xtSUhOMFpYQS9YSEpjYmx4eVhHNWNkRngwWEhRa0tITjBaWEF1Wld4bGJXVnVkSE1wWEhKY2JseDBYSFJjZEZ4MExtSnBibVFvSjJOc2FXTnJKeXdnWTJ4cFkydGxaQ2xjY2x4dVhIUmNkRngwWEhRdVlXUmtRMnhoYzNNb0ozUjFkRzl5YVdGc0xXRmpkR2wyWlNjcFhISmNibHgwWEhSY2RGeDBMbVpwY25OMEtDbGNjbHh1WEhSY2RGeDBYSFF1Y0c5d2IzWmxjaWduYzJodmR5Y3BYSEpjYmx4eVhHNWNjbHh1WEhSamJHbGphMlZrSUQwZ0tHVjJaVzUwS1NBdFBseHlYRzVjY2x4dVhIUmNkRzVsZUhRZ1BTQjBkWFJ2Y21saGJITmJkR2hwY3k1emRHVndMbTVoYldWZExuTm9hV1owS0NsY2NseHVYSEpjYmx4MFhIUnBaaUJ1WlhoMFAxeHlYRzVjY2x4dVhIUmNkRngwSkM1aGFtRjRLSHRjY2x4dVhISmNibHgwWEhSY2RGeDBkWEpzT2lBbkwyRndhUzlqYUdGeVlXTjBaWEl2ZEhWMGIzSnBZV3duTEZ4eVhHNWNkRngwWEhSY2RHUmhkR0ZVZVhCbE9pQW5hbk52Ymljc1hISmNibHgwWEhSY2RGeDBaR0YwWVRvZ2UyNWhiV1U2SUhSb2FYTXVjM1JsY0M1dVlXMWxMQ0J6ZEdGblpUb2dibVY0ZEM1cGJtUmxlSDBzWEhKY2JseDBYSFJjZEZ4MGJXVjBhRzlrT2lBblVFOVRWQ2NzWEhSY2NseHVYSFJjZEZ4MGZTbGNjbHh1WEhKY2JseDBYSFJjZEhObGRGUnBiV1Z2ZFhRb0xUNWNjbHh1WEhKY2JseDBYSFJjZEZ4MGMyaHZkeWh1WlhoMEtWeHlYRzVjZEZ4MFhIUXNJRFV3TUNsY2NseHVYSFJjZEdWc2MyVmNjbHh1WEhSY2RGeDBKQzVoYW1GNEtIdGNjbHh1WEhKY2JseDBYSFJjZEZ4MGRYSnNPaUFuTDJGd2FTOWphR0Z5WVdOMFpYSXZkSFYwYjNKcFlXd25MRnh5WEc1Y2RGeDBYSFJjZEdSaGRHRlVlWEJsT2lBbmFuTnZiaWNzWEhKY2JseDBYSFJjZEZ4MFpHRjBZVG9nZTI1aGJXVTZJSFJvYVhNdWMzUmxjQzV1WVcxbExDQnpkR0ZuWlRvZ2RHaHBjeTV6ZEdWd0xtbHVaR1Y0SUNzZ01YMHNYSEpjYmx4MFhIUmNkRngwYldWMGFHOWtPaUFuVUU5VFZDY3NYSFJjY2x4dVhIUmNkRngwZlNsY2NseHVYSFJjZEZ4eVhHNWNjbHh1WEhKY2JseHlYRzVjZEZ4MEpDaDBhR2x6TG5OMFpYQXVaV3hsYldWdWRITXBMblZ1WW1sdVpDZ25ZMnhwWTJzbkxDQmpiR2xqYTJWa0tWeHlYRzVjZEZ4MFhIUXVjbVZ0YjNabFEyeGhjM01vSjNSMWRHOXlhV0ZzTFdGamRHbDJaU2NwWEhKY2JseDBYSFJjZEM1d2IzQnZkbVZ5S0Nkb2FXUmxKeWxjY2x4dVhISmNibHgwWEhRalpYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVnh5WEc1Y2RGeDBJMlYyWlc1MExuTjBiM0JRY205d1lXZGhkR2x2YmlncFhISmNibHh5WEc1Y2NseHVYSFJ5WldObGFYWmxJRDBnS0c5aWFtVmpkQ3dnYm1GdFpTd2daR0YwWVNrZ0xUNWNjbHh1WEhKY2JseDBYSFJwWmlCa1lYUmhMbk4wWVdkbElEd2dNRnh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkRzF2WkdGc0lEMGdKQ2duUEdScGRqNDhMMlJwZGo0bktTNWhaR1JEYkdGemN5Z25iVzlrWVd3Z1ptRmtaU2NwWEhKY2JseDBYSFJjZEdScFlXeHZaeUE5SUNRb0p6eGthWFkrUEM5a2FYWStKeWt1WVdSa1EyeGhjM01vSjIxdlpHRnNMV1JwWVd4dlp5Y3BYSEpjYmx4MFhIUmNkR052Ym5SbGJuUWdQU0FrS0NjOFpHbDJQand2WkdsMlBpY3BMbUZrWkVOc1lYTnpLQ2R0YjJSaGJDMWpiMjUwWlc1MEp5bGNjbHh1WEhSY2RGeDBhR1ZoWkdWeUlEMGdKQ2duUEdScGRqNDhMMlJwZGo0bktTNWhaR1JEYkdGemN5Z25iVzlrWVd3dGFHVmhaR1Z5SnlsY2NseHVYSFJjZEZ4MFltOWtlU0E5SUNRb0p6eGthWFkrUEM5a2FYWStKeWt1WVdSa1EyeGhjM01vSjIxdlpHRnNMV0p2WkhrbktWeHlYRzVjZEZ4MFhIUm1iMjkwWlhJZ1BTQWtLQ2M4WkdsMlBqd3ZaR2wyUGljcExtRmtaRU5zWVhOektDZHRiMlJoYkMxbWIyOTBaWEluS1Z4eVhHNWNkRngwWEhSMGFYUnNaU0E5SUNRb0p6eG9ORDQ4TDJnMFBpY3BMbUZrWkVOc1lYTnpLQ2R0YjJSaGJDMTBhWFJzWlNjcFhISmNibHh5WEc1Y2RGeDBYSFJuY205MWNDQTlJQ1FvSnp4a2FYWStQQzlrYVhZK0p5a3VZV1JrUTJ4aGMzTW9KMkowYmkxbmNtOTFjQ2NwWEhKY2JseDBYSFJjZEdKMGJqRWdQU0FrS0NjOFpHbDJQand2WkdsMlBpY3BMbUZrWkVOc1lYTnpLQ2RpZEc0Z1luUnVMWE4xWTJObGMzTW5LUzVoZEhSeUtDZDJZV3gxWlNjc0lDZDVaWE1uS1M1MFpYaDBLR2t4T0c0dWVXVnpLVnh5WEc1Y2RGeDBYSFJpZEc0eUlEMGdKQ2duUEdScGRqNDhMMlJwZGo0bktTNWhaR1JEYkdGemN5Z25ZblJ1SUdKMGJpMWtZVzVuWlhJbktTNWhkSFJ5S0NkMllXeDFaU2NzSUNkdWJ5Y3BMblJsZUhRb2FURTRiaTV1YnlsY2NseHVYSEpjYmx4MFhIUmNkQ1FvWW5SdU1Ta3VZMnhwWTJzb0xUNWNjbHh1WEhKY2JseDBYSFJjZEZ4MEpDNWhhbUY0S0h0Y2NseHVYSEpjYmx4MFhIUmNkRngwWEhSMWNtdzZJQ2N2WVhCcEwyTm9ZWEpoWTNSbGNpOTBkWFJ2Y21saGJDY3NYSEpjYmx4MFhIUmNkRngwWEhSa1lYUmhWSGx3WlRvZ0oycHpiMjRuTEZ4eVhHNWNkRngwWEhSY2RGeDBaR0YwWVRvZ2UyNWhiV1U2SUc1aGJXVXNJR0ZqZEdsMlpUb2dNWDBzWEhKY2JseDBYSFJjZEZ4MFhIUnRaWFJvYjJRNklDZFFUMU5VSnl4Y2RGeHlYRzVjZEZ4MFhIUmNkSDBwWEhKY2JseHlYRzVjZEZ4MFhIUmNkQ1FvYlc5a1lXd3BMbTF2WkdGc0tDZG9hV1JsSnlsY2NseHVYSEpjYmx4MFhIUmNkRngwYkc5aFpDaHZZbXBsWTNRc0lHNWhiV1VzSUdSaGRHRXBYSEpjYmx4MFhIUmNkQ2xjY2x4dVhISmNibHgwWEhSY2RDUW9ZblJ1TWlrdVkyeHBZMnNvTFQ1Y2NseHVYSEpjYmx4MFhIUmNkRngwSkM1aGFtRjRLSHRjY2x4dVhISmNibHgwWEhSY2RGeDBYSFIxY213NklDY3ZZWEJwTDJOb1lYSmhZM1JsY2k5MGRYUnZjbWxoYkNjc1hISmNibHgwWEhSY2RGeDBYSFJrWVhSaFZIbHdaVG9nSjJwemIyNG5MRnh5WEc1Y2RGeDBYSFJjZEZ4MFpHRjBZVG9nZTI1aGJXVTZJRzVoYldVc0lHRmpkR2wyWlRvZ01IMHNYSEpjYmx4MFhIUmNkRngwWEhSdFpYUm9iMlE2SUNkUVQxTlVKeXhjZEZ4eVhHNWNkRngwWEhSY2RIMHBYSEpjYmx4eVhHNWNkRngwWEhSY2RDUW9iVzlrWVd3cExtMXZaR0ZzS0Nkb2FXUmxKeWxjY2x4dVhISmNibHgwWEhSY2RDbGNjbHh1WEhKY2JseDBYSFJjZENRb2RHbDBiR1VwWEhKY2JseDBYSFJjZEZ4MExuUmxlSFFvWkdGMFlTNTBhWFJzWlNsY2NseHVYSEpjYmx4MFhIUmNkQ1FvWW05a2VTbGNjbHh1WEhSY2RGeDBYSFF1ZEdWNGRDaGtZWFJoTG1SbGMyTnlhWEIwYVc5dUtWeHlYRzVjY2x4dVhIUmNkRngwSkNob1pXRmtaWElwWEhKY2JseDBYSFJjZEZ4MExtRndjR1Z1WkNoMGFYUnNaU2xjY2x4dVhISmNibHh5WEc1Y2RGeDBYSFFrS0dkeWIzVndLVnh5WEc1Y2RGeDBYSFJjZEM1aGNIQmxibVFvWW5SdU1pbGNjbHh1WEhSY2RGeDBYSFF1WVhCd1pXNWtLR0owYmpFcFhISmNibHh5WEc1Y2RGeDBYSFFrS0dadmIzUmxjaWxjY2x4dVhIUmNkRngwWEhRdVlYQndaVzVrS0dkeWIzVndLVnh5WEc1Y2NseHVYSEpjYmx4MFhIUmNkQ1FvWTI5dWRHVnVkQ2xjY2x4dVhIUmNkRngwWEhRdVlYQndaVzVrS0dobFlXUmxjaWxjY2x4dVhIUmNkRngwWEhRdVlYQndaVzVrS0dKdlpIa3BYSEpjYmx4MFhIUmNkRngwTG1Gd2NHVnVaQ2htYjI5MFpYSXBYSEpjYmx4eVhHNWNkRngwWEhRa0tHUnBZV3h2WnlsY2NseHVYSFJjZEZ4MFhIUXVZWEJ3Wlc1a0tHTnZiblJsYm5RcFhISmNibHh5WEc1Y2RGeDBYSFFrS0cxdlpHRnNLVnh5WEc1Y2RGeDBYSFJjZEM1aGNIQmxibVFvWkdsaGJHOW5LVnh5WEc1Y2NseHVYSFJjZEZ4MEpDZ25ZbTlrZVNjcFhISmNibHgwWEhSY2RGeDBMbUZ3Y0dWdVpDaHRiMlJoYkNsY2NseHVYSEpjYmx4MFhIUmNkQ1FvYlc5a1lXd3BMbTF2WkdGc0tIdGlZV05yWkhKdmNEb2dKM04wWVhScFl5Y3NJSE5vYjNjNklIUnlkV1VzSUd0bGVXSnZZWEprT2lCbVlXeHpaWDBwWEhKY2JseHlYRzVjY2x4dVhIUmNkR1ZzYzJWY2NseHVYSFJjZEZ4MGJHOWhaQ2h2WW1wbFkzUXNJRzVoYldVc0lHUmhkR0VwWEhKY2JseHlYRzVjY2x4dVhISmNibHgwYkc5aFpDQTlJQ2h2WW1wbFkzUXNJRzVoYldVc0lHUmhkR0VwSUMwK1hISmNibHh5WEc1Y2NseHVYSFJjZEhSMWRHOXlhV0ZzSUQwZ1cxMWNjbHh1WEhSY2RHUmxjSFJvSUQwZ0pDaHZZbXBsWTNRcExuQmhjbVZ1ZEhNb0oxdGtZWFJoTFhSMWRHOXlhV0ZzUFhSeWRXVmRKeWt1YkdWdVozUm9JQ3NnTVZ4eVhHNWNjbHh1WEhKY2JseDBYSFFrS0c5aWFtVmpkQ2t1Wm1sdVpDZ25MblIxZEc5eWFXRnNMWE4wWlhBbktTNWxZV05vS0MwK1hISmNibHh5WEc1Y2NseHVYSFJjZEZ4MGMzUmxjQ0E5SUc1MWJHeGNjbHh1WEhSY2RGeDBhVzVrWlhnZ1BTQWtLSFJvYVhNcExtUmhkR0VvSjNSMWRHOXlhV0ZzTFdsdVpHVjRKeWxjY2x4dVhISmNibHgwWEhSY2RISmxkSFZ5YmlCcFppQnBibVJsZUNBOElHUmhkR0V1YzNSaFoyVWdiM0lnSkNoMGFHbHpLUzV3WVhKbGJuUnpLQ2RiWkdGMFlTMTBkWFJ2Y21saGJEMTBjblZsWFNjcExteGxibWQwYUNBaFBTQmtaWEIwYUZ4eVhHNWNjbHh1WEhKY2JseHlYRzVjZEZ4MFhIUnBaaUIwZFhSdmNtbGhiRnRwYm1SbGVGMC9YSEpjYmx4MFhIUmNkRngwYzNSbGNDQTlJSFIxZEc5eWFXRnNXMmx1WkdWNFhWeHlYRzVjZEZ4MFhIUmxiSE5sWEhKY2JseDBYSFJjZEZ4MGMzUmxjQ0E5SUh0Y2NseHVYSEpjYmx4MFhIUmNkRngwWEhSbGJHVnRaVzUwY3pvZ1cxMHNYSEpjYmx4MFhIUmNkRngwWEhSdVlXMWxPaUJ1WVcxbExGeHlYRzVjZEZ4MFhIUmNkRngwYVc1a1pYZzZJR2x1WkdWNExGeHlYRzVjZEZ4MFhIUmNkSDFjY2x4dVhIUmNkRngwWEhSMGRYUnZjbWxoYkZ0cGJtUmxlRjBnUFNCemRHVndYSEpjYmx4eVhHNWNjbHh1WEhSY2RGeDBjM1JsY0M1bGJHVnRaVzUwY3k1d2RYTm9LSFJvYVhNcFhISmNibHgwWEhSY2RIUm9hWE11YzNSbGNDQTlJSE4wWlhCY2NseHVYSFJjZENsY2NseHVYSEpjYmx4MFhIUjBkWFJ2Y21saGJDQTlJSFIxZEc5eWFXRnNMbVpwYkhSbGNpZ29aV3hsYldWdWRDa2dMVDVjY2x4dVhISmNibHgwWEhSY2RHbG1JR1ZzWlcxbGJuUS9YSEpjYmx4MFhIUmNkRngwY21WMGRYSnVJSFJ5ZFdWY2NseHVYSFJjZEZ4MFpXeHpaVnh5WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUJtWVd4elpWeHlYRzVjZEZ4MEtWeHlYRzVjY2x4dVhISmNibHh5WEc1Y2RGeDBkSFYwYjNKcFlXeHpXMjVoYldWZElEMGdkSFYwYjNKcFlXeGNjbHh1WEhSY2RITm9iM2NvZEhWMGIzSnBZV3d1YzJocFpuUW9LU2xjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNkQ1FvSjF0a1lYUmhMWFIxZEc5eWFXRnNQWFJ5ZFdVbktTNWxZV05vS0MwK1hISmNibHh5WEc1Y2RGeDBibUZ0WlNBOUlDUW9kR2hwY3lrdVpHRjBZU2duZEhWMGIzSnBZV3d0Ym1GdFpTY3BYSEpjYmx4eVhHNWNkRngwSkM1aGFtRjRLSHRjY2x4dVhISmNibHgwWEhSY2RIVnliRG9nSnk5aGNHa3ZZMmhoY21GamRHVnlMM1IxZEc5eWFXRnNKeXhjY2x4dVhIUmNkRngwWkdGMFlWUjVjR1U2SUNkcWMyOXVKeXhjY2x4dVhIUmNkRngwWkdGMFlUb2dlMjVoYldVNklHNWhiV1Y5TEZ4eVhHNWNkRngwWEhSdFpYUm9iMlE2SUNkSFJWUW5MRnh5WEc1Y2RGeDBYSFJ6ZFdOalpYTnpPaUFvWkdGMFlTa2dQVDVjY2x4dVhIUmNkRngwWEhSeVpXTmxhWFpsS0hSb2FYTXNJRzVoYldVc0lHUmhkR0VwSUdsbUlHUmhkR0V1WVdOMGFYWmxYSEpjYmx4MFhIUjlLVnh5WEc1Y2RDa2lMQ0ozYVc1a2IzY3VabTl5YldGMElHOXlQU0JjY2x4dVhIUjBhVzFsT2x4eVhHNWNkRngwWkdGNU9pQW5aQ2RjY2x4dVhIUmNkR2h2ZFhJNklDZG9KMXh5WEc1Y2RGeDBiV2x1ZFhSbE9pQW5iU2RjY2x4dVhIUmNkSE5sWTI5dVpEb2dKM01uWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1M2FXNWtiM2N1WVdOMGFYWmxJRDg5SUdaaGJITmxYSEpjYmx4eVhHNWNjbHh1WEhKY2JpUW9kMmx1Wkc5M0tTNW1iMk4xY3lBdFBseHlYRzVjZEhkcGJtUnZkeTVoWTNScGRtVWdQU0IwY25WbFhISmNibHh5WEc0a0tIZHBibVJ2ZHlrdVlteDFjaUF0UGx4eVhHNWNkSGRwYm1SdmR5NWhZM1JwZG1VZ1BTQm1ZV3h6WlZ4eVhHNWNjbHh1SkNoM2FXNWtiM2NwTG5KbGMybDZaU0F0UGx4eVhHNWNkR05zWldGeVZHbHRaVzkxZENoMGFHbHpMbkpsYzJsNlpWUnZLU0JwWmlCMGFHbHpMbkpsYzJsNlpWUnZYSEpjYmx4MGRHaHBjeTV5WlhOcGVtVlVieUE5SUhObGRGUnBiV1Z2ZFhRb0xUNWNjbHh1WEhSY2RDUW9kR2hwY3lrdWRISnBaMmRsY2lnbmNtVnphWHBsWkNjcFhISmNibHgwTENBMU1EQXBYSEpjYmx4MFhISmNibHh5WEc1Y2NseHVYSEpjYm5kcGJtUnZkeTVzY0dGa0lHOXlQU0FvZG1Gc2RXVXNJSEJoWkdScGJtY3BJQzArWEhKY2JpQWdlbVZ5YjJWeklEMGdYQ0l3WENKY2NseHVJQ0I2WlhKdlpYTWdLejBnWENJd1hDSWdabTl5SUdrZ2FXNGdXekV1TG5CaFpHUnBibWRkWEhKY2JseHlYRzRnSUNoNlpYSnZaWE1nS3lCMllXeDFaU2t1YzJ4cFkyVW9jR0ZrWkdsdVp5QXFJQzB4S1Z4eVhHNWNjbHh1WEhKY2JuUnBiV1ZUWlhCaGNtRjBaU0E5SUNoMllXeDFaU2tnTFQ1Y2NseHVYSFJwWmlCMllXeDFaUzVzWlc1bmRHZ2dQaUF3WEhKY2JseDBYSFIyWVd4MVpTQXJJQ2NnSjF4eVhHNWNkR1ZzYzJWY2NseHVYSFJjZEhaaGJIVmxYSEpjYmx4eVhHNTBhVzFsUm05eWJXRjBJRDBnS0hSbGVIUXNJSFpoYkhWbExDQm1iM0p0WVhRcElDMCtYSEpjYmx4MGRHVjRkQ0E5SUhScGJXVlRaWEJoY21GMFpTaDBaWGgwS1Z4eVhHNWNjbHh1WEhScFppQjBaWGgwTG14bGJtZDBhQ0ErSURCY2NseHVYSFJjZEhSbGVIUWdLejBnZDJsdVpHOTNMbXh3WVdRZ2RtRnNkV1VzSURKY2NseHVYSFJsYkhObElGeHlYRzVjZEZ4MGRHVjRkQ0FyUFNCMllXeDFaVnh5WEc1Y2NseHVYSFIwWlhoMElDc2dabTl5YldGMFhISmNibHh5WEc1Y2NseHVkMmx1Wkc5M0xuUnBiV1ZHYjNKdFlYUWdiM0k5SUNoMllXeDFaU2tnTFQ1Y2NseHVYSFJjY2x4dVhIUjBaWGgwSUQwZ0p5ZGNjbHh1WEhSa1lYUmxJRDBnYm1WM0lFUmhkR1VvZG1Gc2RXVWdLaUF4TURBd0tWeHlYRzVjZEdRZ1BTQmtZWFJsTG1kbGRGVlVRMFJoZEdVb0tTQXRJREZjY2x4dVhIUm9JRDBnWkdGMFpTNW5aWFJWVkVOSWIzVnljeWdwWEhKY2JseDBiU0E5SUdSaGRHVXVaMlYwVlZSRFRXbHVkWFJsY3lncFhISmNibHgwY3lBOUlHUmhkR1V1WjJWMFZWUkRVMlZqYjI1a2N5Z3BYSEpjYmx4eVhHNWNjbHh1WEhSMFpYaDBJQ3M5SUdRZ0t5Qm1iM0p0WVhRdWRHbHRaUzVrWVhrZ2FXWWdaQ0ErSURCY2NseHVYSFIwWlhoMElEMGdkR2x0WlVadmNtMWhkQ2gwWlhoMExDQm9MQ0JtYjNKdFlYUXVkR2x0WlM1b2IzVnlLU0JwWmlCb0lENGdNRnh5WEc1Y2RIUmxlSFFnUFNCMGFXMWxSbTl5YldGMEtIUmxlSFFzSUcwc0lHWnZjbTFoZEM1MGFXMWxMbTFwYm5WMFpTa2dhV1lnYUNBK0lEQWdiM0lnYlNBK0lEQmNjbHh1WEhSMFpYaDBJRDBnZEdsdFpVWnZjbTFoZENoMFpYaDBMQ0J6TENCbWIzSnRZWFF1ZEdsdFpTNXpaV052Ym1RcElHbG1JR2dnUGlBd0lHOXlJRzBnUGlBd0lHOXlJSE1nUGlBd1hISmNibHh5WEc1Y2RIUmxlSFJjY2x4dVhISmNibmRwYm1SdmR5NTBhVzFsUm05eWJXRjBVMmh2Y25RZ2IzSTlJQ2gyWVd4MVpTa2dMVDVjY2x4dVhISmNibHgwZEdWNGRDQTlJQ2NuWEhKY2JseDBaR0YwWlNBOUlHNWxkeUJFWVhSbEtIWmhiSFZsSUNvZ01UQXdNQ2xjY2x4dVhIUmtJRDBnWkdGMFpTNW5aWFJWVkVORVlYUmxLQ2tnTFNBeFhISmNibHgwYUNBOUlHUmhkR1V1WjJWMFZWUkRTRzkxY25Nb0tWeHlYRzVjZEcwZ1BTQmtZWFJsTG1kbGRGVlVRMDFwYm5WMFpYTW9LVnh5WEc1Y2RITWdQU0JrWVhSbExtZGxkRlZVUTFObFkyOXVaSE1vS1Z4eVhHNWNjbHh1WEhKY2JseDBjbVYwZFhKdUlHUWdLeUJtYjNKdFlYUXVkR2x0WlM1a1lYa2dhV1lnWkNBK0lEQmNjbHh1WEhSeVpYUjFjbTRnZEdsdFpVWnZjbTFoZENoMFpYaDBMQ0JvTENCbWIzSnRZWFF1ZEdsdFpTNW9iM1Z5S1NCcFppQm9JRDRnTUZ4eVhHNWNkSEpsZEhWeWJpQjBhVzFsUm05eWJXRjBLSFJsZUhRc0lHMHNJR1p2Y20xaGRDNTBhVzFsTG0xcGJuVjBaU2tnYVdZZ2JTQStJREJjY2x4dVhIUnlaWFIxY200Z2RHbHRaVVp2Y20xaGRDaDBaWGgwTENCekxDQm1iM0p0WVhRdWRHbHRaUzV6WldOdmJtUXBJR2xtSUhNZ1BpQXdYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzV5WldaeVpYTm9hVzVuSUQwZ1ptRnNjMlZjY2x4dVhISmNibHh5WEc1M2FXNWtiM2N1Ykc5allYUnBiMjR1Y21WbWNtVnphQ0J2Y2owZ0xUNWNjbHh1WEhScFppQnViM1FnY21WbWNtVnphR2x1WjF4eVhHNWNkRngwY21WbWNtVnphR2x1WnlBOUlIUnlkV1ZjY2x4dVhIUmNkSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXlaV3h2WVdRb2RISjFaU2xjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYm01dmRHbG1hV05oZEdsdmJuTWdQU0JiWFZ4eVhHNTNhVzVrYjNjdWJtOTBhV1o1SUc5eVBTQW9jSEp2Y0hNcExUNWNjbHh1WEhSdWIzUnBabWxqWVhScGIyNXpMbkIxYzJnZ2NISnZjSE5jY2x4dVhISmNibHh5WEc1amJHOXVaU0E5SUNodlltb3BJQzArWEhKY2JseDBjbVYwZFhKdUlHOWlhaUFnYVdZZ2IySnFJR2x6SUc1MWJHd2diM0lnZEhsd1pXOW1JQ2h2WW1vcElHbHpiblFnWENKdlltcGxZM1JjSWx4eVhHNWNkSFJsYlhBZ1BTQnVaWGNnYjJKcUxtTnZibk4wY25WamRHOXlLQ2xjY2x4dVhIUm1iM0lnYTJWNUlHOW1JRzlpYWx4eVhHNWNkRngwZEdWdGNGdHJaWGxkSUQwZ1kyeHZibVVvYjJKcVcydGxlVjBwWEhKY2JseDBkR1Z0Y0Z4eVhHNWNjbHh1YzJodmQwNXZkR2xtZVNBOUlDaHVMQ0JwS1NBdFBseHlYRzVjZEdOdmJuTnZiR1V1Ykc5bktDZFFKeXdnYml3Z2FTazdYSEpjYmx4MGMyVjBWR2x0Wlc5MWRDQW9MVDRnWEhKY2JseDBYSFJqYjI1emIyeGxMbXh2WnlnblV5Y3NJRzRzSUdrcE8xeHlYRzVjZEZ4MEpDNXViM1JwWm5rb2Jpd2dlMXh5WEc1Y2NseHVYSFJjZEZ4MGNHeGhZMlZ0Wlc1ME9pQjdYSEpjYmx4eVhHNWNkRngwWEhSY2RHWnliMjA2SUNkaWIzUjBiMjBuTEZ4eVhHNWNkRngwWEhSOUxGeHlYRzVjZEZ4MFhIUnRiM1Z6WlY5dmRtVnlPaUFuY0dGMWMyVW5MRnh5WEc1Y2NseHVYSFJjZEZ4MGZTa3BMQ0JwSUNvZ01UQXdNRnh5WEc1Y2RGeHlYRzVjY2x4dVhISmNibHh5WEc1M2FXNWtiM2N1Ym05MGFXWjVVMmh2ZHlCdmNqMGdMVDVjY2x4dVhIUnBaaUIzYVc1a2IzY3VZV04wYVhabFhISmNibHh5WEc1Y2RGeDBabTl5SUc1dmRHbG1hV05oZEdsdmJpd2dhVzVrWlhnZ2FXNGdibTkwYVdacFkyRjBhVzl1YzF4eVhHNWNkRngwWEhSemFHOTNUbTkwYVdaNUlDUXVaWGgwWlc1a0tIdDlMQ0J1YjNScFptbGpZWFJwYjI0cExDQnBibVJsZUZ4eVhHNWNkRngwYm05MGFXWnBZMkYwYVc5dWN5QTlJRnRkWEhKY2JseHlYRzVjY2x4dVhISmNiaVFvZDJsdVpHOTNLUzVtYjJOMWN5QXRQaUIzYVc1a2IzY3VibTkwYVdaNVUyaHZkeWdwWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVRXRjBhQzVqYkdGdGNDQnZjajBnS0haaGJIVmxMQ0J0YVc0c0lHMWhlQ2tnTFQ1Y2NseHVYSFJOWVhSb0xtMWhlQ2hOWVhSb0xtMXBiaWgyWVd4MVpTd2diV0Y0S1N3Z2JXbHVLVnh5WEc1Y2NseHVYSEpjYmsxaGRHZ3ViR1Z5Y0NCdmNqMGdLR2tzSUdFc0lHSXBJQzArWEhKY2JseDBLR0VnS2lCcEtTQXJJQ2hpSUNvZ0tERWdMU0JwS1NsY2NseHVYSEpjYmx4eVhHNWNjbHh1VFdGMGFDNW9aWGhVYjFKbllpQnZjajBnS0dobGVDa2dMVDRnWEhKY2JpQWdJQ0J5WlhOMWJIUWdQU0F2WGlNL0tGdGhMV1pjWEdSZGV6SjlLU2hiWVMxbVhGeGtYWHN5ZlNrb1cyRXRabHhjWkYxN01uMHBKQzlwTG1WNFpXTW9hR1Y0S1R0Y2NseHVJQ0FnSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUNBZ2Nqb2djR0Z5YzJWSmJuUW9jbVZ6ZFd4MFd6RmRMQ0F4Tmlrc1hISmNiaUFnSUNBZ0lDQWdaem9nY0dGeWMyVkpiblFvY21WemRXeDBXekpkTENBeE5pa3NYSEpjYmlBZ0lDQWdJQ0FnWWpvZ2NHRnljMlZKYm5Rb2NtVnpkV3gwV3pOZExDQXhOaWxjY2x4dVhISmNiaUFnSUNCOUlHbG1JSEpsYzNWc2REdGNjbHh1SUNBZ0lHNTFiR3c3WEhKY2JseHlYRzVOWVhSb0xuSm5ZbFJ2U0dWNElHOXlQU0FvY2l3Z1p5d2dZaWtnTFQ1Y2NseHVJQ0FnSUhKbGRIVnliaUJjSWlOY0lpQXJJQ2dvTVNBOFBDQXlOQ2tnS3lBb2NpQThQQ0F4TmlrZ0t5QW9aeUE4UENBNEtTQXJJR0lwTG5SdlUzUnlhVzVuS0RFMktTNXpiR2xqWlNneEtUdGNjbHh1WEhKY2JseHlYRzVOWVhSb0xteGxjbkJEYjJ4dmNuTWdiM0k5SUNocExDQmhMQ0JpS1NBdFBseHlYRzVjY2x4dVhIUmpZU0E5SUUxaGRHZ3VhR1Y0Vkc5U1oySWdZVnh5WEc1Y2RHTmlJRDBnVFdGMGFDNW9aWGhVYjFKbllpQmlYSEpjYmx4eVhHNWNkR05qSUQwZ2UxeHlYRzVjZEZ4MGNqb2dUV0YwYUM1eWIzVnVaQ2hOWVhSb0xteGxjbkFvYVN3Z1kyRXVjaXdnWTJJdWNpa3BMRnh5WEc1Y2RGeDBaem9nVFdGMGFDNXliM1Z1WkNoTllYUm9MbXhsY25Bb2FTd2dZMkV1Wnl3Z1kySXVaeWtwTEZ4eVhHNWNkRngwWWpvZ1RXRjBhQzV5YjNWdVpDaE5ZWFJvTG14bGNuQW9hU3dnWTJFdVlpd2dZMkl1WWlrcExGeHlYRzVjZEgxY2NseHVYSEpjYmx4MGNtVjBkWEp1SUUxaGRHZ3VjbWRpVkc5SVpYZ29ZMk11Y2l3Z1kyTXVaeXdnWTJNdVlpbGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1MWNHUmhkR1ZRY205bmNtVnpjeUE5SUMwK1hISmNibHgwWW1GeUlEMGdKQ2gwYUdsektTNWphR2xzWkhKbGJpZ25MbkJ5YjJkeVpYTnpMV0poY2ljcFhISmNibHgwYkdGaVpXd2dQU0FrS0hSb2FYTXBMbU5vYVd4a2NtVnVLQ2N1Y0hKdlozSmxjM010YkdGaVpXd25LVnh5WEc1Y2NseHVYSFJ0YVc0Z1BTQWtLR0poY2lrdVpHRjBZU2duYldsdUp5bGNjbHh1WEhSdFlYZ2dQU0FrS0dKaGNpa3VaR0YwWVNnbmJXRjRKeWxjY2x4dVhIUmpZU0E5SUNRb1ltRnlLUzVrWVhSaEtDZGpZU2NwWEhKY2JseDBZMklnUFNBa0tHSmhjaWt1WkdGMFlTZ25ZMkluS1Z4eVhHNWNkRzV2ZHlBOUlFMWhkR2d1WTJ4aGJYQW9KQ2hpWVhJcExtUmhkR0VvSjI1dmR5Y3BMQ0J0YVc0c0lHMWhlQ2xjY2x4dVhIUnlaWFpsY25ObFpDQTlJRUp2YjJ4bFlXNG9KQ2hpWVhJcExtUmhkR0VvSjNKbGRtVnljMlZrSnlrZ1B5Qm1ZV3h6WlNsY2NseHVYSEpjYmx4MGNHVnlZMlZ1ZENBOUlDaHViM2NnTFNCdGFXNHBJQzhnS0cxaGVDQXRJRzFwYmlrZ0tpQXhNREJjY2x4dVhIUndaWEpqWlc1MElEMGdNVEF3SUMwZ2NHVnlZMlZ1ZENCcFppQnlaWFpsY25ObFpGeHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4MEpDaGlZWElwTG1OemN5Z25kMmxrZEdnbkxDQndaWEpqWlc1MElDc2dKeVVuS1Z4eVhHNWNkQ1FvWW1GeUtTNWpjM01vSjJKaFkydG5jbTkxYm1RdFkyOXNiM0luTENCTllYUm9MbXhsY25CRGIyeHZjbk1vY0dWeVkyVnVkQ0F2SURFd01Dd2dZMkVzSUdOaUtTa2dhV1lnWTJFL0lHRnVaQ0JqWWo5Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhRa0tHeGhZbVZzS1M1MFpYaDBLRzV2ZHlBcklDY2dMeUFuSUNzZ2JXRjRLVnh5WEc1Y2NseHVKQ0F0UGlCY2NseHVYSFFrS0NjdWNISnZaM0psYzNNbktTNWxZV05vSUMwK1hISmNibHgwWEhSMGFHbHpMblZ3WkdGMFpTQnZjajBnZFhCa1lYUmxVSEp2WjNKbGMzTmNjbHh1WEhKY2JseHlYRzVjY2x4dWNtVnNUVzkxYzJWRGIyOXlaSE1nUFNCZ1puVnVZM1JwYjI0Z0tHVjJaVzUwS1h0Y2NseHVJQ0FnSUhaaGNpQjBiM1JoYkU5bVpuTmxkRmdnUFNBd08xeHlYRzRnSUNBZ2RtRnlJSFJ2ZEdGc1QyWm1jMlYwV1NBOUlEQTdYSEpjYmlBZ0lDQjJZWElnWTJGdWRtRnpXQ0E5SURBN1hISmNiaUFnSUNCMllYSWdZMkZ1ZG1GeldTQTlJREE3WEhKY2JpQWdJQ0IyWVhJZ1kzVnljbVZ1ZEVWc1pXMWxiblFnUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUdSdmUxeHlYRzRnSUNBZ0lDQWdJSFJ2ZEdGc1QyWm1jMlYwV0NBclBTQmpkWEp5Wlc1MFJXeGxiV1Z1ZEM1dlptWnpaWFJNWldaMElDMGdZM1Z5Y21WdWRFVnNaVzFsYm5RdWMyTnliMnhzVEdWbWREdGNjbHh1SUNBZ0lDQWdJQ0IwYjNSaGJFOW1abk5sZEZrZ0t6MGdZM1Z5Y21WdWRFVnNaVzFsYm5RdWIyWm1jMlYwVkc5d0lDMGdZM1Z5Y21WdWRFVnNaVzFsYm5RdWMyTnliMnhzVkc5d08xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2QyaHBiR1VvWTNWeWNtVnVkRVZzWlcxbGJuUWdQU0JqZFhKeVpXNTBSV3hsYldWdWRDNXZabVp6WlhSUVlYSmxiblFwWEhKY2JseHlYRzRnSUNBZ1kyRnVkbUZ6V0NBOUlHVjJaVzUwTG5CaFoyVllJQzBnZEc5MFlXeFBabVp6WlhSWU8xeHlYRzRnSUNBZ1kyRnVkbUZ6V1NBOUlHVjJaVzUwTG5CaFoyVlpJQzBnZEc5MFlXeFBabVp6WlhSWk8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQjdlRHBqWVc1MllYTllMQ0I1T21OaGJuWmhjMWw5WEhKY2JuMWdYSEpjYmx4eVhHNUlWRTFNUTJGdWRtRnpSV3hsYldWdWRDNXdjbTkwYjNSNWNHVXVjbVZzVFc5MWMyVkRiMjl5WkhNZ1BTQnlaV3hOYjNWelpVTnZiM0prY3p0Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNG9MVDVjY2x4dVhISmNibHgwYjJ4a1UyaHZkeUE5SUNRdVptNHVjMmh2ZDF4eVhHNWNjbHh1WEhRakl5TmNjbHh1WEhKY2JseHlYRzVjZENRdVptNHVjMmh2ZHlBOUlDaHpjR1ZsWkN3Z2IyeGtRMkZzYkdKaFkyc3BJQzArWEhKY2JseHlYRzVjZEZ4MFkyOXVjMjlzWlM1c2IyY29KM05vYjNjbkxDQjBhR2x6S1Z4eVhHNWNjbHh1WEhSY2RHNWxkME5oYkd4aVlXTnJJRDBnTFQ1Y2NseHVYSEpjYmx4MFhIUmNkRzlzWkVOaGJHeGlZV05yTG1Gd2NHeDVLSFJvYVhNcElHbG1JQ1F1YVhOR2RXNWpkR2x2YmlodmJHUkRZV3hzWW1GamF5bGNjbHh1WEhSY2RGeDBKQ2gwYUdsektTNTBjbWxuWjJWeUtDZGhablJsY2xOb2IzY25LVnh5WEc1Y2NseHVYSFJjZENRb2RHaHBjeWt1ZEhKcFoyZGxjaWduWW1WbWIzSmxVMmh2ZHljcFhISmNibHh5WEc1Y2RGeDBaR1ZsY0NBOUlDUW9kR2hwY3lrdVptbHVaQ2duVzJSaGRHRXRaR1ZsY0hOb2IzZGRKeWxjY2x4dVhISmNibHgwWEhScFppQmtaV1Z3TG14bGJtZDBhRnh5WEc1Y2RGeDBYSFJrWldWd0xuTm9iM2NvS1Z4eVhHNWNjbHh1WEhSY2RHOXNaRk5vYjNjdVlYQndiSGtvZEdocGN5d2dXM053WldWa0xDQnVaWGREWVd4c1ltRmphMTBwWEhKY2JseDBJeU1qWEhKY2Jpa29LVnh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNibE4wY21sdVp5NXdjbTkwYjNSNWNHVXVaWE5qWVhCbElHOXlQU0F0UGx4eVhHNWNkSFJvYVhNdWNtVndiR0ZqWlNndktGc3VLaXMvWGowaE9pUjdmU2dwZkZ4Y1cxeGNYVnhjTDF4Y1hGeGRLUzluTENCY0lseGNYRndrTVZ3aUtWeHlYRzVjY2x4dVhISmNibHh5WEc1VGRISnBibWN1Y0hKdmRHOTBlWEJsTG5KbGNHeGhZMlZCYkd3Z2IzSTlJQ2h6WldGeVkyZ3NJSEpsY0d4aFkyVXBJQzArWEhKY2JseDBkR2hwY3k1eVpYQnNZV05sS0c1bGR5QlNaV2RGZUhBb2MyVmhjbU5vTG1WelkyRndaU2dwTENBbloya25LU3dnY21Wd2JHRmpaU2xjY2x4dVhISmNiaUpkTENKemIzVnlZMlZTYjI5MElqb2lMM052ZFhKalpTOGlmUT09IiwiXHJcblxyXG5jbGlja2VkID0gLT5cclxuXHQkKCcuYXZhdGFyJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXHJcblx0JCgnI2F2YXRhcicpLnZhbCgkKHRoaXMpLmRhdGEoJ2F2YXRhcicpKVxyXG5cdCQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpXHJcblxyXG5cclxuJCAtPlxyXG5cdCQoJy5hdmF0YXInKS5jbGljayhjbGlja2VkKS5maXJzdCgpLnRyaWdnZXIoJ2NsaWNrJykiLCJjb25maWcgPVxyXG5cdGZvbnRTaXplOiAzMFxyXG5cdGJhckZvbnRTaXplOiAyMFxyXG5cdG5hbWVGb250U2l6ZTogMzBcclxuXHRtYXJnaW46IDVcclxuXHRpbnRlcnZhbDogMTAwMCAvIDYwXHJcblxyXG5cclxuXHJcbmNsYXNzIENoYXJhY3RlclxyXG5cclxuXHJcblx0Y29uc3RydWN0b3I6ICh0ZWFtLCBkYXRhKSAtPlxyXG5cclxuXHRcdGltYWdlID0gbmV3IEltYWdlKClcclxuXHRcdGltYWdlLnNyYyA9IGRhdGEuYXZhdGFyXHJcblx0XHRpbWFnZS5vbmxvYWQgPSA9PlxyXG5cdFx0XHRAYXZhdGFyID0gaW1hZ2VcclxuXHJcblxyXG5cclxuXHRcdEB0ZWFtID0gdGVhbVxyXG5cdFx0QG5hbWUgPSBkYXRhLm5hbWVcclxuXHRcdEBpZCA9IGRhdGEuaWRcclxuXHRcdEBsZXZlbCA9IGRhdGEubGV2ZWxcclxuXHRcdEBoZWFsdGggPSBkYXRhLmhlYWx0aFxyXG5cdFx0QG1heEhlYWx0aCA9IGRhdGEubWF4SGVhbHRoXHJcblxyXG5cclxuXHRkcmF3OiAoY29udGV4dCwgc2l6ZSkgLT5cclxuXHRcdGlmIEB0ZWFtID09ICdyZWQnXHJcblx0XHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyMTcsIDgzLCA3OSwgMSknXHJcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMjE3LCA4MywgNzksIDAuNCknXHJcblx0XHRlbHNlXHJcblx0XHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSg1MSwgMTIyLCAxODMsIDEpJ1xyXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDUxLCAxMjIsIDE4MywgMC40KSdcclxuXHJcblx0XHRjb250ZXh0LmZpbGxSZWN0KDAsIDAsIHNpemUsIHNpemUpXHJcblx0XHRjb250ZXh0LnN0cm9rZVJlY3QoMCwgMCwgc2l6ZSwgc2l6ZSlcclxuXHJcblx0XHRpZiBAYXZhdGFyP1xyXG5cdFx0XHRjb250ZXh0LmRyYXdJbWFnZShAYXZhdGFyLCBjb25maWcubWFyZ2luLCBjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLm1hcmdpbiAqIDIsIHNpemUgLSBjb25maWcubWFyZ2luICogMilcclxuXHJcblx0XHR0ZXh0ID0gQG5hbWUgKyAnICgnICsgQGxldmVsICsgJyknXHJcblxyXG5cdFx0Y29udGV4dC5mb250ID0gY29uZmlnLm5hbWVGb250U2l6ZSArICdweCBSb2JvdG8nXHJcblx0XHRjb250ZXh0LmxpbmVXaWR0aCA9IDFcclxuXHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyNGRkZGRkYnXHJcblx0XHRjb250ZXh0LnN0cm9rZVN0eWxlID0gJyMwMDAwMDAnXHJcblx0XHRtZWFzdXJlID0gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KVxyXG5cdFx0Y29udGV4dC5maWxsVGV4dCh0ZXh0LCAoc2l6ZSAtIG1lYXN1cmUud2lkdGgpIC8gMiwgY29uZmlnLm5hbWVGb250U2l6ZSlcclxuXHRcdGNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0LCAoc2l6ZSAtIG1lYXN1cmUud2lkdGgpIC8gMiwgY29uZmlnLm5hbWVGb250U2l6ZSlcclxuXHJcblxyXG5cdFx0Y29udGV4dC5mb250ID0gY29uZmlnLmJhckZvbnRTaXplICsgJ3B4IFJvYm90bydcclxuXHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjcpJ1xyXG5cdFx0Y29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjQpJ1xyXG5cdFx0Y29udGV4dC5maWxsUmVjdChjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC0gY29uZmlnLm1hcmdpbiwgc2l6ZSAtIGNvbmZpZy5tYXJnaW4gKiAyLCBjb25maWcuYmFyRm9udFNpemUpXHJcblx0XHRjb250ZXh0LnN0cm9rZVJlY3QoY29uZmlnLm1hcmdpbiwgc2l6ZSAtIGNvbmZpZy5iYXJGb250U2l6ZSAtIGNvbmZpZy5tYXJnaW4sIHNpemUgLSBjb25maWcubWFyZ2luICogMiwgY29uZmlnLmJhckZvbnRTaXplKVxyXG5cclxuXHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMjE3LCA4MywgNzksIDEpJ1xyXG5cdFx0Y29udGV4dC5maWxsUmVjdChjb25maWcubWFyZ2luLCBzaXplIC0gY29uZmlnLmJhckZvbnRTaXplIC0gY29uZmlnLm1hcmdpbiwgKHNpemUgLSBjb25maWcubWFyZ2luICogMikgKiAoQGhlYWx0aCAvIEBtYXhIZWFsdGgpLCBjb25maWcuYmFyRm9udFNpemUpXHJcblxyXG5cdFx0dGV4dCA9IE1hdGgucm91bmQoQGhlYWx0aCkgKyAnIC8gJyArIEBtYXhIZWFsdGhcclxuXHRcdG1lYXN1cmUgPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpXHJcblx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICcjMDAwMDAwJ1xyXG5cdFx0Y29udGV4dC5maWxsVGV4dCh0ZXh0LCAoc2l6ZSAtIG1lYXN1cmUud2lkdGgpIC8gMiwgc2l6ZSAtIGNvbmZpZy5iYXJGb250U2l6ZSAvIDIpXHJcblxyXG5cclxuXHJcblxyXG5cclxuY2xhc3MgQmF0dGxlXHJcblxyXG5cdHNwZWVkOiBcclxuXHRcdHZpZXc6IDMuMFxyXG5cdFx0aW5mbzogMy4wXHJcblx0XHRuZXh0OiAzLjBcclxuXHJcblxyXG5cclxuXHJcblx0Y29uc3RydWN0b3I6IChlbGVtZW50KSAtPlxyXG5cclxuXHRcdEBjYW52YXMgPSAkKGVsZW1lbnQpLmNoaWxkcmVuKCdjYW52YXMnKVswXVxyXG5cdFx0QGNvbnRleHQgPSBAY2FudmFzLmdldENvbnRleHQoJzJkJylcclxuXHJcblx0XHRAYmF0dGxlTG9nID0gJC5wYXJzZUpTT04oJChlbGVtZW50KS5jaGlsZHJlbignLmJhdHRsZS1sb2cnKS5maXJzdCgpLnRleHQoKSlcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHRsb2FkOiAtPlxyXG5cclxuXHRcdEBpbmRleCA9IDBcclxuXHRcdEBjaGFyYWN0ZXJzID0gW11cclxuXHRcdEBzdGF0ZSA9ICd2aWV3J1xyXG5cdFx0QG9mZnNldCA9IDBcclxuXHRcdEBwYXVzZSA9IGZhbHNlXHJcblxyXG5cdFx0JChAY2FudmFzKS5jbGljaygoZXZlbnQpID0+IEBjbGljayhldmVudCkpXHJcblx0XHQkKGRvY3VtZW50KS5rZXlkb3duKChldmVudCkgPT4gQGtleShldmVudCkpXHJcblxyXG5cdFx0Zm9yIGRhdGEgaW4gQGJhdHRsZUxvZ1sndGVhbXMnXVsncmVkJ11cclxuXHRcdFx0Y2hhcmFjdGVyID0gbmV3IENoYXJhY3RlcigncmVkJywgZGF0YSlcclxuXHRcdFx0QGNoYXJhY3RlcnNbY2hhcmFjdGVyLmlkXSA9IGNoYXJhY3RlclxyXG5cclxuXHJcblx0XHRmb3IgZGF0YSBpbiBAYmF0dGxlTG9nWyd0ZWFtcyddWydibHVlJ11cclxuXHRcdFx0Y2hhcmFjdGVyID0gbmV3IENoYXJhY3RlcignYmx1ZScsIGRhdGEpXHJcblx0XHRcdEBjaGFyYWN0ZXJzW2NoYXJhY3Rlci5pZF0gPSBjaGFyYWN0ZXJcclxuXHJcblx0XHRAY29udGV4dC5mb250ID0gY29uZmlnLmZvbnRTaXplICsgJ3B4IFJvYm90bydcclxuXHJcblxyXG5cdFx0QGFjdGlvbiA9IEBiYXR0bGVMb2dbJ2xvZyddW0BpbmRleF1cclxuXHRcdEBhdHRhY2tlciA9IEBjaGFyYWN0ZXJzW0BhY3Rpb24uYXR0YWNrZXJdXHJcblx0XHRAZGVmZW5kZXIgPSBAY2hhcmFjdGVyc1tAYWN0aW9uLmRlZmVuZGVyXVxyXG5cclxuXHRcdHRydWVcclxuXHJcblxyXG5cclxuXHJcblx0ZHJhd0NoYXJhY3RlcnM6IChhdHRhY2tlciwgZGVmZW5kZXIpIC0+XHJcblxyXG5cdFx0c2l6ZSA9IEBjYW52YXMuaGVpZ2h0ICogMC42XHJcblx0XHRoYWxmV2lkdGggPSBAY2FudmFzLndpZHRoIC8gMlxyXG5cclxuXHRcdEBjb250ZXh0LnNhdmUoKVxyXG5cdFx0QGNvbnRleHQudHJhbnNsYXRlKChoYWxmV2lkdGggLSBzaXplKSAvIDIsIChAY2FudmFzLmhlaWdodCAtIHNpemUpIC8gMilcclxuXHRcdGF0dGFja2VyLmRyYXcoQGNvbnRleHQsIHNpemUpXHJcblx0XHRAY29udGV4dC5yZXN0b3JlKClcclxuXHJcblx0XHRAY29udGV4dC5zYXZlKClcclxuXHRcdEBjb250ZXh0LnRyYW5zbGF0ZSgoaGFsZldpZHRoIC0gc2l6ZSkgLyAyICsgaGFsZldpZHRoLCAoQGNhbnZhcy5oZWlnaHQgLSBzaXplKSAvIDIpXHJcblx0XHRkZWZlbmRlci5kcmF3KEBjb250ZXh0LCBzaXplKVxyXG5cdFx0QGNvbnRleHQucmVzdG9yZSgpXHJcblxyXG5cclxuXHRkcmF3SW5mbzogKHRleHQpIC0+XHJcblx0XHRoYWxmV2lkdGggPSBAY2FudmFzLndpZHRoIC8gMlxyXG5cdFx0aGFsZkhlaWdodCA9IEBjYW52YXMuaGVpZ2h0IC8gMlxyXG5cdFx0YmxvY2tTaXplID0gQGNhbnZhcy5oZWlnaHQgKiAwLjZcclxuXHJcblx0XHRzdGFyUmFkaXVzID0gNTBcclxuXHRcdHN0YXJXaWR0aCA9IHN0YXJSYWRpdXMgKiAyXHJcblx0XHRzdGFyWCA9IGhhbGZXaWR0aCArIChibG9ja1NpemUgKyBzdGFyUmFkaXVzKSAvIDJcclxuXHRcdHN0YXJZID0gaGFsZkhlaWdodFxyXG5cdFx0c3RhclcgPSAoYmxvY2tTaXplICogMC43KSAvIHN0YXJXaWR0aFxyXG5cdFx0c3RhckggPSAxLjJcclxuXHRcdHN0YXJQaWtlcyA9IDEzXHJcblxyXG5cdFx0QGNvbnRleHQuZm9udCA9IGNvbmZpZy5mb250U2l6ZSArICdweCBSb2JvdG8nXHJcblx0XHRtZWFzdXJlID0gQGNvbnRleHQubWVhc3VyZVRleHQodGV4dClcclxuXHRcdHRleHRYID0gc3RhclggLSBtZWFzdXJlLndpZHRoIC8gMlxyXG5cdFx0dGV4dFkgPSBoYWxmSGVpZ2h0XHJcblxyXG5cclxuXHJcblx0XHRAY29udGV4dC5zYXZlKClcclxuXHRcdEBjb250ZXh0LmxpbmVXaWR0aCA9IDJcclxuXHRcdEBjb250ZXh0LnRyYW5zbGF0ZShzdGFyWCwgc3RhclkpXHJcblx0XHRAY29udGV4dC5zY2FsZShzdGFyVywgc3RhckgpXHJcblx0XHRAY29udGV4dC5maWxsU3R5bGUgPSAnI0ZGRkZGRidcclxuXHRcdEBjb250ZXh0LnN0cm9rZVN0eWxlID0gJyMwMDAwMDAnXHJcblx0XHRAZHJhd1N0YXIoc3RhclBpa2VzLCBzdGFyUmFkaXVzICogMC42LCBzdGFyUmFkaXVzKVxyXG5cdFx0QGNvbnRleHQucmVzdG9yZSgpXHJcblxyXG5cdFx0QGNvbnRleHQuc2F2ZSgpXHJcblx0XHRAY29udGV4dC50cmFuc2xhdGUodGV4dFgsIHRleHRZKVxyXG5cdFx0QGNvbnRleHQuZmlsbFN0eWxlID0gJyMwMDAwMDAnXHJcblx0XHRAY29udGV4dC5maWxsVGV4dCh0ZXh0LCAwLCAwKVxyXG5cdFx0QGNvbnRleHQucmVzdG9yZSgpXHJcblxyXG5cclxuXHRkcmF3U3RhcjogKHBpa2VzLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMpIC0+XHJcblx0XHRyb3QgPSBNYXRoLlBJIC8gMiAqIDNcclxuXHRcdHN0ZXAgPSBNYXRoLlBJIC8gcGlrZXNcclxuXHJcblx0XHRAY29udGV4dC5iZWdpblBhdGgoKVxyXG5cdFx0eCA9IE1hdGguY29zKHJvdCkgKiBvdXRlclJhZGl1c1xyXG5cdFx0eSA9IE1hdGguc2luKHJvdCkgKiBvdXRlclJhZGl1c1xyXG5cdFx0QGNvbnRleHQubW92ZVRvKHgsIHkpXHJcblx0XHRyb3QgKz0gc3RlcFxyXG5cclxuXHRcdGZvciBpIGluIFsxLi5waWtlc11cclxuXHRcdFx0eCA9IE1hdGguY29zKHJvdCkgKiBpbm5lclJhZGl1c1xyXG5cdFx0XHR5ID0gTWF0aC5zaW4ocm90KSAqIGlubmVyUmFkaXVzXHJcblx0XHRcdEBjb250ZXh0LmxpbmVUbyh4LCB5KVxyXG5cdFx0XHRyb3QgKz0gc3RlcFxyXG5cclxuXHRcdFx0eCA9IE1hdGguY29zKHJvdCkgKiBvdXRlclJhZGl1c1xyXG5cdFx0XHR5ID0gTWF0aC5zaW4ocm90KSAqIG91dGVyUmFkaXVzXHJcblx0XHRcdEBjb250ZXh0LmxpbmVUbyh4LCB5KVxyXG5cdFx0XHRyb3QgKz0gc3RlcFxyXG5cclxuXHRcdEBjb250ZXh0LmxpbmVUbygwLCAtb3V0ZXJSYWRpdXMpXHJcblx0XHRAY29udGV4dC5maWxsKClcclxuXHRcdEBjb250ZXh0LnN0cm9rZSgpXHJcblx0XHRAY29udGV4dC5jbG9zZVBhdGgoKVxyXG5cdFx0XHJcblxyXG5cdGdldEVuZFRleHQ6IC0+XHJcblxyXG5cdFx0aWYgQGJhdHRsZUxvZ1snd2luJ11cclxuXHJcblx0XHRcdGkxOG4uYmF0dGxlLndpblxyXG5cclxuXHRcdGVsc2VcclxuXHJcblx0XHRcdGkxOG4uYmF0dGxlLmxvc2VcclxuXHJcblxyXG5cdGRyYXc6IChkZWx0YSktPlxyXG5cclxuXHRcdEBjb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJ1xyXG5cdFx0QGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIEBjYW52YXMud2lkdGgsIEBjYW52YXMuaGVpZ2h0KVxyXG5cdFx0QG9mZnNldCArPSBAc3BlZWRbQHN0YXRlXSAqIGRlbHRhXHJcblx0XHRhbmltYXRlID0gdHJ1ZVxyXG5cclxuXHRcdGlmIEBzdGF0ZSA9PSAndmlldycgYW5kIGFuaW1hdGVcclxuXHRcdFx0YWN0aW9uID0gQGJhdHRsZUxvZ1snbG9nJ11bQGluZGV4XVxyXG5cdFx0XHRhdHRhY2tlciA9IEBjaGFyYWN0ZXJzW2FjdGlvbi5hdHRhY2tlcl1cclxuXHRcdFx0ZGVmZW5kZXIgPSBAY2hhcmFjdGVyc1thY3Rpb24uZGVmZW5kZXJdXHJcblxyXG5cdFx0XHRpZihhY3Rpb24udHlwZSA9PSAnaGl0JylcclxuXHRcdFx0XHRkZWZlbmRlci5oZWFsdGggPSBhY3Rpb24uaGVhbHRoXHJcblxyXG5cdFx0XHRAZHJhd0NoYXJhY3RlcnMoYXR0YWNrZXIsIGRlZmVuZGVyKVxyXG5cclxuXHRcdFx0aWYoQG9mZnNldCA+IDEuMCBhbmQgbm90IEBwYXVzZSlcclxuXHRcdFx0XHRAb2Zmc2V0ID0gMC4wXHJcblx0XHRcdFx0ZGVmZW5kZXIuc3RhcnRIZWFsdGggPSBkZWZlbmRlci5oZWFsdGhcclxuXHJcblx0XHRcdFx0aWYgYWN0aW9uLnR5cGUgPT0gJ2hpdCdcclxuXHRcdFx0XHRcdGRlZmVuZGVyLmVuZEhlYWx0aCA9IE1hdGgubWF4KGRlZmVuZGVyLmhlYWx0aCAtIGFjdGlvbi5kYW1hZ2UsIDApXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0ZGVmZW5kZXIuZW5kSGVhbHRoID0gZGVmZW5kZXIuaGVhbHRoXHJcblxyXG5cdFx0XHRcdEBzdGF0ZSA9ICdpbmZvJ1xyXG5cclxuXHRcdFx0YW5pbWF0ZSA9IGZhbHNlXHJcblxyXG5cdFx0aWYgQHN0YXRlID09ICdpbmZvJyBhbmQgYW5pbWF0ZVxyXG5cdFx0XHRhY3Rpb24gPSBAYmF0dGxlTG9nWydsb2cnXVtAaW5kZXhdXHJcblx0XHRcdGF0dGFja2VyID0gQGNoYXJhY3RlcnNbYWN0aW9uLmF0dGFja2VyXVxyXG5cdFx0XHRkZWZlbmRlciA9IEBjaGFyYWN0ZXJzW2FjdGlvbi5kZWZlbmRlcl1cclxuXHJcblx0XHRcdEBkcmF3Q2hhcmFjdGVycyhhdHRhY2tlciwgZGVmZW5kZXIpXHJcblxyXG5cdFx0XHRpZiBAb2Zmc2V0IDw9IDEuMFxyXG5cdFx0XHRcdEBjb250ZXh0Lmdsb2JhbEFscGhhID0gQG9mZnNldFxyXG5cdFx0XHRcdGRlZmVuZGVyLmhlYWx0aCA9IGRlZmVuZGVyLnN0YXJ0SGVhbHRoXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBAb2Zmc2V0IDw9IDIuMFxyXG5cdFx0XHRcdFx0QGNvbnRleHQuZ2xvYmFsQWxwaGEgPSAxLjBcclxuXHJcblx0XHRcdFx0XHRpID0gTWF0aC5jbGFtcChAb2Zmc2V0IC0gMS4wLCAwLCAxKVxyXG5cdFx0XHRcdFx0ZGVmZW5kZXIuaGVhbHRoID0gTWF0aC5sZXJwKGksIGRlZmVuZGVyLmVuZEhlYWx0aCwgZGVmZW5kZXIuc3RhcnRIZWFsdGgpXHJcblxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdGRlZmVuZGVyLmhlYWx0aCA9IGRlZmVuZGVyLmVuZEhlYWx0aFxyXG5cdFx0XHRcdFx0QGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBNYXRoLm1heCgzLjAgLSBAb2Zmc2V0LCAwKVxyXG5cclxuXHRcdFx0aWYoQG9mZnNldCA+IDQuMClcclxuXHRcdFx0XHRAb2Zmc2V0ID0gMC4wXHJcblx0XHRcdFx0QHN0YXRlID0gJ25leHQnXHJcblxyXG5cdFx0XHRpZiBhY3Rpb24udHlwZSA9PSAnaGl0J1xyXG5cdFx0XHRcdHRleHQgPSBhY3Rpb24uZGFtYWdlXHJcblxyXG5cdFx0XHRcdGlmIGFjdGlvbi5jcml0XHJcblx0XHRcdFx0XHR0ZXh0ICs9ICchJ1xyXG5cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRleHQgPSBpMThuLmJhdHRsZS5kb2RnZVxyXG5cclxuXHJcblxyXG5cdFx0XHRAZHJhd0luZm8odGV4dClcclxuXHJcblxyXG5cdFx0XHRAY29udGV4dC5nbG9iYWxBbHBoYSA9IDEuMFxyXG5cdFx0XHRhbmltYXRlID0gZmFsc2VcclxuXHJcblx0XHRpZiBAc3RhdGUgPT0gJ25leHQnIGFuZCBhbmltYXRlXHJcblxyXG5cdFx0XHRwcmV2QWN0aW9uID0gQGJhdHRsZUxvZ1snbG9nJ11bQGluZGV4XVxyXG5cdFx0XHRuZXh0QWN0aW9uID0gQGJhdHRsZUxvZ1snbG9nJ11bQGluZGV4ICsgMV1cclxuXHJcblxyXG5cdFx0XHRwcmV2QXR0YWNrZXIgPSBAY2hhcmFjdGVyc1twcmV2QWN0aW9uLmF0dGFja2VyXVxyXG5cdFx0XHRwcmV2RGVmZW5kZXIgPSBAY2hhcmFjdGVyc1twcmV2QWN0aW9uLmRlZmVuZGVyXVxyXG5cclxuXHJcblx0XHRcdHBvc2l0aW9uID0gKEBjYW52YXMuaGVpZ2h0IC8gMikgKiBAb2Zmc2V0XHJcblxyXG5cdFx0XHRAY29udGV4dC5zYXZlKClcclxuXHRcdFx0QGNvbnRleHQudHJhbnNsYXRlKDAsIC1wb3NpdGlvbilcclxuXHRcdFx0QGRyYXdDaGFyYWN0ZXJzKHByZXZBdHRhY2tlciwgcHJldkRlZmVuZGVyKVxyXG5cdFx0XHRAY29udGV4dC5yZXN0b3JlKClcclxuXHJcblxyXG5cdFx0XHRAY29udGV4dC5zYXZlKClcclxuXHRcdFx0QGNvbnRleHQudHJhbnNsYXRlKDAsIEBjYW52YXMuaGVpZ2h0IC0gcG9zaXRpb24pXHJcblxyXG5cdFx0XHRpZiBuZXh0QWN0aW9uP1xyXG5cdFx0XHRcdG5leHRBdHRhY2tlciA9IEBjaGFyYWN0ZXJzW25leHRBY3Rpb24uYXR0YWNrZXJdXHJcblx0XHRcdFx0bmV4dERlZmVuZGVyID0gQGNoYXJhY3RlcnNbbmV4dEFjdGlvbi5kZWZlbmRlcl1cclxuXHJcblx0XHRcdFx0aWYobmV4dEFjdGlvbi50eXBlID09ICdoaXQnKVxyXG5cdFx0XHRcdFx0bmV4dERlZmVuZGVyLmhlYWx0aCA9IG5leHRBY3Rpb24uaGVhbHRoXHJcblxyXG5cdFx0XHRcdEBkcmF3Q2hhcmFjdGVycyhuZXh0QXR0YWNrZXIsIG5leHREZWZlbmRlcilcclxuXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHR0ZXh0ID0gQGdldEVuZFRleHQoKVxyXG5cdFx0XHRcdEBjb250ZXh0LmZpbGxTdHlsZSA9ICcjMDAwMDAwJ1xyXG5cdFx0XHRcdG1lYXN1cmUgPSBAY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KVxyXG5cdFx0XHRcdEBjb250ZXh0LmZpbGxUZXh0KHRleHQsIChAY2FudmFzLndpZHRoIC0gbWVhc3VyZS53aWR0aCkgLyAyLCAoQGNhbnZhcy5oZWlnaHQgLSAxNSkgLyAyKVxyXG5cclxuXHRcdFx0QGNvbnRleHQucmVzdG9yZSgpXHJcblxyXG5cdFx0XHRpZiBAb2Zmc2V0ID4gMi4wXHJcblx0XHRcdFx0QGluZGV4KytcclxuXHRcdFx0XHRAb2Zmc2V0ID0gMC4wXHJcblx0XHRcdFx0aWYgbmV4dEFjdGlvbj9cclxuXHRcdFx0XHRcdEBzdGF0ZSA9ICd2aWV3J1xyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdEBzdGF0ZSA9ICdlbmQnXHJcblxyXG5cdFx0XHRhbmltYXRlID0gZmFsc2VcclxuXHJcblxyXG5cdFx0aWYgQHN0YXRlID09ICdlbmQnIGFuZCBhbmltYXRlXHJcblx0XHRcdHRleHQgPSBAZ2V0RW5kVGV4dCgpXHJcblx0XHRcdEBvZmZzZXQgPSAwLjBcclxuXHRcdFx0QGNvbnRleHQuZmlsbFN0eWxlID0gJyMwMDAwMDAnXHJcblx0XHRcdG1lYXN1cmUgPSBAY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KVxyXG5cdFx0XHRAY29udGV4dC5maWxsVGV4dCh0ZXh0LCAoQGNhbnZhcy53aWR0aCAtIG1lYXN1cmUud2lkdGgpIC8gMiwgKEBjYW52YXMuaGVpZ2h0IC0gMTUpIC8gMilcclxuXHRcdFx0YW5pbWF0ZSA9IGZhbHNlXHJcblxyXG5cclxuXHJcblxyXG5cdFx0d2lkdGggPSBAY2FudmFzLndpZHRoIC0gNFxyXG5cdFx0aGVpZ2h0ID0gQGNhbnZhcy5oZWlnaHQgLSAyXHJcblxyXG5cdFx0QGNvbnRleHQuc2F2ZSgpXHJcblx0XHRAY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsIDAsIDAsIDAuNyknXHJcblx0XHRAY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjQpJ1xyXG5cdFx0QGNvbnRleHQuZmlsbFJlY3QoMiwgaGVpZ2h0IC0gMjAsIHdpZHRoLCAyMClcclxuXHRcdEBjb250ZXh0LnN0cm9rZVJlY3QoMiwgaGVpZ2h0IC0gMjAsIHdpZHRoLCAyMClcclxuXHJcblx0XHRAY29udGV4dC5maWxsU3R5bGUgPSAnIzVCQzBERSdcclxuXHRcdEBjb250ZXh0LmZpbGxSZWN0KDIsIGhlaWdodCAtIDIwLCB3aWR0aCAqIChNYXRoLm1pbihAaW5kZXggLyAoQGJhdHRsZUxvZ1snbG9nJ10ubGVuZ3RoIC0gMSksIDEpKSwgMjApXHJcblx0XHRAY29udGV4dC5saW5lV2lkdGggPSA1XHJcblxyXG5cdFx0Zm9yIG1hcmsgaW4gQGJhdHRsZUxvZ1snbWFya3MnXVxyXG5cclxuXHRcdFx0aWYgbWFyay50eXBlID09ICdmYWludGVkJ1xyXG5cdFx0XHRcdEBjb250ZXh0LnN0cm9rZVN0eWxlID0gJyNEOTUzNEYnXHJcblxyXG5cdFx0XHRhdCA9IChtYXJrLmF0IC8gKEBiYXR0bGVMb2dbJ2xvZyddLmxlbmd0aCAtIDEpKSAqIHdpZHRoXHJcblxyXG5cdFx0XHRAY29udGV4dC5iZWdpblBhdGgoKVxyXG5cdFx0XHRAY29udGV4dC5tb3ZlVG8oYXQgLSBAY29udGV4dC5saW5lV2lkdGggLyAyICsgMiwgaGVpZ2h0IC0gMjApXHJcblx0XHRcdEBjb250ZXh0LmxpbmVUbyhhdCAtIEBjb250ZXh0LmxpbmVXaWR0aCAvIDIgKyAyLCBoZWlnaHQpXHJcblx0XHRcdEBjb250ZXh0LnN0cm9rZSgpXHJcblxyXG5cdFx0QGNvbnRleHQucmVzdG9yZSgpXHJcblxyXG5cclxuXHJcblxyXG5cdGNsaWNrOiAoZXZlbnQpIC0+XHJcblx0XHRjb29yZHMgPSBAY2FudmFzLnJlbE1vdXNlQ29vcmRzKGV2ZW50KVxyXG5cdFx0eCA9IGNvb3Jkcy54XHJcblx0XHR5ID0gY29vcmRzLnlcclxuXHJcblx0XHRsID0gMlxyXG5cdFx0ciA9IGwgKyBAY2FudmFzLndpZHRoIC0gNFxyXG5cdFx0YiA9IEBjYW52YXMuaGVpZ2h0IC0gMlxyXG5cdFx0dCA9IGIgLSAyMFxyXG5cclxuXHJcblx0XHRpZiB4ID49IGwgYW5kIHggPD0gciBhbmQgeSA+PSB0IGFuZCB5IDw9IGJcclxuXHRcdFx0QGluZGV4ID0gTWF0aC5yb3VuZCgoeCAtIGwpIC8gKHIgLSBsKSAqIChAYmF0dGxlTG9nWydsb2cnXS5sZW5ndGggLSAxKSlcclxuXHRcdFx0QHN0YXRlID0gJ3ZpZXcnXHJcblx0XHRcdEBvZmZzZXQgPSAwLjBcclxuXHJcblx0a2V5OiAoZXZlbnQpIC0+XHJcblxyXG5cdFx0aWYgZXZlbnQud2hpY2ggPT0gMzJcclxuXHRcdFx0QHBhdXNlID0gIUBwYXVzZVxyXG5cclxuXHJcblx0XHRpZiBldmVudC53aGljaCA9PSAzN1xyXG5cdFx0XHRAaW5kZXggPSBNYXRoLm1heChAaW5kZXggLSAxLCAwKVxyXG5cdFx0XHRAb2Zmc2V0ID0gMS4wXHJcblx0XHRcdEBzdGF0ZSA9ICd2aWV3J1xyXG5cclxuXHRcdGlmIGV2ZW50LndoaWNoID09IDM5XHJcblx0XHRcdEBpbmRleCA9IE1hdGgubWluKEBpbmRleCArIDEsIEBiYXR0bGVMb2dbJ2xvZyddLmxlbmd0aCAtIDEpXHJcblx0XHRcdEBvZmZzZXQgPSAxLjBcclxuXHRcdFx0QHN0YXRlID0gJ3ZpZXcnXHJcblxyXG5cclxuXHRyZXF1ZXN0RnJhbWU6ICh0aW1lKSAtPlxyXG5cclxuXHRcdGRlbHRhID0gTWF0aC5tYXgodGltZSAtIEBsYXN0VGltZSwgMClcclxuXHRcdEBsYXN0VGltZSA9IHRpbWVcclxuXHRcdEBhY2N1bXVsYXRvciArPSBkZWx0YVxyXG5cclxuXHRcdHdoaWxlIEBhY2N1bXVsYXRvciA+PSBjb25maWcuaW50ZXJ2YWxcclxuXHJcblx0XHRcdEBhY2N1bXVsYXRvciAtPSBjb25maWcuaW50ZXJ2YWxcclxuXHRcdFx0QGRyYXcoY29uZmlnLmludGVydmFsIC8gMTAwMClcclxuXHJcblx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCh0aW1lKSA9PiBAcmVxdWVzdEZyYW1lKHRpbWUpKVxyXG5cclxuXHJcblx0c3RhcnQ6IC0+XHJcblxyXG5cdFx0aWYgQGxvYWQoKVxyXG5cclxuXHRcdFx0QGxhc3RUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuXHRcdFx0QGFjY3VtdWxhdG9yID0gMC4wXHJcblx0XHRcdEByZXF1ZXN0RnJhbWUoQGxhc3RUaW1lKVxyXG5cclxuXHJcblxyXG5cclxuJCgtPlxyXG5cclxuXHQkKCcuYmF0dGxlJykuYmluZCgnc2hvdycsIC0+XHJcblxyXG5cdFx0YmF0dGxlID0gbmV3IEJhdHRsZSh0aGlzKVxyXG5cdFx0YmF0dGxlLnN0YXJ0KClcclxuXHRcclxuXHQpLmZpbHRlcignOnZpc2libGUnKS50cmlnZ2VyKCdzaG93JylcclxuXHJcbikiLCJcclxuXHJcbmNsYXNzIEBDaGF0XHJcblxyXG5cdGRlZmF1bHRzID0ge1xyXG5cclxuXHRcdG1lc3NhZ2VVcmw6IG51bGwsXHJcblx0XHRwbGF5ZXJVcmw6IG51bGwsXHJcblx0XHRlbW90aWNvblVybDogbnVsbCxcclxuXHRcdGludGVydmFsOiAyLFxyXG5cdFx0aGlzdG9yeTogMCxcclxuXHRcdG1pbkxlbmd0aDogMSxcclxuXHRcdG1heExlbmd0aDogNTEyLFxyXG5cdFx0Y29vbGRvd246IDYwLFxyXG5cdFx0am9pbjogMTIwLFxyXG5cclxuXHRcdGFsbG93U2VuZDogdHJ1ZSxcclxuXHRcdGFsbG93UmVjZWl2ZTogdHJ1ZSxcclxuXHRcdHNlbmRFeHRyYToge30sXHJcblx0XHRyZWNlaXZlRXh0cmE6IHt9LFxyXG5cdFx0c2VuZE1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0cmVjZWl2ZU1ldGhvZDogJ0dFVCcsXHJcblx0fVxyXG5cclxuXHRjb21tYW5kcyA9IHtcclxuXHJcblx0XHQnY2xlYXInOiAnY2xlYXJPdXRwdXQnLFxyXG5cdH1cclxuXHJcblxyXG5cclxuXHJcblx0Y29uc3RydWN0b3I6IChlbGVtZW50LCBvcHRpb25zKSAtPlxyXG5cclxuXHRcdCNhbGVydCgnd2VsY29tZScpXHJcblxyXG5cdFx0b3B0ID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zKVxyXG5cclxuXHRcdEBtZXNzYWdlVXJsID0gb3B0Lm1lc3NhZ2VVcmxcclxuXHRcdEBwbGF5ZXJVcmwgPSBvcHQucGxheWVyVXJsXHJcblx0XHRAZW1vdGljb25zID0gbmV3IEVtb3RpY29ucygpXHJcblxyXG5cclxuXHRcdEBhbGxvd1NlbmQgPSBvcHQuYWxsb3dTZW5kXHJcblx0XHRAYWxsb3dSZWNlaXZlID0gb3B0LmFsbG93UmVjZWl2ZVxyXG5cdFx0QHJlY2VpdmVFeHRyYSA9IG9wdC5yZWNlaXZlRXh0cmFcclxuXHRcdEBzZW5kRXh0cmEgPSBvcHQuc2VuZEV4dHJhXHJcblx0XHRAcmVjZWl2ZU1ldGhvZCA9IG9wdC5yZWNlaXZlTWV0aG9kXHJcblx0XHRAc2VuZE1ldGhvZCA9IG9wdC5zZW5kTWV0aG9kXHJcblxyXG5cclxuXHJcblxyXG5cdFx0QGlucHV0ID0gJChlbGVtZW50KS5maW5kKCcuaW5wdXQnKVxyXG5cdFx0QG91dHB1dCA9ICQoZWxlbWVudCkuZmluZCgnLm91dHB1dCcpXHJcblx0XHRAc2VuZEJ0biA9ICQoZWxlbWVudCkuZmluZCgnLnNlbmQnKVxyXG5cdFx0QGNsZWFyQnRuID0gJChlbGVtZW50KS5maW5kKCcuY2xlYXInKVxyXG5cdFx0QGVtb3RpY29uc0J0biA9ICQoZWxlbWVudCkuZmluZCgnLmVtb3RpY29ucycpXHJcblxyXG5cclxuXHRcdEBlbW90aWNvbnMucG9wb3ZlcihAZW1vdGljb25zQnRuLCBAaW5wdXQpXHJcblxyXG5cdFx0QG91dHB1dFswXS5zY3JvbGxUb3AgPSBAb3V0cHV0WzBdLnNjcm9sbEhlaWdodFxyXG5cclxuXHRcdCQoQGlucHV0KS5rZXlkb3duKChldmVudCkgPT4gQG9uS2V5KGV2ZW50KSlcclxuXHJcblxyXG5cdFx0JChAc2VuZEJ0bikuY2xpY2soID0+XHJcblxyXG5cdFx0XHRAc2VuZCgpXHJcblx0XHRcdEBjbGVhcklucHV0KClcclxuXHRcdClcclxuXHJcblx0XHQkKEBjbGVhckJ0bikuY2xpY2soID0+XHJcblxyXG5cdFx0XHRAY2xlYXJPdXRwdXQoKVxyXG5cdFx0KVxyXG5cclxuXHJcblxyXG5cdFx0QGludGVydmFsID0gb3B0LmludGVydmFsXHJcblxyXG5cclxuXHRcdEBqb2luID0gb3B0LmpvaW5cclxuXHJcblx0XHRAY29vbGRvd24gPSBvcHQuY29vbGRvd25cclxuXHRcdEBzZW50ID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCkgLSBAY29vbGRvd25cclxuXHJcblx0XHRAdG91Y2goKVxyXG5cdFx0QHRpbWUgPSBNYXRoLm1heChAdGltZSAtIG9wdC5oaXN0b3J5LCAwKVxyXG5cclxuXHJcblx0XHRAcmVjZWl2ZSgpXHJcblx0XHRcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHRnZXRFcnJvclRleHQ6IChuYW1lLCBhcmdzKSAtPlxyXG5cclxuXHRcdHRleHQgPSBpMThuLmNoYXQuZXJyb3JzW25hbWVdID8gaTE4bi5jaGF0LmVycm9ycy51bmtub3duXHJcblxyXG5cdFx0aWYgYXJncz8gYW5kIHR5cGVvZihhcmdzKSA9PSAnb2JqZWN0J1xyXG5cclxuXHRcdFx0Zm9yIGssIHYgb2YgYXJnc1xyXG5cdFx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoJzonICsgaywgdilcclxuXHJcblx0XHR0ZXh0XHJcblxyXG5cclxuXHJcblx0ZXJyb3I6IChuYW1lLCBhcmdzKSAtPlxyXG5cclxuXHRcdGFsZXJ0ID0gJCgnPGRpdj48L2Rpdj4nKVxyXG5cdFx0XHQuYWRkQ2xhc3MoJ2FsZXJ0JylcclxuXHRcdFx0LmFkZENsYXNzKCdhbGVydC1kYW5nZXInKVxyXG5cdFx0XHQudGV4dChAZ2V0RXJyb3JUZXh0KG5hbWUsIGFyZ3MpKVxyXG5cclxuXHRcdCQoQG91dHB1dClcclxuXHRcdFx0LmFwcGVuZChhbGVydClcclxuXHJcblx0YWxlcnQ6IChuYW1lLCBhcmdzKSAtPlxyXG5cclxuXHRcdGFsZXJ0KEBnZXRFcnJvclRleHQobmFtZSwgYXJncykpXHJcblxyXG5cclxuXHJcblxyXG5cdHRvdWNoOiAtPlxyXG5cdFx0QHRpbWUgPSBNYXRoLnJvdW5kKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKVxyXG5cclxuXHJcblx0c2VuZDogLT5cclxuXHJcblx0XHRub3cgPSBNYXRoLnJvdW5kKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKVxyXG5cdFx0bWVzc2FnZSA9ICQoQGlucHV0KS52YWwoKVxyXG5cclxuXHRcdG1hdGNoZXMgPSBtZXNzYWdlLm1hdGNoKC9eXFwvKFxcdyspL2kpXHJcblxyXG5cclxuXHJcblx0XHRpZiBtYXRjaGVzPyBhbmQgbWF0Y2hlc1sxXT9cclxuXHRcdFx0Y29tbWFuZCA9IG1hdGNoZXNbMV1cclxuXHJcblx0XHRcdGZvciBrLCB2IG9mIGNvbW1hbmRzXHJcblxyXG5cdFx0XHRcdGlmIGNvbW1hbmQudG9Mb3dlckNhc2UoKSA9PSBrLnRvTG93ZXJDYXNlKClcclxuXHJcblx0XHRcdFx0XHRmdW5jID0gdGhpc1t2XVxyXG5cclxuXHRcdFx0XHRcdGlmIHR5cGVvZihmdW5jKSA9PSAnZnVuY3Rpb24nXHJcblx0XHRcdFx0XHRcdGZ1bmMuY2FsbCh0aGlzKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdEBlcnJvcignY21kTm90Rm91bmQnLCB7J25hbWUnOiBjb21tYW5kfSlcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cclxuXHRcdGlmIEBhbGxvd1NlbmRcclxuXHJcblx0XHRcdGlmIG1lc3NhZ2UubGVuZ3RoIDwgQG1pbkxlbmd0aFxyXG5cdFx0XHRcdEBhbGVydCgndG9vU2hvcnQnLCB7J21pbic6IEBtaW5MZW5ndGh9KVxyXG5cdFx0XHRcdHJldHVybiBcclxuXHJcblx0XHRcdGlmIG1lc3NhZ2UubGVuZ3RoID4gQG1heExlbmd0aFxyXG5cdFx0XHRcdGFsZXJ0KCd0b29Mb25nJywgeydtYXgnOiBAbWF4TGVuZ3RofSlcclxuXHRcdFx0XHRyZXR1cm5cclxuXHJcblx0XHRcdGlmIEBzZW50ICsgQGNvb2xkb3duID4gbm93XHJcblx0XHRcdFx0QGFsZXJ0KCdjb29sZG93bicpXHJcblx0XHRcdFx0cmV0dXJuXHJcblxyXG5cclxuXHRcdFx0ZGF0YSA9ICQuZXh0ZW5kKHt9LCBAc2VuZEV4dHJhLCB7bWVzc2FnZTogJChAaW5wdXQpLnZhbCgpfSlcclxuXHJcblx0XHRcdCQuYWpheCh7XHJcblxyXG5cdFx0XHRcdHVybDogQG1lc3NhZ2VVcmwsXHJcblx0XHRcdFx0c3VjY2VzczogKGRhdGEpID0+IEBvblNlbnQoZGF0YSksXHJcblx0XHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRcdG1ldGhvZDogQHNlbmRNZXRob2QsXHRcclxuXHRcdFx0fSlcclxuXHJcblx0XHRcdEBzZW50ID0gbm93XHJcblx0XHRcdCQoQHNlbmRCdG4pLmRhdGEoJ3RpbWUnLCBAc2VudCArIEBjb29sZG93bilcclxuXHJcblx0XHRlbHNlXHJcblxyXG5cdFx0XHRAZXJyb3IoJ2Nhbm5vdFNlbmQnKVxyXG5cclxuXHJcblx0cmVjZWl2ZTogLT5cclxuXHJcblx0XHRpZiBAYWxsb3dSZWNlaXZlXHJcblxyXG5cdFx0XHRkYXRhID0gJC5leHRlbmQoe30sIEByZWNlaXZlRXh0cmEsIHt0aW1lOiBAdGltZX0pXHJcblxyXG5cdFx0XHQkLmFqYXgoe1xyXG5cclxuXHRcdFx0XHR1cmw6IEBtZXNzYWdlVXJsLFxyXG5cdFx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdFx0Y29tcGxldGU6ID0+IEBvbkNvbXBsZXRlKCksXHJcblx0XHRcdFx0c3VjY2VzczogKGRhdGEpID0+IEBvblJlY2VpdmVkKGRhdGEpLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXHJcblx0XHRcdFx0bWV0aG9kOiBAcmVjZWl2ZU1ldGhvZCxcclxuXHRcdFx0fSlcclxuXHJcblx0XHRcdEB0b3VjaCgpXHJcblx0XHRlbHNlXHJcblxyXG5cdFx0XHRAZXJyb3IoJ2Nhbm5vdFJlY2VpdmUnKVxyXG5cclxuXHJcblxyXG5cdGNsZWFyT3V0cHV0OiAtPlxyXG5cclxuXHRcdCQoQG91dHB1dCkuZW1wdHkoKVxyXG5cclxuXHJcblx0Y2xlYXJJbnB1dDogLT5cclxuXHJcblx0XHQkKEBpbnB1dCkudmFsKCcnKVxyXG5cclxuXHJcblxyXG5cdGdldE1lc3NhZ2U6IChkYXRhKSAtPlxyXG5cdFx0JCgnPHA+PC9wPicpXHJcblx0XHRcdC5odG1sKEBlbW90aWNvbnMuaW5zZXJ0KGRhdGEubWVzc2FnZSkpXHJcblx0XHRcdC5hcHBlbmQoXHJcblxyXG5cdFx0XHRcdCQoJzxzbWFsbD48L3NtYWxsPicpXHJcblx0XHRcdFx0XHQuYWRkQ2xhc3MoJ2NoYXQtdGltZScpXHJcblx0XHRcdFx0XHQuZGF0YSgndGltZScsIGRhdGEudGltZSlcclxuXHRcdFx0KVxyXG5cclxuXHJcblxyXG5cdG5ld01lc3NhZ2U6IChkYXRhKSAtPlxyXG5cclxuXHRcdHJvdyA9ICQoJzxkaXY+PC9kaXY+JylcclxuXHRcdFx0LmFkZENsYXNzKCdyb3cnKVxyXG5cdFx0XHQuYWRkQ2xhc3MoJ2NoYXQtbWVzc2FnZScpXHJcblx0XHRcdC5kYXRhKCd0aW1lJywgZGF0YS50aW1lKVxyXG5cdFx0XHQuZGF0YSgnYXV0aG9yJywgZGF0YS5hdXRob3IpXHJcblxyXG5cdFx0Y29sMSA9ICQoJzxkaXY+PC9kaXY+JylcclxuXHRcdFx0LmFkZENsYXNzKCdjb2wteHMtMScpXHJcblxyXG5cdFx0Y29sMiA9ICQoJzxkaXY+PC9kaXY+JylcclxuXHRcdFx0LmFkZENsYXNzKCdjb2wteHMtMTEnKVxyXG5cclxuXHRcdGlmIEBwbGF5ZXJVcmw/XHJcblxyXG5cdFx0XHRkaXYxID0gJCgnPGE+PC9hPicpXHJcblx0XHRcdFx0LmF0dHIoJ2hyZWYnLCBAZ2V0UGxheWVyVXJsKGRhdGEuYXV0aG9yKSlcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ2NoYXQtYXV0aG9yJylcclxuXHRcdGVsc2VcclxuXHRcdFxyXG5cdFx0XHRkaXYxID0gJCgnPGRpdj48L2Rpdj4nKVxyXG5cdFx0XHRcdC5hZGRDbGFzcygnY2hhdC1hdXRob3InKVxyXG5cclxuXHJcblxyXG5cdFx0ZGl2MiA9ICQoJzxkaXY+PC9kaXY+JylcclxuXHRcdFx0LmFkZENsYXNzKCdjaGF0LWNvbnRlbnQnKVxyXG5cclxuXHJcblxyXG5cclxuXHRcdGF2YXRhciA9ICQoJzxpbWc+PC9pbWc+JylcclxuXHRcdFx0LmFkZENsYXNzKCdpbWctcmVzcG9uc2l2ZScpXHJcblx0XHRcdC5hZGRDbGFzcygnY2hhdC1hdmF0YXInKVxyXG5cdFx0XHQuYXR0cignc3JjJywgZGF0YS5hdmF0YXIpXHJcblxyXG5cclxuXHRcdGF1dGhvciA9ICQoJzxwPjwvcD4nKS5hcHBlbmQoXHJcblxyXG5cdFx0XHQkKCc8c3Ryb25nPjwvc3Ryb25nPicpXHJcblx0XHRcdFx0LmFkZENsYXNzKCdjaGF0LW5hbWUnKVxyXG5cdFx0XHRcdC50ZXh0KGRhdGEuYXV0aG9yKSxcclxuXHRcdClcclxuXHJcblx0XHRtZXNzYWdlID0gQGdldE1lc3NhZ2UoZGF0YSlcclxuXHJcblxyXG5cclxuXHRcdCQoZGl2MSkuYXBwZW5kKGF2YXRhcikuYXBwZW5kKGF1dGhvcilcclxuXHRcdCQoZGl2MikuYXBwZW5kKG1lc3NhZ2UpXHJcblx0XHQkKGNvbDEpLmFwcGVuZChkaXYxKVxyXG5cdFx0JChjb2wyKS5hcHBlbmQoZGl2MilcclxuXHRcdCQocm93KS5hcHBlbmQoY29sMSkuYXBwZW5kKGNvbDIpXHJcblx0XHQkKEBvdXRwdXQpLmFwcGVuZChyb3cpXHJcblxyXG5cclxuXHRtb2RpZnlNZXNzYWdlOiAobWVzc2FnZSwgZGF0YSkgLT5cclxuXHJcblx0XHQkKG1lc3NhZ2UpLmZpbmQoJy5jaGF0LWNvbnRlbnQnKS5hcHBlbmQoXHJcblxyXG5cdFx0XHRAZ2V0TWVzc2FnZShkYXRhKVxyXG5cdFx0KVxyXG5cclxuXHJcblxyXG5cdGFkZE1lc3NhZ2U6IChkYXRhKS0+XHJcblxyXG5cclxuXHRcdHNjcm9sbCA9IChAb3V0cHV0WzBdLnNjcm9sbEhlaWdodCAtIEBvdXRwdXRbMF0uc2Nyb2xsVG9wIC0gQG91dHB1dFswXS5jbGllbnRIZWlnaHQpIDw9IDFcclxuXHRcdG1lc3NhZ2UgPSAkKEBvdXRwdXQpLmNoaWxkcmVuKCkubGFzdCgpXHJcblxyXG5cclxuXHJcblx0XHRpZiBtZXNzYWdlLmxlbmd0aCA9PSAwIG9yICEkKG1lc3NhZ2UpLmlzKCcuY2hhdC1tZXNzYWdlJylcclxuXHRcdFx0XHJcblx0XHRcdEBuZXdNZXNzYWdlKGRhdGEpXHJcblx0XHRlbHNlXHJcblxyXG5cdFx0XHR0aW1lID0gJChtZXNzYWdlKS5kYXRhKCd0aW1lJylcclxuXHRcdFx0YXV0aG9yID0gJChtZXNzYWdlKS5kYXRhKCdhdXRob3InKVxyXG5cclxuXHRcdFx0aWYgYXV0aG9yID09IGRhdGEuYXV0aG9yIGFuZCAoZGF0YS50aW1lIC0gdGltZSkgPD0gQGpvaW5cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRAbW9kaWZ5TWVzc2FnZShtZXNzYWdlLCBkYXRhKVxyXG5cdFx0XHRlbHNlXHJcblxyXG5cdFx0XHRcdEBuZXdNZXNzYWdlKGRhdGEpXHJcblxyXG5cclxuXHJcblx0XHRpZiBzY3JvbGxcclxuXHRcdFx0QG91dHB1dFswXS5zY3JvbGxUb3AgPSBAb3V0cHV0WzBdLnNjcm9sbEhlaWdodCAtIDFcclxuXHJcblxyXG5cclxuXHJcblx0b25TZW50OiAoZGF0YSkgLT5cclxuXHJcblx0XHRAZXJyb3IoZGF0YS5yZWFzb24sIGRhdGEuYXJncykgaWYgZGF0YS5zdGF0dXMgPT0gJ2Vycm9yJ1xyXG5cclxuXHJcblx0b25SZWNlaXZlZDogKGRhdGEpIC0+XHJcblxyXG5cdFx0Zm9yIG1lc3NhZ2UgaW4gZGF0YVxyXG5cdFx0XHRAYWRkTWVzc2FnZShtZXNzYWdlKVxyXG5cclxuXHRvbkNvbXBsZXRlOiAtPlxyXG5cclxuXHRcdHNldFRpbWVvdXQoPT5cclxuXHJcblx0XHRcdEByZWNlaXZlKClcclxuXHRcdCwgQGludGVydmFsICogMTAwMClcclxuXHJcblxyXG5cdG9uS2V5OiAoZXZlbnQpIC0+XHJcblxyXG5cdFx0aWYgZXZlbnQud2hpY2ggPT0gMTNcclxuXHRcdFx0QHNlbmQoKVxyXG5cdFx0XHRAY2xlYXJJbnB1dCgpXHJcblxyXG5cclxuXHJcblxyXG5cdGdldFBsYXllclVybDogKG5hbWUpIC0+XHJcblxyXG5cdFx0cmV0dXJuIEBwbGF5ZXJVcmwucmVwbGFjZSgne25hbWV9JywgbmFtZSlcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4kKC0+XHJcblxyXG5cdHVwZGF0ZSA9ICgpIC0+XHJcblxyXG5cdFx0bm93ID0gTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMClcclxuXHJcblx0XHQkKCcuY2hhdCAuY2hhdC10aW1lJykuZWFjaCgtPlxyXG5cclxuXHRcdFx0dGltZSA9IHBhcnNlSW50KCQodGhpcykuZGF0YSgndGltZScpKVxyXG5cdFx0XHRpbnRlcnZhbCA9IG5vdyAtIHRpbWVcclxuXHJcblxyXG5cclxuXHRcdFx0aWYgaW50ZXJ2YWwgPCA2MFxyXG5cclxuXHRcdFx0XHR0ZXh0ID0gaTE4bi5jaGF0LmZld1NlY3NcclxuXHRcdFx0ZWxzZVxyXG5cclxuXHRcdFx0XHR0ZXh0ID0gd2luZG93LnRpbWVGb3JtYXRTaG9ydChpbnRlcnZhbClcclxuXHJcblx0XHRcdCQodGhpcykudGV4dCh0ZXh0ICsgJyAnICsgaTE4bi5jaGF0LmFnbylcclxuXHRcdClcclxuXHJcblx0XHQkKCcuY2hhdCAuc2VuZCcpLmVhY2goLT5cclxuXHJcblx0XHRcdGlmICQodGhpcykuZGF0YSgnZGlzYWJsZWQnKSAhPSAndHJ1ZSdcclxuXHJcblx0XHRcdFx0dGltZSA9IHBhcnNlSW50KCQodGhpcykuZGF0YSgndGltZScpKVxyXG5cdFx0XHRcdHRleHQgPSAkKHRoaXMpLmRhdGEoJ3RleHQnKVxyXG5cdFx0XHRcdGludGVydmFsID0gdGltZSAtIG5vd1xyXG5cclxuXHJcblx0XHRcdFx0aWYgaW50ZXJ2YWwgPiAwXHJcblxyXG5cdFx0XHRcdFx0JCh0aGlzKVxyXG5cdFx0XHRcdFx0XHQudGV4dCh3aW5kb3cudGltZUZvcm1hdChpbnRlcnZhbCkpXHJcblx0XHRcdFx0XHRcdC5hZGRDbGFzcygnZGlzYWJsZWQnKVxyXG5cdFx0XHRcdGVsc2VcclxuXHJcblx0XHRcdFx0XHQkKHRoaXMpXHJcblx0XHRcdFx0XHRcdC50ZXh0KHRleHQpXHJcblx0XHRcdFx0XHRcdC5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKVxyXG5cclxuXHRcdClcclxuXHJcblxyXG5cdFx0c2V0VGltZW91dCh1cGRhdGUsIDEwMDApXHJcblxyXG5cdHVwZGF0ZSgpXHJcbikiLCJcclxuXHJcbnVwZGF0ZSA9ICgpIC0+XHJcblxyXG5cdGRhdGUgPSBuZXcgRGF0ZSgpXHJcblx0bm93ID0gTWF0aC5yb3VuZChkYXRlLmdldFRpbWUoKSAvIDEwMDApXHJcblx0JCgnLmN1cnJlbnQtdGltZScpLnRleHQoZGF0ZS50b1VUQ1N0cmluZygpKVxyXG5cclxuXHQkKCcudGltZS1sZWZ0JykuZWFjaCgtPlxyXG5cclxuXHRcdHRvID0gJCh0aGlzKS5kYXRhKCd0bycpXHJcblx0XHQkKHRoaXMpLnRleHQod2luZG93LnRpbWVGb3JtYXQoTWF0aC5tYXgodG8gLSBub3csIDApKSlcclxuXHQpXHJcblxyXG5cclxuXHRzZXRUaW1lb3V0KHVwZGF0ZSwgMTAwMClcclxuXHJcblxyXG5cclxuJCAtPlxyXG5cdHVwZGF0ZSgpIiwiXHJcblxyXG5kaWFsb2dzID0gW11cclxuXHJcblxyXG5zaG93ID0gKGRpYWxvZykgLT5cclxuXHJcblx0ZGlzbWlzc2libGUgPSAoJChkaWFsb2cpLmRhdGEoJ2Rpc21pc3NpYmxlJykpID8gdHJ1ZVxyXG5cclxuXHJcblxyXG5cdCQoZGlhbG9nKS5iaW5kKCdzaG93bi5icy5tb2RhbCcsIChldmVudCkgLT5cclxuXHJcblx0XHQkKHRoaXMpLmZpbmQoJy5iYXR0bGUnKS50cmlnZ2VyKCdzaG93JylcclxuXHQpXHJcblxyXG5cclxuXHRpZiBkaXNtaXNzaWJsZVxyXG5cclxuXHRcdCQoZGlhbG9nKS5tb2RhbCh7YmFja2Ryb3A6IHRydWUsIHNob3c6IHRydWUsIGtleWJvYXJkOiB0cnVlfSlcclxuXHJcblx0ZWxzZVxyXG5cclxuXHRcdCQoZGlhbG9nKS5tb2RhbCh7YmFja2Ryb3A6ICdzdGF0aWMnLCBzaG93OiB0cnVlLCBrZXlib2FyZDogZmFsc2V9KVxyXG5cclxuXHJcbiQgLT5cclxuXHRkaWFsb2dzID0gJCgnLm1vZGFsLmF1dG9zaG93JylcclxuXHJcblxyXG5cdCQoZGlhbG9ncykuZWFjaCgoaW5kZXgpIC0+XHJcblxyXG5cdFx0aWYgaW5kZXggPT0gMFxyXG5cdFx0XHRzaG93KHRoaXMpXHJcblxyXG5cdFx0aWYgaW5kZXggPCAoZGlhbG9ncy5sZW5ndGggLSAxKVxyXG5cdFx0XHQkKHRoaXMpLm9uKCdoaWRkZW4uYnMubW9kYWwnLCAoZXZlbnQpIC0+XHJcblxyXG5cdFx0XHRcdHNob3coZGlhbG9nc1tpbmRleCArIDFdKVxyXG5cdFx0XHQpXHJcblx0KSIsIlxyXG5cclxuXHJcbmNsYXNzIEBFbW90aWNvbnNcclxuXHJcblx0ZGVmYXVsdHMgPSB7XHJcblxyXG5cdFx0ZW1vdGljb25zOiB7XHJcblxyXG5cdFx0XHQnOyknOiAnYmxpbmsucG5nJyxcclxuXHRcdFx0JzpEJzogJ2dyaW4ucG5nJyxcclxuXHRcdFx0JzooJzogJ3NhZC5wbmcnLFxyXG5cdFx0XHQnOiknOiAnc21pbGUucG5nJyxcclxuXHRcdFx0J0IpJzogJ3N1bmdsYXNzZXMucG5nJyxcclxuXHRcdFx0J08ubyc6ICdzdXJwcmlzZWQucG5nJyxcclxuXHRcdFx0JzpwJzogJ3Rvbmd1ZS5wbmcnLCBcclxuXHRcdH0sXHJcblxyXG5cdFx0dXJsOiAnL2ltYWdlcy9lbW90aWNvbnMve25hbWV9JyxcclxuXHR9XHJcblxyXG5cclxuXHJcblx0Y29uc3RydWN0b3I6ICh1cmwsIGVtb3RpY29ucykgLT5cclxuXHJcblx0XHRAdXJsID0gdXJsID8gZGVmYXVsdHMudXJsXHJcblx0XHRAc2V0ID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLmVtb3RpY29ucywgZW1vdGljb25zID8ge30pXHJcblxyXG5cclxuXHRpbnNlcnQ6ICh0ZXh0KSAtPlxyXG5cclxuXHRcdGZvciBrLCB2IG9mIEBzZXRcclxuXHJcblx0XHRcdHVybCA9IEB1cmwucmVwbGFjZSgne25hbWV9JywgdilcclxuXHRcdFx0ZW1vdGljb24gPSAnPGltZyBjbGFzcz1cImVtb3RpY29uXCIgc3JjPVwiJyArIHVybCArICdcIiBhbHQ9XCInICsgayArICdcIiB0aXRsZT1cIicgKyBrICsgJ1wiLz4nXHJcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2VBbGwoaywgZW1vdGljb24pXHJcblxyXG5cclxuXHRcdHRleHRcclxuXHJcblx0cG9wb3ZlcjogKGJ1dHRvbiwgb3V0cHV0KSAtPlxyXG5cclxuXHRcdCQoYnV0dG9uKS5wb3BvdmVyKHtcclxuXHJcblx0XHRcdGh0bWw6IHRydWUsXHJcblx0XHRcdHRyaWdnZXI6ICdjbGljaycsXHJcblx0XHRcdHBsYWNlbWVudDogJ3RvcCcsXHJcblx0XHRcdHRpdGxlOiBpMThuLmVtb3RpY29ucy50aXRsZSxcclxuXHRcdFx0Y29udGVudDogPT4gQGdldFBvcG92ZXJDb250ZW50KG91dHB1dCksXHJcblx0XHRcdHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItdGl0bGVcIj48L2gzPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWNvbnRlbnQgZW1vdGljb24tY29udGFpbmVyXCI+PC9kaXY+PC9kaXY+JyxcclxuXHRcdH0pXHJcblxyXG5cdGdldFBvcG92ZXJDb250ZW50OiAob3V0cHV0KSAtPlxyXG5cclxuXHRcdGNvbnRhaW5lciA9ICQoJzxkaXY+PC9kaXY+JylcclxuXHJcblx0XHRmb3IgaywgdiBvZiBAc2V0XHJcblx0XHRcdHVybCA9IEB1cmwucmVwbGFjZSgne25hbWV9JywgdilcclxuXHRcdFx0aW1nID0gJCgnPGltZz48L2ltZz4nKVxyXG5cdFx0XHRcdC5hZGRDbGFzcygnZW1vdGljb24nKVxyXG5cdFx0XHRcdC5hdHRyKCdzcmMnLCB1cmwpXHJcblx0XHRcdFx0LmF0dHIoJ2FsdCcsIGspXHJcblx0XHRcdFx0LmF0dHIoJ3RpdGxlJywgaylcclxuXHRcdFx0XHQuY2xpY2soLT5cclxuXHJcblx0XHRcdFx0XHQkKG91dHB1dCkudmFsKCQob3V0cHV0KS52YWwoKSArICQodGhpcykuYXR0cignYWx0JykpXHJcblx0XHRcdFx0KVxyXG5cclxuXHRcdFx0JChjb250YWluZXIpLmFwcGVuZChpbWcpXHJcblxyXG5cdFx0cmV0dXJuIGNvbnRhaW5lclxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb3VudGVyID0gMFxyXG5cclxuXHJcbiQoLT5cclxuXHJcblx0ZW1vdGljb25zID0gbmV3IEVtb3RpY29ucygpXHJcblxyXG5cdCQoJ1tkYXRhLWVtb3RpY29ucz10cnVlXScpLmVhY2goLT5cclxuXHJcblx0XHR0ZXh0ID0gJCh0aGlzKS50ZXh0KClcclxuXHRcdHRleHQgPSBlbW90aWNvbnMuaW5zZXJ0KHRleHQpXHJcblx0XHQkKHRoaXMpLmh0bWwodGV4dClcclxuXHQpXHJcbikiLCJ3aWR0aHMgPVxyXG5cdHhzOiA3NjgsXHJcblx0c206IDk5MixcclxuXHRtZDogMTIwMCxcclxuXHJcblxyXG5cclxuZ2V0UHJlZml4ID0gLT5cclxuXHR3aWR0aCA9ICQod2luZG93KS53aWR0aCgpXHJcblxyXG5cdGlmIHdpZHRoIDwgd2lkdGhzLnhzXHJcblx0XHRbJ3hzJ11cclxuXHRlbHNlIGlmIHdpZHRoIDwgd2lkdGhzLnNtXHJcblx0XHRbJ3NtJywgJ3hzJ11cclxuXHRlbHNlIGlmIHdpZHRoIDwgd2lkdGhzLm1kXHJcblx0XHRbJ21kJywgJ3NtJywgJ3hzJ11cclxuXHRlbHNlXHJcblx0XHRbJ2xnJywgJ21kJywgJ3NtJywgJ3hzJ11cclxuXHJcblxyXG5nZXRDb2x1bW5zID0gKHByZWZpeCkgLT5cclxuXHRyZXN1bHQgPSBbXVxyXG5cdGZvciBwIGluIHByZWZpeFxyXG5cdFx0Zm9yIGkgaW4gWzEuLjEyXVxyXG5cdFx0XHRyZXN1bHQucHVzaChcImNvbC0je3B9LSN7aX1cIilcclxuXHRyZXN1bHRcclxuXHJcblxyXG5cclxuZ2V0U2l6ZSA9IChvYmplY3QsIHByZWZpeCkgLT5cclxuXHRmb3IgcCBpbiBwcmVmaXhcclxuXHRcdHJlZ2V4cCA9IG5ldyBSZWdFeHAoXCJjb2wtI3twfS0oXFxcXGQrKVwiKVxyXG5cdFx0c2l6ZSA9ICQob2JqZWN0KS5hdHRyKCdjbGFzcycpLm1hdGNoKHJlZ2V4cCk/WzFdXHJcblx0XHRyZXR1cm4gcGFyc2VJbnQoc2l6ZSkgaWYgc2l6ZT9cclxuXHRyZXR1cm4gbnVsbFxyXG5cclxuXHJcblxyXG5cclxuZXF1YWxpemUgPSAtPlxyXG5cdHByZWZpeCA9IGdldFByZWZpeCgpXHJcblx0Y29sdW1ucyA9IGdldENvbHVtbnMocHJlZml4KVxyXG5cdHNlbGVjdG9yID0gJy4nICsgY29sdW1ucy5qb2luKCcsLicpXHJcblx0XHJcblx0I2NvbnNvbGUubG9nKCdwcmVmaXg6ICcsIHByZWZpeClcclxuXHQjY29uc29sZS5sb2coJ2NvbHVtbnM6ICcsIGNvbHVtbnMpXHJcblx0I2NvbnNvbGUubG9nKCdzZWxlY3RvcjogJywgc2VsZWN0b3IpXHJcblxyXG5cclxuXHQkKCcucm93LmVxdWFsaXplJykuZWFjaCAtPlxyXG5cdFx0I2NvbnNvbGUubG9nKCduZXcgcm93JylcclxuXHRcdGhlaWdodHMgPSBbXVxyXG5cdFx0cm93ID0gMFxyXG5cdFx0c3VtID0gMFxyXG5cclxuXHRcdCQodGhpcykuY2hpbGRyZW4oc2VsZWN0b3IpLmVhY2ggLT5cclxuXHRcdFx0c2l6ZSA9IGdldFNpemUodGhpcywgcHJlZml4KVxyXG5cdFx0XHRzdW0gKz0gc2l6ZVxyXG5cclxuXHRcdFx0I2NvbnNvbGUubG9nKCdzaXplOiAnLCBzaXplKVxyXG5cdFx0XHQjY29uc29sZS5sb2coJ3N1bTogJywgc3VtKVxyXG5cclxuXHRcdFx0aWYgc3VtID4gMTJcclxuXHRcdFx0XHRzdW0gLT0gMTJcclxuXHRcdFx0XHRyb3crK1xyXG5cdFx0XHRcdCNjb25zb2xlLmxvZygnbmV4dCByb3cgJywgcm93LCBzaXplKVxyXG5cclxuXHRcdFx0aGVpZ2h0c1tyb3ddID89IDBcclxuXHRcdFx0aGVpZ2h0c1tyb3ddID0gTWF0aC5tYXgoaGVpZ2h0c1tyb3ddLCAkKHRoaXMpLmhlaWdodCgpKVxyXG5cdFx0XHQjY29uc29sZS5sb2coJ2hlaWdodCAnLCBoZWlnaHRzW3Jvd10pXHJcblxyXG5cdFx0cm93ID0gMFxyXG5cdFx0c3VtID0gMFxyXG5cdFx0Y29sID0gbnVsbFxyXG5cclxuXHRcdCQodGhpcykuY2hpbGRyZW4oc2VsZWN0b3IpLmVhY2ggLT5cclxuXHRcdFx0c3VtICs9IGdldFNpemUodGhpcywgcHJlZml4KVxyXG5cdFx0XHRjb2wgPz0gdGhpc1xyXG5cclxuXHRcdFx0aWYgc3VtID4gMTJcclxuXHRcdFx0XHRzdW0gLT0gMTJcclxuXHRcdFx0XHRyb3crK1xyXG5cdFx0XHRcdGNvbCA9IHRoaXNcclxuXHJcblx0XHRcdCQodGhpcykuaGVpZ2h0KGhlaWdodHNbcm93XSlcclxuXHJcblx0XHRocyA9IE1hdGgucm91bmQgKDEyIC0gc3VtKSAvIDJcclxuXHRcdGlmIGNvbD8gYW5kIGhzID4gMFxyXG5cdFx0XHRwID0gcHJlZml4WzBdXHJcblxyXG5cdFx0XHRmb3IgaSBpbiBbMS4uMTJdXHJcblx0XHRcdFx0JChjb2wpLnJlbW92ZUNsYXNzKFwiY29sLSN7cH0tb2Zmc2V0LSN7aX1cIilcclxuXHRcdFx0JChjb2wpLmFkZENsYXNzKFwiY29sLSN7cH0tb2Zmc2V0LSN7aHN9XCIpXHJcblxyXG5hZnRlckxvYWRlZCA9IC0+XHJcblx0JCgnaW1nJylcclxuXHRcdC5vbignbG9hZCcsIGVxdWFsaXplKVxyXG5cclxuXHJcbiQgLT5cclxuXHQjYWZ0ZXJMb2FkZWQoKVxyXG5cdCMkKHdpbmRvdykub24oJ3Jlc2l6ZWQnLCBlcXVhbGl6ZSlcclxuXHQjZXF1YWxpemUoKSIsInNwZWVkID0gMVxyXG5cclxuXHJcbmtleURvd24gPSAoZXZlbnQpIC0+XHJcblx0c3BlZWQgPSAxMCBpZiBldmVudC53aGljaCA9PSAxN1xyXG5cdHNwZWVkID0gMTAwIGlmIGV2ZW50LndoaWNoID09IDE2XHJcblxyXG5rZXlVcCA9IChldmVudCkgLT5cclxuXHRzcGVlZCA9IDEgaWYgZXZlbnQud2hpY2ggPT0gMTcgb3IgZXZlbnQud2hpY2ggPT0gMTZcclxuXHJcblxyXG5tb3VzZVdoZWVsID0gKGV2ZW50KSAtPlxyXG5cdGNvbnNvbGUubG9nKCdtb3VzZVdoZWVsJylcclxuXHRtaW4gPSBwYXJzZUludCAoJCh0aGlzKS5hdHRyKCdtaW4nKSA/IDApXHJcblx0bWF4ID0gcGFyc2VJbnQgKCQodGhpcykuYXR0cignbWF4JykgPyAxMDApXHJcblx0c3RlcCA9IHBhcnNlSW50ICgkKHRoaXMpLmF0dHIoJ3N0ZXAnKSA/IDEpXHJcblxyXG5cdGNoYW5nZSA9IGV2ZW50LmRlbHRhWSAqIHN0ZXAgKiBzcGVlZFxyXG5cdHZhbHVlID0gcGFyc2VJbnQgJCh0aGlzKS52YWwoKSA/IDBcclxuXHR2YWx1ZSA9IE1hdGguY2xhbXAgdmFsdWUgKyBjaGFuZ2UsIG1pbiwgbWF4XHJcblxyXG5cdCQodGhpcylcclxuXHRcdC52YWwgdmFsdWVcclxuXHRcdC50cmlnZ2VyICdjaGFuZ2UnXHJcblxyXG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHJcbnJhbmdlQ2hhbmdlZCA9IChldmVudCkgLT5cclxuXHRjb25zb2xlLmxvZygncmFuZ2VDaGFuZ2VkJylcclxuXHRvdXRwdXQgPSAkKHRoaXMpLnBhcmVudCgpLmNoaWxkcmVuKCcucmFuZ2UtdmFsdWUnKVxyXG5cdGJlZm9yZSA9ICgkKG91dHB1dCkuZGF0YSAnYmVmb3JlJykgPyAnJ1xyXG5cdGFmdGVyID0gKCQob3V0cHV0KS5kYXRhICdhZnRlcicpID8gJydcclxuXHR2YWx1ZSA9ICQodGhpcykudmFsKCkgPyAwXHJcblxyXG5cdCQob3V0cHV0KS50ZXh0IGJlZm9yZSArIHZhbHVlICsgYWZ0ZXJcclxuXHJcblxyXG5udW1iZXJEZWNyZWFzZSA9IChldmVudCkgLT5cclxuXHRjb25zb2xlLmxvZygnbnVtYmVyRGVjcmVhc2UnKVxyXG5cdGlucHV0ID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5jaGlsZHJlbignaW5wdXQnKVxyXG5cdG1pbiA9IHBhcnNlSW50ICgkKGlucHV0KS5hdHRyKCdtaW4nKSA/IDApXHJcblx0bWF4ID0gcGFyc2VJbnQgKCQoaW5wdXQpLmF0dHIoJ21heCcpID8gMTAwKVxyXG5cdHN0ZXAgPSBwYXJzZUludCAoJChpbnB1dCkuYXR0cignc3RlcCcpID8gMSlcclxuXHJcblx0dmFsdWUgPSBwYXJzZUludCAoJChpbnB1dCkudmFsKCkgPyAwKVxyXG5cdHZhbHVlID0gTWF0aC5jbGFtcCh2YWx1ZSAtIHNwZWVkICogc3RlcCwgbWluLCBtYXgpXHJcblx0JChpbnB1dCkudmFsKHZhbHVlKS50cmlnZ2VyKCdjaGFuZ2UnKVxyXG5cclxuXHJcbm51bWJlckluY3JlYXNlID0gKGV2ZW50KSAtPlxyXG5cdGNvbnNvbGUubG9nKCdudW1iZXJJbmNyZWFzZScpXHJcblx0aW5wdXQgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLmNoaWxkcmVuKCdpbnB1dCcpXHJcblx0bWluID0gcGFyc2VJbnQgKCQoaW5wdXQpLmF0dHIoJ21pbicpID8gMClcclxuXHRtYXggPSBwYXJzZUludCAoJChpbnB1dCkuYXR0cignbWF4JykgPyAxMDApXHJcblx0c3RlcCA9IHBhcnNlSW50ICgkKGlucHV0KS5hdHRyKCdzdGVwJykgPyAxKVxyXG5cclxuXHR2YWx1ZSA9IHBhcnNlSW50ICgkKGlucHV0KS52YWwoKSA/IDApXHJcblx0dmFsdWUgPSBNYXRoLmNsYW1wKHZhbHVlICsgc3BlZWQgKiBzdGVwLCBtaW4sIG1heClcclxuXHQkKGlucHV0KS52YWwodmFsdWUpLnRyaWdnZXIoJ2NoYW5nZScpXHJcblxyXG5cclxuXHJcblxyXG4kIC0+IFxyXG5cdCQod2luZG93KVxyXG5cdFx0LmtleXVwIGtleVVwXHJcblx0XHQua2V5ZG93biBrZXlEb3duXHJcblxyXG5cdCQoJ2lucHV0W3R5cGU9bnVtYmVyXSwgaW5wdXRbdHlwZT1yYW5nZV0nKVxyXG5cdFx0LmJpbmQgJ21vdXNld2hlZWwnLCBtb3VzZVdoZWVsXHJcblxyXG5cdCQoJ2lucHV0W3R5cGU9cmFuZ2VdJylcclxuXHRcdC5jaGFuZ2UgcmFuZ2VDaGFuZ2VkXHJcblx0XHQubW91c2Vtb3ZlIHJhbmdlQ2hhbmdlZFxyXG5cclxuXHQkKCcubnVtYmVyLW1pbnVzJykuY2hpbGRyZW4oJ2J1dHRvbicpXHJcblx0XHQuY2xpY2sgbnVtYmVyRGVjcmVhc2VcclxuXHJcblxyXG5cdCQoJy5udW1iZXItcGx1cycpLmNoaWxkcmVuKCdidXR0b24nKVxyXG5cdFx0LmNsaWNrIG51bWJlckluY3JlYXNlXHJcblxyXG4iLCJcclxuXHJcblxyXG4kKC0+XHJcblxyXG5cdGNvbnNvbGUubG9nKCQoZG9jdW1lbnQpLnNpemUoKSlcclxuXHJcblx0aGVscCA9IGZhbHNlXHJcblxyXG5cclxuXHRzaXplID0gKGVsZW1lbnQpIC0+XHJcblxyXG5cdFx0e3dpZHRoOiAkKGVsZW1lbnQpLndpZHRoKCksIGhlaWdodDogJChlbGVtZW50KS5oZWlnaHQoKX1cclxuXHJcblx0cG9zaXRpb24gPSAoZWxlbWVudCkgLT5cclxuXHJcblx0XHQkKGVsZW1lbnQpLm9mZnNldCgpXHJcblxyXG5cclxuXHJcblx0c2hvdyA9IC0+XHJcblxyXG5cdFx0aWYgbm90IGhlbHBcclxuXHJcblx0XHRcdGhlbHAgPSB0cnVlXHJcblxyXG5cdFx0XHRcclxuXHRcdFx0bWFpbk92ZXJsYXkgPSAkKCc8ZGl2PjwvZGl2PicpXHJcblx0XHRcdFx0LmF0dHIoJ2lkJywgJ21haW5PdmVybGF5JylcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ292ZXJsYXknKVxyXG5cdFx0XHRcdC5jc3Moc2l6ZShkb2N1bWVudCkpXHJcblx0XHRcdFx0LmNsaWNrKGhpZGUpXHJcblx0XHRcdFx0LmhpZGUoKVxyXG5cclxuXHJcblxyXG5cdFx0XHRuYXZPdmVybGF5ID0gJCgnPGRpdj48L2Rpdj4nKVxyXG5cdFx0XHRcdC5hdHRyKCdpZCcsICduYXZPdmVybGF5JylcclxuXHRcdFx0XHQuYWRkQ2xhc3MoJ292ZXJsYXknKVxyXG5cdFx0XHRcdC5jc3MoJ3Bvc2l0aW9uJywgJ2ZpeGVkJylcclxuXHRcdFx0XHQuY3NzKCd6LWluZGV4JywgMTAwMDAwKVxyXG5cdFx0XHRcdC5jc3Moc2l6ZSgnI21haW5OYXYnKSlcclxuXHRcdFx0XHQuY2xpY2soaGlkZSlcclxuXHRcdFx0XHQuaGlkZSgpXHJcblxyXG5cclxuXHJcblx0XHRcdGNvbnNvbGUubG9nKCQoJyNtYWluQ29udGVudCBbZGF0YS1oZWxwXScpKVxyXG5cdFx0XHRjb25zb2xlLmxvZygkKCcjbWFpbk5hdiBbZGF0YS1oZWxwXScpKVxyXG5cclxuXHJcblxyXG5cclxuXHRcdFx0JCgnI21haW5Db250ZW50IFtkYXRhLWhlbHBdJykuZWFjaCgtPlxyXG5cclxuXHRcdFx0XHRjb3B5ID0gJCh0aGlzKS5jbG9uZSgpXHJcblx0XHRcdFx0cCA9IHBvc2l0aW9uKHRoaXMpXHJcblx0XHRcdFx0cyA9IHNpemUodGhpcylcclxuXHJcblx0XHRcdFx0JChjb3B5KVxyXG5cdFx0XHRcdFx0LmFkZENsYXNzKCdoZWxwZXInKVxyXG5cdFx0XHRcdFx0LmNzcygncG9zaXRpb24nLCAnYWJzb2x1dGUnKVxyXG5cdFx0XHRcdFx0LnRvb2x0aXAoe3BsYWNlbWVudDogJ2F1dG8gdG9wJywgdGl0bGU6ICQodGhpcykuZGF0YSgnaGVscCcpfSlcclxuXHRcdFx0XHRcdC5jc3MocClcclxuXHRcdFx0XHRcdC5jc3MocylcclxuXHJcblx0XHRcdFx0JChjb3B5KS5maW5kKCdbdGl0bGVdJykucmVtb3ZlQXR0cigndGl0bGUnKVxyXG5cclxuXHRcdFx0XHQkKG1haW5PdmVybGF5KVxyXG5cdFx0XHRcdFx0LmFwcGVuZChjb3B5KVxyXG5cdFx0XHQpXHJcblxyXG5cdFx0XHQkKCcjbWFpbk5hdiBbZGF0YS1oZWxwXScpLmVhY2goLT5cclxuXHJcblx0XHRcdFx0Y29weSA9ICQodGhpcykuY2xvbmUoKVxyXG5cdFx0XHRcdHAgPSBwb3NpdGlvbih0aGlzKVxyXG5cdFx0XHRcdHMgPSBzaXplKHRoaXMpXHJcblxyXG5cdFx0XHRcdCQoY29weSlcclxuXHRcdFx0XHRcdC5hZGRDbGFzcygnaGVscGVyJylcclxuXHRcdFx0XHRcdC5jc3MoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJylcclxuXHRcdFx0XHRcdC50b29sdGlwKHtwbGFjZW1lbnQ6ICdhdXRvIHRvcCcsIHRpdGxlOiAkKHRoaXMpLmRhdGEoJ2hlbHAnKX0pXHJcblx0XHRcdFx0XHQuY3NzKHApXHJcblx0XHRcdFx0XHQuY3NzKHMpXHJcblxyXG5cdFx0XHRcdCQoY29weSkuZmluZCgnW3RpdGxlXScpLnJlbW92ZUF0dHIoJ3RpdGxlJylcclxuXHJcblx0XHRcdFx0JChuYXZPdmVybGF5KVxyXG5cdFx0XHRcdFx0LmFwcGVuZChjb3B5KVxyXG5cdFx0XHQpXHJcblxyXG5cdFx0XHQkKCdib2R5JylcclxuXHRcdFx0XHQuYXBwZW5kKG1haW5PdmVybGF5KVxyXG5cdFx0XHRcdC5hcHBlbmQobmF2T3ZlcmxheSlcclxuXHJcblx0XHRcdCQobWFpbk92ZXJsYXkpLmZhZGVJbigpXHJcblx0XHRcdCQobmF2T3ZlcmxheSkuZmFkZUluKClcclxuXHJcblxyXG5cdGhpZGUgPSAtPlxyXG5cclxuXHRcdGlmIGhlbHBcclxuXHJcblx0XHRcdGhlbHAgPSBmYWxzZVxyXG5cdFx0XHQkKCcub3ZlcmxheScpLmZhZGVPdXQoe2NvbXBsZXRlOiAtPlxyXG5cclxuXHRcdFx0XHQkKCcub3ZlcmxheScpLnJlbW92ZSgpXHJcblx0XHRcdH0pXHJcblxyXG5cclxuXHJcblx0JCgnI2hlbHBCdG4nKS5jbGljaygtPlxyXG5cclxuXHRcdHNob3coKVxyXG5cdClcclxuXHJcblx0JChkb2N1bWVudCkua2V5ZG93bigoZXZlbnQpIC0+XHJcblxyXG5cdFx0aGlkZSgpIGlmIGV2ZW50LndoaWNoID09IDI3XHJcblx0KVxyXG4pIiwibGFzdFRpbWUgPSAwXHJcbnZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onXVxyXG5cclxuaWYgbm90IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuICAgIGZvciB2ZW5kb3IgaW4gdmVuZG9yc1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yICsgJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddXHJcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvciArICdDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8IHdpbmRvd1t2ZW5kb3IgKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ11cclxuXHJcbndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgb3I9IChjYWxsYmFjaywgZWxlbWVudCkgLT5cclxuICAgIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuICAgIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSlcclxuXHJcbiAgICBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KC0+XHJcbiAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKVxyXG4gICAgLCB0aW1lVG9DYWxsKVxyXG5cclxuICAgIGlkXHJcblxyXG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgb3I9IChpZCkgLT5cclxuICAgIGNsZWFyVGltZW91dChpZCkiLCJcclxuXHJcblxyXG5cclxuJCAtPiBcclxuXHQkKCcuaW1hZ2UtcHJldmlldycpLmVhY2ggLT5cclxuXHRcdHByZXZpZXcgPSB0aGlzXHJcblx0XHRpZCA9ICQodGhpcykuZGF0YSgnZm9yJylcclxuXHRcdCQoJyMnICsgaWQpLmNoYW5nZSgoZXZlbnQpIC0+IFxyXG5cclxuXHRcdFx0cGF0aCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZXZlbnQudGFyZ2V0LmZpbGVzWzBdKVxyXG5cdFx0XHQkKHByZXZpZXcpLmF0dHIgJ3NyYycsIHBhdGggaWYgcGF0aD9cclxuXHJcblx0XHRcdFxyXG5cdFx0KS50cmlnZ2VyICdjaGFuZ2UnXHJcbiIsIlxyXG5cclxuc2V0ID0gKGxhbmcpIC0+XHJcblx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2xhbmcvJyArIGxhbmdcclxuXHJcblxyXG5cclxuXHJcblxyXG5idXR0b24gPSAoKSAtPlxyXG5cdHNldCgkKHRoaXMpLmRhdGEoJ2xhbmcnKSlcclxuXHJcblxyXG5zZWxlY3QgPSAoKSAtPlxyXG5cdHNldCgkKHRoaXMpLnZhbCgpKVxyXG5cclxuXHJcblxyXG4kIC0+XHJcblx0JCgnLmxhbmd1YWdlLXNlbGVjdCcpLmNoYW5nZShzZWxlY3QpXHJcblx0JCgnLmxhbmd1YWdlLWJ1dHRvbicpLmNsaWNrKGJ1dHRvbilcclxuIiwibmF2Zml4ID0gLT5cclxuXHRoZWlnaHQgPSAkKCcjbWFpbk5hdicpLmhlaWdodCgpICsgMTBcclxuXHQkKCdib2R5JykuY3NzKCdwYWRkaW5nLXRvcCcsIGhlaWdodCArICdweCcpXHJcblxyXG5cclxuJCAtPlxyXG5cdCQod2luZG93KS5yZXNpemUgLT4gbmF2Zml4KClcclxuXHRuYXZmaXgoKSIsIlxyXG5cclxuaW1hZ2VGb3JGcmFtZSA9IChmcmFtZSkgLT5cclxuXHQnL2ltYWdlcy9wbGFudHMvcGxhbnQtJyArIGZyYW1lICsgJy5wbmcnXHJcblxyXG5yZWZyZXNoUGxhbnQgPSAocGxhbnQpIC0+IFxyXG5cdG5vdyA9IE1hdGgucm91bmQoKG5ldyBEYXRlKS5nZXRUaW1lKCkgLyAxMDAwKVxyXG5cdHN0YXJ0ID0gcGFyc2VJbnQgJChwbGFudCkuZGF0YSAnc3RhcnQnXHJcblx0ZW5kID0gcGFyc2VJbnQgJChwbGFudCkuZGF0YSAnZW5kJ1xyXG5cdHdhdGVyaW5nID0gcGFyc2VJbnQgJChwbGFudCkuZGF0YSAnd2F0ZXJpbmcnXHJcblx0bm93ID0gTWF0aC5taW4gbm93LCB3YXRlcmluZ1xyXG5cdGZyYW1lID0gTWF0aC5mbG9vcigxNyAqIE1hdGguY2xhbXAoKG5vdyAtIHN0YXJ0KSAvIChlbmQgLSBzdGFydCksIDAsIDEpKSBcclxuXHQkKHBsYW50KS5hdHRyICdzcmMnLCBpbWFnZUZvckZyYW1lIGZyYW1lXHJcblxyXG5cdHNldFRpbWVvdXQgKC0+IHJlZnJlc2hQbGFudCBwbGFudCksIDEwMDAgaWYgZnJhbWUgPCAxN1xyXG5cclxuJCAtPlxyXG5cdCQoJy5wbGFudGF0aW9uLXBsYW50JykuZWFjaCAtPiByZWZyZXNoUGxhbnQgdGhpc1xyXG5cclxuXHQkKCcjc2VlZHNNb2RhbCcpLm9uICdzaG93LmJzLm1vZGFsJywgKGV2ZW50KSAtPlxyXG5cdFx0c2xvdCA9ICQoZXZlbnQucmVsYXRlZFRhcmdldCkuZGF0YSAnc2xvdCdcclxuXHRcdCQodGhpcykuZmluZCgnaW5wdXRbbmFtZT1zbG90XScpLnZhbCBzbG90IiwidXJsID0gJy9hcGkvY2hhcmFjdGVyJztcclxuXHJcblxyXG5zZXRQcm9ncmVzcyA9IChvYmplY3QsIHZhbHVlLCBtaW5WYWx1ZSwgbWF4VmFsdWUsIGxhc3RVcGRhdGUsIG5leHRVcGRhdGUpIC0+XHJcblxyXG5cdGJhciA9ICQoJy4nICsgb2JqZWN0ICsgJy1iYXInKVxyXG5cdHRpbWVyID0gJCgnLicgKyBvYmplY3QgKyAnLXRpbWVyJylcclxuXHJcblxyXG5cdGlmIGJhci5sZW5ndGggPiAwXHJcblx0XHRjaGlsZCA9ICQoYmFyKS5jaGlsZHJlbiAnLnByb2dyZXNzLWJhcidcclxuXHJcblx0XHQkKGNoaWxkKVxyXG5cdFx0XHQuZGF0YSAnbWF4JywgbWF4VmFsdWVcclxuXHRcdFx0LmRhdGEgJ21pbicsIG1pblZhbHVlXHJcblx0XHRcdC5kYXRhICdub3cnLCB2YWx1ZVxyXG5cdFx0YmFyWzBdLnVwZGF0ZT8oKVxyXG5cclxuXHJcblx0aWYgdGltZXIubGVuZ3RoID4gMFxyXG5cdFx0Y2hpbGQgPSAkKHRpbWVyKS5jaGlsZHJlbiAnLnByb2dyZXNzLWJhcidcclxuXHJcblx0XHRpZiBuZXh0VXBkYXRlP1xyXG5cdFx0XHQkKGNoaWxkKVxyXG5cdFx0XHRcdC5kYXRhICdtYXgnLCBuZXh0VXBkYXRlXHJcblx0XHRcdFx0LmRhdGEgJ21pbicsIGxhc3RVcGRhdGVcclxuXHRcdGVsc2VcclxuXHRcdFx0JChjaGlsZClcclxuXHRcdFx0XHQuZGF0YSAnbWF4JywgMVxyXG5cdFx0XHRcdC5kYXRhICdtaW4nLCAwXHJcblxyXG5cclxuc2V0VmFsdWVzID0gKG9iamVjdCwgdmFsdWUsIG1pblZhbHVlLCBtYXhWYWx1ZSkgLT5cclxuXHQkKCcuJyArIG9iamVjdCArICctbm93JylcclxuXHRcdC50ZXh0IHZhbHVlXHJcblxyXG5cdCQoJy4nICsgb2JqZWN0ICsgJy1taW4nKVxyXG5cdFx0LnRleHQgbWluVmFsdWVcclxuXHJcblx0JCgnLicgKyBvYmplY3QgKyAnLW1heCcpXHJcblx0XHQudGV4dCBtYXhWYWx1ZVxyXG5cclxuc2V0VmFsdWUgPSAob2JqZWN0LCB2YWx1ZSkgLT5cclxuXHQkKCcuJyArIG9iamVjdClcclxuXHRcdC50ZXh0IHZhbHVlXHJcblxyXG5cclxuXHJcblxyXG5maWxsID0gKGRhdGEpIC0+XHJcblx0c2V0UHJvZ3Jlc3MgJ2hlYWx0aCcsIGRhdGEuaGVhbHRoLCAwLCBkYXRhLm1heEhlYWx0aCwgZGF0YS5oZWFsdGhVcGRhdGUsIGRhdGEubmV4dEhlYWx0aFVwZGF0ZVxyXG5cdHNldFZhbHVlcyAnaGVhbHRoJywgZGF0YS5oZWFsdGgsIDAsIGRhdGEubWF4SGVhbHRoXHJcblxyXG5cdHNldFByb2dyZXNzICdlbmVyZ3knLCBkYXRhLmVuZXJneSwgMCwgZGF0YS5tYXhFbmVyZ3ksIGRhdGEuZW5lcmd5VXBkYXRlLCBkYXRhLm5leHRFbmVyZ3lVcGRhdGVcclxuXHRzZXRWYWx1ZXMgJ2VuZXJneScsIGRhdGEuZW5lcmd5LCAwLCBkYXRhLm1heEVuZXJneVxyXG5cclxuXHRzZXRQcm9ncmVzcyAnd2FudGVkJywgZGF0YS53YW50ZWQsIDAsIDYsIGRhdGEud2FudGVkVXBkYXRlLCBkYXRhLm5leHRXYW50ZWRVcGRhdGVcclxuXHRzZXRWYWx1ZXMgJ3dhbnRlZCcsIGRhdGEud2FudGVkLCAwLCA2XHJcblxyXG5cdHNldFByb2dyZXNzICdleHBlcmllbmNlJywgZGF0YS5leHBlcmllbmNlLCAwLCBkYXRhLm1heEV4cGVyaWVuY2UsIG51bGwsIG51bGxcclxuXHRzZXRWYWx1ZXMgJ2V4cGVyaWVuY2UnLCBkYXRhLmV4cGVyaWVuY2UsIDAsIGRhdGEubWF4RXhwZXJpZW5jZVxyXG5cclxuXHJcblx0c2V0UHJvZ3Jlc3MgJ3BsYW50YXRvcicsIGRhdGEucGxhbnRhdG9yRXhwZXJpZW5jZSwgMCwgZGF0YS5wbGFudGF0b3JNYXhFeHBlcmllbmNlLCBudWxsLCBudWxsXHJcblx0c2V0VmFsdWVzICdwbGFudGF0b3InLCBkYXRhLnBsYW50YXRvckV4cGVyaWVuY2UsIDAsIGRhdGEucGxhbnRhdG9yTWF4RXhwZXJpZW5jZVxyXG5cclxuXHRzZXRQcm9ncmVzcyAnc211Z2dsZXInLCBkYXRhLnNtdWdnbGVyRXhwZXJpZW5jZSwgMCwgZGF0YS5zbXVnZ2xlck1heEV4cGVyaWVuY2UsIG51bGwsIG51bGxcclxuXHRzZXRWYWx1ZXMgJ3NtdWdnbGVyJywgZGF0YS5zbXVnZ2xlckV4cGVyaWVuY2UsIDAsIGRhdGEuc211Z2dsZXJNYXhFeHBlcmllbmNlXHJcblxyXG5cdHNldFByb2dyZXNzICdkZWFsZXInLCBkYXRhLmRlYWxlckV4cGVyaWVuY2UsIDAsIGRhdGEuZGVhbGVyTWF4RXhwZXJpZW5jZSwgbnVsbCwgbnVsbFxyXG5cdHNldFZhbHVlcyAnZGVhbGVyJywgZGF0YS5kZWFsZXJFeHBlcmllbmNlLCAwLCBkYXRhLmRlYWxlck1heEV4cGVyaWVuY2VcclxuXHJcblxyXG5cclxuXHJcblxyXG5cdCNzZXRWYWx1ZSAnbGV2ZWwnLCBkYXRhLmxldmVsXHJcblx0I3NldFZhbHVlICdwbGFudGF0b3ItbGV2ZWwnLCBkYXRhLnBsYW50YXRvckxldmVsXHJcblx0I3NldFZhbHVlICdzbXVnZ2xlci1sZXZlbCcsIGRhdGEuc211Z2dsZXJMZXZlbFxyXG5cdCNzZXRWYWx1ZSAnZGVhbGVyLWxldmVsJywgZGF0YS5kZWFsZXJMZXZlbFxyXG5cdCNzZXRWYWx1ZSAnc3RyZW5ndGgnLCBkYXRhLnN0cmVuZ3RoLFxyXG5cdCNzZXRWYWx1ZSAncGVyY2VwdGlvbicsIGRhdGEucGVyY2VwdGlvblxyXG5cdCNzZXRWYWx1ZSAnZW5kdXJhbmNlJywgZGF0YS5lbmR1cmFuY2VcclxuXHQjc2V0VmFsdWUgJ2NoYXJpc21hJywgZGF0YS5jaGFyaXNtYVxyXG5cdCNzZXRWYWx1ZSAnaW50ZWxsaWdlbmNlJywgZGF0YS5pbnRlbGxpZ2VuY2VcclxuXHQjc2V0VmFsdWUgJ2FnaWxpdHknLCBkYXRhLmFnaWxpdHlcclxuXHQjc2V0VmFsdWUgJ2x1Y2snLCBkYXRhLmx1Y2sgKyAnJSdcclxuXHQjc2V0VmFsdWUgJ3N0YXRpc3RpY1BvaW50cycsIGRhdGEuc3RhdGlzdGljUG9pbnRzXHJcblx0I3NldFZhbHVlICd0YWxlbnRQb2ludHMnLCBkYXRhLnRhbGVudFBvaW50c1xyXG5cdCNzZXRWYWx1ZSAnbW9uZXknLCAnJCcgKyBkYXRhLm1vbmV5XHJcblx0I3NldFZhbHVlICdyZXBvcnRzJywgZGF0YS5yZXBvcnRzQ291bnRcclxuXHQjc2V0VmFsdWUgJ21lc3NhZ2VzJywgZGF0YS5tZXNzYWdlc0NvdW50XHJcblxyXG5cdHNjb3BlID0gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmJvZHkpLnNjb3BlKClcclxuXHJcblx0aWYgc2NvcGU/IGFuZCBzY29wZS5wbGF5ZXI/XHJcblx0XHQjc2NvcGUucGxheWVyLmxldmVsID0gZGF0YS5sZXZlbFxyXG5cdFx0I3Njb3BlLnBsYXllci5wbGFudGF0b3JMZXZlbCA9IGRhdGEucGxhbnRhdG9yTGV2ZWxcclxuXHRcdCNzY29wZS5wbGF5ZXIuc211Z2dsZXJMZXZlbCA9IGRhdGEuc211Z2dsZXJMZXZlbFxyXG5cdFx0I3Njb3BlLnBsYXllci5kZWFsZXJMZXZlbCA9IGRhdGEuZGVhbGVyTGV2ZWxcclxuXHRcdCNzY29wZS5wbGF5ZXIuc3RyZW5ndGggPSBkYXRhLnN0cmVuZ3RoXHJcblx0XHQjc2NvcGUucGxheWVyLnBlcmNlcHRpb24gPSBkYXRhLnBlcmNlcHRpb25cclxuXHRcdCNzY29wZS5wbGF5ZXIuZW5kdXJhbmNlID0gZGF0YS5lbmR1cmFuY2VcclxuXHRcdCNzY29wZS5wbGF5ZXIuY2hhcmlzbWEgPSBkYXRhLmNoYXJpc21hXHJcblx0XHQjc2NvcGUucGxheWVyLmludGVsbGlnZW5jZSA9IGRhdGEuaW50ZWxsaWdlbmNlXHJcblx0XHQjc2NvcGUucGxheWVyLmFnaWxpdHkgPSBkYXRhLmFnaWxpdHlcclxuXHRcdCNzY29wZS5wbGF5ZXIubHVjayA9IGRhdGEubHVja1xyXG5cdFx0I3Njb3BlLnBsYXllci5yZXNwZWN0ID0gZGF0YS5yZXNwZWN0XHJcblx0XHQjc2NvcGUucGxheWVyLndlaWdodCA9IGRhdGEud2VpZ2h0XHJcblx0XHQjc2NvcGUucGxheWVyLmNhcGFjaXR5ID0gZGF0YS5jYXBhY2l0eVxyXG5cdFx0I3Njb3BlLnBsYXllci5taW5EYW1hZ2UgPSBkYXRhLm1pbkRhbWFnZVxyXG5cdFx0I3Njb3BlLnBsYXllci5tYXhEYW1hZ2UgPSBkYXRhLm1heERhbWFnZVxyXG5cdFx0I3Njb3BlLnBsYXllci5kZWZlbnNlID0gZGF0YS5kZWZlbnNlXHJcblx0XHQjc2NvcGUucGxheWVyLmNyaXRDaGFuY2UgPSBkYXRhLmNyaXRDaGFuY2VcclxuXHRcdCNzY29wZS5wbGF5ZXIuc3BlZWQgPSBkYXRhLnNwZWVkXHJcblx0XHQjc2NvcGUucGxheWVyLmV4cGVyaWVuY2VNb2RpZmllciA9IGRhdGEuZXhwZXJpZW5jZU1vZGlmaWVyXHJcblx0XHQjc2NvcGUucGxheWVyLm1vbmV5TW9kaWZpZXIgPSBkYXRhLm1vbmV5TW9kaWZpZXJcclxuXHJcblx0XHRmb3IgaywgdiBvZiBkYXRhXHJcblx0XHRcdHNjb3BlLnBsYXllcltrXSA9IHZcclxuXHJcblx0XHRzY29wZS4kYXBwbHkoKVxyXG5cclxuXHJcblxyXG5cclxubG9hZGVkID0gKGRhdGEpIC0+XHJcblxyXG5cdGZpbGwgZGF0YVxyXG5cclxuXHRpZiBkYXRhLnJlbG9hZFxyXG5cclxuXHRcdHdpbmRvdy5sb2NhdGlvbi5yZWZyZXNoKClcclxuXHRlbHNlXHJcblx0XHQkLmFqYXgge1xyXG5cclxuXHRcdFx0dXJsOiB1cmwgKyAnL25vdGlmaWNhdGlvbnMnLFxyXG5cdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0XHRzdWNjZXNzOiBub3RpZnlcclxuXHRcdH1cclxuXHJcblx0XHQkLmFqYXgge1xyXG5cclxuXHRcdFx0dXJsOiB1cmwgKyAnL21lc3NhZ2VzJyxcclxuXHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0bWV0aG9kOiAnR0VUJyxcclxuXHRcdFx0c3VjY2VzczogbWVzc2FnZSxcclxuXHRcdH1cclxuXHJcblx0c2V0VGltZW91dCBsb2FkLCBkYXRhLm5leHRVcGRhdGUgKiAxMDAwXHJcblxyXG5cclxubm90aWZ5ID0gKGRhdGEpIC0+XHJcblx0Zm9yIG4gaW4gZGF0YVxyXG5cdFx0d2luZG93Lm5vdGlmeSB7XHJcblxyXG5cdFx0XHR0aXRsZTogJzxzdHJvbmc+JyArIG4udGl0bGUgKyAnPC9zdHJvbmc+JyxcclxuXHRcdFx0bWVzc2FnZTogJycsXHJcblx0XHRcdHVybDogJy9yZXBvcnRzLycgKyBuLmlkLFxyXG5cclxuXHRcdH1cclxuXHJcblx0aWYgd2luZG93LmFjdGl2ZVxyXG5cdFx0d2luZG93Lm5vdGlmeVNob3coKVxyXG5cclxubWVzc2FnZSA9IChkYXRhKSAtPlxyXG5cdGZvciBuIGluIGRhdGFcclxuXHRcdHdpbmRvdy5ub3RpZnkge1xyXG5cclxuXHRcdFx0dGl0bGU6ICc8c3Ryb25nPicgKyBuLmF1dGhvciArICc8L3N0cm9uZz46ICcgKyBuLnRpdGxlICsgJzxici8+JyxcclxuXHRcdFx0bWVzc2FnZTogbi5jb250ZW50LFxyXG5cdFx0XHR1cmw6ICcvbWVzc2FnZXMvaW5ib3gvJyArIG4uaWQsXHJcblxyXG5cdFx0fVxyXG5cclxuXHRpZiB3aW5kb3cuYWN0aXZlXHJcblx0XHR3aW5kb3cubm90aWZ5U2hvdygpXHJcblxyXG5cclxuXHJcbmxvYWQgPSAtPlxyXG5cclxuXHQkLmFqYXgge1xyXG5cclxuXHRcdHVybDogdXJsLFxyXG5cdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRzdWNjZXNzOiBsb2FkZWRcclxuXHR9XHJcblxyXG5cclxuXHJcblx0XHJcbiQod2luZG93KS5mb2N1cyAtPlxyXG5cdGxvYWQoKVxyXG5cclxuXHJcbiQgLT5cclxuXHRsb2FkKCkiLCJcclxuc3F1YXJlID0gLT5cclxuXHJcblx0JCgnLnNxdWFyZScpLmVhY2ggLT5cclxuXHJcblx0XHRpZiAkKHRoaXMpLmRhdGEoJ3NxdWFyZScpID09ICd3aWR0aCdcclxuXHJcblx0XHRcdCQodGhpcykud2lkdGggJCh0aGlzKS5oZWlnaHQoKVxyXG5cdFx0ZWxzZVxyXG5cclxuXHRcdFx0JCh0aGlzKS5oZWlnaHQgJCh0aGlzKS53aWR0aCgpXHJcblxyXG4kIC0+XHJcblx0JCh3aW5kb3cpLnJlc2l6ZSAtPiBcclxuXHRcdHNxdWFyZSgpXHJcblx0XHRcclxuXHRzcXVhcmUoKSIsIlxyXG5jaGFuZ2VkID0gLT4gXHJcblx0Y3VycmVudCA9IHBhcnNlSW50ICgkKCcjY3VycmVudFN0YXRpc3RpY3NQb2ludHMnKS50ZXh0KCkgPyAwKVxyXG5cdGxlZnQgPSBwYXJzZUludCAkKCcjc3RhdGlzdGljc1BvaW50cycpLnRleHQoKVxyXG5cdG9sZCA9IHBhcnNlSW50ICgkKHRoaXMpLmRhdGEoJ29sZCcpID8gMClcclxuXHR2YWwgPSBwYXJzZUludCAoJCh0aGlzKS52YWwoKSA/IDApXHJcblx0ZGlmZiA9IHZhbCAtIG9sZFxyXG5cclxuXHRkaWZmID0gbGVmdCBpZiBkaWZmID4gbGVmdFxyXG5cdHZhbCA9IG9sZCArIGRpZmZcclxuXHRsZWZ0IC09IGRpZmZcclxuXHJcblx0aWYgbm90IGlzTmFOIGRpZmZcclxuXHJcblx0XHQkKHRoaXMpXHJcblx0XHRcdC52YWwgdmFsXHJcblx0XHRcdC5kYXRhICdvbGQnLCB2YWxcclxuXHJcblx0XHQkKCcjc3RhdGlzdGljc1BvaW50cycpXHJcblx0XHRcdC50ZXh0IGxlZnRcclxuXHJcblx0XHQkKCcuc3RhdGlzdGljJykuZWFjaCAtPlxyXG5cdFx0XHR2YWwgPSBwYXJzZUludCAkKHRoaXMpLnZhbCgpID8gMFxyXG5cdFx0XHQkKHRoaXMpLmF0dHIgJ21heCcsIGxlZnQgKyB2YWxcclxuXHJcblxyXG5yYW5kb20gPSAobWluLCBtYXgpIC0+IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKVxyXG5cclxucmFuZG9tSW4gPSAoYXJyYXkpIC0+XHJcblx0aW5kZXggPSByYW5kb20oMCwgYXJyYXkubGVuZ3RoIC0gMSlcclxuXHRhcnJheVtpbmRleF1cclxuXHJcblxyXG5cclxuXHJcblxyXG5yb2xsID0gLT5cclxuXHJcblx0cm9sbGFibGUgPSAkKCcuc3RhdGlzdGljLnJvbGxhYmxlJylcclxuXHQkKHJvbGxhYmxlKS52YWwoMCkudHJpZ2dlcignY2hhbmdlJylcclxuXHRwb2ludHMgPSBwYXJzZUludCAkKCcjc3RhdGlzdGljc1BvaW50cycpLnRleHQoKVxyXG5cclxuXHJcblx0Zm9yIGkgaW4gWzEuLnBvaW50c11cclxuXHJcblx0XHRzdGF0aXN0aWMgPSByYW5kb21Jbihyb2xsYWJsZSlcclxuXHRcdHZhbCA9IHBhcnNlSW50ICQoc3RhdGlzdGljKS52YWwoKVxyXG5cdFx0JChzdGF0aXN0aWMpLnZhbCh2YWwgKyAxKVxyXG5cclxuXHJcblx0JChyb2xsYWJsZSkudHJpZ2dlciAnY2hhbmdlJ1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4kIC0+IFxyXG5cdCQoJy5zdGF0aXN0aWMnKVxyXG5cdFx0LmJpbmQgJ2tleXVwIGlucHV0IGNoYW5nZScsIGNoYW5nZWRcclxuXHRcdC50cmlnZ2VyICdjaGFuZ2UnXHJcblxyXG5cdCQoJy5zdGF0Um9sbGVyJylcclxuXHRcdC5jbGljayhyb2xsKVxyXG5cclxuXHRyb2xsKClcclxuIiwiXHJcbnJlZnJlc2hpbmcgPSBmYWxzZVxyXG5cclxucmVmcmVzaCA9IC0+XHJcblx0d2luZG93LmxvY2F0aW9uLnJlZnJlc2goKSBpZiBub3QgcmVmcmVzaGluZ1xyXG5cdHJlZnJlc2hpbmcgPSB0cnVlXHJcblxyXG51cGRhdGUgPSAodGltZXIpIC0+XHJcblx0YmFyID0gJCh0aW1lcikuY2hpbGRyZW4oJy5wcm9ncmVzcy1iYXInKS5sYXN0KClcclxuXHRsYWJlbCA9ICQodGltZXIpLmNoaWxkcmVuICcucHJvZ3Jlc3MtbGFiZWwnXHJcblx0dGltZSA9IE1hdGgucm91bmQgKG5ldyBEYXRlKS5nZXRUaW1lKCkgLyAxMDAwLjBcclxuXHJcblxyXG5cdG1pbiA9ICQoYmFyKS5kYXRhICdtaW4nXHJcblx0bWF4ID0gJChiYXIpLmRhdGEgJ21heCdcclxuXHRzdG9wID0gJChiYXIpLmRhdGEgJ3N0b3AnXHJcblx0Y2EgPSAkKGJhcikuZGF0YSgnY2EnKVxyXG5cdGNiID0gJChiYXIpLmRhdGEoJ2NiJylcclxuXHJcblxyXG5cclxuXHRyZXZlcnNlZCA9IEJvb2xlYW4oJChiYXIpLmRhdGEoJ3JldmVyc2VkJykgPyBmYWxzZSlcclxuXHRyZWxvYWQgPSBCb29sZWFuKCQoYmFyKS5kYXRhKCdyZWxvYWQnKSA/IHRydWUpXHJcblxyXG5cdGlmIHN0b3A/XHJcblx0XHR0aW1lID0gTWF0aC5taW4gdGltZSwgc3RvcFxyXG5cclxuXHRub3cgPSBNYXRoLmNsYW1wKHRpbWUsIG1pbiwgbWF4KVxyXG5cclxuXHJcblx0cGVyY2VudCA9IChub3cgLSBtaW4pIC8gKG1heCAtIG1pbilcclxuXHRwZXJjZW50ID0gMSAtIHBlcmNlbnQgaWYgcmV2ZXJzZWRcclxuXHJcblxyXG5cclxuXHJcblx0JChiYXIpLmNzcyAnd2lkdGgnLCAocGVyY2VudCAqIDEwMCkgKyAnJSdcclxuXHQkKGJhcikuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgTWF0aC5sZXJwQ29sb3JzKHBlcmNlbnQsIGNhLCBjYikpIGlmIGNhPyBhbmQgY2I/XHJcblx0JChsYWJlbCkudGV4dCB3aW5kb3cudGltZUZvcm1hdD8gbWF4IC0gbm93XHJcblxyXG5cdHJlZnJlc2goKSBpZiB0aW1lID4gbWF4IGFuZCByZWxvYWRcclxuXHJcblx0c2V0VGltZW91dCgtPiBcclxuXHJcblx0XHR1cGRhdGUodGltZXIpXHJcblxyXG5cdCwgMTAwMCkgI2lmIHRpbWUgPD0gbWF4XHJcblxyXG5cclxudXBkYXRlTmF2ID0gKHRpbWVyKSAtPlxyXG5cclxuXHR0aW1lID0gTWF0aC5yb3VuZCAobmV3IERhdGUpLmdldFRpbWUoKSAvIDEwMDAuMFxyXG5cdG1pbiA9ICQodGltZXIpLmRhdGEgJ21pbidcclxuXHRtYXggPSAkKHRpbWVyKS5kYXRhICdtYXgnXHJcblx0bm93ID0gTWF0aC5jbGFtcCh0aW1lLCBtaW4sIG1heClcclxuXHJcblx0cGVyY2VudCA9IDEgLSAobm93IC0gbWluKSAvIChtYXggLSBtaW4pXHJcblxyXG5cdCQodGltZXIpLmNzcygnd2lkdGgnLCAocGVyY2VudCAqIDEwMCkgKyAnJScpXHJcblxyXG5cdHNldFRpbWVvdXQoLT4gXHJcblxyXG5cdFx0dXBkYXRlTmF2KHRpbWVyKVxyXG5cclxuXHQsIDEwMDApXHJcblxyXG5cclxuXHJcblxyXG4kIC0+XHJcblx0JCgnLnByb2dyZXNzLXRpbWUnKS5lYWNoIC0+XHJcblx0XHR1cGRhdGUgdGhpc1xyXG5cclxuXHQkKCcubmF2LXRpbWVyID4gLm5hdi10aW1lci1iYXInKS5lYWNoIC0+XHJcblx0XHR1cGRhdGVOYXYgdGhpc1xyXG5cclxuXHJcblxyXG5cclxuIiwiJCAtPlxyXG5cdCQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS5lYWNoKC0+XHJcblxyXG5cdFx0b3B0aW9ucyA9IHtcclxuXHJcblx0XHRcdGh0bWw6IHRydWUsXHJcblx0XHRcdHBsYWNlbWVudDogJ2F1dG8gbGVmdCdcclxuXHRcdH1cclxuXHJcblx0XHR0cmlnZ2VyID0gJCh0aGlzKS5kYXRhKCd0cmlnZ2VyJylcclxuXHJcblx0XHRpZiB0cmlnZ2VyP1xyXG5cdFx0XHRvcHRpb25zLnRyaWdnZXIgPSB0cmlnZ2VyXHJcblxyXG5cclxuXHRcdCQodGhpcykudG9vbHRpcChvcHRpb25zKVxyXG5cdCkiLCJcclxuJCAtPlxyXG5cclxuXHR0dXRvcmlhbHMgPSB7fVxyXG5cdCQoJy50dXRvcmlhbC1zdGVwJykucG9wb3Zlcih7dHJpZ2dlcjogJ21hbnVhbCcsIHBsYWNlbWVudDogJ2JvdHRvbSd9KVxyXG5cclxuXHRzaG93ID0gKHN0ZXApIC0+XHJcblxyXG5cdFx0aWYgc3RlcD9cclxuXHJcblx0XHRcdCQoc3RlcC5lbGVtZW50cylcclxuXHRcdFx0XHQuYmluZCgnY2xpY2snLCBjbGlja2VkKVxyXG5cdFx0XHRcdC5hZGRDbGFzcygndHV0b3JpYWwtYWN0aXZlJylcclxuXHRcdFx0XHQuZmlyc3QoKVxyXG5cdFx0XHRcdC5wb3BvdmVyKCdzaG93JylcclxuXHJcblxyXG5cdGNsaWNrZWQgPSAoZXZlbnQpIC0+XHJcblxyXG5cdFx0bmV4dCA9IHR1dG9yaWFsc1t0aGlzLnN0ZXAubmFtZV0uc2hpZnQoKVxyXG5cclxuXHRcdGlmIG5leHQ/XHJcblxyXG5cdFx0XHQkLmFqYXgoe1xyXG5cclxuXHRcdFx0XHR1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXHJcblx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRkYXRhOiB7bmFtZTogdGhpcy5zdGVwLm5hbWUsIHN0YWdlOiBuZXh0LmluZGV4fSxcclxuXHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcdFxyXG5cdFx0XHR9KVxyXG5cclxuXHRcdFx0c2V0VGltZW91dCgtPlxyXG5cclxuXHRcdFx0XHRzaG93KG5leHQpXHJcblx0XHRcdCwgNTAwKVxyXG5cdFx0ZWxzZVxyXG5cdFx0XHQkLmFqYXgoe1xyXG5cclxuXHRcdFx0XHR1cmw6ICcvYXBpL2NoYXJhY3Rlci90dXRvcmlhbCcsXHJcblx0XHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcclxuXHRcdFx0XHRkYXRhOiB7bmFtZTogdGhpcy5zdGVwLm5hbWUsIHN0YWdlOiB0aGlzLnN0ZXAuaW5kZXggKyAxfSxcclxuXHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcdFxyXG5cdFx0XHR9KVxyXG5cdFx0XHJcblxyXG5cclxuXHJcblx0XHQkKHRoaXMuc3RlcC5lbGVtZW50cykudW5iaW5kKCdjbGljaycsIGNsaWNrZWQpXHJcblx0XHRcdC5yZW1vdmVDbGFzcygndHV0b3JpYWwtYWN0aXZlJylcclxuXHRcdFx0LnBvcG92ZXIoJ2hpZGUnKVxyXG5cclxuXHRcdCNldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblx0XHQjZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcclxuXHJcblxyXG5cdHJlY2VpdmUgPSAob2JqZWN0LCBuYW1lLCBkYXRhKSAtPlxyXG5cclxuXHRcdGlmIGRhdGEuc3RhZ2UgPCAwXHJcblxyXG5cclxuXHRcdFx0bW9kYWwgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdtb2RhbCBmYWRlJylcclxuXHRcdFx0ZGlhbG9nID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnbW9kYWwtZGlhbG9nJylcclxuXHRcdFx0Y29udGVudCA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWNvbnRlbnQnKVxyXG5cdFx0XHRoZWFkZXIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdtb2RhbC1oZWFkZXInKVxyXG5cdFx0XHRib2R5ID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnbW9kYWwtYm9keScpXHJcblx0XHRcdGZvb3RlciA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ21vZGFsLWZvb3RlcicpXHJcblx0XHRcdHRpdGxlID0gJCgnPGg0PjwvaDQ+JykuYWRkQ2xhc3MoJ21vZGFsLXRpdGxlJylcclxuXHJcblx0XHRcdGdyb3VwID0gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnYnRuLWdyb3VwJylcclxuXHRcdFx0YnRuMSA9ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoJ2J0biBidG4tc3VjY2VzcycpLmF0dHIoJ3ZhbHVlJywgJ3llcycpLnRleHQoaTE4bi55ZXMpXHJcblx0XHRcdGJ0bjIgPSAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKCdidG4gYnRuLWRhbmdlcicpLmF0dHIoJ3ZhbHVlJywgJ25vJykudGV4dChpMThuLm5vKVxyXG5cclxuXHRcdFx0JChidG4xKS5jbGljaygtPlxyXG5cclxuXHRcdFx0XHQkLmFqYXgoe1xyXG5cclxuXHRcdFx0XHRcdHVybDogJy9hcGkvY2hhcmFjdGVyL3R1dG9yaWFsJyxcclxuXHRcdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXHJcblx0XHRcdFx0XHRkYXRhOiB7bmFtZTogbmFtZSwgYWN0aXZlOiAxfSxcclxuXHRcdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFx0XHJcblx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0JChtb2RhbCkubW9kYWwoJ2hpZGUnKVxyXG5cclxuXHRcdFx0XHRsb2FkKG9iamVjdCwgbmFtZSwgZGF0YSlcclxuXHRcdFx0KVxyXG5cclxuXHRcdFx0JChidG4yKS5jbGljaygtPlxyXG5cclxuXHRcdFx0XHQkLmFqYXgoe1xyXG5cclxuXHRcdFx0XHRcdHVybDogJy9hcGkvY2hhcmFjdGVyL3R1dG9yaWFsJyxcclxuXHRcdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXHJcblx0XHRcdFx0XHRkYXRhOiB7bmFtZTogbmFtZSwgYWN0aXZlOiAwfSxcclxuXHRcdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFx0XHJcblx0XHRcdFx0fSlcclxuXHJcblx0XHRcdFx0JChtb2RhbCkubW9kYWwoJ2hpZGUnKVxyXG5cclxuXHRcdFx0KVxyXG5cclxuXHRcdFx0JCh0aXRsZSlcclxuXHRcdFx0XHQudGV4dChkYXRhLnRpdGxlKVxyXG5cclxuXHRcdFx0JChib2R5KVxyXG5cdFx0XHRcdC50ZXh0KGRhdGEuZGVzY3JpcHRpb24pXHJcblxyXG5cdFx0XHQkKGhlYWRlcilcclxuXHRcdFx0XHQuYXBwZW5kKHRpdGxlKVxyXG5cclxuXHJcblx0XHRcdCQoZ3JvdXApXHJcblx0XHRcdFx0LmFwcGVuZChidG4yKVxyXG5cdFx0XHRcdC5hcHBlbmQoYnRuMSlcclxuXHJcblx0XHRcdCQoZm9vdGVyKVxyXG5cdFx0XHRcdC5hcHBlbmQoZ3JvdXApXHJcblxyXG5cclxuXHRcdFx0JChjb250ZW50KVxyXG5cdFx0XHRcdC5hcHBlbmQoaGVhZGVyKVxyXG5cdFx0XHRcdC5hcHBlbmQoYm9keSlcclxuXHRcdFx0XHQuYXBwZW5kKGZvb3RlcilcclxuXHJcblx0XHRcdCQoZGlhbG9nKVxyXG5cdFx0XHRcdC5hcHBlbmQoY29udGVudClcclxuXHJcblx0XHRcdCQobW9kYWwpXHJcblx0XHRcdFx0LmFwcGVuZChkaWFsb2cpXHJcblxyXG5cdFx0XHQkKCdib2R5JylcclxuXHRcdFx0XHQuYXBwZW5kKG1vZGFsKVxyXG5cclxuXHRcdFx0JChtb2RhbCkubW9kYWwoe2JhY2tkcm9wOiAnc3RhdGljJywgc2hvdzogdHJ1ZSwga2V5Ym9hcmQ6IGZhbHNlfSlcclxuXHJcblxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRsb2FkKG9iamVjdCwgbmFtZSwgZGF0YSlcclxuXHJcblxyXG5cclxuXHRsb2FkID0gKG9iamVjdCwgbmFtZSwgZGF0YSkgLT5cclxuXHJcblxyXG5cdFx0dHV0b3JpYWwgPSBbXVxyXG5cdFx0ZGVwdGggPSAkKG9iamVjdCkucGFyZW50cygnW2RhdGEtdHV0b3JpYWw9dHJ1ZV0nKS5sZW5ndGggKyAxXHJcblxyXG5cclxuXHRcdCQob2JqZWN0KS5maW5kKCcudHV0b3JpYWwtc3RlcCcpLmVhY2goLT5cclxuXHJcblxyXG5cdFx0XHRzdGVwID0gbnVsbFxyXG5cdFx0XHRpbmRleCA9ICQodGhpcykuZGF0YSgndHV0b3JpYWwtaW5kZXgnKVxyXG5cclxuXHRcdFx0cmV0dXJuIGlmIGluZGV4IDwgZGF0YS5zdGFnZSBvciAkKHRoaXMpLnBhcmVudHMoJ1tkYXRhLXR1dG9yaWFsPXRydWVdJykubGVuZ3RoICE9IGRlcHRoXHJcblxyXG5cclxuXHJcblx0XHRcdGlmIHR1dG9yaWFsW2luZGV4XT9cclxuXHRcdFx0XHRzdGVwID0gdHV0b3JpYWxbaW5kZXhdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRzdGVwID0ge1xyXG5cclxuXHRcdFx0XHRcdGVsZW1lbnRzOiBbXSxcclxuXHRcdFx0XHRcdG5hbWU6IG5hbWUsXHJcblx0XHRcdFx0XHRpbmRleDogaW5kZXgsXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHR1dG9yaWFsW2luZGV4XSA9IHN0ZXBcclxuXHJcblxyXG5cdFx0XHRzdGVwLmVsZW1lbnRzLnB1c2godGhpcylcclxuXHRcdFx0dGhpcy5zdGVwID0gc3RlcFxyXG5cdFx0KVxyXG5cclxuXHRcdHR1dG9yaWFsID0gdHV0b3JpYWwuZmlsdGVyKChlbGVtZW50KSAtPlxyXG5cclxuXHRcdFx0aWYgZWxlbWVudD9cclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0XHQpXHJcblxyXG5cclxuXHJcblx0XHR0dXRvcmlhbHNbbmFtZV0gPSB0dXRvcmlhbFxyXG5cdFx0c2hvdyh0dXRvcmlhbC5zaGlmdCgpKVxyXG5cclxuXHJcblxyXG5cclxuXHJcblx0JCgnW2RhdGEtdHV0b3JpYWw9dHJ1ZScpLmVhY2goLT5cclxuXHJcblx0XHRuYW1lID0gJCh0aGlzKS5kYXRhKCd0dXRvcmlhbC1uYW1lJylcclxuXHJcblx0XHQkLmFqYXgoe1xyXG5cclxuXHRcdFx0dXJsOiAnL2FwaS9jaGFyYWN0ZXIvdHV0b3JpYWwnLFxyXG5cdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxyXG5cdFx0XHRkYXRhOiB7bmFtZTogbmFtZX0sXHJcblx0XHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRcdHN1Y2Nlc3M6IChkYXRhKSA9PlxyXG5cdFx0XHRcdHJlY2VpdmUodGhpcywgbmFtZSwgZGF0YSkgaWYgZGF0YS5hY3RpdmVcclxuXHRcdH0pXHJcblx0KSIsIndpbmRvdy5mb3JtYXQgb3I9IFxyXG5cdHRpbWU6XHJcblx0XHRkYXk6ICdkJ1xyXG5cdFx0aG91cjogJ2gnXHJcblx0XHRtaW51dGU6ICdtJ1xyXG5cdFx0c2Vjb25kOiAncydcclxuXHJcblxyXG5cclxuXHJcbndpbmRvdy5hY3RpdmUgPz0gZmFsc2VcclxuXHJcblxyXG5cclxuJCh3aW5kb3cpLmZvY3VzIC0+XHJcblx0d2luZG93LmFjdGl2ZSA9IHRydWVcclxuXHJcbiQod2luZG93KS5ibHVyIC0+XHJcblx0d2luZG93LmFjdGl2ZSA9IGZhbHNlXHJcblxyXG4kKHdpbmRvdykucmVzaXplIC0+XHJcblx0Y2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVG8pIGlmIHRoaXMucmVzaXplVG9cclxuXHR0aGlzLnJlc2l6ZVRvID0gc2V0VGltZW91dCgtPlxyXG5cdFx0JCh0aGlzKS50cmlnZ2VyKCdyZXNpemVkJylcclxuXHQsIDUwMClcclxuXHRcclxuXHJcblxyXG5cclxud2luZG93LmxwYWQgb3I9ICh2YWx1ZSwgcGFkZGluZykgLT5cclxuICB6ZXJvZXMgPSBcIjBcIlxyXG4gIHplcm9lcyArPSBcIjBcIiBmb3IgaSBpbiBbMS4ucGFkZGluZ11cclxuXHJcbiAgKHplcm9lcyArIHZhbHVlKS5zbGljZShwYWRkaW5nICogLTEpXHJcblxyXG5cclxudGltZVNlcGFyYXRlID0gKHZhbHVlKSAtPlxyXG5cdGlmIHZhbHVlLmxlbmd0aCA+IDBcclxuXHRcdHZhbHVlICsgJyAnXHJcblx0ZWxzZVxyXG5cdFx0dmFsdWVcclxuXHJcbnRpbWVGb3JtYXQgPSAodGV4dCwgdmFsdWUsIGZvcm1hdCkgLT5cclxuXHR0ZXh0ID0gdGltZVNlcGFyYXRlKHRleHQpXHJcblxyXG5cdGlmIHRleHQubGVuZ3RoID4gMFxyXG5cdFx0dGV4dCArPSB3aW5kb3cubHBhZCB2YWx1ZSwgMlxyXG5cdGVsc2UgXHJcblx0XHR0ZXh0ICs9IHZhbHVlXHJcblxyXG5cdHRleHQgKyBmb3JtYXRcclxuXHJcblxyXG53aW5kb3cudGltZUZvcm1hdCBvcj0gKHZhbHVlKSAtPlxyXG5cdFxyXG5cdHRleHQgPSAnJ1xyXG5cdGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSAqIDEwMDApXHJcblx0ZCA9IGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMVxyXG5cdGggPSBkYXRlLmdldFVUQ0hvdXJzKClcclxuXHRtID0gZGF0ZS5nZXRVVENNaW51dGVzKClcclxuXHRzID0gZGF0ZS5nZXRVVENTZWNvbmRzKClcclxuXHJcblxyXG5cdHRleHQgKz0gZCArIGZvcm1hdC50aW1lLmRheSBpZiBkID4gMFxyXG5cdHRleHQgPSB0aW1lRm9ybWF0KHRleHQsIGgsIGZvcm1hdC50aW1lLmhvdXIpIGlmIGggPiAwXHJcblx0dGV4dCA9IHRpbWVGb3JtYXQodGV4dCwgbSwgZm9ybWF0LnRpbWUubWludXRlKSBpZiBoID4gMCBvciBtID4gMFxyXG5cdHRleHQgPSB0aW1lRm9ybWF0KHRleHQsIHMsIGZvcm1hdC50aW1lLnNlY29uZCkgaWYgaCA+IDAgb3IgbSA+IDAgb3IgcyA+IDBcclxuXHJcblx0dGV4dFxyXG5cclxud2luZG93LnRpbWVGb3JtYXRTaG9ydCBvcj0gKHZhbHVlKSAtPlxyXG5cclxuXHR0ZXh0ID0gJydcclxuXHRkYXRlID0gbmV3IERhdGUodmFsdWUgKiAxMDAwKVxyXG5cdGQgPSBkYXRlLmdldFVUQ0RhdGUoKSAtIDFcclxuXHRoID0gZGF0ZS5nZXRVVENIb3VycygpXHJcblx0bSA9IGRhdGUuZ2V0VVRDTWludXRlcygpXHJcblx0cyA9IGRhdGUuZ2V0VVRDU2Vjb25kcygpXHJcblxyXG5cclxuXHRyZXR1cm4gZCArIGZvcm1hdC50aW1lLmRheSBpZiBkID4gMFxyXG5cdHJldHVybiB0aW1lRm9ybWF0KHRleHQsIGgsIGZvcm1hdC50aW1lLmhvdXIpIGlmIGggPiAwXHJcblx0cmV0dXJuIHRpbWVGb3JtYXQodGV4dCwgbSwgZm9ybWF0LnRpbWUubWludXRlKSBpZiBtID4gMFxyXG5cdHJldHVybiB0aW1lRm9ybWF0KHRleHQsIHMsIGZvcm1hdC50aW1lLnNlY29uZCkgaWYgcyA+IDBcclxuXHJcblxyXG5cclxuXHJcbnJlZnJlc2hpbmcgPSBmYWxzZVxyXG5cclxuXHJcbndpbmRvdy5sb2NhdGlvbi5yZWZyZXNoIG9yPSAtPlxyXG5cdGlmIG5vdCByZWZyZXNoaW5nXHJcblx0XHRyZWZyZXNoaW5nID0gdHJ1ZVxyXG5cdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKVxyXG5cclxuXHJcblxyXG5cclxubm90aWZpY2F0aW9ucyA9IFtdXHJcbndpbmRvdy5ub3RpZnkgb3I9IChwcm9wcyktPlxyXG5cdG5vdGlmaWNhdGlvbnMucHVzaCBwcm9wc1xyXG5cclxuXHJcbmNsb25lID0gKG9iaikgLT5cclxuXHRyZXR1cm4gb2JqICBpZiBvYmogaXMgbnVsbCBvciB0eXBlb2YgKG9iaikgaXNudCBcIm9iamVjdFwiXHJcblx0dGVtcCA9IG5ldyBvYmouY29uc3RydWN0b3IoKVxyXG5cdGZvciBrZXkgb2Ygb2JqXHJcblx0XHR0ZW1wW2tleV0gPSBjbG9uZShvYmpba2V5XSlcclxuXHR0ZW1wXHJcblxyXG5zaG93Tm90aWZ5ID0gKG4sIGkpIC0+XHJcblx0Y29uc29sZS5sb2coJ1AnLCBuLCBpKTtcclxuXHRzZXRUaW1lb3V0ICgtPiBcclxuXHRcdGNvbnNvbGUubG9nKCdTJywgbiwgaSk7XHJcblx0XHQkLm5vdGlmeShuLCB7XHJcblxyXG5cdFx0XHRwbGFjZW1lbnQ6IHtcclxuXHJcblx0XHRcdFx0ZnJvbTogJ2JvdHRvbScsXHJcblx0XHRcdH0sXHJcblx0XHRcdG1vdXNlX292ZXI6ICdwYXVzZScsXHJcblxyXG5cdFx0XHR9KSksIGkgKiAxMDAwXHJcblx0XHJcblxyXG5cclxuXHJcbndpbmRvdy5ub3RpZnlTaG93IG9yPSAtPlxyXG5cdGlmIHdpbmRvdy5hY3RpdmVcclxuXHJcblx0XHRmb3Igbm90aWZpY2F0aW9uLCBpbmRleCBpbiBub3RpZmljYXRpb25zXHJcblx0XHRcdHNob3dOb3RpZnkgJC5leHRlbmQoe30sIG5vdGlmaWNhdGlvbiksIGluZGV4XHJcblx0XHRub3RpZmljYXRpb25zID0gW11cclxuXHJcblxyXG5cclxuJCh3aW5kb3cpLmZvY3VzIC0+IHdpbmRvdy5ub3RpZnlTaG93KClcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5NYXRoLmNsYW1wIG9yPSAodmFsdWUsIG1pbiwgbWF4KSAtPlxyXG5cdE1hdGgubWF4KE1hdGgubWluKHZhbHVlLCBtYXgpLCBtaW4pXHJcblxyXG5cclxuTWF0aC5sZXJwIG9yPSAoaSwgYSwgYikgLT5cclxuXHQoYSAqIGkpICsgKGIgKiAoMSAtIGkpKVxyXG5cclxuXHJcblxyXG5NYXRoLmhleFRvUmdiIG9yPSAoaGV4KSAtPiBcclxuICAgIHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByOiBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcclxuICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcclxuICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KVxyXG5cclxuICAgIH0gaWYgcmVzdWx0O1xyXG4gICAgbnVsbDtcclxuXHJcbk1hdGgucmdiVG9IZXggb3I9IChyLCBnLCBiKSAtPlxyXG4gICAgcmV0dXJuIFwiI1wiICsgKCgxIDw8IDI0KSArIChyIDw8IDE2KSArIChnIDw8IDgpICsgYikudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG5cclxuXHJcbk1hdGgubGVycENvbG9ycyBvcj0gKGksIGEsIGIpIC0+XHJcblxyXG5cdGNhID0gTWF0aC5oZXhUb1JnYiBhXHJcblx0Y2IgPSBNYXRoLmhleFRvUmdiIGJcclxuXHJcblx0Y2MgPSB7XHJcblx0XHRyOiBNYXRoLnJvdW5kKE1hdGgubGVycChpLCBjYS5yLCBjYi5yKSksXHJcblx0XHRnOiBNYXRoLnJvdW5kKE1hdGgubGVycChpLCBjYS5nLCBjYi5nKSksXHJcblx0XHRiOiBNYXRoLnJvdW5kKE1hdGgubGVycChpLCBjYS5iLCBjYi5iKSksXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gTWF0aC5yZ2JUb0hleChjYy5yLCBjYy5nLCBjYy5iKVxyXG5cclxuXHJcblxyXG5cclxuXHJcbnVwZGF0ZVByb2dyZXNzID0gLT5cclxuXHRiYXIgPSAkKHRoaXMpLmNoaWxkcmVuKCcucHJvZ3Jlc3MtYmFyJylcclxuXHRsYWJlbCA9ICQodGhpcykuY2hpbGRyZW4oJy5wcm9ncmVzcy1sYWJlbCcpXHJcblxyXG5cdG1pbiA9ICQoYmFyKS5kYXRhKCdtaW4nKVxyXG5cdG1heCA9ICQoYmFyKS5kYXRhKCdtYXgnKVxyXG5cdGNhID0gJChiYXIpLmRhdGEoJ2NhJylcclxuXHRjYiA9ICQoYmFyKS5kYXRhKCdjYicpXHJcblx0bm93ID0gTWF0aC5jbGFtcCgkKGJhcikuZGF0YSgnbm93JyksIG1pbiwgbWF4KVxyXG5cdHJldmVyc2VkID0gQm9vbGVhbigkKGJhcikuZGF0YSgncmV2ZXJzZWQnKSA/IGZhbHNlKVxyXG5cclxuXHRwZXJjZW50ID0gKG5vdyAtIG1pbikgLyAobWF4IC0gbWluKSAqIDEwMFxyXG5cdHBlcmNlbnQgPSAxMDAgLSBwZXJjZW50IGlmIHJldmVyc2VkXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHQkKGJhcikuY3NzKCd3aWR0aCcsIHBlcmNlbnQgKyAnJScpXHJcblx0JChiYXIpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIE1hdGgubGVycENvbG9ycyhwZXJjZW50IC8gMTAwLCBjYSwgY2IpKSBpZiBjYT8gYW5kIGNiP1xyXG5cclxuXHJcblxyXG5cdCQobGFiZWwpLnRleHQobm93ICsgJyAvICcgKyBtYXgpXHJcblxyXG4kIC0+IFxyXG5cdCQoJy5wcm9ncmVzcycpLmVhY2ggLT5cclxuXHRcdHRoaXMudXBkYXRlIG9yPSB1cGRhdGVQcm9ncmVzc1xyXG5cclxuXHJcblxyXG5yZWxNb3VzZUNvb3JkcyA9IGBmdW5jdGlvbiAoZXZlbnQpe1xyXG4gICAgdmFyIHRvdGFsT2Zmc2V0WCA9IDA7XHJcbiAgICB2YXIgdG90YWxPZmZzZXRZID0gMDtcclxuICAgIHZhciBjYW52YXNYID0gMDtcclxuICAgIHZhciBjYW52YXNZID0gMDtcclxuICAgIHZhciBjdXJyZW50RWxlbWVudCA9IHRoaXM7XHJcblxyXG4gICAgZG97XHJcbiAgICAgICAgdG90YWxPZmZzZXRYICs9IGN1cnJlbnRFbGVtZW50Lm9mZnNldExlZnQgLSBjdXJyZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgIHRvdGFsT2Zmc2V0WSArPSBjdXJyZW50RWxlbWVudC5vZmZzZXRUb3AgLSBjdXJyZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICB9XHJcbiAgICB3aGlsZShjdXJyZW50RWxlbWVudCA9IGN1cnJlbnRFbGVtZW50Lm9mZnNldFBhcmVudClcclxuXHJcbiAgICBjYW52YXNYID0gZXZlbnQucGFnZVggLSB0b3RhbE9mZnNldFg7XHJcbiAgICBjYW52YXNZID0gZXZlbnQucGFnZVkgLSB0b3RhbE9mZnNldFk7XHJcblxyXG4gICAgcmV0dXJuIHt4OmNhbnZhc1gsIHk6Y2FudmFzWX1cclxufWBcclxuXHJcbkhUTUxDYW52YXNFbGVtZW50LnByb3RvdHlwZS5yZWxNb3VzZUNvb3JkcyA9IHJlbE1vdXNlQ29vcmRzO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbigtPlxyXG5cclxuXHRvbGRTaG93ID0gJC5mbi5zaG93XHJcblxyXG5cdCMjI1xyXG5cclxuXHJcblx0JC5mbi5zaG93ID0gKHNwZWVkLCBvbGRDYWxsYmFjaykgLT5cclxuXHJcblx0XHRjb25zb2xlLmxvZygnc2hvdycsIHRoaXMpXHJcblxyXG5cdFx0bmV3Q2FsbGJhY2sgPSAtPlxyXG5cclxuXHRcdFx0b2xkQ2FsbGJhY2suYXBwbHkodGhpcykgaWYgJC5pc0Z1bmN0aW9uKG9sZENhbGxiYWNrKVxyXG5cdFx0XHQkKHRoaXMpLnRyaWdnZXIoJ2FmdGVyU2hvdycpXHJcblxyXG5cdFx0JCh0aGlzKS50cmlnZ2VyKCdiZWZvcmVTaG93JylcclxuXHJcblx0XHRkZWVwID0gJCh0aGlzKS5maW5kKCdbZGF0YS1kZWVwc2hvd10nKVxyXG5cclxuXHRcdGlmIGRlZXAubGVuZ3RoXHJcblx0XHRcdGRlZXAuc2hvdygpXHJcblxyXG5cdFx0b2xkU2hvdy5hcHBseSh0aGlzLCBbc3BlZWQsIG5ld0NhbGxiYWNrXSlcclxuXHQjIyNcclxuKSgpXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5lc2NhcGUgb3I9IC0+XHJcblx0dGhpcy5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8XFxbXFxdXFwvXFxcXF0pL2csIFwiXFxcXCQxXCIpXHJcblxyXG5cclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCBvcj0gKHNlYXJjaCwgcmVwbGFjZSkgLT5cclxuXHR0aGlzLnJlcGxhY2UobmV3IFJlZ0V4cChzZWFyY2guZXNjYXBlKCksICdnaScpLCByZXBsYWNlKVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9