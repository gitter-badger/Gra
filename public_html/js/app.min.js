(function(){this.app=angular.module("game",[]),this.app.controller("GameController",["$scope",function(t){return t.round=function(t,e){var n,i;return i=null!=e?e:0,n=Math.pow(10,i),Math.round(t*n)/n}}]),this.app.controller("PlayerController",["$scope",function(t){var e,n;return e=document.title,(n=function(t){return function(){var i,a;return t.isBusy&&(a=Math.round((new Date).getTime()/1e3),i=Math.max(t.jobEnd-a,0),document.title=i>0?window.timeFormat(i)+" - "+e:e),setTimeout(n,1e3)}}(this))()}])}).call(this),function(){var t;t=function(){return $(".avatar").removeClass("active"),$("#avatar").val($(this).data("avatar")),$(this).addClass("active")},$(function(){return $(".avatar").click(t).first().trigger("click")})}.call(this),function(){var t,e,n;n={fontSize:30,barFontSize:20,nameFontSize:30,margin:5,interval:1e3/60},e=function(){function t(t,e){var n;n=new Image,n.src=e.avatar,n.onload=function(t){return function(){return t.avatar=n}}(this),this.team=t,this.name=e.name,this.id=e.id,this.level=e.level,this.health=e.health,this.maxHealth=e.maxHealth}return t.prototype.draw=function(t,e){var i,a;return"red"===this.team?(t.strokeStyle="rgba(217, 83, 79, 1)",t.fillStyle="rgba(217, 83, 79, 0.4)"):(t.strokeStyle="rgba(51, 122, 183, 1)",t.fillStyle="rgba(51, 122, 183, 0.4)"),t.fillRect(0,0,e,e),t.strokeRect(0,0,e,e),null!=this.avatar&&t.drawImage(this.avatar,n.margin,n.margin,e-2*n.margin,e-2*n.margin),a=this.name+" ("+this.level+")",t.font=n.nameFontSize+"px Roboto",t.lineWidth=1,t.fillStyle="#FFFFFF",t.strokeStyle="#000000",i=t.measureText(a),t.fillText(a,(e-i.width)/2,n.nameFontSize),t.strokeText(a,(e-i.width)/2,n.nameFontSize),t.font=n.barFontSize+"px Roboto",t.strokeStyle="rgba(0, 0, 0, 0.7)",t.fillStyle="rgba(0, 0, 0, 0.4)",t.fillRect(n.margin,e-n.barFontSize-n.margin,e-2*n.margin,n.barFontSize),t.strokeRect(n.margin,e-n.barFontSize-n.margin,e-2*n.margin,n.barFontSize),t.fillStyle="rgba(217, 83, 79, 1)",t.fillRect(n.margin,e-n.barFontSize-n.margin,(e-2*n.margin)*(this.health/this.maxHealth),n.barFontSize),a=Math.round(this.health)+" / "+this.maxHealth,i=t.measureText(a),t.fillStyle="#000000",t.fillText(a,(e-i.width)/2,e-n.barFontSize/2)},t}(),t=function(){function t(t){this.canvas=$(t).children("canvas")[0],this.context=this.canvas.getContext("2d"),this.battleLog=$.parseJSON($(t).children(".battle-log").first().text())}return t.prototype.speed={view:3,info:3,next:3},t.prototype.load=function(){var t,i,a,r,o,s,l,h;for(this.index=0,this.characters=[],this.state="view",this.offset=0,this.pause=!1,$(this.canvas).click(function(t){return function(e){return t.click(e)}}(this)),$(document).keydown(function(t){return function(e){return t.key(e)}}(this)),l=this.battleLog.teams.red,a=0,o=l.length;o>a;a++)i=l[a],t=new e("red",i),this.characters[t.id]=t;for(h=this.battleLog.teams.blue,r=0,s=h.length;s>r;r++)i=h[r],t=new e("blue",i),this.characters[t.id]=t;return this.context.font=n.fontSize+"px Roboto",this.action=this.battleLog.log[this.index],this.attacker=this.characters[this.action.attacker],this.defender=this.characters[this.action.defender],!0},t.prototype.drawCharacters=function(t,e){var n,i;return i=.6*this.canvas.height,n=this.canvas.width/2,this.context.save(),this.context.translate((n-i)/2,(this.canvas.height-i)/2),t.draw(this.context,i),this.context.restore(),this.context.save(),this.context.translate((n-i)/2+n,(this.canvas.height-i)/2),e.draw(this.context,i),this.context.restore()},t.prototype.drawInfo=function(t){var e,i,a,r,o,s,l,h,c,u,d,p,f;return a=this.canvas.width/2,i=this.canvas.height/2,e=.6*this.canvas.height,l=50,c=2*l,u=a+(e+l)/2,d=i,h=.7*e/c,o=1.2,s=13,this.context.font=n.fontSize+"px Roboto",r=this.context.measureText(t),p=u-r.width/2,f=i,this.context.save(),this.context.lineWidth=2,this.context.translate(u,d),this.context.scale(h,o),this.context.fillStyle="#FFFFFF",this.context.strokeStyle="#000000",this.drawStar(s,.6*l,l),this.context.restore(),this.context.save(),this.context.translate(p,f),this.context.fillStyle="#000000",this.context.fillText(t,0,0),this.context.restore()},t.prototype.drawStar=function(t,e,n){var i,a,r,o,s,l,h;for(o=Math.PI/2*3,s=Math.PI/t,this.context.beginPath(),l=Math.cos(o)*n,h=Math.sin(o)*n,this.context.moveTo(l,h),o+=s,i=a=1,r=t;r>=1?r>=a:a>=r;i=r>=1?++a:--a)l=Math.cos(o)*e,h=Math.sin(o)*e,this.context.lineTo(l,h),o+=s,l=Math.cos(o)*n,h=Math.sin(o)*n,this.context.lineTo(l,h),o+=s;return this.context.lineTo(0,-n),this.context.fill(),this.context.stroke(),this.context.closePath()},t.prototype.getEndText=function(){return this.battleLog.win?i18n.battle.win:i18n.battle.lose},t.prototype.draw=function(t){var e,n,i,a,r,o,s,l,h,c,u,d,p,f,m,g,v,$,w,x,y;for(this.context.fillStyle="#FFFFFF",this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.offset+=this.speed[this.state]*t,n=!0,"view"===this.state&&n&&(e=this.battleLog.log[this.index],a=this.characters[e.attacker],r=this.characters[e.defender],"hit"===e.type&&(r.health=e.health),this.drawCharacters(a,r),this.offset>1&&!this.pause&&(this.offset=0,r.startHealth=r.health,r.endHealth="hit"===e.type?Math.max(r.health-e.damage,0):r.health,this.state="info"),n=!1),"info"===this.state&&n&&(e=this.battleLog.log[this.index],a=this.characters[e.attacker],r=this.characters[e.defender],this.drawCharacters(a,r),this.offset<=1?(this.context.globalAlpha=this.offset,r.health=r.startHealth):this.offset<=2?(this.context.globalAlpha=1,s=Math.clamp(this.offset-1,0,1),r.health=Math.lerp(s,r.endHealth,r.startHealth)):(r.health=r.endHealth,this.context.globalAlpha=Math.max(3-this.offset,0)),this.offset>4&&(this.offset=0,this.state="next"),"hit"===e.type?(x=e.damage,e.crit&&(x+="!")):x=i18n.battle.dodge,this.drawInfo(x),this.context.globalAlpha=1,n=!1),"next"===this.state&&n&&(g=this.battleLog.log[this.index],d=this.battleLog.log[this.index+1],v=this.characters[g.attacker],$=this.characters[g.defender],m=this.canvas.height/2*this.offset,this.context.save(),this.context.translate(0,-m),this.drawCharacters(v,$),this.context.restore(),this.context.save(),this.context.translate(0,this.canvas.height-m),null!=d?(p=this.characters[d.attacker],f=this.characters[d.defender],"hit"===d.type&&(f.health=d.health),this.drawCharacters(p,f)):(x=this.getEndText(),this.context.fillStyle="#000000",u=this.context.measureText(x),this.context.fillText(x,(this.canvas.width-u.width)/2,(this.canvas.height-15)/2)),this.context.restore(),this.offset>2&&(this.index++,this.offset=0,this.state=null!=d?"view":"end"),n=!1),"end"===this.state&&n&&(x=this.getEndText(),this.offset=0,this.context.fillStyle="#000000",u=this.context.measureText(x),this.context.fillText(x,(this.canvas.width-u.width)/2,(this.canvas.height-15)/2),n=!1),y=this.canvas.width-4,o=this.canvas.height-2,this.context.save(),this.context.strokeStyle="rgba(0, 0, 0, 0.7)",this.context.fillStyle="rgba(0, 0, 0, 0.4)",this.context.fillRect(2,o-20,y,20),this.context.strokeRect(2,o-20,y,20),this.context.fillStyle="#5BC0DE",this.context.fillRect(2,o-20,y*Math.min(this.index/(this.battleLog.log.length-1),1),20),this.context.lineWidth=5,w=this.battleLog.marks,l=0,h=w.length;h>l;l++)c=w[l],"fainted"===c.type&&(this.context.strokeStyle="#D9534F"),i=c.at/(this.battleLog.log.length-1)*y,this.context.beginPath(),this.context.moveTo(i-this.context.lineWidth/2+2,o-20),this.context.lineTo(i-this.context.lineWidth/2+2,o),this.context.stroke();return this.context.restore()},t.prototype.click=function(t){var e,n,i,a,r,o,s;return n=this.canvas.relMouseCoords(t),o=n.x,s=n.y,i=2,a=i+this.canvas.width-4,e=this.canvas.height-2,r=e-20,o>=i&&a>=o&&s>=r&&e>=s?(this.index=Math.round((o-i)/(a-i)*(this.battleLog.log.length-1)),this.state="view",this.offset=0):void 0},t.prototype.key=function(t){return 32===t.which&&(this.pause=!this.pause),37===t.which&&(this.index=Math.max(this.index-1,0),this.offset=1,this.state="view"),39===t.which?(this.index=Math.min(this.index+1,this.battleLog.log.length-1),this.offset=1,this.state="view"):void 0},t.prototype.requestFrame=function(t){var e;for(e=Math.max(t-this.lastTime,0),this.lastTime=t,this.accumulator+=e;this.accumulator>=n.interval;)this.accumulator-=n.interval,this.draw(n.interval/1e3);return window.requestAnimationFrame(function(t){return function(e){return t.requestFrame(e)}}(this))},t.prototype.start=function(){return this.load()?(this.lastTime=(new Date).getTime(),this.accumulator=0,this.requestFrame(this.lastTime)):void 0},t}(),$(function(){return $(".battle").bind("show",function(){var e;return e=new t(this),e.start()}).filter(":visible").trigger("show")})}.call(this),function(){this.Chat=function(){function t(t,e){var i;i=$.extend({},n,e),this.messageUrl=i.messageUrl,this.playerUrl=i.playerUrl,this.emoticons=new Emoticons,this.allowSend=i.allowSend,this.allowReceive=i.allowReceive,this.receiveExtra=i.receiveExtra,this.sendExtra=i.sendExtra,this.receiveMethod=i.receiveMethod,this.sendMethod=i.sendMethod,this.input=$(t).find(".input"),this.output=$(t).find(".output"),this.sendBtn=$(t).find(".send"),this.clearBtn=$(t).find(".clear"),this.emoticonsBtn=$(t).find(".emoticons"),this.emoticons.popover(this.emoticonsBtn,this.input),this.output[0].scrollTop=this.output[0].scrollHeight,$(this.input).keydown(function(t){return function(e){return t.onKey(e)}}(this)),$(this.sendBtn).click(function(t){return function(){return t.send(),t.clearInput()}}(this)),$(this.clearBtn).click(function(t){return function(){return t.clearOutput()}}(this)),this.interval=i.interval,this.join=i.join,this.cooldown=i.cooldown,this.sent=Math.round((new Date).getTime()/1e3)-this.cooldown,this.touch(),this.time=Math.max(this.time-i.history,0),this.receive()}var e,n;return n={messageUrl:null,playerUrl:null,emoticonUrl:null,interval:2,history:0,minLength:1,maxLength:512,cooldown:60,join:120,allowSend:!0,allowReceive:!0,sendExtra:{},receiveExtra:{},sendMethod:"POST",receiveMethod:"GET"},e={clear:"clearOutput"},t.prototype.getErrorText=function(t,e){var n,i,a,r;if(a=null!=(i=i18n.chat.errors[t])?i:i18n.chat.errors.unknown,null!=e&&"object"==typeof e)for(n in e)r=e[n],a=a.replace(":"+n,r);return a},t.prototype.error=function(t,e){var n;return n=$("<div></div>").addClass("alert").addClass("alert-danger").text(this.getErrorText(t,e)),$(this.output).append(n)},t.prototype.alert=function(t,e){return alert(this.getErrorText(t,e))},t.prototype.touch=function(){return this.time=Math.round((new Date).getTime()/1e3)},t.prototype.send=function(){var t,n,i,a,r,o,s,l;if(s=Math.round((new Date).getTime()/1e3),o=$(this.input).val(),r=o.match(/^\/(\w+)/i),null!=r&&null!=r[1]){t=r[1];for(a in e)if(l=e[a],t.toLowerCase()===a.toLowerCase()&&(i=this[l],"function"==typeof i))return void i.call(this);return void this.error("cmdNotFound",{name:t})}return this.allowSend?o.length<this.minLength?void this.alert("tooShort",{min:this.minLength}):o.length>this.maxLength?void alert("tooLong",{max:this.maxLength}):this.sent+this.cooldown>s?void this.alert("cooldown"):(n=$.extend({},this.sendExtra,{message:$(this.input).val()}),$.ajax({url:this.messageUrl,success:function(t){return function(e){return t.onSent(e)}}(this),data:n,dataType:"json",method:this.sendMethod}),this.sent=s,$(this.sendBtn).data("time",this.sent+this.cooldown)):this.error("cannotSend")},t.prototype.receive=function(){var t;return this.allowReceive?(t=$.extend({},this.receiveExtra,{time:this.time}),$.ajax({url:this.messageUrl,data:t,complete:function(t){return function(){return t.onComplete()}}(this),success:function(t){return function(e){return t.onReceived(e)}}(this),dataType:"json",method:this.receiveMethod}),this.touch()):this.error("cannotReceive")},t.prototype.clearOutput=function(){return $(this.output).empty()},t.prototype.clearInput=function(){return $(this.input).val("")},t.prototype.getMessage=function(t){return $("<p></p>").html(this.emoticons.insert(t.message)).append($("<small></small>").addClass("chat-time").data("time",t.time))},t.prototype.newMessage=function(t){var e,n,i,a,r,o,s,l;return l=$("<div></div>").addClass("row").addClass("chat-message").data("time",t.time).data("author",t.author),i=$("<div></div>").addClass("col-xs-1"),a=$("<div></div>").addClass("col-xs-11"),r=null!=this.playerUrl?$("<a></a>").attr("href",this.getPlayerUrl(t.author)).addClass("chat-author"):$("<div></div>").addClass("chat-author"),o=$("<div></div>").addClass("chat-content"),n=$("<img></img>").addClass("img-responsive").addClass("chat-avatar").attr("src",t.avatar),e=$("<p></p>").append($("<strong></strong>").addClass("chat-name").text(t.author)),s=this.getMessage(t),$(r).append(n).append(e),$(o).append(s),$(i).append(r),$(a).append(o),$(l).append(i).append(a),$(this.output).append(l)},t.prototype.modifyMessage=function(t,e){return $(t).find(".chat-content").append(this.getMessage(e))},t.prototype.addMessage=function(t){var e,n,i,a;return i=this.output[0].scrollHeight-this.output[0].scrollTop-this.output[0].clientHeight<=1,n=$(this.output).children().last(),0!==n.length&&$(n).is(".chat-message")?(a=$(n).data("time"),e=$(n).data("author"),e===t.author&&t.time-a<=this.join?this.modifyMessage(n,t):this.newMessage(t)):this.newMessage(t),i?this.output[0].scrollTop=this.output[0].scrollHeight-1:void 0},t.prototype.onSent=function(t){return"error"===t.status?this.error(t.reason,t.args):void 0},t.prototype.onReceived=function(t){var e,n,i,a;for(a=[],e=0,n=t.length;n>e;e++)i=t[e],a.push(this.addMessage(i));return a},t.prototype.onComplete=function(){return setTimeout(function(t){return function(){return t.receive()}}(this),1e3*this.interval)},t.prototype.onKey=function(t){return 13===t.which?(this.send(),this.clearInput()):void 0},t.prototype.getPlayerUrl=function(t){return this.playerUrl.replace("{name}",t)},t}(),$(function(){var t;return(t=function(){var e;return e=Math.round((new Date).getTime()/1e3),$(".chat .chat-time").each(function(){var t,n,i;return i=parseInt($(this).data("time")),t=e-i,n=60>t?i18n.chat.fewSecs:window.timeFormatShort(t),$(this).text(n+" "+i18n.chat.ago)}),$(".chat .send").each(function(){var t,n,i;return"true"!==$(this).data("disabled")?(i=parseInt($(this).data("time")),n=$(this).data("text"),t=i-e,t>0?$(this).text(window.timeFormat(t)).addClass("disabled"):$(this).text(n).removeClass("disabled")):void 0}),setTimeout(t,1e3)})()})}.call(this),function(){var t;t=function(){var e,n;return e=new Date,n=Math.round(e.getTime()/1e3),$(".current-time").text(e.toUTCString()),$(".time-left").each(function(){var t;return t=$(this).data("to"),$(this).text(window.timeFormat(Math.max(t-n,0)))}),setTimeout(t,1e3)},$(function(){return t()})}.call(this),function(){var t,e;t=[],e=function(t){var e,n;return e=null!=(n=$(t).data("dismissible"))?n:!0,$(t).bind("shown.bs.modal",function(t){return $(this).find(".battle").trigger("show")}),$(t).modal(e?{backdrop:!0,show:!0,keyboard:!0}:{backdrop:"static",show:!0,keyboard:!1})},$(function(){return t=$(".modal.autoshow"),$(t).each(function(n){return 0===n&&e(this),n<t.length-1?$(this).on("hidden.bs.modal",function(i){return e(t[n+1])}):void 0})})}.call(this),function(){var t;this.Emoticons=function(){function t(t,n){this.url=null!=t?t:e.url,this.set=$.extend({},e.emoticons,null!=n?n:{})}var e;return e={emoticons:{";)":"blink.png",":D":"grin.png",":(":"sad.png",":)":"smile.png","B)":"sunglasses.png","O.o":"surprised.png",":p":"tongue.png"},url:"/images/emoticons/{name}"},t.prototype.insert=function(t){var e,n,i,a,r;i=this.set;for(n in i)r=i[n],a=this.url.replace("{name}",r),e='<img class="emoticon" src="'+a+'" alt="'+n+'" title="'+n+'"/>',t=t.replaceAll(n,e);return t},t.prototype.popover=function(t,e){return $(t).popover({html:!0,trigger:"click",placement:"top",title:i18n.emoticons.title,content:function(t){return function(){return t.getPopoverContent(e)}}(this),template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content emoticon-container"></div></div>'})},t.prototype.getPopoverContent=function(t){var e,n,i,a,r,o;e=$("<div></div>"),a=this.set;for(i in a)o=a[i],r=this.url.replace("{name}",o),n=$("<img></img>").addClass("emoticon").attr("src",r).attr("alt",i).attr("title",i).click(function(){return $(t).val($(t).val()+$(this).attr("alt"))}),$(e).append(n);return e},t}(),t=0,$(function(){var t;return t=new Emoticons,$("[data-emoticons=true]").each(function(){var e;return e=$(this).text(),e=t.insert(e),$(this).html(e)})})}.call(this),function(){var t,e,n,i,a,r;r={xs:768,sm:992,md:1200},i=function(){var t;return t=$(window).width(),t<r.xs?["xs"]:t<r.sm?["sm","xs"]:t<r.md?["md","sm","xs"]:["lg","md","sm","xs"]},n=function(t){var e,n,i,a,r,o;for(o=[],n=0,a=t.length;a>n;n++)for(r=t[n],e=i=1;12>=i;e=++i)o.push("col-"+r+"-"+e);return o},a=function(t,e){var n,i,a,r,o,s;for(n=0,i=e.length;i>n;n++)if(a=e[n],o=new RegExp("col-"+a+"-(\\d+)"),s=null!=(r=$(t).attr("class").match(o))?r[1]:void 0,null!=s)return parseInt(s);return null},e=function(){var t,e,r;return e=i(),t=n(e),r="."+t.join(",."),$(".row.equalize").each(function(){var t,n,i,o,s,l,h,c;if(n=[],h=0,c=0,$(this).children(r).each(function(){var t;return t=a(this,e),c+=t,c>12&&(c-=12,h++),null==n[h]&&(n[h]=0),n[h]=Math.max(n[h],$(this).height())}),h=0,c=0,t=null,$(this).children(r).each(function(){return c+=a(this,e),null==t&&(t=this),c>12&&(c-=12,h++,t=this),$(this).height(n[h])}),i=Math.round((12-c)/2),null!=t&&i>0){for(l=e[0],o=s=1;12>=s;o=++s)$(t).removeClass("col-"+l+"-offset-"+o);return $(t).addClass("col-"+l+"-offset-"+i)}})},t=function(){return $("img").on("load",e)},$(function(){})}.call(this),function(){var t,e,n,i,a,r,o;o=1,t=function(t){return 17===t.which&&(o=10),16===t.which?o=100:void 0},e=function(t){return 17===t.which||16===t.which?o=1:void 0},n=function(t){var e,n,i,a,r,s,l,h,c;return console.log("mouseWheel"),i=parseInt(null!=(a=$(this).attr("min"))?a:0),n=parseInt(null!=(r=$(this).attr("max"))?r:100),h=parseInt(null!=(s=$(this).attr("step"))?s:1),e=t.deltaY*h*o,c=parseInt(null!=(l=$(this).val())?l:0),c=Math.clamp(c+e,i,n),$(this).val(c).trigger("change"),t.preventDefault()},r=function(t){var e,n,i,a,r,o,s;return console.log("rangeChanged"),i=$(this).parent().children(".range-value"),n=null!=(a=$(i).data("before"))?a:"",e=null!=(r=$(i).data("after"))?r:"",s=null!=(o=$(this).val())?o:0,$(i).text(n+s+e)},i=function(t){var e,n,i,a,r,s,l,h,c;return console.log("numberDecrease"),e=$(this).parent().parent().children("input"),i=parseInt(null!=(a=$(e).attr("min"))?a:0),n=parseInt(null!=(r=$(e).attr("max"))?r:100),h=parseInt(null!=(s=$(e).attr("step"))?s:1),c=parseInt(null!=(l=$(e).val())?l:0),c=Math.clamp(c-o*h,i,n),$(e).val(c).trigger("change")},a=function(t){var e,n,i,a,r,s,l,h,c;return console.log("numberIncrease"),e=$(this).parent().parent().children("input"),i=parseInt(null!=(a=$(e).attr("min"))?a:0),n=parseInt(null!=(r=$(e).attr("max"))?r:100),h=parseInt(null!=(s=$(e).attr("step"))?s:1),c=parseInt(null!=(l=$(e).val())?l:0),c=Math.clamp(c+o*h,i,n),$(e).val(c).trigger("change")},$(function(){return $(window).keyup(e).keydown(t),$("input[type=number], input[type=range]").bind("mousewheel",n),$("input[type=range]").change(r).mousemove(r),$(".number-minus").children("button").click(i),$(".number-plus").children("button").click(a)})}.call(this),function(){$(function(){var t,e,n,i,a;return console.log($(document).size()),t=!1,a=function(t){return{width:$(t).width(),height:$(t).height()}},n=function(t){return $(t).offset()},i=function(){var i,r;return t?void 0:(t=!0,i=$("<div></div>").attr("id","mainOverlay").addClass("overlay").css(a(document)).click(e).hide(),r=$("<div></div>").attr("id","navOverlay").addClass("overlay").css("position","fixed").css("z-index",1e5).css(a("#mainNav")).click(e).hide(),console.log($("#mainContent [data-help]")),console.log($("#mainNav [data-help]")),$("#mainContent [data-help]").each(function(){var t,e,r;return t=$(this).clone(),e=n(this),r=a(this),$(t).addClass("helper").css("position","absolute").tooltip({placement:"auto top",title:$(this).data("help")}).css(e).css(r),$(t).find("[title]").removeAttr("title"),$(i).append(t)}),$("#mainNav [data-help]").each(function(){var t,e,i;return t=$(this).clone(),e=n(this),i=a(this),$(t).addClass("helper").css("position","absolute").tooltip({placement:"auto top",title:$(this).data("help")}).css(e).css(i),$(t).find("[title]").removeAttr("title"),$(r).append(t)}),$("body").append(i).append(r),$(i).fadeIn(),$(r).fadeIn())},e=function(){return t?(t=!1,$(".overlay").fadeOut({complete:function(){return $(".overlay").remove()}})):void 0},$("#helpBtn").click(function(){return i()}),$(document).keydown(function(t){return 27===t.which?e():void 0})})}.call(this),function(){var t,e,n,i,a;if(e=0,a=["webkit","moz"],!window.requestAnimationFrame)for(t=0,n=a.length;n>t;t++)i=a[t],window.requestAnimationFrame=window[i+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i+"CancelAnimationFrame"]||window[i+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t,n){var i,a,r;return i=(new Date).getTime(),r=Math.max(0,16-(i-e)),a=window.setTimeout(function(){return t(i+r)},r)}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){return clearTimeout(t)})}.call(this),function(){$(function(){return $(".image-preview").each(function(){var t,e;return e=this,t=$(this).data("for"),$("#"+t).change(function(t){var n;return n=URL.createObjectURL(t.target.files[0]),null!=n?$(e).attr("src",n):void 0}).trigger("change")})})}.call(this),function(){var t,e,n;n=function(t){return window.location.href="/lang/"+t},t=function(){return n($(this).data("lang"))},e=function(){return n($(this).val())},$(function(){return $(".language-select").change(e),$(".language-button").click(t)})}.call(this),function(){$(function(){return $(".location-pin").each(function(){return $(this).popover({title:$(this).data("name"),content:$(this).data("desc"),placement:"auto",trigger:"hover",delay:{show:750,hide:0}})})})}.call(this),function(){var t;t=function(){var t;return t=$("#mainNav").height()+10,$("body").css("padding-top",t+"px")},$(function(){return $(window).resize(function(){return t()}),t()})}.call(this),function(){var t,e;t=function(t){return"/images/plants/plant-"+t+".png"},e=function(n){var i,a,r,o,s;return r=Math.round((new Date).getTime()/1e3),o=parseInt($(n).data("start")),i=parseInt($(n).data("end")),s=parseInt($(n).data("watering")),r=Math.min(r,s),a=Math.floor(17*Math.clamp((r-o)/(i-o),0,1)),$(n).attr("src",t(a)),17>a?setTimeout(function(){return e(n)},1e3):void 0},$(function(){return $(".plantation-plant").each(function(){return e(this)}),$("#seedsModal").on("show.bs.modal",function(t){var e;return e=$(t.relatedTarget).data("slot"),$(this).find("input[name=slot]").val(e)})})}.call(this),function(){var t,e,n,i,a,r,o,s,l;l="/api/character",r=function(t,e,n,i,a,r){var o,s,l,h;return o=$("."+t+"-bar"),h=$("."+t+"-timer"),o.length>0&&(l=$(o).children(".progress-bar"),$(l).data("max",i).data("min",n).data("now",e),"function"==typeof(s=o[0]).update&&s.update()),h.length>0?(l=$(h).children(".progress-bar"),null!=r?$(l).data("max",r).data("min",a):$(l).data("max",1).data("min",0)):void 0},s=function(t,e,n,i){return $("."+t+"-now").text(e),$("."+t+"-min").text(n),$("."+t+"-max").text(i)},o=function(t,e){return $("."+t).text(e)},t=function(t){var e,n,i;if(r("health",t.health,0,t.maxHealth,t.healthUpdate,t.nextHealthUpdate),s("health",t.health,0,t.maxHealth),r("energy",t.energy,0,t.maxEnergy,t.energyUpdate,t.nextEnergyUpdate),s("energy",t.energy,0,t.maxEnergy),r("wanted",t.wanted,0,6,t.wantedUpdate,t.nextWantedUpdate),s("wanted",t.wanted,0,6),r("experience",t.experience,0,t.maxExperience,null,null),s("experience",t.experience,0,t.maxExperience),r("plantator",t.plantatorExperience,0,t.plantatorMaxExperience,null,null),s("plantator",t.plantatorExperience,0,t.plantatorMaxExperience),r("smuggler",t.smugglerExperience,0,t.smugglerMaxExperience,null,null),s("smuggler",t.smugglerExperience,0,t.smugglerMaxExperience),r("dealer",t.dealerExperience,0,t.dealerMaxExperience,null,null),s("dealer",t.dealerExperience,0,t.dealerMaxExperience),n=angular.element(document.body).scope(),null!=n&&null!=n.player){for(e in t)i=t[e],n.player[e]=i;return n.$apply()}},n=function(n){return t(n),n.reload&&window.location.refresh(),setTimeout(e,1e3*n.nextUpdate)},a=function(t){var e,n,i;for(e=0,n=t.length;n>e;e++)i=t[e],window.notify({title:"<strong>"+i.title+"</strong>",message:"",url:"/reports/"+i.id});return window.active?window.notifyShow():void 0},i=function(t){var e,n,i;for(e=0,n=t.length;n>e;e++)i=t[e],window.notify({title:"<strong>"+i.author+"</strong>: "+i.title+"<br/>",message:i.content,url:"/messages/inbox/"+i.id});return window.active?window.notifyShow():void 0},e=function(){return $.ajax({url:l,dataType:"json",method:"GET",success:n}),$.ajax({url:l+"/notifications",dataType:"json",method:"GET",success:a}),$.ajax({url:l+"/messages",dataType:"json",method:"GET",success:i})},$(window).focus(function(){return e()}),$(function(){return setTimeout(e,2500)})}.call(this),function(){var t;t=function(){return $(".square").each(function(){return"width"===$(this).data("square")?$(this).width($(this).height()):$(this).height($(this).width())})},$(function(){return $(window).resize(function(){return t()}),t()})}.call(this),function(){var t,e,n,i;t=function(){var t,e,n,i,a,r,o,s;return t=parseInt(null!=(a=$("#currentStatisticsPoints").text())?a:0),n=parseInt($("#statisticsPoints").text()),i=parseInt(null!=(r=$(this).data("old"))?r:0),s=parseInt(null!=(o=$(this).val())?o:0),e=s-i,e>n&&(e=n),s=i+e,n-=e,isNaN(e)?void 0:($(this).val(s).data("old",s),$("#statisticsPoints").text(n),$(".statistic").each(function(){var t;return s=parseInt(null!=(t=$(this).val())?t:0),$(this).attr("max",n+s)}))},e=function(t,e){return Math.round(Math.random()*(e-t)+t)},n=function(t){var n;return n=e(0,t.length-1),t[n]},i=function(){var t,e,i,a,r,o,s;for(r=$(".statistic.rollable"),$(r).val(0).trigger("change"),i=parseInt($("#statisticsPoints").text()),t=e=1,a=i;a>=1?a>=e:e>=a;t=a>=1?++e:--e)o=n(r),s=parseInt($(o).val()),$(o).val(s+1);return $(r).trigger("change")},$(function(){return $(".statistic").bind("keyup input change",t).trigger("change"),$(".statRoller").click(i),i()})}.call(this),function(){var t,e,n,i;e=!1,t=function(){return e||window.location.refresh(),e=!0},n=function(e){var i,a,r,o,s,l,h,c,u,d,p,f,m,g;return i=$(e).children(".progress-bar").last(),o=$(e).children(".progress-label"),g=Math.round((new Date).getTime()/1e3),l=$(i).data("min"),s=$(i).data("max"),m=$(i).data("stop"),a=$(i).data("ca"),r=$(i).data("cb"),f=Boolean(null!=(u=$(i).data("reversed"))?u:!1),p=Boolean(null!=(d=$(i).data("reload"))?d:!0),null!=m&&(g=Math.min(g,m)),h=Math.clamp(g,l,s),c=(h-l)/(s-l),f&&(c=1-c),$(i).css("width",100*c+"%"),null!=a&&null!=r&&$(i).css("background-color",Math.lerpColors(c,a,r)),$(o).text("function"==typeof window.timeFormat?window.timeFormat(s-h):void 0),g>s&&p&&t(),setTimeout(function(){return n(e)},1e3)},i=function(t){var e,n,a,r,o;return o=Math.round((new Date).getTime()/1e3),n=$(t).data("min"),e=$(t).data("max"),a=Math.clamp(o,n,e),r=1-(a-n)/(e-n),$(t).css("width",100*r+"%"),setTimeout(function(){return i(t)},1e3)},$(function(){return $(".progress-time").each(function(){return n(this)}),$(".nav-timer > .nav-timer-bar").each(function(){return i(this)})})}.call(this),function(){$(function(){return $('[data-toggle="tooltip"]').each(function(){var t,e;return t={html:!0,placement:"auto left"},e=$(this).data("trigger"),null!=e&&(t.trigger=e),$(this).tooltip(t)})})}.call(this),function(){$(function(){var t,e,n,i,a;return a={},$(".tutorial-step").popover({trigger:"manual",placement:"bottom"}),i=function(e){return null!=e?$(e.elements).bind("click",t).addClass("tutorial-active").first().popover("show"):void 0},t=function(e){var n;return n=a[this.step.name].shift(),null!=n?($.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:this.step.name,stage:n.index},method:"POST"}),setTimeout(function(){return i(n)},500)):$.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:this.step.name,stage:this.step.index+1},method:"POST"}),$(this.step.elements).unbind("click",t).removeClass("tutorial-active").popover("hide")},n=function(t,n,i){var a,r,o,s,l,h,c,u,d,p;return i.stage<0?(d=$("<div></div>").addClass("modal fade"),l=$("<div></div>").addClass("modal-dialog"),s=$("<div></div>").addClass("modal-content"),u=$("<div></div>").addClass("modal-header"),a=$("<div></div>").addClass("modal-body"),h=$("<div></div>").addClass("modal-footer"),p=$("<h4></h4>").addClass("modal-title"),c=$("<div></div>").addClass("btn-group"),r=$("<div></div>").addClass("btn btn-success").attr("value","yes").text(i18n.yes),o=$("<div></div>").addClass("btn btn-danger").attr("value","no").text(i18n.no),$(r).click(function(){return $.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:n,active:1},method:"POST"}),$(d).modal("hide"),e(t,n,i)}),$(o).click(function(){return $.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:n,active:0},method:"POST"}),$(d).modal("hide")}),$(p).text(i.title),$(a).text(i.description),$(u).append(p),$(c).append(o).append(r),$(h).append(c),$(s).append(u).append(a).append(h),$(l).append(s),$(d).append(l),$("body").append(d),$(d).modal({backdrop:"static",show:!0,keyboard:!1})):e(t,n,i)},e=function(t,e,n){var r,o;return o=[],r=$(t).parents("[data-tutorial=true]").length+1,$(t).find(".tutorial-step").each(function(){var t,i;return i=null,t=$(this).data("tutorial-index"),t<n.stage||$(this).parents("[data-tutorial=true]").length!==r?void 0:(null!=o[t]?i=o[t]:(i={elements:[],name:e,index:t},o[t]=i),i.elements.push(this),this.step=i)}),o=o.filter(function(t){return null!=t?!0:!1}),a[e]=o,i(o.shift())},$("[data-tutorial=true").each(function(){var t;return t=$(this).data("tutorial-name"),$.ajax({url:"/api/character/tutorial",dataType:"json",data:{name:t},method:"GET",success:function(e){return function(i){return i.active?n(e,t,i):void 0}}(this)})})})}.call(this),function(){var t,e,n,i,a,r,o,s,l,h,c;window.format||(window.format={time:{day:"d",hour:"h",minute:"m",second:"s"}}),null==window.active&&(window.active=!0),$(window).focus(function(){return window.active=!0}),$(window).blur(function(){return window.active=!1}),$(window).resize(function(){return this.resizeTo&&clearTimeout(this.resizeTo),this.resizeTo=setTimeout(function(){return $(this).trigger("resized")},500)}),window.lpad||(window.lpad=function(t,e){var n,i,a,r;for(r="0",n=i=1,a=e;a>=1?a>=i:i>=a;n=a>=1?++i:--i)r+="0";return(r+t).slice(-1*e)}),h=function(t){return t.length>0?t+" ":t},l=function(t,e,n){return t=h(t),t+=t.length>0?window.lpad(e,2):e,t+n},window.timeFormat||(window.timeFormat=function(t){var e,n,i,a,r,o;return o="",n=new Date(1e3*t),e=n.getUTCDate()-1,i=n.getUTCHours(),a=n.getUTCMinutes(),r=n.getUTCSeconds(),e>0&&(o+=e+format.time.day),i>0&&(o=l(o,i,format.time.hour)),(i>0||a>0)&&(o=l(o,a,format.time.minute)),(i>0||a>0||r>0)&&(o=l(o,r,format.time.second)),o}),window.timeFormatShort||(window.timeFormatShort=function(t){var e,n,i,a,r,o;return o="",n=new Date(1e3*t),e=n.getUTCDate()-1,i=n.getUTCHours(),a=n.getUTCMinutes(),r=n.getUTCSeconds(),e>0?e+format.time.day:i>0?l(o,i,format.time.hour):a>0?l(o,a,format.time.minute):r>0?l(o,r,format.time.second):void 0}),r=!1,(t=window.location).refresh||(t.refresh=function(){return r?void 0:(r=!0,window.location.reload(!0))}),a=[],window.notify||(window.notify=function(t){return a.push(t)}),i=function(t){var e,n;if(null===t||"object"!=typeof t)return t;n=new t.constructor;for(e in t)n[e]=i(t[e]);return n},s=function(t,e){return console.log("P",t,e),setTimeout(function(){return console.log("S",t,e),$.notify(t,{placement:{from:"bottom"},mouse_over:"pause"})},1e3*e)},window.notifyShow||(window.notifyShow=function(){var t,e,n,i;if(window.active){for(t=e=0,n=a.length;n>e;t=++e)i=a[t],s($.extend({},i),t);return a=[]}}),$(window).focus(function(){return window.notifyShow()}),Math.clamp||(Math.clamp=function(t,e,n){return Math.max(Math.min(t,n),e);

}),Math.lerp||(Math.lerp=function(t,e,n){return e*t+n*(1-t)}),Math.hexToRgb||(Math.hexToRgb=function(t){var e;return e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t),e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}),Math.rgbToHex||(Math.rgbToHex=function(t,e,n){return"#"+((1<<24)+(t<<16)+(e<<8)+n).toString(16).slice(1)}),Math.lerpColors||(Math.lerpColors=function(t,e,n){var i,a,r;return i=Math.hexToRgb(e),a=Math.hexToRgb(n),r={r:Math.round(Math.lerp(t,i.r,a.r)),g:Math.round(Math.lerp(t,i.g,a.g)),b:Math.round(Math.lerp(t,i.b,a.b))},Math.rgbToHex(r.r,r.g,r.b)}),c=function(){var t,e,n,i,a,r,o,s,l,h;return t=$(this).children(".progress-bar"),i=$(this).children(".progress-label"),r=$(t).data("min"),a=$(t).data("max"),e=$(t).data("ca"),n=$(t).data("cb"),o=Math.clamp($(t).data("now"),r,a),h=Boolean(null!=(l=$(t).data("reversed"))?l:!1),s=(o-r)/(a-r)*100,h&&(s=100-s),$(t).css("width",s+"%"),null!=e&&null!=n&&$(t).css("background-color",Math.lerpColors(s/100,e,n)),$(i).text(o+" / "+a)},$(function(){return $(".progress").each(function(){return this.update||(this.update=c)})}),o=function(t){var e=0,n=0,i=0,a=0,r=this;do e+=r.offsetLeft-r.scrollLeft,n+=r.offsetTop-r.scrollTop;while(r=r.offsetParent);return i=t.pageX-e,a=t.pageY-n,{x:i,y:a}},HTMLCanvasElement.prototype.relMouseCoords=o,function(){var t;return t=$.fn.show}(),(e=String.prototype).escape||(e.escape=function(){return this.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")}),(n=String.prototype).replaceAll||(n.replaceAll=function(t,e){return this.replace(new RegExp(t.escape(),"gi"),e)})}.call(this);
//# sourceMappingURL=data:application/json;base64,