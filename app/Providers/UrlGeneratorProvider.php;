<?php

namespace HempEmpire\Providers;

use HempEmpire\Services\Redirector;
use HempEmpire\Services\UrlGenerator;
use Illuminate\Support\ServiceProvider;

class UrlGeneratorProvider extends ServiceProvider {
	/**
	 * Bootstrap the application services.
	 *
	 * @return void
	 */
	public function boot() {
		//
	}

	/**
	 * Register the application services.
	 *
	 * @return void
	 */
	public function register() {
		$this->registerUrlGenerator();
		//$this->registerRedirector();
	}

	/**
	 * Register the URL generator service.
	 *
	 * @return void
	 */
	protected function registerUrlGenerator() {
		$this->app['url'] = $this->app->share(function ($app) {
				$routes = $app['router']->getRoutes();

				// The URL generator needs the route collection that exists on the router.
				// Keep in mind this is an object, so we're passing by references here
				// and all the registered routes will be available to the generator.
				$app->instance('routes', $routes);

				$url = new UrlGenerator(
					$routes, $app->rebinding(
						'request', $this->requestRebinder()
					)
				);

				$url->setSessionResolver(function () {
						return $this->app['session'];
					});

				// If the route collection is "rebound", for example, when the routes stay
				// cached for the application, we will need to rebind the routes on the
				// URL generator instance so it has the latest version of the routes.
				$app->rebinding('routes', function ($app, $routes) {
						$app['url']->setRoutes($routes);
					});

				return $url;
			});
	}

	/**
	 * Get the URL generator request rebinder.
	 *
	 * @return \Closure
	 */
	protected function requestRebinder() {
		return function ($app, $request) {
			$app['url']->setRequest($request);
		};
	}

	/**
	 * Register the Redirector service.
	 *
	 * @return void
	 */
	protected function registerRedirector() {
		$this->app->bind('redirect', function ($app) {
				return new Redirector($app->make('url'));
			});
	}
}
