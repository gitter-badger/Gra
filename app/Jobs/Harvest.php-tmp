<?php

namespace HempEmpire\Jobs;

use DB;
use Event;
use HempEmpire\Events\Harvest as HarvestEvent;
use HempEmpire\Jobs\Job;
use HempEmpire\Player;

use HempEmpire\Stuff;
use HempEmpire\TemplateStuff;

use Illuminate\Contracts\Bus\SelfHandling;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;

use TransText;

class Harvest extends Job implements SelfHandling, ShouldQueue {
	use InteractsWithQueue, SerializesModels;

	private $player;
	private $species;
	private $quality;
	private $countMin;
	private $countMax;

	public function __construct(Player $player, $species, $quality, $countMin, $countMax) {
		$this->player   = $player;
		$this->species  = $species;
		$this->quality  = $quality;
		$this->countMin = $countMin;
		$this->countMax = $countMax;
	}

	public function handle() {
		foreach ($this->player->quests as $quest)
		$quest->init();

		echo __METHOD__ .PHP_EOL;
		$count    = $this->player->roll($this->countMin, $this->countMax);
		$template = TemplateStuff::where('name', '=', $this->species.'-stuff')->first();
		$stuff    = new Stuff;

		$stuff->quality = $this->quality;
		$stuff->template()->associate($template);

		$this->player->plantatorExperience += round($count*($this->quality/5));

		$success = DB::transaction(function () use ($stuff, $count) {
				if ($this->player->hasTalent('plantator-points')) {
					$this->player->givePremiumPoint();
				}

				if ($this->player->jobName == 'harvesting') {
					return $this->player->newReport('harvest')
					->param('name', new TransText('item.'.$stuff->getName().'.name'))
					->param('count', $count)->send() && $this->player->giveItem($stuff, $count) &&
					$this->player->save();
				} else {
					return false;
				}
			});

		if ($success) {
			Event::fire(new HarvestEvent($this->player, $this->species, $count));
		}

		foreach ($this->player->quests as $quest)
		$quest->finit();

		return $success;
	}
}